AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Delegate brain-melting date math and localization to general-purpose calendar web components
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: general-purpose-calendar-web-components

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2014/08/general-purpose-calendar-web-components.html 
DATE: 08/04/2014 08:00:00 AM
-----
BODY:
<p dir="ltr">Which of these month calendars looks correct to you?</p>
<p dir="ltr"><a class="asset-img-link" href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201a511ed85ac970c-pi" style="display: inline;"><img alt="Calendar (English UK)" border="0" class="asset  asset-image at-xid-6a00d83451fb6769e201a511ed85ac970c img-responsive" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201a511ed85ac970c-800wi" title="Calendar (English UK)" /></a>&#0160;</p>
<p dir="ltr"><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201a73df8bdf5970d-pi"><img alt="Calendar (English US)" border="0" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201a73df8bdf5970d-800wi" title="Calendar (English US)" /></a></p>
<p dir="ltr"><a class="asset-img-link" href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201a73df8be19970d-pi" style="display: inline;"><img alt="Calendar (English, starts on Saturday)" border="0" class="asset  asset-image at-xid-6a00d83451fb6769e201a73df8be19970d img-responsive" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201a73df8be19970d-800wi" title="Calendar (English, starts on Saturday)" /></a></p>
<p dir="ltr">One of the calendars will probably look right. The other two will just look wrong — like they’re mistakes, or maybe not even calendars. Setting aside the basics of which language the words appear in, the simple question of which day column should be first is a pretty key thing to get right in a calendar. Depending on where you live or grew up, you may prefer that the first column of a month calendar be Mondays, Sundays, or Saturdays. (It’s not completely clear to me, but it appears there may be a community of people — speakers of Dari, a dialect of Persian — who prefer that the first column be Fridays.) In some languages, you may want the order of days to go right-to-left as well, in which case you might want the first column to be the rightmost instead of the leftmost.</p>
<p dir="ltr">These are the kinds of detail that are nearly impossible for a small team to get right if they’re writing their own calendar from scratch, and yet the world is filled with proprietary date picker widgets and calendars. Even if we ignore the colossal waste of time represented by all those unnecessary reinventions of the calendar, nearly all of those calendar implementations will fail to localize basic details (such as the day shown as the first day of the week). That is, if your app is using a calendar your team wrote from scratch, there is a very good chance that a substantial number of users outside your country and language view believe your calendar is just wrong. And even if you picked up a calendar widget at some point, and it was pretty good to begin with, if you copied that code, you likely haven&#39;t picked up any of the bug fixes that were made in it since you made your copy.</p>
<p dir="ltr">This is yet another area where a broad web component ecosystem will fundamentally change things. As discussed on this blog many times before, the economics of user experience design and engineering will of course change. But it’s also the case that sharing solid user interface components will finally allow a broad swath of the software industry to finally get UI details right on tricky things like calendars.</p>
<h2 dir="ltr">Open calendar components</h2>
<p dir="ltr">With that goal in mind, I’ve contributed a set of calendar components to the open source Basic Web Components project. Rather than producing a monolithic monthly calendar component, these components follow the <a href="https://github.com/basic-web-components/components-dev/wiki/Ten-Principles-for-Great-General-Purpose-Web-Components" target="_self">guidelines for general-purpose components</a>. Among other things, they are factored into components that each try to do just a single thing well:&#0160;</p>
<ul>
<li>
<p dir="ltr"><a href="http://component.kitchen/components/basic-calendar-day" target="_self">basic-calendar-day</a>. This shows a single day in a week/month/year calendar. It has a date attribute indicating which day to show. By default, it just shows the number of that day in the month. That is, for August 1, 2014, it just shows the text “1”. That’s all it does.</p>
</li>
<li>
<p dir="ltr"><a href="http://component.kitchen/components/basic-calendar-week" target="_self">basic-calendar-week</a>. This represents a single week. It’s just a collection of 7 basic-calendar-day components whose date attributes are synced to always be one day apart. (The component takes special care to deal with things like daylight savings time changes.) Which day of the week is shown first can be changed to suit the user’s preferred location/culture (see localization, below). By default, the days are shown in a horizontal layout. This week is used in the month calendar component described below, but could also also be used in other situations, such as an infinitely-scrollable calendar.</p>
</li>
<li>
<p dir="ltr"><a href="http://component.kitchen/components/basic-calendar-month-days" target="_self">basic-calendar-month-days</a>. This shows the days of a single calendar month. This is constructed as set of 4 to 6 instances of basic-calendar-week. (The number varies based on the length of the month and the day of the week the month starts on.) This component does not include any headings. By default, weeks are shown in a vertical stack. This is done with default styling using a CSS display: table-row-group rule, so that headings for the day columns can easily be added and lined up correctly.</p>
</li>
<li>
<p dir="ltr"><a href="http://component.kitchen/components/basic-days-of-week" target="_self">basic-days-of-week</a>. This just shows the names for the days of the week in a given language (see localization, below). The standard CSS styling for this has display: table-row-group, so it can easily be matched up with a table-row or table-row-group like basic-calendar-month-days. This component (and some of the others here) doesn’t have the word “calendar” in its component name because there might be some situations in which its useful outside the context of a standard monthly calendar. It could serve, say, as a header for a table showing weekly specials in a restaurant, or a chore chart of kids, etc.</p>
</li>
<li>
<p dir="ltr"><a href="http://component.kitchen/components/basic-month-name" target="_self">basic-month-name</a>. This shows the name of the month in a given language (see localization, below).</p>
</li>
<li>
<p dir="ltr"><a href="http://component.kitchen/components/basic-month-and-year" target="_self">basic-month-and-year</a>. This shows the name of the month and the year for a given date. The order of the month name and year will match the direction of the text in a right-to-left language like Arabic or Hebrew.</p>
</li>
<li>
<p dir="ltr"><a href="http://component.kitchen/components/basic-calendar-month" target="_self">basic-calendar-month</a>. This component puts together the above elements in a typical layout for a month calendar. It stacks together headings for basic-month-and-year and basic-days-of-week on top of a table of days provided by basic-calendar-month-days. Setting the desired language/culture for this component updates all the headings as well as the day shown as the first day of the week.</p>
</li>
</ul>
<p>Note that basic-calendar-month just renders a calendar. It doesn’t handle date selection, although that could be added through creation of another component. The month calendar is inline (directly on the page), but could be incorporated into a dropdown for a typical dropdown date picker. Or you could combine twelve instances of basic-calendar-month together to create a year calendar, etc., etc.</p>
<p>Per the guidelines, these components include an absolutely minimal degree of styling required to get something useful. You would undoubtedly want to style these further to meet your own application’s brand. This should not be too difficult, as web components can be styled through CSS.</p>
<h2 dir="ltr">Localization</h2>
<p dir="ltr">To easily and accurately localize these calendar web components, they all make use of the excellent <a href="https://github.com/jquery/globalize" target="_self">Globalize</a> project sponsored by jQuery. Globalize supports about 350 different languages, locations, and cultures around the world. As it turns out, Globalize already defines everything these components need: which day of the week should come first, the names of the days, and the names of the months. So you can simply tell Globalize to load the settings for a particular language/culture, and then hand that pile of settings to the components, and they’ll set themselves up appropriately. Here’s basic-month-calendar in Japanese, French (in France), and Arabic (in Saudi Arabia):</p>
<p dir="ltr"><a class="asset-img-link" href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201a3fd3db373970b-pi" style="display: inline;"><img alt="Calendar (Japanese)" border="0" class="asset  asset-image at-xid-6a00d83451fb6769e201a3fd3db373970b img-responsive" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201a3fd3db373970b-800wi" title="Calendar (Japanese)" /></a></p>
<p dir="ltr"><a class="asset-img-link" href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201a73df8be84970d-pi" style="display: inline;"><img alt="Calendar (French)" border="0" class="asset  asset-image at-xid-6a00d83451fb6769e201a73df8be84970d img-responsive" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201a73df8be84970d-800wi" title="Calendar (French)" /></a></p>
<p dir="ltr"><a class="asset-img-link" href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201a3fd3db388970b-pi" style="display: inline;"><img alt="Calendar (Arabic, Saudi Arabia)" border="0" class="asset  asset-image at-xid-6a00d83451fb6769e201a3fd3db388970b img-responsive" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201a3fd3db388970b-800wi" title="Calendar (Arabic, Saudi Arabia)" /></a>&#0160;</p>
<p dir="ltr">Note that all text strings here (the month names, and the names for the days of the week) are coming from Globalize, not from the application or the calendar component. Globalize also supports different formats for the names of the days of the week, so you can choose between&#0160;full and abbreviated headings.</p>
<p dir="ltr"><em>[Aside: an open question for me is whether a calendar for a right-to-left language should have the order of days go from right-to-left as well. I can find some Arabic calendars, for example, that have the first day of the week go in the rightmost column —&#0160;but I can also find plenty of examples that have the first day of the week in the leftmost column. And all the examples of Hebrew calendars I can find have the first day of the week in the leftmost column. This just goes to show that localization will always surprise you and/or make your head hurt. The Globalize library doesn’t seem to include information on the preferred direction of time, so for now these components assume that left-to-right is generally acceptable.]</em></p>
<p dir="ltr">To simplify the localization of an app using these components, I’ve put together a simple <a href="http://component.kitchen/components/basic-culture-selector" target="_self">basic-culture-selector</a> component that can dynamically load all the necessary settings based on the user’s prefered language/culture. (This component can also be used behind-the-scenes as a language/culture settings loader.) Components such as these calendar components can then obtain the right settings from an instance of basic-culture-selector directly through declarative data binding, with no scripting required.</p>
<p dir="ltr">Reality check: Localization is an incredibly complex topic, and language- and culture-aware components are just a part of a solution. To really do justice to a global audience, an app team would need to take a comprehensive approach to localization. Among other things, an app would need some reasonable way to set a default language/culture (based on domain, geolocation, and/or apparent IP location), a way to store language/culture preferences with a user account, and a UI for switching language/culture. It would also help if browser vendors participated in a good standard solution, so users aren’t forced to indicate their preferred language/country/etc. on a site-by-site basis. Still, having solid, localizable components is a good place to start.</p>
<h2 dir="ltr">A calendar as a meta-component</h2>
<p dir="ltr">Many applications want to render data on a calendar: appointments, availability, and so on. Most calendar widgets are useless in this regard outside a narrowly-envisioned range of scenarios, because they make so many assumptions about what data will be shown. Rather than viewing a week or month calendar as having a particular visual representation, it seems more helpful to consider a calendar as a skeleton or abstract structure capable of holding components for each day whose only requirement is that they can accept a date. How a day component renders that date is entirely up to them.</p>
<p dir="ltr">For this reason, the basic-calendar-month (and -week) components have a dayTag attribute that can be used to provide the name of another component class that will be used to render the individual days of the month/week. The default dayTag value is basic-calendar-day, but this can be changed to any other class. The only requirement on the interface of the indicated class is that it have a property setter called “date” that accepts a JavaScript Date object. This allows one to easily render arbitrary data into the structure of a calendar.</p>
<p dir="ltr">To show this in action, suppose we want to create a month calendar that shows the major phases of the moon (new, first quarter, full, last quarter, or nothing special). To keep things well factored, we start by creating a web component called <a href="https://github.com/basic-web-components/basic-calendar-day/blob/master/demo/moon-phase.html" target="_self">moon-phase</a>&#0160;that just renders the phase of the moon as an icon. It doesn’t shown a day number, or anything else, because we just want it to do one thing really well.</p>
<p>We then create a custom day component, either from scratch or, for simplicity, by extending the existing basic-calendar-day component. We drop an instance of moon-phase into that class and add a day number so we get both the number and the moon icon. Finally, we instantiate a basic-month-calendar and tell it to use that class to render the days. Et voilà, with a teeny tiny bit of work, we get a perpetual moon calendar. In U.S. English, this would look like:</p>
<p dir="ltr"><a class="asset-img-link" href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201a3fd3db566970b-pi" style="display: inline;"><img alt="Calendar (Moon Phase)" border="0" class="asset  asset-image at-xid-6a00d83451fb6769e201a3fd3db566970b img-responsive" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201a3fd3db566970b-800wi" title="Calendar (Moon Phase)" /></a></p>
<p dir="ltr">&#0160;</p>
<p dir="ltr">[See the <a href="http://component.kitchen/components/basic-calendar-day" target="_self">live demo</a>]</p>
<p dir="ltr">By building on top of basic-month-calendar, this moon calendar not only avoids the headaches of date math, it also automatically obtains a high degree of localizability provided by the underlying Globalize library. As improvements are made in the underlying basic-month-calendar, the moon calendar picks up those improvements for free.</p>
<p dir="ltr">Here one web component (basic-month-calendar) allows a portion of its UI (the rendering of days) to be overridden by accepting a second web component class as input (via the dayTag attribute). The calendar is effectively an abstract component or meta-component that defines a structure which is completely or partially filled in by another class. This UI pattern parallels the use of abstract classes in programming languages, and seems generally useful in many other component situations.</p>
<p dir="ltr">Patterns like this may go a long way toward ensuring web components can really be general purpose, and may ultimately be a key part of managing some of the date math and localization complexities I’ve touched upon in this post. As some of the calendar issues raised here suggest, it’s notoriously difficult to do anything with dates and time, especially when one wants to localize a UI across a wide range of languages and cultures. The best strategy for ensuring that someone, somewhere has sufficient motivation to fix tricky issues is to maximize the audience for the component. And one way to increase the size of the audience is to make the component as general-purpose as possible. That is, creating a wide range of scenarios for a general-purpose component like basic-month-calendar seems critical to ensure that the component gets sufficient attention to make it reliable in a wide range of circumstances.</p>
<p>&#0160;</p>
<p dir="ltr"><em>[Speaking of open source contributions, I wanted to take this opportunity to publicly thank a few people who offered early contributions to the relatively new Basic Web Components project. <a href="https://twitter.com/OliverJAsh" target="_self">@OliverJAsh</a>&#0160;filed the first bug report on the project, <a href="https://twitter.com/PascalPrecht" target="_self">@PascalPrecht</a> &#0160;submitted the first pull request, and <a href="https://github.com/daverome" target="_self">Dave Romero</a>&#0160;made the first edits to the wiki. Many thanks to the three of them!]</em></p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Yair
EMAIL: hthr44@gmail.com
IP: 212.116.182.86
URL: 
DATE: 08/06/2014 03:58:22 AM
The Hebrew calenders you saw are probably left to right for practical reasons. I have seen some which are RTL. Usually, the calendars cover a Hebrew year with some slack (so roughly August-October), but each page covers a Gregorian month and the Hebrew dates and holidays are marked, but are smaller than the numbers. This is probably because most people use the Gregorian calender for almost everything, so having the numbers go from left to right also makes sense (although, again, I have seen counter-examples).

Incidentally, you could complicate it even more if you added actual support for alternative calendars, such as the Hebrew or Islamic calendars. You would have different year and month names, different month lengths, supporting dates as letters instead of numbers, etc. In the Hebrew calendar, for instance, each third or fourth year has 13 months (the months are lunar, so you wouldn't need your lunar chart, because the moon is always full in the middle of the month, but that requires adding the month to prevent drift from the solar cycle). And this month is added in the middle of the year (it was the end of the year in one of the alternative ways of looking at the year, but that's not really used any more, so now it's the middle of the year).
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 67.185.162.218
URL: http://profile.typepad.com/jan_miksovsky
DATE: 08/06/2014 08:55:17 AM
Yair: Thanks for the insight into Hebrew calendars! For the initial implementation, I made a deliberate decision to focus on Gregorian calendars. My assumption is that most businesses supporting users in multiple languages/countries would end up standardizing on the Gregorian calendar. It would be fantastic if someone wanted to improve or extend these components to support non-Gregorian calendars. The Globalize library actually seems to have pretty good coverage of most calendar systems, including the Hebrew and Hijri (Islamic) calendars, so that might be a big help in implementing support for those calendars in these components.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Deconstructing the standard photo carousel into general-purpose web components
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: deconstructing-the-standard-photo-carousel-into-general-purpose-web-components

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2014/06/deconstructing-the-standard-photo-carousel-into-general-purpose-web-components.html 
DATE: 06/16/2014 08:00:00 AM
-----
BODY:
<p dir="ltr">I recently contributed a small handful of web components to the <a href="https://github.com/basic-web-components/components-dev/wiki" target="_self">Basic Web Components</a>&#0160;project, and wanted to share some observations on how designing and building UI with web components is going to be pretty different from how you’ve created UI in the past.</p>
<h2 dir="ltr">The basic photo carousel as a component</h2>
<p dir="ltr">The web components I was working on are related to the standard sort of photo carousel you see everywhere on the web these days:</p>
<p><a class="asset-img-link" href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201a3fd1dbad4970b-pi" style="display: inline;"><img alt="Basic-sequence-navigator" class="asset  asset-image at-xid-6a00d83451fb6769e201a3fd1dbad4970b img-responsive" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201a3fd1dbad4970b-500wi" title="Basic-sequence-navigator" /></a><br /><br />There are a zillion widgets out there that will create such a thing for you, but they generally are connected to a specific web platform (WordPress, SquareSpace, etc.) or require the use of JavaScript.&#0160;</p>
<p dir="ltr">A carousel web component, on the other hand, lets you construct such a thing in HTML alone. Here&#39;s a carousel component called basic-sequence-navigator:</p>
<p dir="ltr"><span style="font-family: terminal, monaco;">&lt;basic-sequence-navigator&gt;<br />&#0160; &lt;img src=”image1.jpg”&gt;<br />&#0160; &lt;img src=”image2.jpg”&gt;<br />&#0160; &lt;img src=”image3.jpg”&gt;<br />&#0160; ...<br />&lt;/basic-sequence-navigator&gt;</span></p>
<p dir="ltr">You can see a live demo of this component on the Component Kitchen page for <a href="http://component.kitchen/components/basic-sequence-navigator" target="_self">basic-sequence-navigator</a>.</p>
<p>With a web component like this, you just drop your images (or other elements) inside of the component, and you get a carousel. No styling or JavaScript required. That’s pretty neat all on its own, but the component’s construction is also interesting in its own right.</p>
<h2 dir="ltr">Building up from simple pieces</h2>
<p dir="ltr">Existing carousel widgets suffer from trying to present a final solution. Someone creates a single widget that handles everything: positioning the images, transition effects, Next/Previous buttons, programmatic API, events, and more. If there’s anything about that solution you don’t like, you often have to reject the whole widget, or else spend time fiddling with widget options in hopes of finding a combination of settings that does what you want.</p>
<p dir="ltr">Given that web components lets you build bigger things from smaller things, I wanted to try to factor the carousel as a user experience into simple pieces that you could combine in different ways. Even if you don’t like a specific end result, you may nevertheless find some of the building blocks useful in constructing your own solution.</p>
<p dir="ltr">For starters, consider that the Next/Previous buttons shown above are just a specific answer to the general question: how does a user navigate the sequence of images? Those buttons aren’t the only answer; there are other common answers to this same question. An equally common answer might be putting iOS-style dots along the bottom. So it’s silly to inextricably bundle the general problem of providing navigation through a sequence with the <em>specific</em> solution of Next/Previous buttons.</p>
<p>A better answer is to factor the general behavior into one component, and the specific UI into a separate component. Accordingly, the basic-sequence-navigator component is really based on a more fundamental component called basic-sequence. The basic-sequence component handles transitional effects like sliding or cross-fading, but <em>doesn’t include its own navigation UI</em>.</p>
<p dir="ltr">That means you can wire up buttons of your own (or any UI you want) to drive an instance of the more fundamental basic-sequence component. A crude example of this would be:</p>
<p><span style="font-family: terminal, monaco;">&lt;button onclick=&quot;document.querySelector(&#39;#sequence&#39;).previous()&quot;&gt;Previous&lt;/button&gt;</span><br /><span style="font-family: terminal, monaco;">&lt;button onclick=&quot;document.querySelector(&#39;#sequence&#39;).next()&quot;&gt;Next&lt;/button&gt;</span><br /><span style="font-family: terminal, monaco;">&lt;basic-sequence id=&quot;sequence&quot;&gt;</span><br /><span style="font-family: terminal, monaco;">&#0160; &lt;img src=”image1.jpg”&gt;</span><br /><span style="font-family: terminal, monaco;">&#0160; &lt;img src=”image2.jpg”&gt;</span><br /><span style="font-family: terminal, monaco;">&#0160; &lt;img src=”image3.jpg”&gt;</span><br /><span style="font-family: terminal, monaco;">&#0160; ...</span><br /><span style="font-family: terminal, monaco;">&lt;/basic-sequence&gt;</span></p>
<p>You can see a demo of this solution on the page for <a href="http://component.kitchen/components/basic-sequence" target="_self">basic-sequence</a>. It&#39;s not beautiful, but the point is that&#0160;you can build up your own UI from simple pieces. You don’t have to write all the code —&#0160;you get things like transition effects for free, for example. At the same time, you can create exactly the user experience you want.</p>
<p dir="ltr">Maybe you don’t want <em>any</em> visible UI, you just want to show one image after another on a timed basis. There’s a separate component called <a href="http://component.kitchen/components/basic-slideshow" target="_self">basic-slideshow</a>&#0160;that does just that. It uses basic-sequence under the covers, but adds the notion of a timer and play/stop semantics:</p>
<p dir="ltr"><span style="font-family: terminal, monaco;">&lt;basic-slideshow effect=”reveal”&gt;</span><br /><span style="font-family: terminal, monaco;">&#0160; &lt;img src=”image1.jpg”&gt;</span><br /><span style="font-family: terminal, monaco;">&#0160; &lt;img src=”image2.jpg”&gt;</span><br /><span style="font-family: terminal, monaco;">&#0160; &lt;img src=”image3.jpg”&gt;</span><br /><span style="font-family: terminal, monaco;">&#0160; ...</span><br /><span style="font-family: terminal, monaco;">&lt;/basic-slideshow&gt;</span></p>
<p dir="ltr">What if you don’t care about transition effects? You can build on top of an even simpler component called <a href="http://component.kitchen/components/basic-modes" target="_self">basic-modes</a>. That just shows one child element at a time. And even that component is built from simpler pieces, including <a href="http://polymer.github.io/core-selector/components/core-selector/" target="_self">core-selector</a>, a component that just keeps track of which item in a set is selected (without defining what selecting means or looks like). And <em>that</em> component is built from even simpler one. It’s components, all the way down.</p>
<p dir="ltr">The idea here is that UI shouldn’t be delivered as a huge, final thing with a million knobs on it to cover every conceivable situation. Instead, complex UI should be built up from simpler pieces, each of which do a great job at one thing.</p>
<h2 dir="ltr">Styleability</h2>
<p dir="ltr">Of course, if you do like the general idea of Next and Previous buttons, but want them to look different, you can use basic-sequence-navigator, and then take advantage of the styleability built into web components. Using CSS rules, you can override the default styling to better match your app’s aesthetics and brand.</p>
<h2 dir="ltr">Get your UI for nothing, and accessibility for free</h2>
<p dir="ltr">The basic-sequence-navigator component has a nice feature most carousels lack: keyboard support! If you press the Left or Right key while the component has focus, the carousel advances, respectively, to the previous or next image. To help make that feature more discoverable, the component sports a focus rectangle when it has the focus.</p>
<p dir="ltr">It’s kind of appalling the web is chock full of photo carousels that can’t be navigated with a keyboard. That not only shuts out a big chunk of people for whom a mouse or trackpad is hard to use, it’s also generally inconvenient for everyone else. If you have to page back and forth through a sequence of images, using Left/Right keys is simply much faster than moving a mouse or finger back and forth to hit buttons on either side of the images.</p>
<p dir="ltr">Some web sites, generally big ones with large staff, can afford to spend time getting accessibility details like keyboard navigation right. But I’m willing to bet that the vast majority of photo carousels on the web today aren’t accessible. The problem isn’t just awareness —&#0160;the software industry has been talking about accessibility for a long, long time. The deeper problem is that the economics of implementing accessibility are often terrible. If everyone has to implement something like keyboard support on their own, for any single team, the predicted return on the investment is just too low to pursue.</p>
<p dir="ltr">With web components, the economics could improve radically. Once people can share UI solutions as components, even small improvements can potentially benefit thousands of sites. So someone may find it worth their time to add support for keyboard users, or users with low vision, or screen reader users, and so on. Even if the original author of a component (say, me) knows just a tiny bit about the accessibility implications of ARIA support, perhaps there’s someone else out there (you?) who knows ARIA inside and out and can help get it right.&#0160;</p>
<p dir="ltr">The best part is that, if accessibility can be improved for free, everyone benefits <em>even if most people won’t know they’re making their products more accessible</em>. Most people aren’t going to adopt a component like &lt;basic-sequence-navigator&gt; because it has good accessibility. They’re going to adopt it for selfish reasons — it’s going to save them time.&#0160;</p>
<p dir="ltr">That’s fine! If someone can just drop in a photo carousel component because it saves time implementing a design, they&#39;ll use it, even if they know nothing about accessibility. They don’t even need to know that the carousel&#39;s built-in accessibility features exist for the component to help them support a broader audience of end users.</p>
<h2 dir="ltr">Some principles for general-purpose web components</h2>
<p dir="ltr">If you’re interested in this approach, and want to learn more about creating general-purpose web components, the Basic Web Components site has a page on <a href="https://github.com/basic-web-components/components-dev/wiki/Ten-Principles-for-Great-General-Purpose-Web-Components" target="_self">10 Principles for Great General-Purpose Components</a>. If you’d like to take a shot at contributing to the project, the <a href="https://github.com/basic-web-components/components-dev/wiki" target="_self">home page</a>&#0160;provides a long list of components the world could use.</p>
<p>&#0160;</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Freemen Muaddib
EMAIL: 
IP: 93.45.109.236
URL: http://profile.typepad.com/6p01a73ddd6476970d
DATE: 06/21/2014 03:27:51 AM
THE TROUBLE WITH STYLES IN POLYMER ELEMENTS

About the now-deprecated "applyAuthorStyles" to polymer elements, I see a big problem in the design of the polymer platform itself. 
As anybody who tried to use polymer elements in the real world, the styling is where developers find more troubles when integrating polymer elements (see for example this excellent article by Chris Strom, author of the book "Patterns in Polymer": <a href="http://japhr.blogspot.it/2014/06/a-tag-named-apply-author-styles.html">http://japhr.blogspot.it/2014/06/a-tag-named-apply-author-styles.html</a> ). 
There’s an inherent and unresolved tension in creating styleable general-purpose components. Of course Polymer is too young as a platform, and it may not shows yet. This problem will become evident when a component evolves and acquires more styling.
Suppose you give your component a light gray background so that its “out of the box” appearance looks reasonable. An author overrides that background to be red so that it fits in with their red visual theme. Later, you decide that your component requires a border somewhere to clearly delineate its contents from the outer page. Unfortunately, the aforementioned author wasn’t prepared to override this new border. When they pick up a new version of your component, they’ll end up with a red background but a gray border. That may not be what they want. If this happens too often, the author may come to feel that the use of a general-purpose component is not worth the trouble. The best resolution to this tension is still an open question. For the time being, your best bet is to give your general-purpose component an extremely basic visual appearance. But with time authors would end thinking that is quickier and safer to write all the elements by themself in plain html with their own stylesheet, and this could spell the end of Polymer Elements adoption.﻿
-----
COMMENT:
AUTHOR: Yury Zholobov
EMAIL: 
IP: 67.170.75.137
URL: http://profile.typepad.com/6p01a73de3115e970d
DATE: 06/29/2014 10:50:24 PM
What about navigation by touch swiping with the component reacting as expected by user - tracking touch and dynamically scrolling the content with prev/next content becoming partially visible?
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 67.185.162.218
URL: http://profile.typepad.com/jan_miksovsky
DATE: 07/17/2014 08:13:46 AM
Yury: Yes, these components definitely need to support touch. That's still a work in progress.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Paper can be faster than gadgets: a printable 2014 wall calendar for more efficient scheduling discussions
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 0
BASENAME: paper-can-be-faster-than-gadgets-printable-wall-calendar

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2013/12/paper-can-be-faster-than-gadgets-printable-wall-calendar.html 
DATE: 12/18/2013 08:00:00 AM
-----
BODY:
<p>I’ve posted an app that lets you <a href="http://janmiksovsky.github.io/printable-wall-calendar">print a free wall calendar</a>&#0160;that can make your scheduling discussions go faster.</p>
<p>This is based on <a href="http://miksovsky.blogs.com/flowstate/2013/01/a-2013-wall-calendar-optimized-for-project-management-discussions.html">a printed calendar I created by hand</a>&#0160;for some years now. As I noted in that post, most wall calendars contain far too much junk. Most professionals I know track future events in an online calendar, not a wall calendar, so among other things, you may not actually need room to write on a wall calendar these days. But it&#0160;<em>is</em>&#0160;handy to be able to quickly answer questions about what day of the week a given date falls on, or vice versa. While you can whip out a mobile device and answer those questions, this is one case where I believe paper is faster than gadgets.</p>
<p><img alt="Year Calendar" border="0" height="600" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201a3faa3c039970b-pi" title="Year Calendar.png" width="484" /></p>
<p>If you hang one of these on your office or conference room wall, I think you’ll find it useful. Each year, the startup I founded continues to print out a huge version of this calendar. (Tip: print it as a poster at Fedex). It works great for planning agile development sprints.</p>
<h2>Optimizing for text legibility</h2>
<p>I&#39;ve tried to remove everything from this calendar that’s not strictly necessary to answer the key day/date scheduling questions. In particular, to improve legibility at a distance, I’ve tried to maximize the size of the date numbers so they can be read from far away. In the case where a single month requires six rows to display, I tuck the name of the month on the same row as the first week. Such a week can contain at most two dates on the far right. For example, in a typical U.S. calendar, this situation will come up in March 2014:</p>
<p><img alt="Three Months" border="0" height="171" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2019b03303468970d-pi" title="Three Months.png" width="600" /></p>
<p>This trick lets me save a row for the tall months. Reclaiming that vertical space means the dates can be bigger and more legible at a distance.</p>
<h2>A web component wall calendar</h2>
<p>Instead of creating another one-off paper calendar this year, I realized I could use web components to create a live app without too much trouble. I already had a <a href="https://github.com/JanMiksovsky/quetzal-calendar-month-with-headings">month calendar component</a> (available for your own web components app via Bower). This component handles most of the date math, so it was fairly straightforward to just stick twelve instances of this component together, then apply some styling and glue logic, and end up with a live calendar app.</p>
<p>Generally speaking, that process is what I see most web app design and development moving toward: 1) a search for the best components, 2) some wrangling to glue them together, and 3) the application of styling to achieve the desired aesthetic. The core <a href="https://github.com/JanMiksovsky/printable-wall-calendar/tree/master/elements">.html source for the app</a>&#0160;is tiny, weighing in at a little over 13K, and most of that is markup or CSS. Looking just at the JavaScript, there are only about&#0160;100 lines of code.</p>
<p>This web app is slightly unusual in that it focuses on printing, and the web isn’t particularly print-friendly. As far as I know, it’s hard to say: “Scale this text to be as tall as possible, subject to this layout, and still have everything fit on a page.” I ended up having to be most conservative than I would have liked, tuning the app for U.S.-centric “Letter” sized paper, which is shorter than the A4 paper used nearly everywhere else. Some space goes to waste which could have been used for more generous text sizing and spacing.</p>
<h2>Falsehoods designers believe about time</h2>
<p>A while back, Noah Sussman posted a great list of <a href="http://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time">Falsehoods Programmers Believe About Time</a>. Designers make most of the same incorrect assumptions as well. When I read a list like this, the lesson I take away is that most people (including me) shouldn’t be doing date math or creating UI elements that depend directly on it. Instead, they should be building on top of work others have done.</p>
<p>In this particular case, I’d already invested a bunch of time doing the work to be able to create a month calendar component that can easily be reused in other applications. This component avoids at least a few of the Falsehoods About Time listed above. E.g., given a date, to calculate the next date it doesn’t just add 24 hours, but does some gyrations to handle daylight saving time edge cases.</p>
<p>A designer or developer can hopefully drop this month calendar component into their web app and get a useful result with having to worry about (or even be aware of) the edge cases. The component itself undoubtedly has edge cases it fails to handle; there are Falsehoods About Time which aren&#39;t addressed yet. But the value of doing this as a component is that at least such work is spread across applications. Others can pitch in, and we can collaboratively work towards a bug-free solution.</p>
<h2>Global support for hundreds of languages/locations</h2>
<p>In past years, people have asked me for “international” versions of the wall calendar that have Monday as the first day of the week, instead of Sunday the way most Americans prefer it.</p>
<p>Since my month calendar component already leveraged the excellent <a href="https://github.com/jquery/globalize">Globalize.js</a>&#0160;library, it was actually easier for me to just let the user pick the language/location they want a calendar instead of having to hard-code support for specific formats. To simplify things, I created a component that wraps the Globalize list of supported language/location combinations. Then it was just a matter of wiring the language/location selector to the calendar, and —&#0160;boom! —&#0160;the calendar instantly got basic support for hundreds of language/locations.</p>
<p>The results are likely imperfect for many places, but for languages and locations with small populations, this printable wall calendar might already be the best solution out there.</p>
<p>If you’re like me, it’s a good five minutes fun to just pick cultures and see what their calendars might look like. I knew that cultures in the Americas tend to prefer having a calendar start on Sunday, while European cultures tend to prefer that weeks start on Monday. This holds true even when the same language is spoken in both hemispheres: see English (U.S.) vs English (U.K.), or Spanish (Mexico) vs Spanish (Spain). Until I started working with Globalize, though, I hadn’t realized that there were cultures that prefer weeks start on a Saturday. Here’s how March 2014 looks in three settings, English (U.S.), French (France), and Arabic (Saudi Arabia):</p>
<p><img alt="US Calendar" border="0" height="225" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2019b032f63e4970c-pi" title="US Calendar.png" width="225" /></p>
<p><img alt="French Calendar" border="0" height="225" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201a3faa3c018970b-pi" title="French Calendar.png" width="225" /></p>
<p><img alt="Arabic Calendar" border="0" height="225" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2019b03303414970d-pi" title="Arabic Calendar.png" width="225" /></p>
<p>The start-of-week day, plus the month and day names, all come for free from Globalize. (I don’t actually know if people in Saudi Arabia want their months to look like the one above, but couldn’t find conclusive evidence of a single preferred style.)</p>
<h2>Localize your UI and get&#0160;fun surprises for free!</h2>
<p>One last bit I thought was funny was rediscovering that, even when building atop a localization library or a localization-aware component, there are always surprises. I think this can be expressed as a law of UI design: <em>For any user interface layout that looks good for most cultures, there exists a culture that will break that layout.</em></p>
<p>Here, the clever packing of the month name into the first row of a six-week month (as shown above) looks great in <em>almost</em> all the languages defined by Globalize. In that layout, the month name can span up to five columns’ worth of width, which is more than enough in most cases. But per the above law, there must exist at least one culture for which this layout does not work without modification. And such a culture does, in fact, exist:</p>
<p><img alt="Sami Calendar" border="0" height="225" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201a3faa3c020970b-pi" title="Sami Calendar.png" width="225" /></p>
<p>This is the Sami language of northern Scandinavia (“sääm´ǩiõll” in the calendar’s language/location list), in which the month of March is called “pâ´zzlâšttammään”. In a year like 2014, where March starts on a Saturday, the month name will overlap with the date for March 1st. To the 25,000 or so speakers of Sami: I’m very sorry about this.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Amazon: Please make better use of cover art to improve the ebook reading experience
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 0
BASENAME: amazon-please-make-better-use-of-cover-art-to-improve-the-ebook-reading-experience

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2013/10/amazon-please-make-better-use-of-cover-art-to-improve-the-ebook-reading-experience.html 
DATE: 10/01/2013 08:00:00 AM
-----
BODY:
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 15px; font-family: Arial; background-color: transparent; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;">As we pass through the transition from paper to electronic books, the humble book cover seems to have been dropped from important roles in the reading experience. </span><span style="line-height: 1.15; background-color: transparent; font-family: Arial; font-size: 15px; white-space: pre-wrap;">I'm generally a huge fan of Amazon's various Kindle devices and apps, and love the convenience that goes with them. B</span><span style="background-color: transparent;"><span style="font-family: Arial;"><span style="font-size: 15px; line-height: 1.15; white-space: pre-wrap;">ut I'm finding some </span><span style="font-size: 15px; line-height: 17px; white-space: pre-wrap;">aspects of the current Kindle reading experience leave me cold, and make recalling a book harder than it should be.</span></span></span></p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="background-color: transparent; font-family: Arial; font-size: 15px; white-space: pre-wrap; line-height: 1.15;"><br /></span></p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="background-color: transparent;"><span style="font-family: Arial;"><span style="font-size: 15px; line-height: 1.15; white-space: pre-wrap;">We usually don't think much </span><span style="font-size: 15px; line-height: 17px; white-space: pre-wrap;">about the covers of the books we're reading, but e</span></span></span><span style="background-color: transparent; font-family: Arial; font-size: 15px; line-height: 1.15; white-space: pre-wrap;">ach time you reach for a paper copy of a book, you have a chance to see a cover:</span></p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr">&nbsp;</p>
<div><span style="font-size: 15px; font-family: Arial; background-color: transparent; vertical-align: baseline; white-space: pre-wrap;"><br /></span></div>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><img title="Paper Book Cover.jpg" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2019affb30a32970b-pi" border="0" alt="Paper Book Cover" width="500" height="715" /></p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 15px; font-family: Arial; background-color: transparent; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;"><br /></span></p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 15px; font-family: Arial; background-color: transparent; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;"><br /></span></p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 15px; font-family: Arial; background-color: transparent; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;">This cover is hard at work. </span><span style="font-size: 15px; font-family: Arial; background-color: transparent; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;"><span>Before you've even cracked the book, the art and typography have played a subtle but useful role in setting the </span><em>mood</em><span> for the reading experience. Yes, the cover is serving as advertising, but </span></span><span style="font-size: 15px; font-family: Arial; background-color: transparent; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;"><span><span>it’s also an earnest attempt to visually establish the tone of what follows. </span></span></span><span style="line-height: 1.15; background-color: transparent;"><span style="font-family: Arial;"><span style="font-size: 15px; line-height: 17px; white-space: pre-wrap;">Details such font choice, text size, color palette, image content, and composition, all contribute to provoking an </span></span></span><span style="font-size: 15px; font-family: Arial; background-color: transparent; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;"><span>emotional shift before you've even reached the primary content. </span></span><span style="background-color: transparent; line-height: 1.15; font-size: 15px; font-family: Arial; vertical-align: baseline; white-space: pre-wrap;">In this light, a cover is something <span style="font-family: arial, helvetica, sans-serif;">like </span></span><span style="line-height: 1.15; font-size: 15px; background-color: transparent; font-family: Arial;">a movie’s opening credits. In both cases, subtracting the aesthetic treatment leaves behind bare content that has to work harder to make an emotional impact.</span></p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 15px; font-family: Arial; background-color: transparent; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;"><span style="font-family: Arial; font-size: 15px; line-height: 17px; white-space: pre-wrap;"><br /></span></span></p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 15px; font-family: Arial; background-color: transparent; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;"><span style="font-family: Arial; font-size: 15px; line-height: 17px; white-space: pre-wrap;">More lastingly, the cover helps to repeatedly connect the book's title, author, and content in your brain. <span style="font-family: Arial; font-size: 15px; line-height: 17px; white-space: pre-wrap;"> During the course of reading a book, you likely see its cover numerous times (even if the cover's only facing up half the time). I'd hazard that the cover for a typical paper novel creates something on the order of 20–40 visual impressions for the average reader between the time they see it in a store and the time they put that book out of sight.</span></span></span></p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 15px; font-family: Arial; background-color: transparent; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;"><br /></span></p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-size: 15px; font-family: Arial; background-color: transparent; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;">In contrast, let's quickly consider the use of book cover art in Amazon ebooks. </span><span style="background-color: transparent; font-family: Arial; font-size: 15px; white-space: pre-wrap; line-height: 1.15;">When you buy a book on Amazon's Kindle store, you can see a small thumbnail of the cover art:</span></p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="background-color: transparent; font-family: Arial; font-size: 15px; white-space: pre-wrap; line-height: 1.15;"><br /></span></p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="background-color: transparent; font-family: Arial; font-size: 15px; white-space: pre-wrap; line-height: 1.15;"><br /></span></p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><img title="Amazon Search Results.png" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2019affb30a3f970b-pi" border="0" alt="Amazon Search Results" width="600" height="446" /></p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="background-color: transparent; font-family: Arial; font-size: 15px; white-space: pre-wrap; line-height: 1.15;"><br /></span></p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="background-color: transparent; font-family: Arial; font-size: 15px; white-space: pre-wrap; line-height: 1.15;"><br /></span></p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="background-color: transparent; font-family: Arial; font-size: 15px; white-space: pre-wrap; line-height: 1.15;">You can also see a book's thumbnail in a device or app's the Library view. But when you tap on a book to open it, you're brought straight to the first page of text:</span></p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="background-color: transparent; font-family: Arial; font-size: 15px; white-space: pre-wrap; line-height: 1.15;"><br /></span></p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><img style="line-height: 1.15;" title="Kindle Book First Page.PNG" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2019affb3ad84970d-pi" border="0" alt="Kindle Book First Page" width="500" height="666" /></p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr">&nbsp;</p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr">&nbsp;</p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="font-family: Arial;"><span style="font-size: 15px; line-height: 17px; white-space: pre-wrap;">Jumping to the first page of text <em>seems</em> really efficient — but by skipping the cover, some things are lost. </span></span><span style="background-color: transparent; font-family: Arial; font-size: 15px; line-height: 1.15; white-space: pre-wrap;">The title is presented here, but in such a subdued way that it’s easy to overlook. The author's name isn't even shown in portrait view. (You have to rotate the presentation to landscape, two-column view for that.) And, once you've begun a book, when you return to the Kindle app or device again, you'll jump straight back to the page you were on —&nbsp;skipping even the small cover art thumbnail in the Library view.</span></p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="background-color: transparent; font-family: Arial; font-size: 15px; line-height: 1.15; white-space: pre-wrap;"><br /></span></p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="background-color: transparent; font-family: Arial; font-size: 15px; line-height: 1.15; white-space: pre-wrap;"><span style="font-family: Arial; font-size: 15px; line-height: 17px; white-space: pre-wrap;">The digital cover art <em>is</em> typically still there in the ebook content; it's just not shown to you by default. And if you explicitly do view the </span></span><span style="background-color: transparent; font-family: Arial; font-size: 15px; line-height: 1.15; white-space: pre-wrap;">cover, you will see an odd thing: </span><span style="font-family: Arial; font-size: 15px; line-height: 17px; white-space: pre-wrap;">the cover art presented as an image sitting </span><em style="font-family: Arial; font-size: 15px; line-height: 17px; white-space: pre-wrap;">on </em><span style="font-family: Arial; font-size: 15px; line-height: 17px; white-space: pre-wrap;">one of the book's </span><span style="font-family: Arial; font-size: 15px; line-height: 17px; white-space: pre-wrap;">pages, instead of a cover that's the same size as a page. This makes the cover feel less like a cover, and even less important than the user interface is already treating it.</span></p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr">&nbsp;</p>
<p><img title="Kindle Book Cover.png" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2019affb31c7c970c-pi" border="0" alt="Kindle Book Cover" width="500" height="666" /></p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr">&nbsp;</p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr">&nbsp;</p>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="line-height: 1.15; background-color: transparent; font-family: Arial; font-size: 15px; white-space: pre-wrap;">Overall, I think Amazon's doing an amazing job with ebooks. </span><span style="line-height: 1.15; background-color: transparent; font-family: Arial; font-size: 15px; white-space: pre-wrap;">I do think the cover art could be handled more effectively. As it stands, </span><span style="background-color: transparent; font-family: Arial; font-size: 15px; line-height: 1.15; white-space: pre-wrap;">you can lose out on quite a bit as a reader of an ebook:</span></p>
<ul>
<li><span style="background-color: transparent; font-family: Arial; font-size: 15px; line-height: 1.15; white-space: pre-wrap;">If you can't remember a title or author, you can't easily recommend the book to friends. <span style="line-height: 1.15; background-color: transparent;"><span style="font-family: Arial;"><span style="font-size: 15px; line-height: 1.15; white-space: pre-wrap;">I’ve frequently found myself trying to tell friends about an interesting ebook I’m reading —&nbsp;a book I may have been reading for a couple of weeks —&nbsp;only to discover I can recall neither the title nor the author’s name.</span></span></span></span></li>
<li><span style="background-color: transparent;"><span style="font-family: Arial;"><span style="font-size: 15px; line-height: 1.15; white-space: pre-wrap;">If you </span><span style="font-size: 15px; line-height: 17px; white-space: pre-wrap;">can't recall an</span><span style="font-size: 15px; line-height: 1.15; white-space: pre-wrap;"> author's name, you yourself might not be able to later find more books by the same author. Yes, you could dig up the name through your order history, but </span><span style="font-size: 15px; line-height: 17px; white-space: pre-wrap;">maybe you're not going to bother. I</span><span style="font-size: 15px; line-height: 1.15; white-space: pre-wrap;">t'd be a lot faster if you could just recall the name and type it into a search box.</span></span></span></li>
<li><span style="background-color: transparent; font-family: Arial; font-size: 15px; line-height: 1.15; white-space: pre-wrap;">The art probably helps aid the recall of the book's content. Conversely, failure to show that cover likely means that information is probably harder to recall. </span><span style="background-color: transparent; font-family: Arial; font-size: 15px; line-height: 1.15; white-space: pre-wrap;">I can still remember some covers for books I read decades ago. I doubt that persistence will remain true about the ebooks I'm reading today.</span></li>
<li><span style="background-color: transparent; font-family: Arial; font-size: 15px; line-height: 1.15; white-space: pre-wrap;">Everything on the book’s cover, including the artwork and typography, is helping to prepare the stage for the reading experience you’re about to start (or resume). Leaving that out can make the e-book reading experience feel comparatively colder.</span></li>
<li><span style="background-color: transparent; font-family: Arial; font-size: 15px; line-height: 1.15; white-space: pre-wrap;">Without a strong visual distinction between different books, the experience of reading ebook after ebook can make those books blur together in your mind.</span></li>
</ul>
<p><span style="font-size: 15px; font-family: Arial; background-color: transparent; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;">Curiously, Kindle devices do show book covers, but <em>for the wrong book</em>. </span><span style="font-size: 15px; font-family: Arial; background-color: transparent; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;">When you turn off the device, you'll get an ad for some book you don't yet own. I appreciate Amazon's business need to sell more books, but this feels </span><span style="font-size: 15px; font-family: Arial; background-color: transparent; font-weight: normal; vertical-align: baseline; white-space: pre-wrap;">rather pathetic. I've never personally found any of these recommendations useful, and </span><span style="background-color: transparent; font-family: Arial; font-size: 15px; white-space: pre-wrap;">in any event I already have many ways — and better ways — to find recommendations when I visit the Amazon site. Moreover, this advertising makes the reading experience so haphazard. Because I get a different book cover each time I turn off a Kindle device, the lack of persistence makes it even harder to appreciate a multi-day reading process as a coherent experience.</span></p>
<p><span style="background-color: transparent; font-family: Arial; font-size: 15px; white-space: pre-wrap; line-height: 1.15;">What might work better? I'm sure the Kindle designers have already given this a lot of thought. I'm not an expert in ebook user interfaces, just a reader who's been feeling underserved by the current experience, but</span><span style="background-color: transparent; font-family: Arial; font-size: 15px; white-space: pre-wrap; line-height: 1.15;"> </span><span style="background-color: transparent; font-family: Arial; font-size: 15px; line-height: 1.15; white-space: pre-wrap;">I think it might be reasonable for the Kindle apps and devices to:</span></p>
<ol>
<li><span style="background-color: transparent; font-family: Arial; font-size: 15px; line-height: 1.15; white-space: pre-wrap;">Flash the book’s cover for second when opening a book for the first time.</span></li>
<li><span style="background-color: transparent;"><span style="font-family: Arial;"><span style="font-size: 15px; line-height: 1.15; white-space: pre-wrap;">Flash the </span><span style="font-size: 15px; line-height: 17px; white-space: pre-wrap;">book's cover for</span><span style="font-size: 15px; line-height: 1.15; white-space: pre-wrap;"> some shorter time (half a second?) when re-opening a book.</span></span></span></li>
<li><span style="background-color: transparent;"><span style="font-family: Arial;"><span style="font-size: 15px; line-height: 1.15; white-space: pre-wrap;">Skip this cover display if the user goes away and then returns to a book within some short interval, say, less than an hour. If they've just flipped away to check something and come right back, even a short delay might feel obtrusive.</span></span></span></li>
<li><span style="background-color: transparent;"><span style="font-family: Arial;"><span style="font-size: 15px; line-height: 1.15; white-space: pre-wrap;">Let the user turn off this cover behavior through an option if they're really obsessed with getting that second back.</span></span></span></li>
<li><span style="background-color: transparent;"><span style="font-family: Arial;"><span style="font-size: 15px; line-height: 1.15; white-space: pre-wrap;"><span style="font-family: Arial; font-size: 15px; line-height: 17px; white-space: pre-wrap;">On the Kindle devices, the cover of the current book should be shown when the device is off. Again, if the user really wants to hide which book they’re reading, perhaps the existing behavior could be retained as an option.</span></span></span></span></li>
</ol>
<p style="line-height: 1.15; margin-top: 0pt; margin-bottom: 0pt;" dir="ltr"><span style="background-color: transparent; font-family: Arial; font-size: 15px; white-space: pre-wrap; line-height: 1.15;">What has your experience been? If you know anyone at Amazon who’s in a position to reconsider the current handling of cover art, I'd love it if you could please point them at these suggestions.</span></p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Yawar
EMAIL: yawar.amin+mikovsky@gmail.com
IP: 99.230.115.144
URL: 
DATE: 10/01/2013 04:36:15 PM
Excellent points. For comparison, check out the OverDrive Media Console app on iOS/Android. Awkward name, beautiful app. They are now showing the cover page, full-screen, any time you come back to the app after switching to another app/home page/locking the device.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: If we created an open library of web components for all general-purpose UI patterns, how many would there be?
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: how-many-general-purpose-ui-components

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2013/07/how-many-general-purpose-ui-components.html 
DATE: 07/15/2013 08:00:00 AM
-----
BODY:
<p>Wouldn’t it incredibly helpful if we had a library of components providing solid implementations for all the common, general-purpose, well-designed user interface patterns found in mobile and web apps? In such a library, how many components would there even be?</p>
<p>Regardless of the exact number, I think it’s clear that a comprehensive set of such patterns would be much larger than what’s available in most UI component libraries. Why is that are most existing UI libraries so <em>small</em>?</p>
<p>There are a few different kinds of UI libraries; let’s look at each in turn.</p>
<h2><strong>Operating system UI libraries</strong></h2>
<p>Every software operating system (Windows, OS X, Android, iOS, etc.) offers a library of user interface components. These help the platform’s developers be more efficient — but more critically, these libraries establish the visual and behavior language for their respective platforms. That is, they provide sufficient components such that native and third-party apps can present customers a reasonably consistent user experience.</p>
<p>OS UI libraries usually aren’t that big, though, often something in the neighborhood of 20–40 components. These include components for tried-and-true UI patterns: check boxes, radio buttons, combo boxes, tabs, menu bars, sliders, progress indicators, and so on.</p>
<p>But OS UI libraries seldom go far beyond that. Once the platform has been established, the platform vendor has little incentive to invest more work in their platform’s UI component library. When my startup began working on an iOS app, for example, I was stunned to discover just how few of the conventions of that platform were directly facilitated by iOS itself.</p>
<p>Even when an innovation such as, say, pull-to-refresh emerges in a mobile app like Tweetie and is widely emulated to the point where it becomes a de facto mobile UI standard, the UI innovation rarely makes it back into the platform itself. If it does make it into the platform, that step usually takes a very long time. Tweetie came out in 2008. Apple finally added UIRefreshControl to iOS 6 in 2012 — an eon later in mobile Internet time.</p>
<p>Another reason why OS libraries may have been so limited historically is that theming native UI components has been hard. Many operating systems conflate UI component appearance with component behavior, so it’s impossible (or hard) to get something that behaves just like a standard toolbar (with docking, etc.), but looks significantly different. And once you get much more complex than, say, a text box, a designer wants more control over visual appearance. To get a visually distinct result, the developer usually have to build something from scratch. The web has an advantage here with CSS, which helps separate presentation from structure and behavior. So you’d think web UI libraries would be bigger — but they’re usually not.</p>
<h2><strong>General-purpose web UI libraries</strong></h2>
<p>Web UI libraries (e.g., jQuery UI) operate under different constraints. They’re not really focused on ensuring a consistent user experience; even if a library is pretty successful, it’s still unlikely to significantly impact the user experience of the web at large. Rather, the primary goal of most web UI libraries is increasing developer efficiency. Devs don’t want to spend time rewriting modal dialog logic that’s been written many times before; a library providing a pre-authored dialog component can help them create dialogs more quickly.</p>
<p>Curiously, most web UI libraries still still end up with about the same number of 20–40 components as platform libraries. Possible explanations:</p>
<ul>
<li>Web libraries follow the example of platform libraries. It is turns out to be quite hard to think systematically about a large realm of user interfaces and identify the best decomposition of atomic elements that could most efficiently recreate it from scratch. It’s easier to emulate a set of elements someone else has already worked out in other UI libraries.</li>
<li>The limitations of HTML itself and the legacy of browser incompatibility have heretofore constrained the set of interesting components which can be created and easily integrated into other applications. These limitations have dampened the network effects required for a large component collection to gain critical mass.</li>
<li>The cost of maintaining the existing components increases with the number of components. By the time a library approaches a few dozen components, a small project’s entire bandwidth may be consumed by ongoing maintenance.</li>
<li>It becomes harder to maintain a library’s internal consistency with each additional component. A library&#39;s authors want consistent implementations and public APIs across all components in the library. Occasionally a new component forces reconsideration of the existing components, necessitating refactoring. Eventually the cost of adding a new component may become prohibitive.</li>
<li>Creating solid, general-purpose UI components is unglamorous, tiresome, and thankless work. Oh, and unprofitable, too.</li>
</ul>
<p>The answer may be some combination of these factors, but that doesn’t make the result any more satisfying. It’s still frustrating that no open web UI library is really comprehensive. The last three points, in particular, all apply equally well to any open web library operating below the level of the visible UI, and many of those have grown quite large.</p>
<h2><strong>Framework sample UI libraries</strong></h2>
<p>Some web UI libraries exist for a different reason: to provide samples of components which can be built with a given web framework. Components in such libraries effectively serve as framework documentation, and also as test cases for the framework. Their ability to simply function is what ensures other devs can build interesting, functioning components with the framework. While a few people may find the components interesting to use in their own right, that’s not really their main purpose.</p>
<p>To these ends, sample components tend to be somewhat specialized in their purpose. The trouble with creatint really good general-purpose UI components as sample is that such components are often fiendishly complex under the hood. They must exhaustively cover a wide range of configurations and edge cases, and such complexity can obscure or confuse the use of the underlying framework, which is the primary goal of the library. The result is that sample components tend to look visually interesting, but often aren’t directly reusable.</p>
<p>In any event, here again we see a fairly small number of components. Once the framework developers have delivered 10–20 examples, they may have already achieved good coverage of the framework’s features and provided ample sample code, so there’s little incentive to invest in creating more components.</p>
<h2><strong>Why can’t we just do all the common UI patterns?</strong></h2>
<p>I think a compelling criteria for a open web UI library would be to say: &quot;This library tries to provide all the UI patterns in widespread use on the web.&quot; That is, if a UI pattern appears in some reasonably interesting percentage of popular apps, then the library should provide a component delivering a solid baseline implementation of that UI pattern.</p>
<p>A comprehensive web UI component library sounds ambitious, but it’s not crazy. It&#39;s probably only an order of magnitude bigger than the tens of components in the OS and web UI libraries described above.</p>
<p>When I first started on the <a href="http://quickui.org/catalog">QuickUI Catalog</a>, my hope was to eventually create exactly that: a home for solid implementations of all common UI patterns. For a while now I’ve been looking at the emerging collection of web component technology standards to see if they can provide a good substrate for such a collection. The technologies are still coming together, but it now appears likely that a comprehensive UI library could indeed be delivered as standard web components. In the short term at least, such a library would need to be augmented with Google’s innovative and compelling <a href="http://www.polymer-project.org/">Polymer project</a>, which allows new web technologies like custom elements to function on older browsers.</p>
<h2><strong>Compiling a comprehensive list of UI patterns</strong></h2>
<p>To help make the case a comprehensive UI library is achievable, I’ve been compiling a list of every UI pattern I can find that seems common, general-purpose, and well-designed. Some notes on these criteria:</p>
<ul>
<li>Common: the UI pattern has to be something you encounter in multiple apps/sites. If a particular app invents some clever bit of UI, but it’s so unique to the app’s context that it’s not used (or can’t be used) elsewhere, it doesn’t belong in the library.</li>
<li>General-purpose: the pattern has to be applicable in multiple contexts and interesting in a range of products. Broadly speaking, this criteria generally excludes components which are directly bound to a proprietary web service. While a Facebook Like button component is certainly interesting and common, it’s tied to Facebook’s backend, and hence (in this context) not considered general purpose. In contrast, a UI component that shows blog headlines via RSS <em>is</em> defined as general purpose, because it can be used with any backend supporting RSS.</li>
<li>Well-designed. There are some common, general-purpose UI patterns that also happen to be terrible. There’s no need to make these more prevalent.</li>
</ul>
<p>Beyond conventional web UI patterns, I want this list to include mobile UI patterns, even those typically implemented in native code. My belief is that a mobile web app should be able to do anything a native mobile app can do, so I’d prefer to include (native) mobile UI patterns from the start.</p>
<p>This list comes from direct experience, as well as combing through various collections of UI patterns on the web. It’s by no means complete, but I think it can already serve to help estimate the initial size of such a library.</p>
<p>Without further ado, the list currently stands as follows...</p>
<h2><strong>An initial list of common, general-purpose web UI patterns</strong></h2>
<ol>
<li>Accordion. A list that can have a single item or multiple items expanded to show more detail.</li>
<li>Alphabetic indices. Renders the characters in a culture’s alphabet in standard order (e.g., as a vertical or horizontal strip). If supplied with a set of strings, the UI will disable those characters which are not found as the initial character of any string.</li>
<li>Async operation button. A button whose caption changes to reflect an operation in progress (e.g., changing from “Sign In” to “Signing In...”) until the operation completes.</li>
<li>Auto-complete. A text input field that helps the user quickly enter strings from a known list.</li>
<li>Auto-format. Applies a collection of heuristics for formatting text: adding smart quotes, converts double hyphens to endashes, etc.</li>
<li>Auto-size text box. A text area that expands to contain its text.</li>
<li>Backdrop. Shows a background region of non-interactive elements behind the region’s main contents.</li>
<li>Blog. Shows some or all of the entries in the indicated RSS feed.</li>
<li>Blog headlines. Shows the headlines of some or all of the entries in the indicated RSS feed as links to the full articles.</li>
<li>Breadcrumb bar. Indicates the user’s position in a navigational hierarchy.</li>
<li>Browser specific. Conditionally shows contents based on the browser being used and/or whether the current browser supports a given feature.</li>
<li>Calendar day. Shows a single day in a calendar.</li>
<li>Calendar month navigator. Lets the user select a date, typically in the near future, by navigating through calendar months.</li>
<li>Calendar month. Shows a single month from a calendar as a standard seven-column table, taking care to reflect a given culture’s preference for the first day of the week.</li>
<li>Calendar months. Shows multiple months from a calendar.</li>
<li>Calendar week. Shows a single week from a calendar as seven days in a row, taking care to reflect a given culture’s preference for the first day of the week.</li>
<li>Carousel. Lets user navigate laterally between panels with a sliding transition.</li>
<li>Central column. A region whose main central column is fixed in width, and horizontally&#0160;centered with respect to the viewport.</li>
<li>Checked list box. A list box showing a check box next to each item; the user can create a multiple selection by checking the boxes.</li>
<li>Close box. A platform-sensitive representation of a button that will close the current dialog or window.</li>
<li>Closeable panel. Shows information (e.g., a warning, or the result of a completed operation) that can be dismissed to remove the panel from the visible page.</li>
<li>Collapsible panel. A region that can be toggled between collapsed and expanded states.</li>
<li>Color wheel. Lets the user select a color in a variety of color spaces.</li>
<li>Combed text box. A text box sporting tick marks or vertical lines to visually indicate how many characters should be entered.</li>
<li>Content grid. A region which provides a sense of visual organization by dividing its width into a number of columns (e.g., 12) which can be variably spanned by content panels.</li>
<li>Content transition. When supplied with new content, transitions from the existing content to the new content using a common animated transition (fade, fade through black, slide, wipe, etc.)</li>
<li>Content with banner(s), such as toolbar (on top) or status bar (on the bottom).</li>
<li>Content with sidebar(s) on the left and/or right side.</li>
<li>Countdown clock. Represents the time (in days/hours/etc.) until a given point in time.</li>
<li>Credit card. Asks the user to supply a credit card and performs initial validation.</li>
<li>Date combo box. Lets the user type a date or choose one from a dropdown calendar.</li>
<li>Date range calendar. Lets the user select a date range, typically in the near future.</li>
<li>Date text box. Lets the user type a date in several culture-specific formats.</li>
<li>Days of week. Shows the names of the seven days of the week using a given culture’s day names in short/abbreviated/full format.</li>
<li>Delimited list. A list of items interspersed with a decorative element (bullet, vertical bar, etc.) for cleaner delineation.</li>
<li>Device specific. Conditionally shows contents based on the type of device being used and/or device capabilities.</li>
<li>Dialog. A popup window, typically modal.</li>
<li>Editable in place. An element that supports its own in situ editing.</li>
<li>Editable text. A piece of static text data which can be clicked to produce a text box that can then be used to edit the data.</li>
<li>Expandable summary. A block of content with a “More” link at bottom; clicking this reveals the remainder of the content.</li>
<li>Fader. Instead of clipping content, it fades out content on the right or bottom edge to suggest additional content exists but could not fit.</li>
<li>File uploader. Allows the user to click or drag-and-drop to supply a single file for upload.</li>
<li>Full screen region. A region supporting a mode in which the region will expand to fill the entire screen.</li>
<li>Full size-able. A region which fills the viewport, independent of the size of the page content.</li>
<li>Infinite list. A list which asynchronously loads additional contents as the user scrolls.</li>
<li>Labeled input. An HTML input control (generally a check box or radio button) with an associated clickable label.</li>
<li>Lateral navigator. A panel with previous and next arrows on either side, allowing the user to navigate laterally through a discrete set of states.</li>
<li>Link list. Uses a platform-sensitive presentation of a set of links (or items that behave like links).</li>
<li>List. Renders each item in a heterogenous set as a vertically stacked set of elements.</li>
<li>List box. A list that supports single selection, including keyboard navigation.</li>
<li>List combo box. A combo box which presents its choices as a dropdown list.</li>
<li>List with detail pane. A list box showing a set of items, paired with a means of showing properties of the selected item. These properties are either a pane (usually to the right) on desktop or tablet devices, or a separate page on mobile devices with smaller screens.</li>
<li>Log. Displays a growing text log showing, for example, the output of an ongoing process.</li>
<li>Markdown. Renders a block of Markdown as rich text.</li>
<li>Masked text. A text box which only accepts specified input characters.</li>
<li>Menu bar. A row of menus.</li>
<li>Menu item. A command in a menu.</li>
<li>Menu separator. A line separating commands in a menu.</li>
<li>Menu. A popup menu, often in a menu bar.</li>
<li>Mobile date/time picker. Platform-sensitive collection of elements which emulate the platform’s native date/time picker.</li>
<li>Modes. Shows exactly one item at a time.</li>
<li>Month and year. Shows the month and year of a given date in a format appropriate for a given culture.</li>
<li>Month name. Shows a given culture’s name for the month of a given date.</li>
<li>Multi list box. A list that supports multiple selection, including keyboard navigation.</li>
<li>Multiple file uploader. Allows the user to click or drag-and-drop to supply multiple files for upload.</li>
<li>Number with units. Facilitates entry of a number with units (e.g., “10 in.”, “5 minutes”, “60 kg”).</li>
<li>Overlay. A transparent or semi-transparent blanket over the entire page which absorbs interactions outside a modal element.</li>
<li>Packed columns. Packs its children into a dynamic number of columns of roughly equal height (e.g., see the Pinterest home page).</li>
<li>Page number navigator. Indicates the number of pages, e.g. of search results, and also allows navigation to a particular page of results.</li>
<li>Palette window. A persistent set of tools adjacent to, or superimposed on, a work surface, providing tools for manipulating the information on the surface.</li>
<li>Panel with overflow. A panel fixed in width or height which allows any items which don&#39;t fit to overflow into a dropdown menu.</li>
<li>Password strength assessment. Provides a rough assessment of the strength of a possible password.</li>
<li>Persistent header. A scrolling list in which the header for the group of items currently at the top of the visible list remains visible until the user scrolls the next group to the top. At this point, the new group header pushes the previous group header out of sight.</li>
<li>Persistent panel. A panel whose contents will bump up against the top or bottom of a scrolling parent so as to remain always visible.</li>
<li>Person name. A set of input elements for obtaining all or part of a person’s name.</li>
<li>Phone number. Allows entry of a phone number for a single locale or a range of global locales.</li>
<li>Popout. An item that can expand (e.g., on hover) without affecting the visual position of surrounding items.</li>
<li>Popup button. A button that produces a popup when clicked.</li>
<li>Popup source. An element which invokes a popup.</li>
<li>Popup. An element which temporarily pops up over other things. Can be modal or modeless.</li>
<li>Postal address. Allows entry of a postal address for a single locale or a range of global locales.</li>
<li>Postal code. Allows entry of a postal code for a single locale or a range of global locales.</li>
<li>Process steps. Shows a numbered list of steps in a task, disabling steps which are not yet available.</li>
<li>Progress bar. Indicates the fraction of an operation which has been completed.</li>
<li>Progress indicator. Platform-sensitive representation of an ongoing operation whose expected duration is unknown.</li>
<li>Pull to refresh. A region which the user can pull down to reveal a platform-sensitive “Pull to refresh” and “Loading” representation.</li>
<li>Radio button list. A list box showing a radio button next to each item; an alternative way to represent selection in a single-selection list.</li>
<li>Repeater. Creates a certain number of instances of another element class.</li>
<li>Ribbon. A space-sensitive presentation of a set of commands.</li>
<li>Rich text editor. Supports the basics: bold, italic, insert link, etc.</li>
<li>Rotating panels with dots. Rotates (once or indefinitely) through a sequence of horizontally-arranged pages, usually to add visual interest to a home page.</li>
<li>Search box. A text box with standard decorations (magnifying class, customizable “Search” hint) to suggest a search field.</li>
<li>Sequence navigator. A lateral navigator that lets the user navigate left and right through an ordered sequence of items.</li>
<li>Slider. Accepts a discrete number in a constrained range.</li>
<li>Sliding panels with dots. Sliding panels which add a series of dots to navigate its contents.</li>
<li>Sliding panels. Arranges a set of items on a horizontally sliding strip; only one item can be fully seen at any time.</li>
<li>Spin box. Accepts a discrete number, potentially in a constrained range.</li>
<li>Splitter. A movable line sitting between two panels which can be dragged to change their relative sizes.</li>
<li>Sprite. Shows a single image at a time from a strip or grid of images.</li>
<li>Stacked navigation pages. As the user navigates deeper in an app, a small residual portion of the previous page remains visible (typically on the left); the user can swipe away the top page to navigate back to an earlier point.</li>
<li>Star rating. Lets the user rate something (a restaurant, product, etc.) using the conventional star system.</li>
<li>Tab strip. A set of tab buttons, typically used to navigate among tabbed pages presenting different content, but which can also be used, for example, to apply one of a set of filters to a results list.</li>
<li>Tab. A tabbed page which can be hosted in a set of tabs.</li>
<li>Tabs. A set of pages which can be navigated by a set of tab buttons across the top.</li>
<li>Tag text box. Tokenizes text input into a set of tags, and provides auto-completion against a set of existing tags.</li>
<li>Text box with button. A control with a content area (usually some form of text box) and an associated button (“Go”, “Submit”, etc.).</li>
<li>Text condenser. Switches to a condensed font when necessary to squeeze in more text.</li>
<li>Time combo box. Lets the user type a time or choose one from a dropdown time picker.</li>
<li>Timeline. Positions items on a horizontal time axis.</li>
<li>Toggle button. A button the user can click to toggle its selected state.</li>
<li>ToolTip. A popup that appears when hovering the mouse over another element, providing more detail about that element.</li>
<li>Transient message. A message which briefly appears on a page before automatically disappearing. Typically used to display feedback after an operation has completed (e.g., “Message sent”) without requiring user acknowledgement.</li>
<li>Tree view. Visually renders a hierarchy of items as a tree whose branches can be expanded and collapsed.</li>
<li>Validating text box. Verifies that text box content meets some criteria.</li>
<li>Vote up/down. A pair of buttons to vote something up or down; can reflect the current state of the user’s vote.</li>
<li>Wizard. Steps the user through a task through a small set of pages.</li>
</ol>
<h2><strong>This seems totally doable</strong></h2>
<p>Okay, so there’s a little over 100 UI patterns in this list, suggesting that a comprehensive, general-purpose web UI library would contain a number of components of that order. (Some patterns may require implementation as multiple components.) You and I will likely disagree about the correct decomposition of a given UI into a set of patterns, or about the best way to implement a pattern with components, or about what everything should be called, but I’m guessing that debate won’t change the size of the list much.</p>
<p>More eyes on the problem — more people looking for common, general-purpose UI components — would certainly increase the size of the list, but probably not too much. For argument’s sake, let’s assume the list above captures little more than half of the general-purpose UI components the library should ultimately deliver. That still puts the list at only 200 components. My instinct is that any organizational strategy that can produce a library of 100 components can also produce 200 components.</p>
<p>There’s clearly some kind of existing inflection point when a library reaches approximately 40 components, or else we would see more libraries with more components. But I’m hoping the next inflection point won’t be reached until a much higher number of components. Specifically, it’s my contention that the apparent barrier of 40 components in a UI library can be breached with network effects.</p>
<p>That is, a key limiting factor to date which has prevent a comprehensive UI library (or marketplace, or ecosystem, whatever) has been the inability for one group to benefit from another group’s UI work. I hope web components, seeded with efforts like Polymer, will change this dynamic, enabling us to blow through this barrier and create easily sharable solutions to common UI patterns. As I’ve often said before, that will allow us to stop burning so much time reinventing things, and focus more of our precious time on delivering value unique to our apps.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: UI component whiteboard talk: The Web Still Needs a Vibrant UI Ecosystem
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 0
BASENAME: the-web-still-needs-a-vibrant-ui-ecosystem

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2013/02/the-web-still-needs-a-vibrant-ui-ecosystem.html 
DATE: 02/11/2013 08:00:00 AM
-----
BODY:
<p>I&#39;ve been considering putting together a video screencast sharing some thoughts on web UI components, covering the case for why we need them, some limited solutions today, the prospects for the Web Components standard, and the principles behind my own work on the <a href="http://quickui.org">QuickUI</a> web component framework. It&#39;s been my experiencing that producing even a very short video takes gobs of time, but it occurred to me that I could break up the talk into short segments, perhaps 5 minutes or less in length. As an experiment, I created this short (4 minute) intro video:</p>
<p>&#0160;</p>
<p><iframe frameborder="0" height="315" src="http://www.youtube.com/embed/SnwiFWIhqYA?rel=0" width="560"></iframe></p>
<p>&#0160;</p>
<p>WheneverI speak in group settings, I always find myself sketching ideas on the whiteboard, so I thought that a whiteboard talk might be a reasonable format for a web video – perhaps that can strike a good balance between something that&#39;s engaging while also not incredibly time-consuming to produce. In the course of considering how to make such a whiteboard talk, I came across an interesting iPad app called <a href="https://doceri.com/">Doceri</a> that lets you project your iPad sketches onto a desktop computer. Doceri includes its own complete screencast production tool, but unfortunately the audio quality of an iPad&#39;s built-in mic isn&#39;t great, and editing on an iPad is currently cumbersome. I ended up projecting the Doceri project onto a desktop window, capturing the window contents with Camtasia, then laying down the audio narration in Camtasia and doing final editing there.</p>
<p>I hope you find this short video interesting. If this seems worthwhile, I might follow up with additional segments on a semi-regular schedule.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: David Grayson
EMAIL: davidegrayson@gmail.com
IP: 24.234.181.150
URL: http://www.davidegrayson.com/
DATE: 02/13/2013 01:07:51 PM
That was worthwhile!  I'm looking forward to the next video.
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 67.185.162.218
URL: http://profile.typepad.com/jan_miksovsky
DATE: 02/13/2013 01:54:33 PM
David: Thank you! I'm looking forward to doing more. I might tackle the next one in early March.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: A 2013 wall calendar optimized for project management discussions
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 1
ALLOW PINGS: 1
BASENAME: a-2013-wall-calendar-optimized-for-project-management-discussions

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2013/01/a-2013-wall-calendar-optimized-for-project-management-discussions.html 
DATE: 01/16/2013 07:26:00 PM
-----
BODY:
<p>In many project discussions, it’s been my experience that two calendar-related questions constantly arise:</p>  <ol>   <li>On what day of the week will date <em>x</em> fall? Example: We’d like to make our next release on or around the 15th of next month. Is that a weekend? </li>    <li>What is the date of a given day of the week <em>n</em> weeks from now? Example: We usually publish releases on Thursdays. If we want to release Thursday of next week, what date is that? </li> </ol>  <p>For several years, I searched for a large wall calendar I could hang in meeting rooms used for project discussions, but couldn’t find anything suitable. Calendar companies still living in the dark ages make the calendar dates unnecessarily small to leave extra room for <em>writing information directly on the calendar by hand</em>. That’s useless to me. I don’t want to track vital project information on the physical wall of a meeting room; I want to track it online where everyone can see it. Nor does a meeting room need a calendar decorated with scenic pictures. Finally, a giant wall calendar that only shows a month at a time is too limited in scope. All I want is a wall calendar that answers the two questions above.</p>  <p>If you want to design a calendar with only the above two goals in mind, I think the logical conclusions are:</p>  <ul>   <li>The dates should be as large as possible so that they can be read from far away. Ideally, it should be possible for someone sitting across the room to answer the questions above.</li>    <li>A corollary of the above point is that the calendar should have a minimum amount of border junk. Borders can be helpful where you’re scrawling information onto a calendar, so you can keep track of which notes go with which dates, but aren’t necessary if the only information on the calendar is the dates themselves.</li>    <li>The calendar should display several months at once. Project management discussions look beyond the current month, often several months into the future.</li> </ul>  <p>Since I couldn’t find a wall calendar that incorporated these principles, I put one together myself:</p>  <p>&#160;</p>  <p><a href="https://docs.google.com/file/d/0B0qD1pAM8eYlMjVWUEZjaTBrMUU/edit" target="_blank"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="Wall Calendar 2013" border="0" alt="Wall Calendar 2013" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2017d400d7165970c-pi" width="371" height="480" /></a></p>  <p>&#160;</p>  <p>I’ve now used such calendars for a number of years, and they work great. It’s very easy for anyone in a meeting to quickly answer the key date questions above. I also find it handy to keep one at my desk — glancing at the wall is faster than launching a calendar gadget.</p>  <p>Since other people like these, I thought I’d put these into the public domain. If you find them useful as is, great. Otherwise, feel free to remix to suit your own needs.</p>  <ul>   <li><a href="https://docs.google.com/file/d/0B0qD1pAM8eYlMjVWUEZjaTBrMUU/edit">PDF version</a> (U.S.). For a small room, a standard printer will do fine. If you want to use this in a large room, print the PDF at a copy service such as FedEx Office which offers poster printing. I’ve printed these at poster size and they work great.</li>    <li><a href="https://docs.google.com/file/d/0B0qD1pAM8eYleWpJZ0wtd0R5TVU/edit">Microsoft Word</a> (U.S.). The gray weekend dates show up in Google Docs’ preview, but they’re there if you download the file.</li> </ul>  <p>The calendars above are U.S.-centric, with the first day of the week on Sunday, and with U.S. federal holidays highlighted. A friend asked for an international English version, with the first day of the week on Monday, so I’ve also created <a href="https://docs.google.com/file/d/0B0qD1pAM8eYlbVNMeFNSejVEbkU/edit">PDF</a> and <a href="https://docs.google.com/file/d/0B0qD1pAM8eYlSkdrMjdIb1d1dE0/edit">Microsoft Word</a> versions of that. These have no holiday highlighting.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: blink
EMAIL: blink314@operamail.com
IP: 69.161.81.119
URL: 
DATE: 01/16/2013 01:24:54 PM
For another take on a similar theme: <a href="http://davidseah.com/compact-calendar/">http://davidseah.com/compact-calendar/</a>
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Designing by Making: your process for arranging furniture can point toward a good process for UI design
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: designing-by-making

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2012/11/designing-by-making.html 
DATE: 11/13/2012 08:00:00 AM
-----
BODY:
<p>The last time you had to arrange the furniture in your home — did you create a design first? No. You had a design <em>idea,</em> and then immediately jumped into implementing your idea by moving the sofa and table around until the result felt good.</p>
<p>&#0160;</p>
<p><img alt="Moving Furniture" border="0" height="399" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2017ee505cde5970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Moving Furniture" width="600" />    <br /><em><span style="font-size: x-small;">Hmm… let’s try putting this over here…</span></em></p>
<p>&#0160;</p>
<p>Consider these attributes of the typical process for arranging furniture:</p>
<ol>
<li>You do it yourself. If you have enough money, you might tell movers where to put the heavy things first, but you’re still directly involved, and you’ll end up pushing things around yourself before it’s all over.</li>
<li>You work directly with the furniture and the space, without recourse to a single design artifact. Think about it: in the time it would take to create a scale model of a room and the furniture to sufficient accuracy that it could actually inform your decisions, you can finish the task of moving the real furniture into place.</li>
<li>You can never predict whether a layout will completely work until you’ve actually gotten things in place. Once the pieces are in place, you <em>always</em> discover something unexpected. You move your desk so it faces the door, then sit in the desk chair and realize you can’t see the view out the window. So you turn the desk around to face the window, then get a creepy feeling that someone might sneak in the door and creep up behind you without your knowledge. Each layout you try teaches you something.</li>
<li>The process is inherently iterative. You start with an idea, and iterate through various layouts until you converge on an acceptable result (or you’re tired of moving stuff around).</li>
</ol>
<p>You can design software user interfaces this way too.</p>
<p>I had a chance to speak about my own design process at a talk I gave last month at the California College of the Arts in San Francisco, to an engaged audience of interesting students in the school’s MBA in Design Strategy program. There I discussed how my own design process has changed substantially&#0160;in the last five years to become something I might call designing by making. In this process, the design of a software experience is inseparable from the coding of that experience. In this regard, the process has a lot in common with arranging furniture.</p>
<p>Many contemporary design process artifacts like field interviews, a wall of post-it notes, and paper prototypes reflect an increasingly antiquated premise: that building a real thing is much more expensive than producing a design. Historically, it has been true that designing software with a complex user interface was a minor cost compared to the labor of actually writing the code. In my early days at Microsoft, one might have seen a ratio of one designer to five to eight engineers (developers and testers), because even primitive tasks like obtaining user input or positioning interface controls in a window entailed such extensive, labor-intensive coding. It seemed sensible to invest considerable thought and time in the design phase because it could be many months before the designer would get to experience the actual product for the first time. Unfortunately, that moment of enlightenment often didn’t come until the fully-functional pre-beta builds arrived roughly two-thirds of the way through the product cycle. At that point, when the designer inevitably has new insights into the best design, any big design changes would often needed to be deferred until the next version.</p>
<p>Much software is still designed this way, even though the economics of user interface implementation have changed radically. The effort required to create useful, functional, beautiful, reliable, and performant software application user interfaces has been dropping for years, and this trend will continue for the foreseeable future. About five years ago, the technology reached the point where it became possible for me to create web applications directly. Rather than working in Photoshop, Microsoft Word, or a prototyping tool as before, and handing these designs off to an engineer, I can now directly create the user interface design in code myself.</p>
<p>This is roughly as expensive as the old way of doing things, but with the significant advance that I am now working with a functional artifact — a working user interface — from the very beginning. This turns out to be a transformative difference. Just as you can never predict all the ramifications of a particular furniture layout, you can never fully predict the strengths and weaknesses of a UI design.</p>
<p>Instead, I currently believe it’s best to design something by making it.&#0160;This means it’s generally not worth a great deal of time to consider the hypothetical implications of a theoretical design. (“Will the user find this clear?”, “Will this meet the user’s needs?”) It’s faster to just build something that actually works, then immediately <em>observe</em>&#0160;whether it is good or not. Instead of viewing design as a predecessor to making, this is designing by making. The process looks just like the process above:</p>
<ol>
<li>Do both the design and coding yourself.</li>
<li>Work directly in code, without recourse to other design artifacts. If you’re working with good tools, in the time it would take to create an accurate static image of what you want, with all the specs that would go along with that, you can instead create a functional design that actually does what you want.</li>
<li>Know that you will be unable to predict whether a design will completely work until you actually having a working interface.</li>
<li>Build your schedule around iteration. You start with an idea, and iterate through various approaches until you converge on an acceptable result (or you’re tired of moving stuff around).</li>
</ol>
<p>This process isn’t for everyone. There are software domains that don’t entail a user interface (Mars landers, say), where a traditional, process-heavy design phase obviously holds true. And not all designers can code, nor can all coders design. But I believe that designing by making does allows someone who can do both well to iterate much faster from an idea to a usable interface than a designer who is forced to rely on someone else to write the code.</p>
<p>I believe that in the near future, most software application design will look like this. The trends simplifying the coding of user interfaces will continue and accelerate, as better design/coding tools permit the construction of better design/coding tools. <a href="http://miksovsky.blogs.com/flowstate/2012/09/axiomatic-user-interface-framework.html">Component-oriented user interface frameworks</a> will allow people to spend less time designing and coding the details of common patterns.</p>
<p>Furthermore, companies with experience in creating tools like Adobe are now waking up to the realities of a post-Flash world, in which the open web is the real application platform to focus on. (Microsoft is also slowly waking up to the prospect of a post-Windows client world, although that change will take much longer, and I’m not sure they’ll be able to change fast enough to stay relevant.)&#0160;Generally speaking, I have high hopes for innovation in the realm of tools and frameworks, all of which should make it more and more practical for someone like you to do both the design and coding yourself.</p>
<p>Today, it is already possible to have a design process built around coding that is as efficient — or, often, more efficient — than a traditional, artifact-heavy, pre-coding design process. What’s more, the tool chain will ultimately improve to the point where designing a user interface will be <em>as fast as arranging furniture</em>.&#0160;In the time it takes you to say, “Let’s try moving the bookcase over
there”, and actually move the bookcase, you’ll be able to say, “Let’s try a
tabbed navigation approach”, and actually switch a design to using tabbed navigation. Imagine what it will be like to design
software like<em> that</em>.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: An axiomatic approach to defining user interface elements: building complex elements from simple ones
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: axiomatic-user-interface-framework

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2012/09/axiomatic-user-interface-framework.html 
DATE: 09/17/2012 09:11:59 AM
-----
BODY:
<p>Just as geometry builds up complex results from simple axioms, and programming languages build up complex constructs from simple primitives, it should be possible to create complex user interface elements from simple elements. But the lack of great building blocks for web user interface components causes people to waste a colossal amount of time reproducing common behaviors or, worse, forces them to settle for something quick but suboptimal.</p>
<p>Take something as basic as tabs. Every web UI package includes a widget or component that produces a set of tabs, such as the typical example from <a href="http://jqueryui.com">jQuery UI</a>:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2017c31c6424d970b-pi"><img alt="image" border="0" height="277" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2017d3bf49d7d970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="image" width="505" /></a></p>
<p>&#0160;</p>
<p>While a tab set may seem to be an irreducible unit of user interface complexity, we can actually decompose its behavior into smaller, simpler chunks:</p>
<ol>
<li><strong>Ensuring a single element within a set is “active” at any given time.</strong>&#0160;Here, only one of the tab buttons is in the active state. There are many other manifestations of this behavior. Single-selection list boxes, for example, also have a notion that a single item in the list is active.</li>
<li><strong>Showing a single element a time. </strong>The main region of the tab set shows a single page which corresponds to the active tab button. The active page is the only one that’s shown; the non-active pages are hidden. This behavior comes up in situations other than tabs. For example, photo “carousel” controls let a user page through photos one at a time, generally with previous/next buttons instead of a tab strip. </li>
<li><strong>Showing a set of identical elements that correspond to items in a list. </strong>The strip of tab buttons across the top has an internal consistency: every tab button is represented with the same type of button.</li>
<li><strong>Positioning one collection of elements directly above another.</strong> Here, the strip of tab buttons is stacked on top of the tabbed pages. This kind of layout seems so simple as to not deserve consideration. However, in current web browsers, this can be frustratingly difficult to achieve in the common cases where the size of the tab set is flexible. Suppose you want the tab set to fill the viewport, or a region of the viewport. The tab strip should consume a given height (which for a variety of reasons should not be fixed beforehand in, say, pixels), and the remainder of the space given over to the tabbed pages. This type of layout can be achieved with a <a href="http://www.w3.org/TR/css3-flexbox/">CSS flexbox</a>, but at least for a little while longer, many app developers will need to support older browsers (i.e., IE). </li>
<li><strong>Giving UI elements a description which can shown elsewhere.</strong> The pages shown within the tab set are rectangular regions, but the <em>name</em> of the tab is shown outside. It’s fairly common to want to give a UI element a user-friendly name like this.</li>
<li><strong>Letting a user tap or click a button to achieve a result.</strong> That is, the elements in the tab strip behave like buttons.</li>
</ol>
<p>It should be possible to create UI classes that implement each of these more fundamental behaviors or aspects. It should then be possible to exploit these behaviors on their own, or recombine them with other behaviors to produce other recognizable user interface controls. In effect, we should be able to arrive at fundamental behaviors that behave like the axioms in a mathematical domain or, alternatively, like atoms in a physical system of elements.</p>
<p>The domain of computer science has much to say on the topic of axiomatic design. Programming languages are often predicated on the notion that you can boil down everything you’d want to do in the language to a tiny set of primitive functions. It’s only this small set of primitives which <em>must </em>be written in a lower-level language (e.g., a machine language). Everything else can be built up in the language itself. This not only keeps things clean, it ensures the language’s popularity and survival by facilitating the porting of the language to new platforms — only the primitives must be rewritten, and all the remaining code built on top of the primitives can be used as is. The original example of this axiomatic principle in language design was Lisp, whose story Paul Graham recounts in his article <a href="http://www.paulgraham.com/rootsoflisp.html">The Roots of Lisp</a>. (The full article is available on his site in the <a href="http://lib.store.yahoo.net/lib/paulgraham/jmc.ps">original Postscript version</a>, or in various <a href="http://www.scribd.com/doc/45120227/jmc">converted PDF versions</a>.) From his article:</p>
<blockquote>
<p>In 1960, John McCarthy… showed how, given a handful of simple operators and a notation for functions, you can build a whole programming language.</p>
<p>[McCarthy’s] ideas are still the semantic core of Lisp today. It’s not something that McCarthy designed so much as something he discovered. It’s not intrinsically a language for AI [artificial intelligence] or for rapid prototyping, or for any other task at that level. It’s what you get (or one thing you get) when you try to axiomatize computation. … By understanding [Lisp] you’re understand what will probably the main model of computation well into the future.</p>
</blockquote>
<p>Can we determine a similar axiomatic deconstruction of user interface elements? That’s a topic I’m acutely interested in, and I believe the answer is yes. Even through graphical user interfaces span a range of devices, platforms, and frameworks, the underlying collection of distinct user interface behaviors is quite consistent: clicking one thing something makes something else appear; items in lists are given consistent representations and behavior; modes (for both better and worse) constrain the user’s attention and powers; and so on. It should be possible to boil those consistent behaviors into reusable code.</p>
<p>The result of this decomposition is a set of UI primitives which is significantly bigger than the canonical tiny set of user interface controls: a push button, a radio button, a check box, a text box. Of all the aspects numbered above, only #6 (push buttons) are available as a native browser control. Web developers are generally forced to recreate all the other aspects through combinations of CSS and JavaScript. That&#39;s inefficient and error-prone. As noted above, even something as seemingly straightforward as stacking two regions on top of one another can prove unexpectedly complex.</p>
<p>The actual set of web UI primitives is probably an order of magnitude larger than what browsers expose as interactive UI controls. At the same time, the set of really general purpose contemporary UI (see this article for <a href="http://miksovsky.blogs.com/flowstate/2012/06/reinventing-the-ui-wheel.html">a breakdown of UI elements by context-specificity</a>) is not so large it can&#39;t be enumerated or understood. For today’s typical mobile or web application, I believe a reasonably comprehensive collection of UI primitives would number in the 100 – 200 range.</p>
<p>What would those primitives be? My work on the <a href="http://quickui/catalog">QuickUI Catalog</a> is an attempt this question. It’s a work in progress, and is by no means complete. It currently includes controls which shouldn’t be there (they’re really just sample uses of an underlying component), and on the other hand doesn’t (yet) include enough controls for common situations like mobile. Nor is the set of controls completely stable yet. I occasionally realize two controls exhibit similar behavior whose implementation should (or shouldn’t) be shared, which results in both minor and major refactorings. Nevertheless, the Catalog already represents a highly useful starting point for creating application UIs.</p>
<p>Let’s return to the tab set example above. The QuickUI Catalog includes a <a href="http://quickui.org/catalog/Tabs">Tabs</a> control for this purpose, which can be used as is. But that Tabs control is simply a combination of lower-level components corresponding to the attributes listed above:</p>
<ol>
<li>A <a href="http://quickui.org/catalog/Sequence">Sequence</a> base class. A Sequence control keeps track of which one (and only one) of its children is currently active.</li>
<li>A <a href="http://quickui.org/catalog/Modes">Modes</a> control. Extends the Sequence class to hide everything but the active child.</li>
<li>A <a href="http://quickui.org/catalog/List">List</a> control. Maps an array of internal data items to an array of user-visible controls.</li>
<li>A <a href="http://quickui.org/catalog/VerticalPanels">VerticalPanels</a> control. Stacks things vertically. This inherits from <a href="http://quickui.org/catalog/SimpleFlexBox">SimpleFlexBox</a>, a user interface <a href="http://en.wikipedia.org/wiki/Polyfill">polyfill</a> which uses a CSS flexbox for layout on modern browsers, and a manual engine for layout on older browsers. </li>
<li>A <a href="http://quickui.org/catalog/Tab">Tab</a> control. Associates a description property with an arbitrary block of content. It&#39;s this description the Tabs control displays in a List of buttons across the top.</li>
<li>A <a href="http://quickui.org/catalog/BasicButton">BasicButton</a> control. This wraps the browser’s native &lt;button&gt; as a component. Among other things, this allows a BasicButton to be used to render items in the List (above) to create the strip of tab buttons.</li>
</ol>
<p>All these derive from a common <a href="http://quickui.org/catalog/Control">Control</a> base class.</p>
<p>We can show the relationships between all these classes in a graph, where a solid line represents an “is a” relationship (one class derives from another) and a dotted line shows a “has a” relationship (one class makes use of instances of another class):</p>
<p>
<a class="asset-img-link" href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2017744a4ea90970d-pi" style="display: inline;"><img alt="Tabs" border="0" class="asset  asset-image at-xid-6a00d83451fb6769e2017744a4ea90970d image-full" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2017744a4ea90970d-800wi" title="Tabs" /></a></p>
<p>This arrangement entails a lot more pieces than a typical web user interface platform.&#0160;The browser itself only provides a native button. Most existing web user interface frameworks provide some button class wrapper (such as BasicButton here) and a tab set class (Tabs). They may or may not expose a general purpose UI component base class (here, Control). The tab set class is typically fixed in a monolithic implementation, and can only be modified via parameters the framework designers have anticipated beforehand.</p>
<p>Traditional client-side UI frameworks (e.g., Windows Presentation Foundation) do have rich class hierarchies, although even their UI primitives tend to be too course-grained. And&#0160;contemporary web UI frameworks rarely have good building blocks. (Some people claim the <a href="http://www.sencha.com">Sencha</a> framework does, but it&#39;s unfortunately encumbered with developer licensing fees, and requires you to build your app on top of a proprietary substrate. To me, that&#39;s moving in the exact opposite direction of web development trends.)</p>
<p>The main obstacles to UI like this on the web may have multiple causes, including the fact that the web&#39;s primary client-side programming language JavaScript, still has no native support for traditional object-oriented classes. Moreover, the browser doesn&#39;t yet expose a model for modular component composition, which creates a lot of work for a UI framework&#39;s creators.</p>
<p>In the above implementation of a tab set, all the lower-level pieces are directly available to the user interface designer and developer. These can be used on their own, or combined with other types of elements to create other user interface elements. And, significantly, new elements constructed with this approach are, by default, extensible and recombinable in their own right.&#0160;In a subsequent post, I plan to show some of the other sorts of UI controls which can be created by combining some of the pieces above in different ways.</p>
<p>As noted above, this Catalog implementation isn’t perfect. Among other things, there are inherent limitations on what you can achieve with a classic single inheritance hierarchy. But, overall, this feels like a promising direction, and in practice is a highly efficient way to create web apps. Above all, this axiomatic approach feels like the right <em>paradigm</em> for building UI.</p>
<p>McCarthy&#39;s big advance with Lisp wasn&#39;t to create programming language primitives — all programming langauges have primitives. His insight was that the primitives in programming languages of the time&#0160;<em>weren&#39;t primitive enough</em>. Instead, you should break a language into irreducible axioms, and let people combine those axioms to create any new language functions they need. The functions you create with those Lisp primitives are just as powerful as any pre-packaged functions created with those same primitives by the language&#39;s designers. That is, there&#39;s nothing special the language designer can do you which you cannot also do.</p>
<p>Similarly, a UI platform should give you a powerful set of axiomatic appearances and behaviors and a means to combine them to create new elements which are every bit as powerful as those elements that come bundled with the platform. This is why attempts to build a tiny handful of new controls into web browsers &#0160;is almost completely uninteresting to me. A new date picker in the browser, to take just one example, is just&#0160;<a href="http://miksovsky.blogs.com/flowstate/2011/11/datecombobox.html" target="_self">never going to solve your date picker needs</a>. It&#39;s like the FORTRAN committee adding yet another hard-baked statement to the language. What&#39;s infinitely more interesting is a UI platform that gives you the building blocks you need to build a date picker of your own that&#39;s as powerful as anything in the browser itself.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: BZ
EMAIL: 
IP: 199.27.200.82
URL: 
DATE: 09/19/2012 09:16:17 AM
What do you mean by natively provided by the browser? What about input type checkbox and radio? How are those any less native than buttons?
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 64.134.142.107
URL: http://profile.typepad.com/jan_miksovsky
DATE: 09/20/2012 05:17:14 PM
BZ: By "native" to the browser, I mean all the interactive elements defined in HTML itself. This is basically the  elements, and arguably some aspects of other elements with defined interactions. (E.g., an element with a title attribute will generally produce a tooltip). So a checkbox or radio button would count as native by that definition. My complaints are that this set of these native interactive components is very small, and that you can't build first-class components like those yourself (yet).
-----
COMMENT:
AUTHOR: BerndR
EMAIL: berndr@gmail.com
IP: 193.41.37.3
URL: 
DATE: 11/28/2012 06:18:44 AM
Hi BZ,
Unfortunately the comments for your article on web menus is already closed, so please allow me to float an idea here:
Why not use the browser menu bar for web applications? The browser itself should be allowed a "Firefox" or "Safari" menu for its settings (similar to the Apple menu on the Mac) while the application designer could build an application specific application menu structure. The browser could lend things like "Print" a hand (just like the OS does to the browser).
This way, menus would automatically blend into the host OS - Apple users could just push their mouse upward to hit the right one while Windows users could hang on to their target exercises.
I think that future versions of browsers should behave like that (at least offer an "application mode"). Is this wishful thinking or do you think this is already on the horizon?
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Evidence suggesting more than half of web app UI code is reinventing results already achieved many times before
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: reinventing-the-ui-wheel

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2012/06/reinventing-the-ui-wheel.html 
DATE: 06/19/2012 08:00:00 AM
-----
BODY:
<p>Web app designers and developers spend a staggering amount of time recreating common effects and behavior that have already been done many times before on other sites, or within their own organization, or in their own code on previous projects, or — worse yet — in their <em>own</em> code on the <em>same </em>project. You may spend days and days carefully reproducing common UI behavior that can readily be found in other apps: menus, dialogs, in-place editing, progress feedback, and on and on. The web wasn’t built to solve those problems, so <em>you </em>have to solve them — over and over again.</p>
<p>This situation is already at least partially avoidable with current web frameworks that permit the creation of reusable UI components. As a case in point, I recently created a <a href="http://quickui.org/docs/contacts.html">sample Contacts application</a> in the <a href="http://quickui.org">QuickUI</a> framework. The app sports a reasonably interesting user interface, but the bulk of its behavior is driven by shared components from the <a href="http://quickui.org/catalog/">QuickUI Catalog</a> that provide layout, visual effects, editing behavior, list management, and keyboard navigation.</p>
<p>Having built a handful of web apps in QuickUI now, there’s a pretty clear pattern to the <em>balance</em> of UI components used in these apps: about half of the UI code is comprised of components directly from the Catalog or from previous projects. And, in every case, the project itself has generated new, sharable UI components.</p>
<p>Look at your app’s UI elements — at every scale, from page, to region, to widget, to tiny little visual element — and ask yourself: has anyone done this before? Will someone do it again? If this were a component, could I be sharing it with someone down the hall, or at another company? In asking these questions, you’ll generally need to scrape away purely stylistic attributes such as color and typography, and focus more closely on behavior.</p>
<p>As you consider these question of UI reusability, it becomes apparent that the <em>audience</em> for a reusable UI element varies in size, depending on the degree to which the UI is solving a problem that comes up in other contexts. Some UI is completely specific to the context of a single feature, while some UI patterns are extremely general and come up everywhere.</p>
<p>It’s possible to categorize your UI elements according to this aspect of context-specificity. Having created a half dozen or so web apps of reasonable complexity in the component-orient QuickUI framework, the proportional breakdown across these categories has been very consistent. This leads me to hypothesize that the general proportions of these categories are roughly consistent across most web apps.</p>
<p>&#0160;</p>
<h3>Categories of reusable user interface components across apps</h3>
<p>Such a breakdown might look like this, ordered from most context-specific to most general:</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20176159de0c8970c-pi"><img align="right" alt="UI Component Layers (Reduced)" border="0" height="456" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2016306b4f1d9970d-pi" style="background-image: none; margin: 0px 0px 20px 20px; padding-left: 0px; padding-right: 0px; display: inline; float: right; padding-top: 0px; border-width: 0px;" title="UI Component Layers (Reduced)" width="258" /></a></p>
<ul>
<li><strong>30% Feature-specific UI. </strong>These are elements you create to define the UI for a specific feature: an Update Account Settings page in a web app, or a custom popup that applies to just one list. You take more basic controls (usually drawn from the categories below), compose them together in a unique combination, and wire them up with context-specific interactivity to achieve a specific task. By definition, this category of UI code is <em>not </em>reusable. If you find an opportunity for reuse here, you can factor that code out, but then you should group it one of the other categories. </li>
<li><strong>10% App-specific UI.</strong> Any app with more than one feature will have UI elements which are consistent across those features, and those consistencies can be implemented as reusable components. UI elements you might use across multiple features within a given app might be: page templates, templates or controls for table or list elements, a custom type of touch menu used in multiple situations, and so on. You can think of this set of UI as your app’s design language: a more focused expression of your organization’s overall design language (below).If you work on a good team, it should be straightforward to find and take advantage of such opportunities. </li>
<li><strong>10% Company-specific UI.</strong> Everything your company or organization does has <em>some </em>(maybe not enough?) consistency in its user interfaces. Perhaps you all follow a convention for app home pages, or a standard way to handle user commenting, or maybe your company prefers using multi-step wizards for complex tasks. These are the UI elements that distinguish your company’s output from that of other companies working in your industry. That is, this category defines your company’s design language: the UI solutions that make your apps recognizable to your users. (If your company makes only one app, then you can lump this category together with the App-specific UI category above.) While in company leaders may assume that everything in this category should be freely leveraged across the company as a strategic advantage, in practice this category often presents the most vexing practical challenges to reuse: office politics, conflicting project schedules, and a lack of way to secure or account for funding on shared work. </li>
<li><strong>20% Domain-specific UI.</strong> Everyone working in your industry works in the same problem domain. If you’re struggling to figure out the best way to visually represent a complex data set, or to get a credit card number from a customer, then others in your industry are too. You may be lucky enough to work in a cooperative domain, but chances are, those other people will be your competitors, and so for business reasons your company may not be inclined to share implementations, and may in fact fight tooth-and-nail to avoid their replication in competitive products. If you’re in that boat, then this category of UI code can effectively be combined with the Organization-specific UI category above. That is, your company will end up with private implementations of solutions that could be shared in theory, but in practice is company-specific. But occasionally even competitors may recognize the value of sharing work. For example, a shared solution might benefit your industry’s <em>customers</em>, and the result payoff for all your companies may be great enough to overcome corporate resistance to sharing. </li>
<li><strong>30% General purpose UI.</strong> These are the common UI patterns that <em>everyone </em>spends time coding up today: context menus, paginated search results, docking toolbars, and so on. Very few companies <em>want</em> to spend time on this stuff, because it’s just too far removed from any company’s core competencies. Everyone wants to focus on the categories above; no company believes they are going to beat their competitors with their excellent implementation of tab buttons. So most companies rush through the creation of these components, getting many of the details wrong. This UI category contains everything that <em>should </em>have been baked into the web, if only the web had been designed for creating real applications instead of sharing scientific research documents. As browsers evolve, the set of shared solutions here is expanding, but only at a glacial pace. In the meantime, we all have this chunk of UI problems to solve, and there is an enormous opportunity to share UI code here. At the same time, the broad set of possible consumers of any given UI component implies a significant challenge in establishing consensus. The UI code in this category should be written <em>once</em> (or maybe, because we could never get everyone to agree on anything, written a tiny handful of times) and never written from scratch again. </li>
</ul>
<p>&#0160;</p>
<p>The percentages I’ve given above are rough, but drawn from examining the UI code in apps I’ve written over the last few years. Those apps were already carefully componentized, and focused on code reuse, so I expect a more thorough analysis of more web apps would confirm that the numbers above are conservative. That is,&#0160;the actual degree of unnecessary reimplementation in a typical web application is probably far higher.&#0160;Without a component foundation, the most expedient way to replicate a given behavior is often to cut-and-paste it from somewhere else in the app’s source, then hack on the result to fit the new context. The app may not only be reinventing the UI wheel, but doing so multiple times in the same codebase.</p>
<p>If the above breakdown is even roughly correct, then consider a new web company entering an existing market who writes their app UI entirely from scratch. Even if it were extremely well-factored, 50% of all the UI code they write would be reinventing the wheel, solving domain-specific or general purpose UI problems which have already been solved before. While that sounds extreme, it’s probably not that far off the mark for most companies. While most apps consume at least some third-party UI elements (to implement a Facebook “Like” button, say), in many cases the typical company is just nibbling at the edges of the problem. And, if we assume that office politics and other factors prevent them from sharing code internally, the percentage of unnecessary re-invention may be much higher.</p>
<p>No matter how you slice it, chances are that&#0160;<em>most app teams are writing way too much UI code</em>.&#0160;Because the web lacks a real component model, most companies write reams and reams of non-modular, non-reusable UI code. If they were to build their apps on a UI framework that let them use and extend components, they could probably avoid writing much of the UI code they write today. To put this in business terms: if they were to componentize their UI effectively, they could get the same amount done in half the time or with half the resources. Obviously adopting a component strategy and reusing components have costs of their own, but I expect those are dwarfed by the mind-numbing scale of solving the same problems again and again.</p>
<p>There already are component frameworks for developing web app user interfaces. I’m obviously heavily invested in QuickUI, but you can find others out there as well. Given the huge savings they can make possible, they’re worth a look.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Update
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: update

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2012/05/update.html 
DATE: 05/22/2012 08:00:00 AM
-----
BODY:
<p>For the past two months or so, I’ve left off from my weekly blogging habit here to focus on some behind-the-scenes aspect of QuickUI. I post about those updates on the separate QuickUI blog. That blog is more technically-oriented, but I though it was worth sharing a roundup of those posts here:</p>
<ul>
<li>I’ve made a number of improvements to the QuickUI runtime, including a <a href="http://blog.quickui.org/2012/05/15/quickui-0-9-a-significant-update/">significant version update</a>. One interesting new feature is support for creating UI in CoffeeScript (in addition to plain JavaScript). </li>
<li>A developer asked for sample application code showing how to use QuickUI as the “View” in an application with an MVC (Model-View-Controller) architecture. That’s a great idea, and to date I haven’t had such a sample I could offer. Cozi’s <a href="http://www.cozi.com/Meal-Planner.htm">Meal Planner</a> is actually a Model-View-Presenter that uses QuickUI for the View, but the source for that application is proprietary. It’ll be useful to have an interesting MVC/MVP sample application that shows off how to use QuickUI; I’ll post back here when I have something worth looking at. Thanks for the suggestion, Chris! </li>
<li>I continue to be interested in making sure the emerging Web Components spec is well-suited to the scenarios routinely faced by UI designers and developers, and have articulated a vision for <a href="http://blog.quickui.org/2012/04/16/a-vision-for-coevolving-quickui-and-the-emerging-web-components-standard/">how QuickUI and Web Components could co-evolve</a>. This has included some time <a href="http://blog.quickui.org/2012/04/27/how-quickui-controls-use-code-to-specialize-the-handling-of-their-content-in-ways-that-might-not-be-supported-by-web-components/">analyzing the QuickUI Catalog controls</a> in light of the Web Components spec. On that note, I’m looking forward to a meeting with the spec’s author, Dimitri Glazkov, later this week. </li>
<li>A designer friend suggested creating a new QuickUI screencast. The few QuickUI screencasts I’ve done in the past are now out-of-date, and my ideas about how to explain the value of component-based UI development have evolved, so it’s a good time for a new one. </li>
<li>Along those lines, I’ve invested some time improving the framework documentation, including an <a href="http://quickui.org/docs/rendering.html">overview of how QuickUI controls render themselves</a>.</li>
<li>I also continue to improve the <a href="http://quickui.org/catalog">QuickUI Catalog</a> controls, although at a slower pace. The above work on the fundamentals and explaining them is taking precedence for the time being. </li>
</ul>
<p>Thanks to those who have shared suggestions with me — they’re very helpful. If you take a look at any of the above and have feedback, please let me know.</p>
<ul>
</ul>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: From MacPaint to FiftyThree's Paper: Someday all our apps will be this great
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: someday-all-our-apps-will-be-this-great

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2012/04/someday-all-our-apps-will-be-this-great.html 
DATE: 04/05/2012 05:00:00 AM
-----
BODY:
<p>Imagine, for a moment, that you’re living way back in the early 1980s, maybe 1984. You have access to a computer, and on that computer,&#0160;you use a top-end DOS app like Lotus 1-2-3:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2016303a5443f970d-pi"><img alt="Lotus 1-2-3" border="0" height="384" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20168e99b1982970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Lotus 1-2-3" width="512" /></a></p>
<p>&#0160;</p>
<p>Then, one day, you see a marketing campaign for a new computer. Your eye catches on this image:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20167649a0044970b-pi"><img alt="MacPaint" border="0" height="358" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2016303a54464970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="MacPaint" width="518" /></a></p>
<p>&#0160;</p>
<p>Your mind is <em>completely blown</em>. The user interface for this application, which you learn is called MacPaint, seems utterly unlike any application you’ve ever seen. In fact, the entire premise of this image speaks to a proposition that’s never before even occurred to you: <em>a computer can be used to create art</em>.</p>
<p style="text-align: center;"><span style="color: #737373;">•&#0160;•&#0160;•</span></p>
<p>Looking back, it’s hard to convey now how stunning both this image and that proposition were at the time. When the original Macintosh was released, this was probably the first vaguely art-like computer-rendered illustration most people had ever seen. Before that moment, when (or if) the average person thought about a computer, they considered it a tool for crunching numbers or typing documents.</p>
<p>In retrospect, this Japanese woodcut was probably the most sophisticated illustration most people ever saw on an original Macintosh. As groundbreaking as the application was, it was simply&#0160;impossible for the average user, even a fairly artistic person, to create something of this quality with a mouse. Drawing with a mouse in MacPaint was said to be, “like drawing with a bar of soap”. If you tried to create something like the above yourself, the results were laughable.&#0160;You could indeed create interesting works in MacPaint, but only by relying on text, lines, polygons, and those paint bucket textures along the bottom. That is, you got the most interesting results with tools that were well-suited to software implementation and which produced effects you couldn’t easily achieve on paper.</p>
<p>The designer behind this image,&#0160;<a href="http://kare.com/">Susan Kare</a>, discussed it in an <a href="http://library.stanford.edu/mac/primary/interviews/kare/trans.html">interview</a>:</p>
<blockquote>
<p>With the Japanese lady, [Apple developer] Bill Atkinson was experimenting with scanning, and Steve [Jobs] brought in an actual woodcut that he had bought: it was big and colorful, and that was one of the first things that we scanned. And I took the scan, which was kind of rough, and refined it to make the final illustration. It looks so crude now — in terms of scanning technology — but it seemed amazing at the time that you could get a “real” image into your computer.</p>
</blockquote>
<p>The fact that this image started from a scan was both a surprise and something of a disappointment. Ah, no wonder we never saw illustrations like this — fundamentally, this was marketing! Not to detract from the groundbreaking impact of this work, but this image was clearly meant to suggest to users that they could <em>create </em>art freehand, using only the tools in MacPaint.</p>
<p>Nevertheless, MacPaint represented a watershed in application user interfaces that had broad impact far beyond its users or market. When such an event occurs, it’s possible to look at the app and say something remarkable: <em>Someday all<strong> </strong>our apps will be this great</em>.</p>
<p>The only reason the MacPaint woodblock image is no longer jaw-dropping to us today is because, within a relatively short time, nearly every application acquired a user interface that in many ways looked and worked as as well as (or, eventually, better than) the interface in MacPaint. Apps simply had to improve to stay competitive, and users everywhere reaped the benefits.</p>
<p style="text-align: center;"><span style="color: #737373;">•&#0160;•&#0160;•</span></p>
<p>Such a moment has now happened again — or at any rate, it has now happened again to me. The moment came when I saw a post on <a href="http://beautifulpixels.com/ipad/paper-bring-out-the-creative-genius-in-you/" target="_self">Beautiful Pixels</a> about&#0160;<a href="http://www.fiftythree.com/paper">Paper</a>, an app by a company called FiftyThree:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20167649a00b6970b-pi"><img alt="Paper" border="0" height="450" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2016303a5450a970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Paper" width="600" /></a></p>
<p>&#0160;</p>
<p>Paper is beautiful, and I find it a joy to use.&#0160;Like MacPaint before it, I think Paper represents a new watershed in user interfaces.</p>
<p>Earlier I’d tried <a href="http://itunes.apple.com/us/app/adobe-ideas/id364617858?mt=8">Adobe Ideas</a>, a vaguely similar sketch pad app. It’s a fairly typical touch-enabled iPad application, and follows many (but not all) iPad conventions. Judging by app store reviews of Adobe Ideas, some of its users love it, and find it very useful. I myself was underwhelmed. Adobe Ideas feels utilitarian, like a dead thing. Using it to create a sketch feels like work. After a few attempts, I stopped using Adobe Ideas.</p>
<p>Paper, in contrast, feels like something tangible and alive. It’s delightfully <em>fun.</em> Since I installed Paper, I look forward to using it every day.&#0160;Paper’s interface is beautiful at every level. Zooming out from a drawing (above) shows a sketchbook (below left) containing multiple drawings, and zooming out further shows your collection of sketchbooks (below right):</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2016303a545e6970d-pi"><img alt="Paper Sketchbook" border="0" height="221" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20167649a0194970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Paper Sketchbook" width="295" /></a>&#0160; <a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20167649a025f970b-pi"><img alt="Paper Sketchbooks" border="0" height="221" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20167649a0278970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Paper Sketchbooks" width="295" /></a></p>
<p>&#0160;</p>
<p>A stunning amount of detail has gone into every aspect of Paper’s design. Just a sampling of the tiny details I’ve noticed:</p>
<ul>
<li>The “paper” background of a sketch isn’t pure white; it’s very slightly off-white. This lets the pure white ink and paint appear extra bright.</li>
<li>If you’re in the middle of drawing and drag your finger (or stylus) over the tool palette, the palette automatically drops out of the way so you can continue your line into the space the palette had just been occupying.</li>
<li>You can paint with white watercolor to lighten things. While Paper carefully models the physics of real inks and paints, in various places it breaks with those limitations to let you do things which useful but not possible in the real world. This seems to be done judiciously; the drawing tools still feel very much like their physical analogues.</li>
<li>The tools respond to the speed of your movement — but not always the same way. The pen gets thinner the faster you go, which makes physical sense, but the calligraphy pen gets <em>thicker</em>&#0160;when you go fast.&#0160;This is another case in which the physical metaphor has been judiciously broken. I’m not sure of the precise rationale behind these differences, but the result feels right.</li>
<li>As you flip through a sketchbook, not only do the pages animate in 3D, their shadows do as well. Paper is built on the OpenGL 3D library, but it probably&#0160;still was a lot of work to get these effects to look this good and this smooth.</li>
</ul>
<p>Surprisingly, Paper actually delivers on the original MacPaint premise: <em>you can create beautiful art. </em>I’m no artist, but I was able to quickly sketch the still life with fruit shown above, and the cat in the smaller image. It turns out you can add watercolors to pretty much any pen or pencil drawing in Paper and get something that looks pretty good. My children think so too — yesterday evening I had to read the Kindle edition of <em><a href="http://amzn.to/HVMAcr">Angelmaker</a></em> on my phone because I couldn’t pry the iPad away from my four year-old.</p>
<p>(Aside: Paper is free, but you’ll have to pay to get the watercolors. You should just bite the bullet and buy all the tools — you will in the end, anyway. I think Paper’s pricing model is as clever as their interface design.)</p>
<p>As amazing as the artistic results are, I don’t think they represent Paper’s greatest accomplishment. At the highest level, I think the best thing Paper has really done is <em>let you feel like an artist. </em>I haven’t regularly sketched anything since Drawing 101 in college, and now I find I’ve bought an iPad stylus so I can do more with Paper.</p>
<p>FiftyThree carries this message throughout out the Paper app, as well as through their site and brand. Everything about this product is designed to lead you to believe, “I am the kind of cool latter-day renaissance person who carries around a Moleskine notebook because my free aesthetic soul may encounter a beautiful scene I want to render as art. I am <em>that</em>&#0160;awesome.” This is, in fact, the very image in the Paper promotional video: a guy wandering around New York City sketching stuff. The video is shot from first-person perspective. That guy is <em>you</em>.</p>
<p>I think the term “user experience design” is often&#0160;overblown puffery — when I get to observe someone working through an app design problem, they’re usually focused on the feature set and interface. I rarely witness someone actually thinking directly about the <em>experience</em> their user will have. But with Paper, I think “experience design” is an apt term for what they’ve done. Maybe even that term sells it short. It could be called something like “self-conception design”.</p>
<p>But, wait! Here’s the best part. <em>Someday all our apps will be this great.</em></p>
<p>Think about that. In the not-too-distant future, every bit of software you currently use (and maybe swear at) — an online store, the Settings area for your latest device, a random tool from an IT department, the production app you spend your workday in — all those things will someday be as beautiful to look at and joyful to use as this Paper app.</p>
<p>And those apps will make you <em>feel </em>great. When send a message, you will feel like a great communicator (or socialite). When you follow a treasure map to an out-of-the-way restaurant in a new town, you will feel like a great explorer. When you follow a recipe, you will feel like a great chef. And when you create a bit of software, you will feel like a great designer.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Ken Geis
EMAIL: 
IP: 128.32.16.149
URL: http://profile.typepad.com/kengeis
DATE: 04/05/2012 11:01:09 AM
"The calligraphy pen gets thicker that faster you go, while the pen gets thicker." Typo?
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 67.40.211.147
URL: http://profile.typepad.com/jan_miksovsky
DATE: 04/05/2012 11:03:59 AM
Ken: Yes, fixed. Thanks!
-----
COMMENT:
AUTHOR: Barry Kelly
EMAIL: 
IP: 93.97.41.252
URL: http://profile.typepad.com/barrkel
DATE: 04/05/2012 01:40:40 PM
"FiftyThree carries this message throughout out the Paper app, as well as through their site and brand. Everything about this product is designed to lead you to believe, “I am the kind of cool latter-day renaissance person who carries around a Moleskine notebook because my free aesthetic soul may encounter a beautiful scene I want to render as art. I am that awesome.” This is, in fact, the very image in the Paper promotional video: a guy wandering around New York City sketching stuff. The video is shot from first-person perspective. That guy is you."

Uh, this marketing isn't very good; this kind of guy is the pretentious knobhead that I want to punch in the face and smirk while he holds his bleeding nose. Not literally, of course, but about that level of contempt.

It's a toxic mix of narcissism, indulgent self-actualization and sheer fraudulence. It's the stuff that makes people who switch from PCs to Macs want to pull out their new laptops in cafes. These people aren't artists; they don't even have a conceptual model of art, the way art schools churn out confused students; instead, they just want to wear a t-shirt with the label "artist" printed on it, so that they can feel good about themselves when they see their own reflection.

It's onanism and it's repulsive. It's a fine distillation of the essence of what I don't like about Apple products.
-----
COMMENT:
AUTHOR: Designing iPad Applications
EMAIL: edysonjack@gmail.com
IP: 116.71.55.211
URL: http://www.cygnismedia.com/blog/design-tips-ipad-applications/
DATE: 05/29/2012 11:15:58 PM
Ditto to all of that.  Nice review. I've been loving this app for about a week.  I wish it was easier to write notes with my finger, though I'd guess practice will improve that.  Looking at the example books of written notes makes me jealous.  My writing is large and clumsy - and stylusi are pretty useless so far because of the rubbery friction... haven't figured this out yet, but working on it.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Make web menu bars more usable: open a menu on hover only if another menu is already open
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: menubar
CATEGORY: Controls

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2012/04/menubar.html 
DATE: 04/03/2012 05:00:00 AM
-----
BODY:
<p>The history of user interface design isn’t terribly long, but it’s long enough that designers who ignore it do so at their users’ peril. In the transition from clients apps to the web, a lot of UI history has been forgotten, ignored, or reluctantly set aside because its lessons were too expensive (if not impossible) to preserve in early browsers.</p>
<p>For example, it’s hard to find a web application with a menu bar as usable as the standard system menu bars in OS/X and Windows. Consider the basic tasks of opening and closing a menu in a menu bar. Last week’s <a href="http://miksovsky.blogs.com/flowstate/2012/03/popup.html">post on popups</a> listed a number of ways in which a user can cancel a menu: clicking outside of it (while <em>not</em> accidentally triggering whatever one clicks on), pressing Escape, resizing the window, scrolling, or moving the focus to a different window. Web implementations often overlook these aspects of closing a menu.</p>
<p>If we now turn our attention to the task of <em>opening</em> a menu, we find most web apps give this basic act similarly blunt treatment. The choices you’ll typically see in web menus are one of these:</p>
<ul>
<li>Menus open when the user <strong>clicks</strong> on a menu title.<strong> </strong>This is straightforward for a single menu, but problematic in a menu bar with multiple menus. Users need to scan a set of menus if they’re exploring their options, or if they’re hunting for a particular command. In these situations, having to click on each menu in turn feels clunky. And if the menu developer has done the fundamentally right thing in absorbing mouse clicks outside the menu (so the user doesn&#39;t accidentally trigger something when canceling the menu), the user must click <em>twice</em> to open up the next menu. </li>
<li>Menus open as soon as the user <strong>hovers</strong> over a menu title. This feels responsive, and lets the user quickly scan a set of menus. On the downside, it can be incredibly distracting to have menus pop open when they’re unwanted. Consider a user who clicks in a text field, and then has to move the cursor away from the text field because the cursor doesn’t automatically disappear when they start typing. <em>(Another bit of UI history that’s been forgotten!)</em> Knocking the mouse out of the way, the user happens to end up parking the cursor over the menu bar, and now a completely unwanted, giant <a href="http://www.useit.com/alertbox/mega-dropdown-menus.html">mega menu</a> pops up, covering up their work surface. (That menu article suggests using careful timing to avoid irritating the user, but to me that seems like a band-aid on what’s fundamentally the wrong solution.) Open-on-hover does offer the ability to have a click on the menu title perform navigation, but as discussed in <a href="http://uxmovement.com/navigation/why-hover-menus-do-users-more-harm-than-good/">Why Hover Menus Do Users More Harm Than Good</a>, users may not discover that they can click on the title like a link — if hovering into the title popped it up, then the user can easily conclude that the menu has already performed the only job it’s there for.</li>
</ul>
<p>The odd thing is that a completely smooth way to finesse the problems of both these methods is right in front of the designer and developer, in the very same OS/X and Windows client applications they are likely using to design or code one of these problematic approaches.</p>
<p><strong>Key attributes of menu riffing behavior</strong></p>
<p>For ages both OS/X and Windows have used the following menu behavior:</p>
<ol>
<li>When no menu is open, hovering over a menu title can provide hover feedback on the title (Windows does this), but does <em>not</em> pop up the menu.</li>
<li>Clicking a menu opens it. This required click prevents accidental menu invocation.</li>
<li>Once a menu is open, hovering into the title of another menu closes the previous menu and implicitly opens the new one. This lets the user quickly <em>riff</em> through a menu bar’s menus to familiarize themselves with their contents or to find a specific command.<br /><br /><em>[UPDATE: A commenter correctly points out that client OSes actually open menus immediately on mouse&#0160;down, instead of waiting for mouse up. This makes it possible to riff through menus with the mouse down. If I recall, Mac OS menus originally only worked on mouse down; letting go of the mouse while over a menu title closed the menu. Windows, in contrast, would keep the menu open even after the user released the mouse button, which was easier to use. The user didn&#39;t have to hold the mouse down throughout the whole menu exploration and command selection operation. This approach was eventually adopted by the Mac OS. But both Windows and OS/X still support mouse down opening and riffing of menus.]</em></li>
</ol>
<p>To me, this resolution seems about perfect, and I wish all web app menus worked this way. In contrast, how often have you used one of the clunky always-click-to-open or twitchy open-on-hover web menu implementations and said to yourself, “I wish all my OS/X (or Windows) apps worked this way!”?</p>
<p>To be fair, simply knowing the UI history (or being very observant) isn’t enough — there’s still the question of cost. One could argue that Apple and Microsoft have greater control over the environment than a web site within the constraints of the browser, which is true, but I think that explanation falls short. The fundamental problem seems to be the economics of homegrown UI: for most companies, it’s hard to justify the return on investment to get these details right in order to make a really usable menu bar. (Which, if they get it right, their users won’t even notice.) Apple and Microsoft can each build a perfect menu bar once that many developers can benefit from, so it’s worth their taking the time to get it right.</p>
<p>Google Docs is one web app that has taken the time to sweat the details. Their document editing suite carefully follows the same menu riffing behavior described above: you open the first menu with a click, and subsequent menus with hover:</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20168e9741623970c-pi"><img alt="image" border="0" height="286" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201676472dce5970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="image" width="531" /></a></p>
<p>&#0160;</p>
<p>I’m not sure if Google acquired this finely-tuned menu through Writely or one of the other predecessors to Google Docs, or if they’ve more recently decided that a good way to displace with Microsoft Office is with great usability at a much cheaper price. Either way, it’s details like this that make Google Docs feels like such a reasonable replacement for a desktop application suite. (Thought not perfect yet: Google Docs gets the menu open behavior right, but gets points off for menu <em>closing</em> behavior because they don’t absorb background mouse clicks. And, as referenced above, it doesn’t hide the mouse when you start to type, the way most client text editors or word processors do.)</p>
<p><strong>MenuBar control</strong></p>
<p>I’ve added a <a href="http://quickui.org/catalog/MenuBar">MenuBar</a> control to the QuickUI Catalog, along with the usual companions of <a href="http://quickui.org/catalog/Menu">Menu</a>, <a href="http://quickui.org/catalog/MenuItem">MenuItem</a>, and <a href="http://quickui.org/catalog/MenuSeparator">MenuSeparator</a> classes. A Menu can be used on its own, or as part of a MenuBar. When placed inside a MenuBar, the menus will exhibit the riffing behavior described above.</p>
<p>I like the way Google’s visual style puts both the menu title and an open menu on the same seamless surface to visually connect the two regions, so I’ve used that style for a Menu’s generic appearance (the one you get if you don’t want to do any of your own styling).</p>
<p>Although the MenuItem and MenuSeparator classes assume a traditional vertically-oriented list of commands, use of those classes isn’t required, and the Menu class could just as easily be used to present commands in multiple columns or any other arrangement.</p>
<p><strong>Implementation notes</strong></p>
<p>The tricky bit here was making the entire MenuBar and its menus accessible to the mouse, while simultaneously absorbing any background mouse click outside the menu bar or its menus. By default, an individual Menu control supplies its own Overlay so that a Menu can be used on its own or in some other menu bar-like UI construct. The problem is that an Overlay behind a single Menu control will prevent the user from hovering into other menus in the menu bar. So the MenuBar creates its own <a href="http://quickui.org/catalog/Overlay">Overlay</a> control, and turns off the Overlays of the individual Menu controls. The result is the entire menu bar and its menus sit above a shared overlay. The user can hover from one menu to the next, and any clicks on the background overlay are absorbed and cancel the currently-opened menu.</p>
<p>As always, it’s my hope that delivering this behavior in an open, reusable component can eventually change the economics of web usability so that anyone can benefit from the UI design history baked into a component — whether they realize that history is there or not.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: yurivkhan
EMAIL: 
IP: 95.170.128.214
URL: http://profile.typepad.com/d101160117569623819
DATE: 04/03/2012 06:22:16 AM
There is another subtlety which is sometimes overlooked. If the user presses the mouse button over a menu title, it needs to expand immediately, without waiting until the user releases the button. After that, with the button still pressed, the user must be able to “riff” through the menu (with currently hovered item highlighted) and releasing the button over a menu item must activate it.

All standard Windows, GNOME, KDE menus support this usage. As far as I know, in early Apple interfaces it was the only way to use pulldown menus.

Google Documents does this right. Atlassian Confluence does it wrong.
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 67.40.211.147
URL: http://profile.typepad.com/jan_miksovsky
DATE: 04/03/2012 08:49:32 AM
yurivkhan: Ack, you're right! That would be a bit of UI history which *I* had forgotten too. I guess I'd long since gotten used to Windows' support for riffing with the mouse up, and by the time I went back to the Mac, they'd picked up that behavior too. Thanks for pointing this out.

Rewiring the QuickUI MenuBar control to support mouse down riffing seems like it would be quite hard. Once the user has moused down over a DOM element, I believe it captures the mouse, yes? Which might mean that tracking the mouse over different menus and menu items would essentially require writing a new hit-tracking library to calculate what element the mouse happened to be over. This seems like a colossal amount of work, more akin to implementing drag-and-drop than normal menu click handling. If that's the case, I'm even more impressed by the Google Docs menus than I already was.
-----
PING:
TITLE: deBarbie
URL: http://www.juegosdebarbie.com.mx
IP: 173.242.115.89
BLOG NAME: deBarbie
DATE: 09/27/2012 12:19:16 AM
flow|state: Make web menu bars more usable: open a menu on hover only if another menu is already open
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: There must be 50 ways to close a popup: menus, dropdowns, tooltips, palettes, dialogs, and more
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: popup
CATEGORY: Controls

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2012/03/popup.html 
DATE: 03/26/2012 08:00:00 AM
-----
BODY:
<p>Apps often need to pop up something over the main UI; common examples would be menus and dialogs. Unfortunately, while apps need popups, <em>documents</em> don’t, and until recently HTML was relentlessly document-focused. It’s frustratingly difficult to do a popup well in a contemporary web app, and so it’s not surprising to see so many apps do them poorly or inconsistently.</p>
<p>As a case in point, consider the ways a user might want to dismiss a UI element which has popped up over the main UI. Depending on the specific form of popup, there are a surprisingly large number of methods the popup might support for leaving it:</p>
<ol>
<li><strong>Click outside the popup. </strong>This is the most common means to dismiss a lightweight popup like a menu. The user is saying, “I see you, popup, but don’t want to interact with you; let me get back to the main UI.” When the user clicks on the main UI in the background, a key question arises: <em>what happens with that click?</em> This isn’t an easy question to answer; see below.</li>
<li><strong>Click inside it. </strong>Perhaps the user has hovered into an element that’s popped up a tooltip, and maybe the tooltip’s under the mouse. If the tooltip is nothing but static content, the user can generally click anywhere within the popup to dismiss it.</li>
<li><strong>Make a selection</strong>. This is a special case of the above point. If the user’s dropped down a combo box and has clicked in an item in the resulting list, they’re not only making a selection,&#0160;they’re also saying they’re done with the dropdown.</li>
<li><strong>Click a button</strong>&#0160;that explicitly indicates completion. Another special case of point #3. A classic example would be an OK button in a modal dialog, which is essentially a heavyweight form of popup.</li>
<li><strong>Click a close box.</strong>&#0160;A modeless dialog or persistent palette window often relies on a small “<strong>×</strong>” icon in the upper-right corner as the primary means to dismiss it.</li>
<li><strong>Press Esc.</strong> Popups of many flavors can be dismissed by pressing the Escape key.</li>
<li><strong>Wait.</strong>&#0160;A tooltip or <a href="http://miksovsky.blogs.com/flowstate/2012/01/transientmessage.html">transient message</a> may go away all on its own after giving the user time to read its contents.</li>
<li><strong>Hover into another control that produces a popup.</strong> The classic example here is menu riffing in Windows or OS/X menu bar. The user must click a menu to open it, but once that first menu is opened, the user can open the next menu simply by hovering into it. (This aspect of menus is worth a closer look in a subsequent blog post.)</li>
<li><strong>Move the focus to another window.</strong> Most forms of pop ups are temporary enough that the user doesn’t expect them to stick around. If the user opens a right-click context menu in Google Docs, and then switches to work in a different window, they don’t expect to come back to Google Docs later and find the context menu still open.</li>
<li><strong>Press the ALT key.</strong> On Windows, the ALT key or (considerably more obscurely) Shift+F10 are used as the keyboard shortcuts to activate the menu bar (or, in some cases, the selection’s context menu). If the user already has a menu or other popup open, this generally dismisses the popup before activating the menu bar.</li>
<li><strong>Scroll the page with the mouse wheel.</strong> Some apps handle this, some don’t. But if a tooltip or context menu was invoked from something that’s being scrolled out of view, there’s probably no reason for the popup to remain open.<br /> <br /><em>[… Are there other ways? There are a wide range of other user actions that could dismiss a popup, but the others I can think of close the popup as a side effect of a click outside the popup or a loss of window focus</em><em>.]</em></li>
</ol>
<p>Most web apps that create popups seem to consider only a small fraction of these cases. For example, it’s common to have a web app’s menu stay open even when the Escape key is pressed (point #6 above) or the tab or window has lost focus (#9 above).</p>
<p>Some of the above cases have complexities that get overlooked. Point #1 above — handling a click outside the popup — raises the question of what should happen with that outside click. The choices are: a) absorb the click so that it has no effect other than closing the popup, or b) let the click affect as usual whatever element outside the popup the user clicked on. On the web, the latter choice can be easier to handle, but this raises a significant usability risk: if the user clicks outside a menu, and just so happens to do so by clicking on a link, do they really intend to trigger the link’s normal navigational response?</p>
<p>As an illustration, suppose a Facebook user has dropped down the menu on the right side of their current toolbar, and then they decide to close the menu by clicking outside it:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201676427a8be970b-pi"><img alt="image" border="0" height="422" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201676427a92c970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="image" width="290" /></a> <br /><em>Careful!</em></p>
<p>That click outside the menu isn’t just going to dismiss the menu—the click is also going to activate the partially obscured “app request” link. If the mouse were just a few pixels lower, the user would end up launching the process to create an ad.</p>
<p>Most OSes and client apps will absorb a click made outside a popup like a menu so that the user doesn’t accidentally trigger an unintended action. Web apps usually <em>don’t</em> absorb the click. It’s hard to know whether this is intentional or not. I think it’s simply a reflection of the fact that absorbing the outside click in a web app takes more effort. I personally think that effort is worth the trouble to avoid usability issues that can arise if, in the course of dismissing a popup, the user ends up accidentally triggering a background UI element. I think that work is even more worthwhile if it can be folded into a shareable component so that most designers and developers don’t have to ever think about this issue.</p>
<p>Related to the concept of a popup is that of an overlay. To help the user see a heavyweight popup like a modal dialog, many web apps display a “lightbox effect” or other visual treatment. This layer sits visually behind the popup but <em>over</em> the main UI in the background. This overlay is really a distinct UI element, albeit one whose existence is probably seldom noticed. The overlay may not even be visible — it may be entirely transparent! But a transparent overlay is precisely the means one would typically use to absorb clicks outside a popup: a click on the overlay prevents the click from reaching a UI element in the background.</p>
<p><strong>The Popup control and its related classes</strong></p>
<p>Over the past week, I’ve overhauled the <a href="http://quickui.org/catalog/Popup">Popup</a> base class as part of work towards a new Menu control. One of my goals was to create a base class that handled more of the cases above automatically. For example, I wanted a Popup to absorb outside clicks by default so that most designers won’t have to even think about this, while still leaving the option of letting the outside click go through if the designer really wants that behavior. Similarly, I wanted the various Popup subclasses (like <a href="http://quickui.org/catalog/Dialog">Dialog</a>) and related classes to handle their respective situations better so that anyone using them has an edge in producing UI with good usability.</p>
<p>The base Popup class now gives the designer and developer the ability to smoothly handle many of the dismissal cases above: outside click, inside click, loss of window focus, pressing Esc, etc. Special cases like menu bar hover behavior can be addressed in subclasses (like the forthcoming Menu control).</p>
<p>A Popup control will normally create a companion overlay control to absorb outside clicks. This overlay is generally an instance of the&#0160;<a href="http://quickui.org/catalog/Overlay">Overlay</a>&#0160;class. By default, the first click on an overlay dismisses the popup and removes the overlay. A subclass called <a href="http://quickui.org/catalog/ModalOverlay">ModalOverlay</a> can be used for modal dialogs that want to absorb <em>all </em>outside clicks (not just the first), so as to force the user to explicitly dismiss the dialog. The generic appearance of the ModalOverlay class includes a basic lightbox effect. A Popup can also be created with no overlay in situations where it’s important to let outside clicks have their normal effect.</p>
<p>A related class called <a href="http://quickui.org/catalog/PopupSource">PopupSource</a> is available for the common case where a persistent UI element (a button, say) invokes an attached popup. PopupSource takes care of positioning the popup in relation to the button which invokes the popup. If space allows, the popup is shown below the button and left-aligned, but if this would cause the popup to extend beyond the viewport, the popup may appear above the button or right-aligned as necessary. PopupSource is used as the base class for <a href="http://quickui.org/catalog/ComboBox">ComboBox</a>, so a dropdown produced by a combo box may actually drop <em>up</em> if there’s more room above the combo box and not enough below. This is standard behavior on client OSes, but rare in web sites that have created their own combo box-like elements.</p>
<p><strong>Implementation notes</strong></p>
<p>In dealing with popups, one naturally has to dive into the details of how browsers render one element on top of the other. In this study I was aided by an excellent <a href="http://css-discuss.incutio.com/wiki/Overlapping_And_ZIndex">summary of how DOM elements stack</a>. Having read that, it now seems likely to me that any occurrence of the CSS rule, “z-index: 1000”, can also be read as, “z-index: I don’t really know how this works”.</p>
<p>Predictably, creating a general-purpose Popup class that works reasonably well in a wide variety of configurations on all the mainstream browsers entailed a substantial amount of testing and debugging. IE8 was particularly problematic in this regard.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Ian Hamilton
EMAIL: i_h@hotmail.com
IP: 80.169.197.130
URL: 
DATE: 03/28/2012 08:35:31 AM
I’d discount 2, 7, 8, 9 10 and 11, that makes the options a bit more manageable –

2. Inconsistent, means that things that contain interactive elements are needlessly different to things that don’t

7. There’s no way of knowing how quickly people are able to read

8. Hovering shouldn’t ever produce pop-ups

9. Applies to right-click contextual stuff, but not modals

10. Open a modal, text is too small, hit alt to get into menu to find zoom control.. modal has vanished

11. Assumes that modals are always smaller than viewable area, which isn’t the case, especially with zoom settings in both mobile and desktop browsers

-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 67.139.106.10
URL: http://profile.typepad.com/jan_miksovsky
DATE: 03/28/2012 09:05:31 AM
Ian: I'd agree that not all of these methods are equally useful or usable across all forms of popups -- although all of these are in use, and for each there's at least some context in which the technique is reasonable or even expected. E.g., in a Windows client app, #10 is an expected part of the platform. I agree it'd be weird in a web app for the reason you specify, which is why I left that behavior out of the QuickUI implementation.

BTW, I'm not sure I'd agree with a blanket prohibition on having hovering produce a popup. A tooltip is a form of popup whose utility entirely depends on opening on hover. And the menu riffing behavior, in which menus *after the first* open on hover, seems elegant and justifiably used across Windows and Mac OS/X. (I agree that having hover produce the first menu is problematic, and I avoid it myself.)
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Controls of the Week: HorizontalPanels and VerticalPanels for basic CSS3 flexbox layouts today
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: simpleflexbox
CATEGORY: Controls

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2012/03/simpleflexbox.html 
DATE: 03/19/2012 08:00:00 AM
-----
BODY:
<p>It’s really, really common in UI to place a panel on one or both sides of a main content area, on the left and right or on the top and bottom:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2016302e32320970d-pi"><img alt="HorizontalPanels" border="0" height="200" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2016763d7f924970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="HorizontalPanels" width="600" /></a></p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2016302e32327970d-pi"><img alt="VerticalPanels" border="0" height="200" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20168e8d88a68970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="VerticalPanels" width="600" /></a></p>
<p>&#0160;</p>
<p>As ubiquitous as these layouts are, until recently it wasn’t easy to create them in HTML and CSS alone. You were either forced to hard-code the heights or widths of the panels, which is gross and hard to maintain — measuring the rendered dimension of a UI element is a task best left to the browser. You could write JavaScript to calculate the dimensions at runtime, but that’s a bunch of work many have avoided.</p>
<p>The <a href="http://www.w3.org/TR/css3-flexbox/">CSS Flexible Box Layout Module</a>, a.k.a. “flexbox”, is intended to address layouts like the ones above. For a general introduction to flexbox layout, see <a href="http://coding.smashingmagazine.com/2011/09/19/css3-flexible-box-layout-explained/">CSS3 Flexible Box Layout Explained</a>. This feature hasn’t gotten as much use as it could; as shown on <a href="http://www.caniuse.com/#feat=flexbox">When can I use</a>, it’s not supported on the current (as of this writing) versions of Internet Explorer. Moreover, the flexbox spec changed a while back; only Chrome supports the final spec.</p>
<p>To address older browsers, it’s possible to use a <a href="http://en.wikipedia.org/wiki/Polyfill">polyfill</a> to support new CSS features. In this case, I wanted to create QuickUI controls to serve as a polyfill for flexbox layout. That is, these should take advantage of flexbox on browsers that support it. On older browsers, they should fall back to simpler flexbox-less CSS in cases where that is sufficient, and otherwise fall back to JavaScript-based layout.</p>
<p><strong>Key attributes</strong></p>
<p>The flexbox layout module can handle many layouts and needs beyond the two shown above, but the two above are common enough that they represent a good starting point.</p>
<ul>
<li>Each layout has a stretchable main content panel.</li>
<li>A horizontal layout can have a panel on the left, right, or both. Similarly, a vertical layout can have a panel on the top, bottom, or both.</li>
<li>The control needs to be able to handle arbitrary content in the panels. If the content changes, the layout should adjust in response.</li>
<li>Each layout comes in two forms: one with a constrained height (in which the content is generally scrollable) and one with no height constraint (i.e., grows as tall as necessary). In practice, the unconstrained form comes up much more often in the horizontal layout. (In the vertical case, the unconstrained form is really just a stack of divs, so no special layout is necessary. However, controls such as <a href="http://quickui.org/catalog/TabSet/">TabSet</a> come in both height-constrained and unconstrained forms, and it’d be nice to be able to position the tabs using a vertical layout in either case. So even the unconstrained vertical layout comes up in some, albeit rare, situations.)</li>
</ul>
<p><strong>HorizontalPanels and VerticalPanels controls</strong></p>
<p>I’ve posted <a href="http://quickui.org/catalog/HorizontalPanels/">HorizontalPanels</a> and <a href="http://quickui.org/catalog/VerticalPanels/">VerticalPanels</a> controls that address the layouts described above. They can each handle up to one panel on either side of the content area.</p>
<p>As browser implementations come up to snuff, the components can be updated to take advantage of native CSS flexbox support (including, eventually, the new syntax). You can build a UI using these layout components that will work today (as far back as IE 8), knowing that your UI will capitalize on flexbox support as it become more available.</p>
<p><strong>Implementation notes</strong></p>
<p>The HorizontalPanels and VerticalPanels controls derive from a base class called <a href="http://quickui.org/catalog/SimpleFlexBox/">SimpleFlexBox</a>, which sniffs out support for display: box and its variants. In testing, it seemed only WebKit’s flexbox implementation is worth using today. As of this writing, the Mozilla implementation seems too flaky overall to depend upon. And even on WebKit, I hit what looks like a <a href="http://code.google.com/p/chromium/issues/detail?id=118004">bug</a> preventing the use of automatic scroll bars in a height-constrained flexbox panel with horizontal orientation, which is a pretty common use case. This means HorizontalPanels can’t always use flexbox layout, even on Chrome. And while I’m interested in testing these controls on IE 10, Microsoft has tied the IE 10 preview to the Windows 8 preview, and I’ve already wasted too much of my life fiddling with Windows betas to care about trying Windows 8 before it’s ready. (Weren’t all the tying-IE-to-Windows shenanigans supposed to end with the DOJ consent decree?)</p>
<p>The height-unconstrained cases can be emulated on older browsers using other CSS (i.e., without doing layout in JavaScript), so again there’s no price to pay unless its necessary. If the only way to perform the layout is JavaScript, the control binds to a newly-overhauled pair of events in the QuickUI framework. There’s now a general-purpose layout event to which any control class can bind if it wants to be notified when the control’s dimensions have changed in response to a window resize. There’s a companion sizeChanged event a control can listen to for changes in the dimensions of its children. This is used by the SimpleFlexBox base class, for example, to listen for any changes in the size of controls in its side panels so it can determine whether it needs to adjust the size of the center content area. SimpleFlexBox only binds to these events in the cases where it needs to manually lay things out, so you’re only paying the price of those events when it’s necessary.</p>
<p>I did hit a weird cross-browser issue in IE9: when I view the VerticalPanels demo in IE9 under Large Fonts, the border for the main content area doesn&#39;t quite touch the border for the bottom panel. This can happen in IE9 because elements that size to text content can end up with fractional pixel heights. Since IE9 doesn&#39;t support flexbox, in the constrained height scenario SimpleFlexBox needs to examine the height of the top and bottom panels so it can adjust the metrics on the main content area. SimpleFlexBox requires on jQuery&#39;s height() function to do this, which turns out to always report integral pixel values. Under certain cases, then, it&#39;s possible to end up with a sub-pixel gap between the main content area and the&#0160;panels&#0160;— and the gap can become visible if the browser or display is scaling things up (as with Large Fonts). IE9 can report fractional heights via window.getComputedStyle(), but it doesn&#39;t seem worth this trouble just to support IE9 under various display edge cases. IE8 reports integral heights, and IE10 should support flexbox, leaving only IE9 with this issue. A simple workaround would be to avoid setting interior borders on the main content area if you&#39;re also setting them on the panels.</p>
<p>In any event, it’s nice to be able to wrap up a bunch of browser-dependent styling or code into a reusable component that can handle the details so the component user doesn’t have to. And, IMO, I’m not altogether sure that universal flexbox support will actually eliminate all need for controls like HorizontalPanels or VerticalPanels. Use of those controls in your code can arguably make it easier to clearly state your <em>intent</em>. While the CSS flexbox spec is very, um, flexible, the resulting CSS is not particularly easy to read. I preferred the Dock=“Left” syntax of Microsoft’s <a href="http://msdn.microsoft.com/en-us/library/system.windows.controls.dockpanel.aspx">DockPanel</a> control to the flexbox syntax, and have tried to mirror the former in designing the API for HorizontalPanels and VerticalPanels. Compare: to set the content of the left panel of HorizontalPanels control, you can stuff that content into a property called “left”. To achieve the same result in CSS3, you <em>omit</em> the “box-flex:” property to ensure the panel <em>won’t</em> stretch. I think the former is easier to read and maintain. Even once everyone has a flexbox-capable browser, these controls might still find use as more legible wrappers around the underlying CSS.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Like snapping together a skyscraper: Web components will catalyze a completely new ecosystem for creating UI
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: snapping-together-a-skyscraper

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2012/03/snapping-together-a-skyscraper.html 
DATE: 03/14/2012 08:00:00 AM
-----
BODY:
<p>In just a few years, the ecosystem in which we create UI&#0160;will change so dramatically that it will be hard to remember how we did things way back in 2012.</p>
<p>For a sense of perspective,&#0160;consider a similar change that transpired over a much longer period of time in a different industry: home construction. If you were building a house hundreds of years ago, you might have directly built or overseen most of the elements that went into your house: the framing, the hearth, the chimney, the roof, the windows, doors, you name it. You built nearly everything yourself — there were hardly any <em>components</em>.&#0160;Depending on where you lived, the only pre-built components you might have used would have been small and simple: glass from a glazier, bricks from a brickmaker, hardware from a blacksmith, and pipes or tiles from a ceramist. Even a glass window would have its surrounding parts — the case or sash, the wooden frame, the sill — measured, cut, and assembled on site and for a specific window. If you hired a craftsman like a carpenter or mason, everything they built for you would have been created on site specifically for your house.</p>
<p>Now build a house&#0160;in a modern economy. The majority of your home’s elements are components assembled elsewhere by specialists and shipped to your construction site ready for final installation. When you design a house, you now spend a lot of your time looking through catalogs of these components.&#0160;Most of those components come in standardized dimensions or configurations. Many are quite complex. You can buy an intricate multi-part casement window in a variety of window configurations as a single, complete unit that includes wood, metal, multiple layers of glass, glass treatments, hinges, locks, screens,&#0160;and other hardware. You can find a similarly dizzying selection of pre-built roof joists, plumbing fixtures, or light sconces, or other components. If you want a component that someone doesn’t already offer for sale, you are either visionary or insane.</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20167639cdd4e970b-pi"><img alt="Window Styles 1" border="0" height="302" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20168e89dee22970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Window Styles 1" width="600" /></a></p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20168e89dee33970c-pi"><img alt="Window Styles 2" border="0" height="315" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20167639cdd70970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Window Styles 2" width="600" /></a></p>
<p><span style="font-size: 10pt;"><em>A tiny handful of configurations for window components (source: <a href="http://www.windowexpress.co.uk/double_glazed_windows.html">Window Express</a>)</em></span></p>
<p>&#0160;</p>
<p>The componentization of the building industry means you can get a lot more house for a lot less money, and the resulting home can be better suited to your needs. Most of the factory-made components will be of better quality than what any one individual could make themselves on site. (It’s the site-built skylights that leak, not the factory-made ones.) And not only is the resulting building different; the component ecosystem brings about myriad new roles and industries.</p>
<p>Now consider software, where&#0160;we’ve labored for years hand-crafting every element of the user experience like a medieval builder. The browser or OS gives us a tiny number of simple UI primitives; we must write nearly everything else in the UI by hand. For simple designs that are essentially fancy documents, one can use a visual editor of the Adobe DreamWeaver ilk, but you still have to roll up your sleeves. And any UI that affords any significant degree of interactively is created substantially in code on either the back end or front end. To the extent that UI code is “shared”, most often it’s actually copied and then hacked to fit, rather than implemented with a truly shareable component. If you did static analysis of the UI code for the 100 most popular web apps, I’ll bet you’d find that only a tiny percentage of that UI code&#0160;is actually shared with another organization.</p>
<p>If only there were some standard for composing and extending web UI components, we’d be able to unleash a UI ecosystem that would transform the UI world as thoroughly as the physical building component ecosystem has changed home construction.</p>
<p>The UI field may actually undergo&#0160;a <em>bigger</em> transformation, because the software world isn’t subject to the same constraints as the physical world.&#0160;It is possible to create responsive UI components that change based on the device context, meta-controls that generate UI from more basic controls, adaptable components that change based on the user’s abilities and experience, and components that directly exploit third-party services.</p>
<p>With such tools in hand, it should be possible to create huge, complex interfaces in a fraction of the time it currently takes, and for far less money. You’ll be able to assemble the UI of a significant application very quickly, and get something interesting that in many ways actually <em>works</em>. It will be like snapping together building parts to create a skyscraper.</p>
<p>This transformation is still in the future, but it’s coming. One important step here is Google now taking the lead on a spec for web components that will standardize how components are defined and interact. A good summary can be found in <a href="http://dvcs.w3.org/hg/webcomponents/raw-file/tip/explainer/index.html">Web Components Explained</a>. (Years ago, Microsoft tried to promulgate a standard for <a href="http://en.wikipedia.org/wiki/HTML_Components">HTML Components</a>, but it never caught on.) While closure on the web component spec is still off in the future — and broad availability is, of course, even further away&#0160;— this new world is&#0160;coming.</p>
<p>This can’t happen soon enough. It will finally free us from having to waste such an ungodly amount of time attending to the design, coding, and testing of common user interface patterns, and let us move our attention up the value ladder to focus more on our own products’ domains.</p>
<p>This development will ultimately commoditize some large portion of the industry’s UI output. As with the building industry, commoditization of UI elements will catalyze the creation of new roles in the UX industry: specialists who create components, component integrators, component testing labs, standards groups, and many more people in more organiziations creating better UI because they can start with solid, usable components addressing many of their needs.</p>
<p>I’m excited by what this will mean for the QuickUI control framework. Google’s web component spec will eventually let the browser natively&#0160;address the lowermost functions which QuickUI must currently perform in JavaScript. This will enable much better performance, better isolation and modularity, and faster adoption. It’s too early to say how QuickUI evolve in this regard, but I want to direct its evolution such that it will transition smoothly to the standard web component foundation when that becomes widely available. Among other things, I’d looking at how to evolve the open <a href="http://quickui.org/catalog">QuickUI Catalog</a> of common UI controls so that they can someday be delivered as web components on the standard foundation. The goal is that someone using QuickUI controls today will find their investment preserved and profitable when the component future arrives.</p>
<p>If you’re interested in tracking Google’s work on the topic, they are posting announcements on Google+ on the <a href="https://plus.google.com/103330502635338602217">Web Components</a> page.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Control of the Week: Pinterest-style PackedColumns efficiently fills space with tiles of varying heights
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: packedcolumns
CATEGORY: Controls

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2012/03/packedcolumns.html 
DATE: 03/12/2012 08:00:00 AM
-----
BODY:
<p>Image-sharing site <a href="http://pinterest.com">Pinterest</a> is the current darling of the social media world, and the core of its user experience is its attractively-designed home page:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201676373f7bf970b-pi"><img alt="Pinterest" border="0" height="347" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20163027f804d970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="Pinterest" width="450" /></a></p>
<p>&#0160;</p>
<p>This page takes good advantage of available window real estate. As the user makes the window wider, the page re-lays out the columns of image tiles (or “pins”, in the parlance of the site) to take advantage of the extra width:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20163027f80d2970d-pi"><img alt="Pinterest (Wider)" border="0" height="345" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201676373f8a6970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="Pinterest (Wider)" width="600" /></a></p>
<p>&#0160;</p>
<p>The page must accommodate a wide range of tile heights, as the photos have different aspect ratios, and the number of comments per pin can vary. If the page simply laid out the tiles in a strict grid, it would waste a great deal of space. To use the space more efficiently, the page employs a “packed columns” layout.</p>
<p><strong>Key attributes</strong></p>
<p>The packed columns layout algorithm is straightforward:</p>
<ol>
<li>Divide available width by the standard item width to determine how many columns can fit.</li>
<li>Make all columns initially empty.</li>
<li>For each item in turn, add the item to the column which is currently shortest.</li>
</ol>
<p>The simplicity of this algorithm is such that it’s been independently recreated multiple times. The algorithm has some nice properties:</p>
<ul>
<li>It’s fast.</li>
<li>As much horizontal space is used as possible (while still showing entire items). If a user gives the site more width, they’re rewarded with more information.</li>
<li>The arrangement is visually interesting.</li>
<li>The positions of the first few items are stable.</li>
<li>At any given page width, the overall heights of the columns will be roughly equivalent. If the user scrolls to the bottom, they won’t find an unbalanced amount of space under any particular column.</li>
<li>The relative vertical position of any two items is preserved across resize operations. If item A appears above item B at one window size, then item A will always be above (or on the same row) as item B at any other window size. The user doesn’t need to understand this; it just means that if some interesting item is “near the top” before a resize, then after the resize the same interesting item will still be “near the top”.</li>
</ul>
<p>The last point speaks to another benefit of the algorithm which doesn’t show up in Pinterest, but does show up in other applications: the consistent relative positions of items means you can offer users the ability to specify an order or prioritization for the items that affects (but doesn’t completely determine) where items end up. I used this years ago in the design for a home page for Microsoft Money, a personal finance application whose home page included a user-customizable set of home page modules. A Settings dialog let the user specify the priority of those modules by dragging the modules within a one-dimensional list. While the ultimate two-dimensional position of the modules depended on the window width and the modules’ current heights, the priority of any given module determined how close to the top of the page that module would end up. This limited degree of customization was sufficient to meet many users’ needs without having to create a full-blown customizable layout UI.</p>
<p><strong>PackedColumns</strong></p>
<p>I’ve added a <a href="http://quickui.org/catalog/PackedColumns">PackedColumns</a> control to the QuickUI Catalog. There’s a link to a <a href="http://quickui.org/catalog/PackedColumns/demo.html">demo</a> that simulates the general appearance of Pinterest’s home page. (I initially centered the items in the demo the way Pinterest does, but turned centering off to make it easier to observe the layout behavior.)</p>
<p>Usage: Use PackedColumns to arrange a collection of child elements whose widths are fixed but whose heights vary substantially. If the heights are relatively consistent, users will likely find a traditional grid presentation easier to interpret and use.</p>
<p><strong>Commentary</strong></p>
<p>Given the simplicity of the algorithm, this wasn’t all that hard to code up.&#0160;I expect it’s not necessarily the actual cost of a layout like this that deters sites from adopting it. Rather, it’s the current need to independently discover or reverse-engineer behavior like this that most inhibits its adoption. As design knowledge gets coded into controls, however, such UI should become more pervasive.</p>
<p>In essence, an ability to easily create and adopt create web components will lead to a commodification of user interface elements. Today Pinterest’s insight and ability to create a packed columns layout may confer a slight competitive edge, but someday commodification will quickly eliminate such edges. This will be true not just for UI elements that can easily be independently created, but for nearly anything. The day after a new site launches with a cool new UI trick, that trick will be copied and packaged up as an openly available and readily adoptable UI control anyone can use.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: UI Control of the Week: Repeater control generates multiple copies of UI elements
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: repeater
CATEGORY: Controls

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2012/02/repeater.html 
DATE: 02/27/2012 08:00:00 AM
-----
BODY:
<p>User interfaces invariably entail a certain degree of repetition; they’re filled with vertical or horizontal sequences of UI elements that behave identically are are styled identically. Sometimes the elements in such a sequence vary only in their label, and sometimes even that doesn’t vary; the controls really are all exactly the same. As an example, if we go back to the first post in this series on UI controls, we find that Apple’s <a href="http://miksovsky.blogs.com/flowstate/2011/10/slidingpageswithdots.html">sliding pages with dots</a> control contains a horizontal sequence of little dot buttons. The variant of this control on Apple’s web Store uses blue dots:</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e8c1fa9c5970d-pi"><img alt="Apple Store Sliding Pages" border="0" height="379" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e8c1fa9c9970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="Apple Store Sliding Pages" width="640" /></a></p>
<p>Those little dots along the bottom don’t contain any data, and so their DOM representation of each is essentially identical. (The blue selected state comes from a style applied with a class.) Sequences of completely identical UI elements like this are relatively rare in a production UI. During design and development, however, it’s pretty common to want to throw a bunch of placeholder controls into the UI. Early in the design process, a prototype’s toolbar might have buttons labeled, “Button 1”, “Button 2”, “Button 3”, and so on, until the team can work out exactly what commands they want to offer users there.</p>
<p>But, despite the repetition, creating a collection of buttons like that is generally a manual process: the designer or developer must manually create a set of buttons, and carefully give them each a unique, placeholder name. Alternatively, one writes a bit of throwaway script to generate a given number of controls, although that can take a few minutes to work up.</p>
<p>The <a href="http://miksovsky.blogs.com/flowstate/2012/02/placeholders.html">recent post on placeholder controls</a> pointed out that it can be worthwhile to have a UI control even if it’s only used during the design process; anything that saves time helps. Here, I think it’s interesting to have a control specifically for the task of generating repetitions in a UI. As with the <a href="http://miksovsky.blogs.com/flowstate/2011/11/listbox.html">previously-discussed</a> <a href="http://quickui.org/catalog/ListBox/">ListBox</a>, this is effectively a higher-order meta-control: a control that creates or manipulates other controls. This can be useful for mocking things up during design. And, per the Apple example above, it might even be useful in production UI.</p>
<p><strong>Repeater</strong></p>
<p>The QuickUI Catalog contains a <a href="http://quickui.org/catalog/Repeater/" target="_self">Repeater</a> control. Given a control class and a number, it will create that many instances of that class. If you create a Repeater and give it a dot button class and a count of 5, you’ll get:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20168e785d246970c-pi"><img alt="Repeater Dots 5" border="0" height="9" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201676283ee12970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Repeater Dots 5" width="93" /></a></p>
<p>&#0160;</p>
<p>With that in hand, you can easily bump the count up or down to get whatever number you need. If you want to see what things look like with 20 copies of the dot control, instead of doing a cut-and-paste of your UI code, you can just change the desired count to 20:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20163018ec554970d-pi"><img alt="Repeater Dots 20" border="0" height="9" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20163018ec55c970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Repeater Dots 20" width="408" /></a></p>
<p>&#0160;</p>
<p>If you give the Repeater some content, each generated copy of the control will end up with that content. Here a Repeater has been told to create 5 instances of a simple button class and set their content to the text, “Button”:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201676283ee1b970b-pi"><img alt="Repeater Buttons 5" border="0" height="25" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201676283ee25970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Repeater Buttons 5" width="290" /></a></p>
<p>&#0160;</p>
<p>For a bit of variety, you can also ask the Repeater to append an incrementing integer to the content:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201676283ee28970b-pi"><img alt="Repeater Buttons 5 with Increment" border="0" height="25" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20163018ec568970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Repeater Buttons 5 with Increment" width="350" /></a></p>
<p>&#0160;</p>
<p>This is another one of those controls that, now that I have it, I end up using quite a bit. When poking around with a layout idea, it’s great to be able to fill up the UI quickly with a sequence of elements.</p>
<p><strong>Implementation notes</strong></p>
<p>It’s easy enough to create a one-off bit of JavaScript that creates an arbitrary number of controls, but why rewrite that code every time you need it? By investing just a bit of time in creating a reusable component, even that simple bit of code has already been written for you.</p>
<p>The implementation of Repeater has become simpler over time as the QuickUI framework has gotten better at supporting the creation of meta-controls. These controls generally have one or more properties that accept a control class as a value. Creating such a property is easily done in a single line using a <a href="http://quickui.org/docs/control-class-methods.html#property-class">Control.property()</a> declaration. A recent update to the QuickUI runtime makes it also possible to pass in arbitrary UI in <a href="http://quickui.org/docs/control-JSON.html">Control JSON</a> format, so you can use the Repeater control to generate <em>n</em> copies of some brand-new UI fragment containing a mixture of other controls.</p>
<p>As suggested above, a Repeater is incorporated into the implementation of the Catalog’s <a href="http://quickui.org/catalog/SlidingPagesWithDots/">SlidingPagesWithDots</a> and <a href="http://quickui.org/catalog/RotatingPagesWithDots/">RotatingPagesWithDots</a> (which adds automatic rotation) controls. Once the number of children (pages) is known, the control can simply pass that number to the Repeater’s count() property to generate the required number of dot buttons.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: UI Controls of the Week: Making HTML check boxes and radio buttons work the way they should have in the first place
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: labeledinput
CATEGORY: Controls

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2012/02/labeledinput.html 
DATE: 02/20/2012 08:00:00 AM
-----
BODY:
<p>Here’s the current Sign In UI on a typical e-commerce web site (United Airlines, one of the largest airlines in North America) with a minor but common user interface bug:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20168e74de1cb970c-pi"><img alt="United Airlines Sign In" border="0" height="208" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201630156faf9970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="United Airlines Sign In" width="222" /></a></p>
<p>&#0160;</p>
<p>The bug is this: the “Remember me” check box can only be checked by clicking the tiny 13 by 13 pixel square; clicking the text <em>label</em> for the check box has no effect. This minor but common bug appears on many web sites because an HTML &lt;input&gt; check box on its own can’t define a label. The label can only be defined by creating a separate &lt;label&gt; tag. I have no idea who came up with this arrangement, and can only imagine that this was intended to allow flexibility. It does allow, for example, a check box label to be placed above, under, or to the left of, a check box. But this flexibility comes at a cost: many web developers aren’t aware of the need for &lt;label&gt; tags, and so they end up with check boxes with static, unclickable labels. HTML radio buttons suffer from the same issue.</p>
<p>Of course, users have been long trained by client OSes that the text next to a check box or radio button <em>should</em> be clickable. It makes sense, after all, to give the user a large hit area (especially on a touch device). If the site above were to correctly define a check box label, the hit target would be 600% times as large as using the box alone, at no additional cost in screen real estate. Furthermore, the UI would be more accessible to a larger population, including vision-impaired people using screen readers.</p>
<p>The situation is improving, and a quick survey of some highly-trafficked web sites shows that many of them do correctly define labels for check boxes and radio buttons. But even some popular sites do not, or don’t do so consistently. Quantcast estimates the above United Airlines site gets about 1M U.S. visitors a month, and it’s fair to guess that some significant portion of those people are being driven through the faulty Sign In UI above.</p>
<p>The problem persists because here <em>it’s harder to create a correct UI than an incorrect one</em>. For the correct result here, the developer has to:</p>
<ol>
<li>Hear about the need for the &lt;label&gt; tag and learn how it works.</li>
<li>Remember to use a &lt;label&gt;.</li>
<li>Set an ID on the &lt;input&gt; element.</li>
<li>Create the &lt;label&gt; element.</li>
<li>Type in the user-visible text.</li>
<li>Set the label’s “for” attribute to the input element’s ID.</li>
</ol>
<p>In contrast, to create this check box the <em>wrong</em> way, the developer just has to:</p>
<ol>
<li>Type in the user-visible text.</li>
</ol>
<p>A check box created the wrong way looks pretty much like one created the right way, so it can be hard for the team creating the UI to spot the bug. And, of course, when the problem exists in UI that’s generally shown only to new users (like the UI above), team members will rarely be exposed to the bug themselves.</p>
<p>Usability experts can exhort the correct use of &lt;label&gt; tags until they’re blue in the face, but a real fix requires that it be easier to create a correct UI than an incorrect UI. Client OSes have made this easy for years, and I can probably count on one hand the number of times I’ve seen a check box in a client app in which the text was not correctly clickable.</p>
<p>Oh, and one more thing. On the web, it turns out that <em>even if you do things the way you’re told to</em>, your check box or radio button UI may still have a tiny bug. By default WebKit and Mozilla put an unclickable 3px margin around the input element. So even if you use a &lt;label&gt; tag in the recommended fashion, you still end up with a 3 pixel gap (highlighted below in red) between the input element and the label:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201630156fb02970d-pi"><img alt="Check Box Label Gap" border="0" height="52" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20168e74de1e4970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Check Box Label Gap" width="440" /></a></p>
<p>&#0160;</p>
<p>Clicks in this gap have no effect! This is a teeny tiny bug that nevertheless happens to show up in WebKit and Mozilla on nearly every web site. (IE takes care to leave no gap.) This probably means that on any given day thousands of users happen to click in that gap, and are puzzled that nothing has happened before they quickly click again. I noticed that one site, Gmail, carefully works around this very issue by overriding the margins on the check box and label to eliminate the gap. Once again, it seems the platform makes it harder to create a correct UI than an incorrect one.</p>
<p><strong>CheckBox and RadioButton</strong></p>
<p>I’ve added <a href="http://quickui/catalog/CheckBox">CheckBox</a> and <a href="http://quickui/catalog/RadioButton">RadioButton</a> controls to the QuickUI Catalog that implicitly associate a label with an input element, and close up the gap described above.</p>
<p>These aren’t particularly fancy or interesting components, but they’re nevertheless simple to use and solve the problem defined above. I wish HTML check boxes and radio buttons had always worked like this.</p>
<p><strong>Implementation notes</strong></p>
<p>Both CheckBox and RadioButton inherit from a <a href="http://quickui/catalog/LabeledInput">LabeledInput</a> base class that creates the automatic link between the label and the input element.</p>
<p>I originally implemented the LabeledInput base class as an inline div containing an input and a label element, and had some JavaScript explicitly link the two elements with a generated ID. But then I noticed something interesting on Gmail’s sign in page: the input element is <em>inside</em> the label element, right before the static text. I’ve never seen this approach documented on pages that describe the use of &lt;label&gt;. Every site seems to document the label appearing in the HTML immediately after the input. But putting the input inside the label seems to work in all the mainstream browsers. The advantage of this approach is that there’s no need to set the “for” attribute on the label; the label automatically binds to the input element it contains.</p>
<p>Taking another hint from Gmail, the LabeledInput class also sets margins so as to leave no gap between the input element and the adjacent text.</p>
<p>Finally, as an extra bonus, the RadioButton control solves an annoyance specific to HTML radio buttons. An HTML developer must manually designate an internal radio button group name for each radio button in the group that should work together (i.e., which should be mutually exclusive). This isn’t hard to do, but it’s still an extra step, and more work than should really be necessary. So, by default, if you don’t explicitly put a RadioButton into a group, it will automatically group itself with any siblings (with the same DOM parent) that are similarly ungrouped.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Tommy Carlier
EMAIL: tommy@tcx.be
IP: 213.118.209.190
URL: http://blog.tcx.be/
DATE: 02/20/2012 11:42:13 PM
There's an easier way to create a label for a checkbox, that does not have the gap or require an ID on the checkbox: embedding the checkbox inside the label:

{label}{input name=remember type=checkbox} Keep me signed in{/label}
-----
COMMENT:
AUTHOR: Tommy Carlier
EMAIL: tommy@tcx.be
IP: 213.118.209.190
URL: http://blog.tcx.be/
DATE: 02/20/2012 11:43:22 PM
Ignore my previous comment: I didn't read your post all the way to the end. Stupid me. :-)
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 64.46.49.213
URL: http://profile.typepad.com/jan_miksovsky
DATE: 02/21/2012 09:06:05 PM
Tommy: No worries. It was kind of surprising to me to come across the implicit form of a label (where it contains the input control), since most explanations of label elements that I've seen use the explicit variant that takes a "for" attribute. The implicit one is much nicer!
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: UI Controls of the Week: Quickly fill up a UI mockup with photos, placeholder text, and ads
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: placeholders
CATEGORY: Controls

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2012/02/placeholders.html 
DATE: 02/13/2012 08:00:00 AM
-----
BODY:
<p>When you’re designing a new UI, you often need to experiment with a variety of UI layouts in advance of having content that’s representative of what your UI will eventually display. This is a good thing — you don’t want to be burdened with the task of creating meaningful content when you’re focused on layout and navigation flow. In the exploratory stages of design work, it’s also important for you, or your design’s reviewers, to not get caught up too much in the generation of sample content.</p>
<p>This is why designers have long used <a href="http://en.wikipedia.org/wiki/Lorem_ipsum">Lorem Ipsum</a> placeholder text to fill up a design. It looks like real text (which would not be the case if you simply mashed the keyboard), and you can <a href="http://www.lipsum.com/">generate an infinite amount of it</a> to fill up any design you’re working on. Most designers also have a collection of placeholder images or advertisements they can use to fill up a design mockup. One service will dynamically serve up <a href="http://placekitten.com/">placeholder photos of kittens</a>, although I’d imagine the conspicuous presence of zillions of kittens will be highly distracting for most web site designs.</p>
<p>Although end users never see these sorts of placeholders, they’re nevertheless an essential element in the software development process. I’ve yet to see placeholder components included in a UI library, but it seems eminently reasonable for these placeholders to be packaged up as reusable controls. Anything that cuts down on design time is money in your company’s pocket.</p>
<p>With that in mind, the QuickUI library now has several placeholder controls:</p>
<p>&#0160;</p>
<p><strong>LoremIpsum</strong></p>
<p>The <a href="http://quickui.org/catalog/LoremIpsum/">LoremIpsum</a> control generates an arbitrary number of paragraphs of Lorem Ipsum text. You can control number the number of sentences per paragraph. By default, the first sentence of the first LoremIpsum control starts with “Lorem ipsum dolor sit amet…”, but you can control that as well.</p>
<p><strong>FlickrInterestingPhoto</strong></p>
<p>The <a href="http://quickui.org/catalog/FlickrInterestingPhoto/">FlickrInterestingPhoto</a> control grabs a photo from Flickr’s <a href="http://www.flickr.com/explore/interesting/">Interestingness</a> collection for the previous day. You can pick one of Flickr’s standard image sizes, or you can use CSS to scale the photo to an arbitrary size.</p>
<p>I use Flickr for this control because it’s free, has a good API, has high-quality images, and the images will change each day. It’d be pretty straightforward to adapt the control to another photo service.</p>
<p><strong>AdPlaceholder</strong></p>
<p>Finally, the <a href="http://quickui.org/catalog/AdPlaceholder/">AdPlaceholder</a> control creates a rectangle the size of any <a href="http://www.iab.net">IAB</a> standard ad unit, or you can specify an arbitrary size.</p>
<p>I’ve looked for a server that would serve up meaningful ad images, but haven’t found one. Some sites will give you a small set of ad placeholders, but they’re too boring to be convincing, and the small size of the sample set means you get too much repetition. An ad placeholder service would be quite useful. It would give advertisers free exposure, although the ad server would need to be rigged to <em>not</em> count such impressions as meaningful. All this means that it’s hard to provide a general-purpose ad placeholder control. It would be quite easy, on the other hand, to create an ad placeholder control that worked against a specific ad server and ad account.</p>
<p>&#0160;</p>
<p>Using placeholders like these let you quickly fill up a mockup. E.g., the <a href="http://quickui.org/catalog/PersistentPanel/persistentPanelSideDemo.html">demo</a> for the <a href="http://quickui.org/catalog/PersistentPanel/">PersistentPanel</a> control uses all three types to block out a fairly interesting layout on the fly:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20168e6fdf9ed970c-pi"><img alt="PersistentPanel (side)" border="0" height="480" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20168e6fdf9fc970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="PersistentPanel (side)" width="425" /></a></p>
<p>&#0160;</p>
<p>In practice, I’ve discovered that these dynamic placeholder controls deliver a substantial benefit over relying on static content: the random content forces me to cope with layout situations I might not expect or encounter until far later in the development process. Designers have a innate tendency towards perfection, and invariably pick sample content to make a layout look as appealing as possible. For example, a design for a window will typically show a set of content that perfectly fills the window, but as I noted long ago, such a design is <a href="http://miksovsky.blogs.com/flowstate/2005/07/if_a_ui_sketch_.html">probably too good to be true</a>. Your team will end up evaluating a design according to a degree of theoretical perfection that will never be seen in production. By building mockups around dynamic content, you force yourself to recognize and adapt to a more meaningful range of text run lengths, picture aspect ratios, and so on.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: UI Control of the Week: TabSet for traditional tabbed pages
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: ui-control-of-the-week-tabset-for-traditional-tabbed-pages
CATEGORY: Controls

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2012/02/ui-control-of-the-week-tabset-for-traditional-tabbed-pages.html 
DATE: 02/06/2012 12:00:00 AM
-----
BODY:
<p>This week&#39;s control is the standard tabbed page UI found throughout client apps and web sites. Here&#39;s a typical example, from iTunes Preferences:</p>
<p><img alt="ITunes Preferences" border="0" height="434" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20163007b71aa970d-pi" title="iTunes Preferences.png" width="544" /></p>
<p><strong>Key attributes</strong></p>
<ul>
<li>The tabs typically represent different aspects of a single object, or different areas at the same navigational depth in a hierarchy.</li>
<li>There&#39;s one button for each tab. Clicking a button selects the corresponding tab.</li>
<li>The button for the active tab is always visually highlighted in some way. Often the active tab is shown on a surface contiguous with that of the active page. (iOS tabs don&#39;t do this.)</li>
<li>The tab button are usually arranged horizontally across the top, but may also appear arranged along the left or, more rarely, the bottom.</li>
<li>All tabs share the same width, and usually the same height as well. This consistent size probably was originally intended to reflect the consistent physical size of the atavistic tabbed paper folders that inspired this&#0160;UI representation, but even now the consistent size is useful in helping the user recognize all the tabs as related aspects of some single thing.&#0160;(Exception: On the Mac, a tabbed Preferences dialog like the one above, in which the window holds nothing but the tab set, will change size as the user changes tabs.)</li>
<li>There&#39;s usually just one row of tabs. (Multiple rows are clunky: they prevent the active button from being adjacent to its corresponding tab, or else force tab rows to switch places.) This generally means the number of tabs is usually low, typically in the 3<span style="font-size: 15px;">–</span>9 range.</li>
</ul>
<p><strong>TabSet control</strong></p>
<p>I&#39;ve posted a <a href="http://quickui.org/catalog/TabSet">TabSet</a> control in the QuickUI Catalog that manages a set of tabs:</p>
<p><img alt="TabSet" border="0" height="112" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20168e6727e9d970c-pi" title="TabSet.png" width="300" /></p>
<p>The pages within the TabSet can be any type of element or control, although for convenience a&#0160;<a href="http://quickui.org/catalog/Tab">Tab</a> control is provided to make it easy to set the page&#39;s descriptive label.</p>
<p>Usage: Use a TabSet when you need to fit a large number of controls into a comparatively small space, and the controls can be grouped into meaningful tabs with clear labels. The controls in each tab should generally only have local effects within that tab&#39;s UI; it would be extremely confusing if checking a box in one tab disabled some control on a different tab.</p>
<p>A scrolling page may often be a simpler alternative to a tabbed UI. One advantage tabs do have is that the labeled tab buttons provide a summary; they help give the user an overview of what object properties, navigational areas, etc., are available. To the extend the tab labels are meaningful and clearly reflect the tab&#39;s contained controls, this labeled structure may accelerate a user&#39;s search for a particular control.</p>
<p><strong>Implementation notes</strong></p>
<p>I&#39;ve built TabSet top of a more primitive control called&#0160;<a href="http://quickui.org/catalog/Switch">Switch</a>. Switch acts as a container for other elements, and will only show one of those elements at a time. (The &quot;Switch&quot; name is inspired by the &quot;switch&quot; statement in&#0160;programming languages like C and JavaScript.) There are actually plenty of cases where a UI will contain a mutually-exclusive set of elements, and not all of these cases happen to look like tabs, so upon reflection it&#39;s somewhat surprising to me that more UI toolkits don&#39;t offer something like a Switch control.</p>
<p>In this case, the TabSet wraps a Switch, adding a&#0160;<a href="http://quickui.org/catalog/List">List</a> of buttons and populating them with the description() property of the corresponding tabs.</p>
<p>The trickiest part of TabSet turned out to be handling the common case in which the TabSet itself should be as tall as its tallest tab (regardless of the individual tab heights). This allows for a consistent border or background, which helps the user interpret the disparate tabs as being closely related; it also avoids potential document reflow when the user switches tabs. The standard ad hoc solution in a case like this is to force all the elements to a known height (e.g., in pixels), but hard-coding element sizes seems like a cop-out if one&#39;s goal is to create a flexible control that handle a wide range of content. It seems like TabSet (or, actually, Switch) should be able to inspect the height of its contained elements and automatically resize itself to be as tall as the tallest contained element. This gets tricky because Switch normally hides all pages except the one which is active, and the height of an element hidden with display: none is reported as zero. To work around this, the underlying Switch class has been modified so that, in the auto-maximizing case like this, Switch hides the inactive pages with visibility: hidden instead (which lets the elements report their correct height), then uses absolute positioning to superimpose and top-align the pages.</p>
<p>A related complexity arose in the case shown in the TabSet demo: the height of a tab may change based on asynchronously loaded content (e.g., an image). So the update of any tab&#39;s content, even one which isn&#39;t currently visible, may potentially force the TabSet to resize. Unfortunately, there isn&#39;t a standard DOM resize event for elements other than elements the <em>user</em> can resize (such as the window). So QuickUI controls have to make do by raising a custom event when they resize, allowing controls like Switch to adjust their height accordingly.</p>
<p>It&#39;s boring details like resizing that forces most designers to throw up their hands and resort to hard-coded pixel dimensions, but UI controls that can flexibly handle dynamic content are ultimately far easier to use and work with as a design evolves.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Using QuickUI controls in plain JavaScript
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: using-quickui-controls-in-plain-javascript

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2012/02/using-quickui-controls-in-plain-javascript.html 
DATE: 02/01/2012 08:00:00 AM
-----
BODY:
<p>I’ve heard from people who are interested in using QuickUI (including the controls I’ve been discussing here in Control of the Week posts), but who want to do so in pure JavaScript. If this sounds like you, I have good news:</p>
<ol>
<li>The framework has received a number of updates over the past two months such that it is now practical to use QuickUI in pure JavaScript and CSS.</li>
<li>I’ve put together an <a href="http://wp.me/p2aeAX-e">interactive tutorial</a> that shows you how to do this.</li>
</ol>
<p>Until now, it’s been easiest to develop in QuickUI using a proprietary HTML-like markup language which, though nice and compact, also necessitates the need for a client-side compiler. Now that the markup requirement has been removed, you should be able to use any of the QuickUI controls described here in any web app.</p>
<p>By the way, the above link will take you to a new, separate QuickUI blog that’s intended as a more technical resource for people already using the framework. I intend to keep the flow|state blog here as a separate venue for discussing UI design topics. Posts here may touch on QuickUI (given my current work), but my goal is that those posts will still be interesting and relevant to an audience of designers who don’t code or aren’t interested in coding.</p>
<p>I&#39;d just like to offer thanks to the individuals who have provided me with feedback on the evolving shape of QuickUI. Your thoughtful commentary has been invaluable!</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: UI Control of the Week: Coding a ListInlay pattern that lets user expand list items in place
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: listinlay
CATEGORY: Controls

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2012/01/listinlay.html 
DATE: 01/30/2012 08:00:00 AM
-----
BODY:
<p>I think the concept of a <a href="http://en.wikipedia.org/wiki/Pattern_language">pattern language</a> is a useful lens with which to consider interface design, but we don’t have to settle for patterns as static, textual descriptions. The first pattern language was grounded in the domain of physical architecture, and while the concept was deeply insightful, many people have applied it to the domain of software user interface design without, I believe, recognizing that the constraints of building architecture don’t apply to software design. Given a properly expressive UI framework, many UI techniques described as patterns can be implemented in code.</p>
<p>I’ve been a fan of attempts to catalogue UI patterns since I first came across Jenifer Tidwell’s <a href="http://www.mit.edu/~jtidwell/common_ground.html">Common Ground</a>. Tidwell’s latest work is presented in her recent second edition of <a href="http://amzn.to/xIUjDY">Designing Interfaces</a>. Many of the patterns it describes contain some non-trivial element that can be given a functional manifestation in code. To use an analogy from programming languages, UI patterns are somewhat similar to abstract base classes. Such a class defines some, but not all, of the behavior necessary to create a useful result. In my mind, the more interesting a UI pattern is, the more likely it is that some aspect of the textual description can be identified and coded in a reusable UI control.</p>
<p>Take, for example, the&#0160;<a href="http://designinginterfaces.com/patterns/list-inlay/">List Inlay</a>&#0160;pattern, in which a list lets the user expand an item to see more detail in place. Tidwell points to Amazon’s mobile review UI as one example:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20168e635c0c4970c-pi"><img alt="Amazon Mobile Reviews (Collapsed)" border="0" height="480" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20163003f079a970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Amazon Mobile Reviews (Collapsed)" width="320" /></a></p>
<p>&#0160;</p>
<p>Each list item shows a capsule review. Tapping a review expands the item in place to show the full review text and some additional details:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20168e635c27a970c-pi"><img alt="Amazon Mobile Reviews (Expanded)" border="0" height="480" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20168e635c3c6970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Amazon Mobile Reviews (Expanded)" width="320" /></a></p>
<p>&#0160;</p>
<p><strong>Key attributes:</strong></p>
<ul>
<li>All list items are typically collapsed by default.</li>
<li>Clicking a list item expands it to reveal more information about that item, possibly including interactive controls. Clicking an item which is already expanded generally collapses it.</li>
<li>The list may either allow multiple items to be expanded simultaneously, or may permit only a single item to be expanded at a time.</li>
</ul>
<p>A List Inlay can also be used to implement the common “Accordion” user interface pattern as well. As far as I can tell, there’s not much hard difference between these two patterns. A List Inlay is essentially an Accordion which shows live data, whereas the UI elements described as Accordions tend to have static headings that have been hand-authored to summarize their contents. Beyond that, to me these two patterns seem nearly the same.</p>
<p><strong>ListInlay control</strong></p>
<p>Here, the above attributes of the List Inlay pattern are fairly straightforward to code.&#0160;With those requirements in mind, I’ve created a <a href="http://quickui.org/catalog/ListInlay">ListInlay</a> control for the QuickUI Catalog:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201676134721b970b-pi"><img alt="ListInlay" border="0" height="250" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20168e635c444970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="ListInlay" width="300" /></a></p>
<p>&#0160;</p>
<p>Usage: Tidwell suggests using a List Inlay when…</p>
<blockquote>
<p><em>Each item has interesting content associated with it, such as the text of an email message, a long article, a full-size image, or details about a file’s size or date. The item details don’t take up a large amount of space, but they’re not so small that you can fit them all in the list itself. </em><em>You want the user to see the overall structure of the list and keep that list in view all the time, but you also want her to browse through the items easily and quickly.</em></p>
</blockquote>
<p>In contrast, if the item details are complex, or offer substantial editing capabilities, it may be more appropriate to navigate to the details in a separate window or dialog, or show the details in a separate detail pane, rather than expanding them inline.</p>
<p>The ListInlay class permits a single item to be expanded at a time, so clicking a new item to expand it will collapse any previously-selected item. I’ve also created a multiple-select variation called <a href="http://quickui.org/catalog/MultiListInlay">MultiListInlay</a> that permits multiple items to be expanded at once.</p>
<p>Caution: Some applications use a variation of this UI for navigation, e.g., as an accordion pane on the left side of an app window. It’s not uncommon for such apps to dock the list items to the top or bottom of the navigation pane (with the selected item filling the remaining space in the middle). I believe such a UI is likely to exhibit usability problems: at large window sizes, a user looking at the navigation items docked to the top of the pane could easily overlook additional items docked to the bottom.</p>
<p><strong>Implementation notes</strong></p>
<p>This control was a pleasure to code up. A ListInlay is just a subclass of the previously-discussed <a href="http://miksovsky.blogs.com/flowstate/2011/11/listbox.html">ListBox</a> meta-control that, by default, uses a <a href="http://miksovsky.blogs.com/flowstate/2011/12/collapsible.html">Collapsible</a> to represent list items. Combining these two controls worked right away, and from there it was simply a matter of customizing how ListInlay renders a list item’s selected state. Instead of just adding a CSS “selected” class, the list also needs to invoke the Collapsible’s collapsed() property. (I.e., when an item is selected, it’s collapsed property should be set to false.)</p>
<p>The real treat was that basing this control off of ListBox means that, with no additional work, ListInlay offers basic keyboard navigation. The control’s generic appearance doesn’t show the selected state, but once the list has focus, you can navigate the list with the Up and Down keys. It was a pleasant surprise to see that the navigation UI played well with the expand/collapse animation; score one for Separation of Concerns.</p>
<p>It’s hard to describe, but this sort of coding reminds me a lot of coding in Lisp. In Lisp you can make use of higher-order functions like mapcar to concisely express complex calculations. In the same vein, coding in QuickUI often entails using a meta-control like ListBox to quickly create the reasonably complex behavior of something like ListInlay.</p>
<p>Of course, the point of a control like ListInlay isn’t that it’s a polished, production-ready result in its own right. As with an abstract base class, what makes it useful is that it could form the <em>basis </em>of something interesting. As I’m going through “Designing Interfaces”, it’s possible to pick out those patterns whose interaction details are consistent or specific enough that they could similarly be translated directly to code. I’m adding the most interesting such patterns to the QuickUI road map for future work.</p>
<p>&#0160;</p>
<p><em>I&#39;ll be traveling this week to Dublin, Ireland, for the Interaction 2012 conference. If you&#39;ll be there, please drop me a line!</em></p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: UI Control of the Week: Google-style TransientMessage to show quick, modeless progress or confirmation
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: transientmessage
CATEGORY: Controls

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2012/01/transientmessage.html 
DATE: 01/23/2012 08:00:00 AM
-----
BODY:
<p>Sometimes an application has to deliver to the user a brief, non-vital message. A number of sites, including Google’s app suite, show such messages in a transient popup that presents a small bit of information for a second or two, then disappears on its own. Here’s a typical “Loading…” message, which appears over the standard Google toolbar:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20168e5b4a5d8970c-pi"><img alt="Google Docs Loading Indicator" border="0" height="40" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20162ffbedcc5970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="Google Docs Loading Indicator" width="600" /></a></p>
<p>&#0160;</p>
<p>An earlier generation of client applications might have shown such information in a status bar. One disadvantage of a status bar is that it’s always there, which not only takes up room, but can inure a user to its presence; they might easily overlook a message that appears there briefly. In contrast, the very appearance of Google’s “Loading…” message over the top of the toolbar helps draw attention to the message.</p>
<p>The “Loading…” message above obviously disappears when the loading operation has completed. In other cases, the message is used to confirm the successful completion of an operation. For example, if you use <a href="http://www.cozi.com">Cozi</a> to send a shopping list to a family member’s mobile phone, a transient message lets you know the list has been sent successfully. In these cases, a message typically remains visible for about two seconds before fading away, in order to give the user enough time to read it. This sort of message UI may be preferable to a traditional modal confirmation dialog in cases like these where because the information is not vital. If the user happens to look away while the message is visible, they can nevertheless assume the operation worked; the message is just providing explicit confirmation. The fact that the message fades away on its own avoids forcing the user to take a second to dismiss it manually.</p>
<p><strong>Key attributes</strong></p>
<ul>
<li>The message goes away on its own, either when an operation completes or when sufficient time has passed to let the user read the message.</li>
<li>It’s not absolutely essential that the user see the message. Hence, the app doesn’t require that the user acknowledge the message. </li>
<li>The message content is fairly short, perhaps one medium-length sentence at most. Since reading speeds vary, the longer the text is, the longer variation you’ll have in how long users need to read it. Even if the message is not essential, it would nevertheless be disconcerting to a user for the message to disappear before they could finish reading it. </li>
<li>The message often visually appears docked to the top of the page (as shown above) or centered vertically.</li>
</ul>
<p><strong>TransientMessage</strong></p>
<p>I’ve posted a <a href="http://quickui.org/catalog/TransientMessage">TransientMessage</a> control to the QuickUI Catalog. As you’ll see on that page, I’m experimenting with the impressive, embeddable <a href="http://ajaxorg.github.com/ace/">ACE</a> code editor from Ajax.org to let you experiment with controls directly within the Catalog documentation. If this works out, I’ll look at rolling it out to the rest of the Catalog. <em>(Known issue: The page with the code editor doesn&#39;t work in IE8 yet.)</em></p>
<p>As usual, the generic styling of the message can be changed to suit an application’s visual aesthetic.</p>
<p>Use a TransientMessage to deliver a short message, e.g., as a modeless indicator of a short operation (the loading example above) or as a confirmation of an operation that has just completed. If the message text is more than a simple sentence, or if it’s critical that the user acknowledge the message, consider a standard JavaScript alert or a <a href="http://quickui/catalog/Dialog">Dialog</a> instead.</p>
<p><strong>Implementation notes</strong></p>
<p>This control is built on top of the general-purpose <a href="http://quickui.org/catalog/Popup">Popup</a> base class, making implementation relatively straightforward. One side effect of this implementation is that any click the user makes while the message is displayed will dismiss the message. In future versions, it might be nice to let the user continue to interact with the UI during the short period while the message is visible.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Noura
EMAIL: info@antanovila.lt
IP: 177.71.179.150
URL: http://www.facebook.com/profile.php?id=100003405525173
DATE: 02/29/2012 11:13:37 AM
I have alywas hated such message boxes. I think a better solution is something similar to the Windows Live Messenger  toast  (I believe that is what it is called, I am talking about the popup above the clock when a user signs in, etc.).It can give the user the information they need at a glance without stealing focus and gives them something to click on if they want/need to. You could even integrate option buttons easily and just keep the toast on screen until it is clicked but it is still out of the way and allowing the user to continue working.I believe the  ballon  prompts introduced in Windows 2000 (?) were sort of a replacement to information message boxes however they were too limited IMHO. I am unsure if their limitations have been addressed in Vista?
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: UI Control of the Week: standard Collapsible panel for content that can be put away
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: collapsible
CATEGORY: Controls

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/12/collapsible.html 
DATE: 12/12/2011 08:00:00 AM
-----
BODY:
<p>It&#39;s fairly common for a UI to present some content whose value to the user may be unknown or may change over time. To avoid permanently distracting the user, the app can show the content in a panel the user can collapse. Consider the following two gadgets from Google’s Gmail client, the first expanded, the second collapsed:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2015437fc274b970c-pi"><img alt="Gmail Gadgets" border="0" height="268" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2015437fc2752970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Gmail Gadgets" width="176" /></a></p>
<p>&#0160;</p>
<p>Perhaps the user leaves the calendar gadget open because they find the considerable clutter it adds is worth its informational value. The “Invite a friend” gadget, however, isn’t worth much to them, so they collapse it and leave it that way. In the rare event they&#39;re suddenly inspired to invite a friend, it&#39;s easy enough to re-expand that panel to bring the UI back.</p>
<p><strong>Key attributes</strong></p>
<ul>
<li>Clicking anywhere in the heading collapses the panel&#39;s content, leaving only the heading visible. </li>
<li>The heading generally reacts to mouse-over by changing the cursor to a hand. The heading may also react in other ways, e.g., its background color may change.</li>
<li>In many cases, including the above example, the heading includes a small button element on the far right. Clicking this button has the same effect as clicking the heading itself, but the button offers a more obvious affordance of interactivity. </li>
<li>If present, the button&#39;s icon or contents generally reflect the panel&#39;s collapsed or expanded state. The button may show plus and minus signs or down- and up-pointing arrows. The icon usually suggests what will happen if you click it (e.g., if you click the plus, you’ll get <em>more </em>UI), rather than indicating the current state.</li>
<li>The transition between the expanded and collapsed state is usually animated to suggest that the content is rolling up into the heading, where it will be stored until the user decides to retrieve it again. </li>
<li>Many applications save the collapsed/expanded state for future sessions. In effect, the collapsible panel is offering a persistent user-configurable option, without any of the overhead of a separate Settings or Preferences area. </li>
</ul>
<p><strong>Collapsible and CollapsibleWithHeadingButton</strong></p>
<p>I&#39;ve posted a <a href="http://quickui.org/catalog/Collapsible">Collapsible</a> control to the QuickUI Catalog that offers the bare-bones functionality. Because the pattern of including a little button on the heading’s right is so common, I also added a subclass called <a href="http://quickui.org/catalog/CollapsibleWithHeadingButton">CollapsibleWithHeadingButton</a>:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2015394285dcb970b-pi"><img alt="CollapsibleWithHeadingButton" border="0" height="188" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2015437fc2758970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="CollapsibleWithHeadingButton" width="300" /></a></p>
<p>&#0160;</p>
<p>Use these Collapsible classes to confer a limited degree of customizability to a home page or information pane on the side. If most users are likely to want the information most of the time, collapsible panels might not be necessary. However, in cases where there&#39;s a fairly even split between users that want a given type of information and those that don&#39;t, such a panel can be a reasonable compromise. Similarly, if there are situations where an individual user may change their mind about whether they want the information (because it&#39;s useful) or not want the information (because it&#39;s distracting), consider a collapsible panel.</p>
<p><strong>Implementation notes</strong></p>
<p>To avoid requiring lots of graphic resources, for many of these controls I use text glyphs as button icons. Here a plus sign (“+”) is used in the collapsed state to indicate the content can be expanded, and a minus sign (“−”) is used when the content can be collapsed. I&#39;ve seen some sites that, perhaps unintentionally, use a hyphen (“-”) instead of a minus sign. A hyphen is too narrow, and ends up feeling like a weak counterpart to the plus sign. (Google avoids this by using a bitmap image, probably for tighter control over the final result across different browsers.)</p>
<p>One thing that feels a bit unresolved about gadgets like Gmail&#39;s, which offer a heading button on the right, is that the button and the heading text both do the same thing, but that shared behavior&#0160;is not obvious until you click.&#0160;My general feeling is that multiple controls that respond the same way to a click should respond the same way on hover. In this case, I arranged for mousing over the heading text to force the application of the button’s hover effect, even if the mouse isn’t actually over the button, as an extra cue that clicking either UI element will accomplish the same result. See <a href="http://miksovsky.blogs.com/flowstate/2011/05/where-should-the-hit-target-boundaries-for-ui-elements-go.html">Where should the hit target boundaries for UI elements go?</a> for more thoughts on reflecting hit target boundaries.</p>
<p>The animation effect includes a combination of a slide and a fade: the contents fade out during collapse, and fade in during expansion. To me, this enhances the effect of the content rolling away and unrolling again.&#0160;The fade effect is more pronounced when there’s a large block of content.</p>
<p>&#0160;</p>
<p><em>Aside: I&#39;ve invested work in reducing the number of files necessary to use controls in the QuickUI Catalog. It used to be the case that several files were required to use all the controls, but the whole catalog has been consolidated into just one pair of files: quickui.catalog.js and quickui.catalog.css. As described on <a href="http://quickui.org/catalog/usingCatalog.html">How to use these controls</a>, </em><em>you can include that pair of files directly. You can also follow the instructions for cloning the quickui-catalog repo and choosing the specific controls you want. Among other things, this makes it easier to try out the controls. For example, here&#39;s a <a href="http://jsfiddle.net/quickui/krubE/">jsFiddle that uses the QuickUI catalog</a> (including, for the time being, the CollapsibleWithHeadingButton control shown above).</em></p>
<p><em>flow|state will off for the next few weeks for the end-of-year holidays. See you next year!</em></p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: The web could benefit from a control panel for cross-app settings (e.g., for sounds)
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: the-web-could-benefit-from-a-control-panel-for-cross-app-settings

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/12/the-web-could-benefit-from-a-control-panel-for-cross-app-settings.html 
DATE: 12/08/2011 05:00:00 AM
-----
BODY:
<p>I think many web sites could benefit from the thoughtful use of sounds in their UI, but they avoid sound because the cost of doing so becomes too great. Client apps on Windows and OS/X get some degree of sound support for free with the operating system, as do mobile apps. In all cases, the OS provides a control panel that lets the user control whether sounds play for various events, and which sounds to use. Here’s the venerable Sounds tab of the Windows Sound control panel, virtually unchanged since something like Windows 95:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20153942ae380970b-pi"><img alt="image" border="0" height="589" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2015437feb0ec970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="image" width="481" /></a></p>
<p>&#0160;</p>
<p>For each standard UI event capable of generating a sound, the user can turn the sound off, or map the event to various sound files. Other sound control panels work similarly: the OS/X one is, by comparison, more limited, but the iOS Sound page in Settings has a substantial list of UI events which can be mapped to sounds (or vibration).</p>
<p>With this in mind, consider the work a web team has to do just to support sound. To support a pre-HTML 5 browser, they have to select from several different sound-playing technologies; in HTML 5 they can at least use the standard &lt;audio&gt; tag. Since many users won’t want sounds, they have to provide a Settings area within their app where the user can adjust settings. Maybe their app doesn’t even <em>have</em> a Settings area yet, so they’ll have to create a new one from scratch. Then they have to do some real sound design, to come up with a set of sounds that are: a) pleasing to a wide range of users, b) high quality, c) appropriate for the UI context, and d) very, very cheap. They’ll also have to do some work to ensure that sounds on their pages don’t bog down web site performance, e.g., by delaying the loading of the sound files, and being careful about which sound files are loaded and when.</p>
<p>For years, I’ve been a passionate believer in the use of sounds for <em>positive </em>reinforcement in a UI. That is, sounds can and should be used to let the user know when something has gone <em>right</em>, as opposed to when something’s gone wrong. The canonical example I offer is the satisfying sound of a car door closing: even when walking away from a car, you can hear when the door’s closed correctly. Even if you never consciously pay attention to that sound, the <em>absence</em> of that door-closing sound lets you know the door isn’t completely closed, and you turn around and walk back to close it again.</p>
<p>User interfaces can similarly benefit from the use of sounds for positive reinforcement. Not negative reinforcement; observe above what proportion of sound events in Windows are different flavors of, “Something’s gone horribly wrong.” I think many people in the software community, and many users, have a strong bias against sound because sound has been used so poorly in the past. The very best designers of sounds in UI are probably game designers, because they work so hard to make sound an integral and emotionally satisfying part of the game experience. The web at large could learn a lot from game sound designers.</p>
<p>With that in mind, I pushed hard at <a href="http://cozi.com">Cozi</a> to get sounds into our web app. Cozi’s web product has only two sounds:</p>
<ol>
<li>A “Message Sent” sound used whenever the service successfully transmitted a message to an external destination: e.g., a shopping list was sent via SMS to a family member’s phone.</li>
<li>A “Got it!” sound played by the app whenever the client had successfully saved user data (e.g., a new appointment) on the server.</li>
</ol>
<p>These sounds were tightly mapped to the UI, helping to subtly confirm to the user that some desirable thing had just gone as expected. A musician and sound designer created the sounds for us, taking care to make sure the sounds fit the application aesthetic, were suggestive of the event in question, and were not intrusive. With all that work, I think the sounds worked really well, helping to round out the application user experience and gave the product some dimensionality.</p>
<p>And despite claims from some people that, “No one likes web sites that play sounds”, I never heard complaints about these. Most people didn’t even notice them — which is just what was intended. Just like the car door-closing sound, these sounds perform their work at a subconscious level. Still, it would have been great to offer the user a way to turn sounds on and off, and potentially let them change which sounds played. Unfortunately, it was hard to justify the additional investment in doing that.</p>
<p>To that end, I’m hoping that someone will eventually create a shared sound control panel for the web. This could offer sound storage, sound mapping UI (such as the above), and easy sound integration for third-party web sites. This could work something like <a href="http://www.gravatar.com">Gravatar</a> (from Automattic, the folks behind WordPress.com), which lets <em>other </em>web sites offer user-customizable “avatars”. These are really just glorified profile pictures, but such pictures do serve a useful role on sites in bringing a community of users to life. A site like <a href="http://www.github.com">GitHub</a> can use Gravatar as a complete solution for user-customizable profile pictures at a trivial development cost.</p>
<p>I think Gravatar is an example of what could be possible with shared cross-app control panels: small bits of utility that let a user customize some settings they can carry with them to other sites. Facebook and Google are obviously already players in that game, but the stakes are all wrong. A site that wants to integrate with Facebook just to get a user profile picture is both making a substantial commitment to an entity whose behavior is sometimes threatening <em>and</em> the site must force its users to entangle themselves in Facebook’s plans — something a substantial number of people are loathe to do. I like Facebook, but if I’m just looking for someone to store a profile picture, frankly I trust Gravatar for that purpose more than I do Facebook.</p>
<p>There’s no great revenue model for a settings site like Gravatar, so presumably most of them would exist as public services provided by larger entities like Automattic. Hopefully more people will follow their lead, and build out some of the web’s missing control panels.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: BZ
EMAIL: 
IP: 8.12.63.33
URL: 
DATE: 12/08/2011 07:27:31 AM
Actually, I just looked at the Windows list of sounds that are enabled by default in Windows 7. I found 9 sounds for positive reinforcement, 7 sounds for when something is wrong, and 3 neutral sounds (default beep and the like), so the ratio seems pretty balanced to me.
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 71.35.97.23
URL: http://profile.typepad.com/jan_miksovsky
DATE: 12/08/2011 08:48:14 AM
BZ: Fair enough... I should have counted the rest! I still maintain that, in general, UI designers have tended to treat sound more as something to draw a user's attention to a negative situation than a positive one.
-----
COMMENT:
AUTHOR: Marcus Downing
EMAIL: marcus@bang-on.net
IP: 217.151.101.154
URL: http://www.bang-on.net
DATE: 12/12/2011 02:36:40 AM
Recording sounds specially is beyond the scope of many small software houses. Is there a good, open collection of event sounds that can be used legally?
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 71.35.97.23
URL: http://profile.typepad.com/jan_miksovsky
DATE: 12/12/2011 09:32:44 AM
Marcus: What a great question. I don't know, actually; when I checked a number of years ago, I couldn't find one, and ended up hiring a sound designer. All the hoopla about web fonts has given attention to efforts like Google Web Fonts and TypeKit, but I'm not aware of a corresponding effort for sounds.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: UI Control of the Week: a PanelWithOverflow to create toolbars with overflow menus and maximum layout efficiency
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 0
BASENAME: panelwithoverflow
CATEGORY: Controls

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/12/panelwithoverflow.html 
DATE: 12/05/2011 08:00:00 AM
-----
BODY:
<p>Applications with toolbars should generally give the user access to all toolbar commands, even when the window isn&#39;t large enough to show all of them. Wrapping a toolbar&#39;s contents is one possibility, but this is usually avoided because it begins to steal too much space away from the application&#39;s main content area. The standard technique is to have the commands which can&#39;t fit horizontally <em>overflow</em> into a dropdown menu.</p>
<p>This technique is used, for example, in the Bookmark (or Favorite) toolbar in every mainstream web browser. Here&#39;s Safari:</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2015437a4d183970c-pi"><img alt="Safari Bookmark Bar" border="0" height="151" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2015393d1510b970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Safari Bookmark Bar" width="670" /></a></p>
<p>When the user makes the window too small to see all the bookmark buttons, the buttons which don’t fit overflow into a dropdown menu:</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20162fd26ba30970d-pi"><img alt="Safari Bookmark Bar with Overflow" border="0" height="151" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20162fd26ba3c970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Safari Bookmark Bar with Overflow" width="653" /></a></p>
<p><strong>Key attributes</strong></p>
<ul>
<li>The toolbar contents (usually buttons) are arranged horizontally. </li>
<li>Items which don&#39;t fit are clipped entirely; no item (e.g., Bookmark 5 in the toolbar of the second image) is ever shown partially visible.</li>
<li>If there are any items which don&#39;t fit, an overflow menu button appears. The standard is for the button to show a pair of right-pointing chevrons (»).</li>
<li>Clicking the menu button produces a dropdown menu containing the items which don’t fit in the toolbar.</li>
<li>Items may appear slightly differently in the menu than they appear in the toolbar. In the Safari example above, plain-looking toolbar buttons become vertically-oriented menu items with icons. Beyond the change in appearance, the items generally behave the same in the menu as they do in the toolbar. </li>
<li>As the user resizes the window, the control recalculates whether an overflow menu (and therefore a menu button) is necessary. </li>
</ul>
<p>This overflow pattern is apparently so successful that the <em>exact same user interface</em> — down to the use of right-pointing chevrons to indicate overflow — is used by Chrome, Firefox, and Internet Explorer. The funny thing is, each of these other browsers fumble one small aspect of the behavior: determining whether or not to allocate room for the menu button.</p>
<ul>
<li>Google Chrome always allocates room for the menu button, even when the button isn’t visible. This means there are cases where the toolbar button would have fit, but the invisible menu button is still taking up room, which forces overflow to be triggered a bit earlier than strictly necessary. For comparison, in the top screen shot, Safari can fit the button for “Bookmark 6”, but in the same situation, Chrome will force that button to overflow. Effectively the user has something like 10-20 pixels or so <em>less</em> room in Chrome for their browser bookmarks.</li>
<li>Mozilla Firefox is a bit smarter, but inconsistent. It doesn&#39;t allocate room for the menu button if the menu button&#39;s not currently visible, so Firefox can squeeze in an extra bookmark in cases where Chrome drops it. However, once the menu button is visible, the menu button takes up room — even when hiding the menu button would now leave enough room to show the last bookmark!</li>
<li>Internet Explorer 10 gets things right — but get points off for incessantly flickering the menu button during a window resize. Presumably on any window resize, IE is <em>always </em>hiding the menu button, then re-showing it if it’s needed. This doesn&#39;t feel nearly as solid as Safari’s treatment, which smoothly moves the menu button left and right as the window resizes.</li>
</ul>
<p>These are all small points, and I doubt most users of these browsers have ever noticed them. Still, this is not ideal. I think this is what happens when designers and developers, even those on huge software teams, are forced to roll their own solution to a common problem. Either they don&#39;t notice the issue or, if they do, don&#39;t feel like it&#39;s worth taking the time to fix.</p>
<p>And here we&#39;re talking about large, production web browsers built upon rich client-side UI frameworks. Many web sites aren’t building on a rich UI framework, so they’re forced to code everything by hand. The result is that web application toolbars are typically far clunkier. They often blithely assume the user’s window will be wide enough to show all the commands, and clip or wrap the buttons when the window is narrow.</p>
<p>A correct, solid implementation (like Safari’s) should be available to any site that wants it — by coding the correct solution in a reusable component. By treating something as basic as overflow as a component in its own right, it suddenly becomes worth lavishing the attention and effort to achieve maximum layout efficiency, including properly handling those last 10-20 pixels, because lots of users across multiple apps will benefit.</p>
<p><strong>PanelWithOverflow</strong></p>
<p>I&#39;ve posted a basic <a href="http://quickui.org/catalog/PanelWithOverflow">PanelWithOverflow</a> control to the QuickUI catalog.</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20162fd26dcbe970d-pi" style="display: inline;"><img alt="PanelWithOverflow" border="0" class="asset  asset-image at-xid-6a00d83451fb6769e20162fd26dcbe970d" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20162fd26dcbe970d-800wi" title="PanelWithOverflow" /></a></p>
<p>As discussed above, use PanelWithOverflow in situations like toolbars where you want to constrain the height of a toolbar while simultaneously guaranteeing access to all the toolbar&#39;s commands at a wide range of window sizes. For a toolbar that docks to the top of the page, nest the PanelWithOverflow inside a <a href="http://quickui.org/catalog/PersistentPanel">PersistentPanel</a>.</p>
<p><strong>Implementation notes</strong></p>
<p>The simplest way to implement this behavior in a web control seems to be to force the control’s contents to appear on the same line (white-space: nowrap), then calculate which items completely fit. The ones that don&#39;t are explicitly made invisible (using visibility: hidden) to avoid a partially-clipped item.</p>
<p>In coding this, it became obvious why Chrome and Firefox browsers display the layout oddities they do. To decide whether the <em>nth</em> item can fit, you need to know how much room is available for it, which depends on whether or not the menu button is going to be needed — which in turn may depend on whether the next item to the right (item <em>n</em>+1) will fit. The layout logic gets much simpler, however, by applying the expedient of looping over the control&#39;s contents <em>from right to left</em>. If item <em>n</em>+1 is going to overflow, you know for sure that you need to allocate room for the menu button when considering item <em>n</em>.</p>
<p>Just because this QuickUI control avoids a small layout bug in the various browser toolbar implementations above doesn&#39;t mean it’s necessarily better than those implementations. Those toolbars have many more features (e.g., customization), and surely have received much more testing overall. Still, I’d argue that the QuickUI implementation is a reasonably solid start on an open, component-based solution.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: UI Control of the Week: basic ListBox, and how keyboard navigation is never as simple as you think
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: listbox
CATEGORY: Controls

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/11/listbox.html 
DATE: 11/28/2011 08:00:00 AM
-----
BODY:
<p>The standard list box is such a pervasive element of traditional client GUIs that it’s surprising how hard it is to find a good list box implementation on the web. A typical Windows example:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20154373efe9e970c-pi"><img alt="Windows Screen Resolution List Box" border="0" height="164" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20154373efea2970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Windows Screen Resolution List Box" width="357" /></a></p>
<p>&#0160;</p>
<p>Your browser will probably render a standard HTML &lt;select&gt; tag as a <em>dropdown </em>list box, but as far as I know, there’s no standard way to get a <em>in-line </em>list box that supports single selection. (You will get a list box if you set the select tag’s “multiple” attribute, but then it will let the user select multiple items, which may not be what you want.) And all browser list elements can only render list items as plain text; as in the <a href="http://miksovsky.blogs.com/flowstate/2011/10/listcombobox.html">earlier discussion of combo boxes</a>, none of the standard web list boxes support a rich presentation for a list item. Most sites create their own “list box” elements as divs with clickable inner elements. This usually means they end up without good keyboard support: e.g., you can’t move the selection up or down with the Up and Down arrow keys.</p>
<p><strong>Key attributes</strong></p>
<ol>
<li>In the most basic type of list box, zero items or one item can be selected at a time. It’s always possible to change which item is selected, but once a selection has been made, it’s often not possible to revert to the state where no item is selected. There are other types of list boxes that support multiple selection.</li>
<li>When the list box has focus, pressing the Up key moves the selection to the previous item.</li>
<li>Pressing Down moves the selection to the next item.</li>
<li>Pressing Home (Fn+Up on the Mac) selects the first item.</li>
<li>Pressing End (Fn+Down) selects the last item.</li>
<li>Pressing Page Up (Option+Up) scrolls up a page. Or does it? See below.</li>
<li>Pressing Page Down (Option+Down) scrolls down a page.</li>
</ol>
<p>Pop quiz: Off the top of your head, do you think you can describe exactly how Page Up and Page Down should work?</p>
<p>You’d think they would just scroll the viewport by one page height in the indicated direction. That’s the basic idea. However, the actual behavior of these keys in a list box is more intricate. Consider Page Down. On Windows, if the currently-selected item is somewhere in the middle of the viewport, then hitting Page Down selects the control currently visible at the bottom of the viewport. That is, the first press of the Page Down key in a list generally doesn’t scroll the list at all! It’s only once the selection is <em>already</em> at the bottom of the viewport that the list scrolls by one page. Page Up works the same, only in the opposite direction. On the Mac, the standard behavior is different: Page Up and Page Down scroll the viewport by a full page, regardless of selection position, but these operations don’t move the selection. (I’m not sure why. To me, at least, the Windows behavior feels more useful.)</p>
<p>Another complexity of keyboard navigation is tracking whether the list actually did anything in response to a key press. If it did, the list box needs to stop propagation of the keyboard event. But if the list box <em>didn’t</em> do anything with the key (say, the user hit the Down key, but the selection was already sitting on the last item), then the event should bubble up and, for example, scroll the entire page instead of just scrolling the list box.</p>
<p>Finally, following any keyboard navigation, the list may need to adjust its scroll position to ensure that the currently-selected item is completely visible.</p>
<p>I think it’s safe to say that keyboard navigation is a good and desirable thing: it can make certain tasks easier and faster, and it makes a UI more accessible. I can’t see a significant downside to letting a user navigate a list with a keyboard, as the UI doesn’t get in the way of mouse or touch users. So how come more sites don’t have list boxes? It’s a bit of work to handle the keyboard, but not <em>that</em> much work. I think one problem is that <em>it’s not free</em>. If someone’s on deadline to produce a list of items for a web page, even supporting the selection and navigation described above is going to take them some time, and maybe they’re not going to get any immediate credit for going that extra mile. This is one reason I’m hoping a good UI framework will help make basic usability improvements in controls easier for any site to pick up.</p>
<p><strong>ListBox</strong></p>
<p>I’ve posted a basic, single-selection, in-line <a href="http://quickui.org/catalog/ListBox">ListBox</a> control to the QuickUI Catalog:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20162fcc0c352970d-pi"><img alt="ListBox" border="0" height="202" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20153936b4f0c970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="ListBox" width="202" /></a></p>
<p>&#0160;</p>
<p>This ListBox control is also used as the dropdown portion of a <a href="http://quickui.org/catalog/ListComboBox">ListComboBox</a>.</p>
<p>Usage: Use an in-line ListBox in situations where picking a single item from a list is a significant part of the UI’s task. A list box will consume more real estate than a combo box, but also requires one less click to select an item. A list box also makes at least some of the choices visible to the user without forcing them to first interact with the control; this can make the task of selection more approachable. A standard list box doesn’t allow the user to add a choice of their own; for that, a combo box is the standard answer.</p>
<p><strong>Implementation notes</strong></p>
<p>As might have been expected from the above discussion, the trickiest aspect of this control was the keyboard navigation, especially the behavior of Page Up and Page Down. For now, at least, I’ve let Page Up and Page Down work the same on the Mac as on Windows. (If anyone can explain to me a common situation where the Mac’s standard viewport-scrolling behavior is better than the Windows behavior, please let me know!)</p>
<p>On the plus side, now that the QuickUI Catalog finally has a rudimentary ListBox control, I was able to drop a ListBox essentially unmodified into the ListComboBox control to give the latter basic keyboard support. ListComboBox originally used the more primitive <a href="http://quickui.org/catalog/List">List</a> control, which simply renders a JavaScript array as a set of controls. ListBox builds on List, so it also has the ability to render array items as controls; to this it adds the concepts of single selection and keyboard navigation. A core promise of a control framework is code reuse. In this case, there was no need to reproduce single selection and keyboard navigation again in ListComboBox, since ListBox already provided it. It’s wonderful when that object-oriented promise can actually be realized.</p>
<p>One thing I left off this time around is making it easy to have a ListBox be an integral number of lines tall. If you look carefully at the bottom of the above ListBox shot, the bottom row is just a bit clipped. It would look better if the list box were just a bit taller, so that an integral number of lines could be completely visible. I also began experimenting with a multiple-selection list box, but that’s a fairly intricate bit of work all on its own.</p>
<p>&#0160;</p>
<p><em>Thanks to those of you who wrote expressing interest in using QuickUI with plain JavaScript (i.e., without markup). I’m continuing to work on that, and hope to have some basic documentation in place by year’s end. Stay tuned.</em></p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: UI Control of the Week: HighlightEffects to expand a highlighted item without affecting layout
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: highlighteffects
CATEGORY: Controls

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/11/highlighteffects.html 
DATE: 11/21/2011 08:00:00 AM
-----
BODY:
<p>Johannes Tonollo’s excellent <a href="http://www.ui-transitions.com">Meaningful Transitions</a> site does a thorough job cataloguing animated transitions that can be used to convey specific messages to a user. One animation I’ve always liked was expanding an element on hover, as in this screen within Windows Media Center:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20153931b3b4e970b-pi"><img alt="Media Center Movie Guide" border="0" height="360" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20153931b3bac970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Media Center Movie Guide" width="640" /></a></p>
<p>&#0160;</p>
<p><strong>Key attributes</strong></p>
<ul>
<li>When the mouse hovers over a list item (or the keyboard focus moves to it), the item becomes highlighted.</li>
<li>The highlighted item animates in size, expanding in every direction. It covers the adjacent items. The other items (the ones which are not highlighted) retain their position.</li>
<li>Bringing the highlighted item forward conveys the feeling that the item is ready for use or instruction, like a volunteer in a line of people stepping forward. In this case, the highlighted movie is brought forward to indicate that it’s ready to be played.</li>
<li>When the highlight moves to another item, the previously-highlighted item animates back to its original state in parallel with the highlight animation being played on the new item.</li>
</ul>
<p>For more discussion of this specific expand-to-highlight transition and some live demos on the Meaningful Transitions site: click <a href="http://www.ui-transitions.com/#categories">Categories</a>, then click Highlight, then Expand to Highlight.</p>
<p><strong>HighlightEffects</strong></p>
<p>I’ve posted a <a href="http://quickui.org/catalog/HighlightEffects">HighlightEffects</a> control to the QuickUI Catalog that permits the easy creation of animated effects such as expand-to-highlight. Here’s a sample showing the result of moving the mouse over the second of five items:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20153931b3bba970b-pi"><img alt="HighlightEffects" border="0" height="56" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20162fc709956970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="HighlightEffects" width="255" /></a></p>
<p>&#0160;</p>
<p><strong>Usage</strong></p>
<p>Use HighlightEffects with lists to help the user see which element is highlighted, and to suggest that the highlighted item is ready for use. You can apply a variety of highlight effects to achieve different results. The one shown here – expand to highlight – effectively draws the user’s attention to the item without being too distracting.</p>
<p><strong>Implementation notes</strong></p>
<p>I thought it would be elegant to let the UI designer/developer define the package of highlight effects as CSS in a JavaScript property map, just as in jQuery’s <a href="http://api.jquery.com/animate/">$.animate()</a> function. The HighlightEffects control uses this property map to determine which CSS rules will need to be <em>un</em>-done when the highlight moves away from an item. E.g., if the property map includes background-color, then the element’s original background-color is saved; when the highlight is removed, this original background-color is restored.</p>
<p>The main challenge with the expand-to-highlight effect is keeping the layout of the page steady as the highlight moves around. To get the highlighted element to pop out, we need to change its size and z-index, and apply absolute positioning. Without that, the expanded item would push the other items in the list to the sides. However, the use of position: absolute will remove the item from the layout flow. To keep things from moving around, we can empty the same technique <a href="http://miksovsky.blogs.com/flowstate/2011/11/persistentpanel.html">discussed last week</a> for <a href="http://quickui.org/catalog/PersistentPanel">PersistentPanel</a>: wrap each list item in a placeholder of the item’s normal size. This placeholder remains in the layout flow even when the item is highlighted, so nothing behind the highlighted element will move around.</p>
<p>In playing around with various animation effects, it was clear that some arrangements animate more smoothly than others. For example, I originally tried to keep the text of the elements centered, but the repositioning of the text during resize was a bit jittery. Animations which change size, position, and color all seem to behave fairly smoothly on the devices and browsers I’ve got. It turns out that jQuery’s built-in $.animate() function doesn’t support color animations out of the box, but that ability can be supplied with a plugin like <a href="http://plugins.jquery.com/project/color-animation">Color Animation</a>.</p>
<p>As was the case when writing the <a href="http://miksovsky.blogs.com/flowstate/2011/10/listcombobox.html">post on ListComboBox</a>, I left out keyboard support, so this currently only works with a mouse (and touch, although the effect isn’t as nice). My plan is to follow up with a ListBox control that can handle moving a selection with a keyboard, then update HighlightEffects to work with that.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
PING:
TITLE: Corporate Technology Time Management: Barcode Scanners
URL: http://webpartnerguide.com/corporate-technology-time-management-barcode-scanners.html
IP: 69.73.181.65
BLOG NAME: webpartnerguide.com
DATE: 12/12/2011 12:22:00 AM
Supermarkets to confirm effective, however conjointly tiny retailers to use bar code scanners. This can be an awfully handy electronic device created for scanning and reading a bar code. Every product within the store has its own bar code. Is represent...
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: UI Control of the Week: Facebook-style PersistentPanel keeps important controls from scrolling away
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: persistentpanel
CATEGORY: Controls

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/11/persistentpanel.html 
DATE: 11/14/2011 08:00:00 AM
-----
BODY:
<p>Whether or not you’re the type of person that likes the way Facebook is evolving their UI, Facebook is certainly leaving no stone unturned in their search for possible improvements. In a recent change, they introduced a panel on the right side that shows the user’s live activity feed and an ad. This side panel is initially a bit below the blue toolbar, and vertically aligned with the top of “Recent Stories” on the left:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2015436bed800970c-pi"><img alt="Facebook Side Panel (Initial State)" border="0" height="440" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2015392eb8bc2970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Facebook Side Panel (Initial State)" width="640" /></a></p>
<p>&#0160;</p>
<p>Keep an eye on the upper-right corner. When the user starts to scroll the page, the left side of the page scrolls out of view, but the right side panel bumps up against the toolbar and remains docked there:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2015436bed834970c-pi"><img alt="Facebook Side Panel (Scrolled)" border="0" height="440" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2015436bed84b970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Facebook Side Panel (Scrolled)" width="640" /></a></p>
<p>&#0160;</p>
<p>It’s hard to see in static images like this, but the right side panel remains entirely visible during scrolling, while the main portion of the page scrolls away under the blue toolbar.</p>
<p>This is a pretty subtle bit of work to finesse the treatment of a small number of vertical pixels above the panel. It would be have been much simpler to have the panel always docked up right under the toolbar. I’d hazard a few reasons Facebook used this technique here. First, they <em>really </em>want to focus user attention on the critical “Update status” button at the top. Keeping the feed panel below that line creates a nice wide band of white space that puts the eye’s focus on the “Update status” button. If the panel were initially docked right below the toolbar, that button would be harder to find. At the same time, permanently keeping a vertical gap of 30 pixels or whatever between the toolbar and the panel wouldn’t be satisfactory either. Facebook users spend a lot of time scrolling through this page, and that gap would probably stand out once the buttons above the news feed were scrolled away. Finally, it’s possible that Facebook had plans to show an ad or other content <em>above</em> the panel, and developed this solution for that purpose, then later dropped that ad but kept the solution.</p>
<p><strong>Key attributes</strong></p>
<ul>
<li>The persistent panel can either be to the side of the page content (as in the Facebook example above), or can span the width of the page content (as a toolbar).</li>
<li>In both the side panel and toolbar cases, any content above the panel can scroll off, but the panel stays visible. In Facebook’s case, it just happens there’s only white space above the panel (and below the blue toolbar). Other sites put content above the panel or toolbar that they initially want the user to see at least once, but which can later scroll away.</li>
<li>As the panel just begins to move out of view (off the top of the viewport), there may be a single jerky repositioning of the panel, but otherwise it’s quite stable. This is a significant improvement over earlier techniques to keep certain page elements visible. Some sites have tried to keep a side panel visible by using JavaScript to constantly adjust the panel’s position as the user scrolls, but the resulting performance is jerky and distracting. Yelp used to do this, for example, and tried to add a <a href="http://www.wittycomments.com/map-stay-put">Map, stay put!</a> check box that disabled the behavior, but ultimately concluded it was better to just drop this repositioning behavior entirely. In contrast, the technique here uses JavaScript to flip the document’s CSS position to “fixed”whenever the panel would otherwise be scrolled out of the viewport. This may jerk the panel into the correct position once, but thereafter the result feels very stable.</li>
</ul>
<p>In general, I think this is a technique more sites, particularly advertising-funded sites, could productively adopt.&#0160;For example, I’ve noticed that Google’s recent app redesigns are leaving them with much thicker sets of controls permanently stuck at the top of a page. It’d be nice if at least some of those controls could scroll away, leaving only the most important there all the time, and giving more room to the document I’m reading or editing.</p>
<p><strong>PersistentPanel control</strong></p>
<p>I’ve posted a <a href="http://quickui.org/catalog/PersistentPanel">PersistentPanel</a> control to the QuickUI Catalog. There are two demos:</p>
<ol>
<li>A demo of a <a href="http://quickui.org/catalog/PersistentPanel/persistentPanelSideDemo.html">persistent side panel</a></li>
<li>A demo of a <a href="http://quickui.org/catalog/PersistentPanel/persistentPanelToolbarDemo.html">persistent toolbar</a></li>
</ol>
<p><strong>Usage</strong></p>
<p>Use a PersitentPanel to offer a small number of controls that are so important they should always be within quick reach. As shown in both demos, a PersistentPanel can be used when some content must initially appear above the panel so that it attracts enough attention. If this content can later scroll away, a PersistentPanel can ensure that the tools or information below the ad can remain visible. Without this requirement (for content to appear above the panel), it’s probably simpler to give the toolbar or panel a permanent position along the top, side, or bottom of the page.</p>
<p>Note: Both demos show an ad scrolling <em>away</em>. Facebook uses the same panel concept to keep an ad <em>visible</em>. Which way you go depends upon how likely it is that your users are going to click ads as soon as they see them, or whether you think the additional revenue from persistent ads makes up for the permanent clutter.</p>
<p><strong>Implementation notes</strong></p>
<p>The basic strategy here is to have the panel content sit within a placeholder element that can occupy the same space as the content whenever the content is switched to position: fixed. Without that placeholder, content below the panel would reflow in an unacceptable manner whenever the panel pops into and out of the normal document flow.</p>
<p>This is the first control I’ve done in this blog series that actually worked in IE8 without modification. Hooray! I usually start in Firefox, then test in Chrome and IE9. (I rarely test in Safari, as I’ve yet to create something that works in Chrome but not in Safari.) Then I take a deep breath, open the demo in IE8, and brace for some weird bugs. But this time IE8 played nice and everything worked. Good IE! Sit. Stay.</p>
<p>Although I’ve never seen a PersistentPanel dock against the bottom of the viewport, that case wasn’t hard to handle, so I added support for that as well.</p>
<p>In both the toolbar and side panel demos, I wanted to block out the space for an IAB universal ad unit, so I created a general <a href="http://quickui.org/catalog/AdPlaceholder">AdPlaceholder</a> control for that purpose. Now I’ve got a control I can use to quickly say, “Leave room for a Leaderboard here”, which is nice. This is one case where I’m thinking the control’s generic style should be a bit more colorful and distracting, to better approximate the visual noise of a page with ads.</p>
<p>&#0160;</p>
<p><em>Extra: In response to feedback, I&#39;ve begun investing in documentation for using the QuickUI framework in plain JavaScript. People are often intrigued by the framework, but put off by idea of having to use a proprietary markup language (however elegant and efficient it may be). Everything in QuickUI, including all the catalog controls, is already accessible in plain JavaScript, although there&#39;s yet sufficient documentation for how to do this. So, in parallel with these control posts, I&#39;m also working on documentation that addresses that gap. The first piece in that series is a list of the </em><em><a href="http://quickui.org/docs/principles.html" target="_self" title="core principles">core principles</a>&#0160;which serve as the framework&#39;s foundation.</em></p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Stephen Kolozsvary
EMAIL: kolozsvary@gmail.com
IP: 69.86.195.225
URL: 
DATE: 11/21/2011 03:31:50 PM
Hi There Jan,

Internet perambulation brought me back around here. Very well written and very interesting. When describing UIs it is a metaphor for a metaphor. Very meta. I have sent some links around to some developer pals. SK
-----
COMMENT:
AUTHOR: Bruce Burger
EMAIL: btb6@cornell.edu
IP: 71.212.70.106
URL: 
DATE: 12/04/2011 01:22:35 PM
The Facebook side panel has some other quirks/features. If the window is wide enough, it moves to the right of the column containing calendar updates and ads, and in that case leaps up to the top of the window (level with the Facebook blue banner and *above* the white area containing the "Update Status" button. I guess that makes sense.

What bothers me more is the novel scroll bar for the live feed. It doesn't look like anything else I've ever seen, and its relationship to the main window scroll bar is odd: If window has 3 columns (as in your screenshots, with the live feed above the ads), the main scoll bar scrolls just the left 2 columns while leaving the right column (live feed), calendar stuff, and ads) static (after that initial jump). But if the window is widened until it has 4 columns, the main scroll bar scrolls the left 3 columns (including the ads, leaving a big blank space) while rightmost column stays in place. I doubt this troubles users but it could probably be better thought out.

Also, if fb really wants to emphasize the "Update Status" button, they should keep it visible rather than scrolling it away. But that's another topic.
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 71.35.97.23
URL: http://profile.typepad.com/jan_miksovsky
DATE: 12/04/2011 02:10:03 PM
Bruce: Thanks for your comments. I myself don't see the four column behavior you describe, no matter how wide I make the window. Facebook is known for bucket testing (a.k.a. A/B testing) many ideas simultaneously, so one of us is probably in a test condition.

The live feed scroll bar looks carefully designed to mimic a Mac OS/X scroll bar; I'm assuming you mostly use Windows? FB's live feed pane includes infinite scrolling, which likely complicates their options for tying its scroll behavior into that of the overall page.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: UI Control of the Week: Straight-up DateComboBox (and why your browser won't solve your date picker needs)
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: datecombobox
CATEGORY: Controls

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/11/datecombobox.html 
DATE: 11/07/2011 08:00:00 AM
-----
BODY:
<p>Once again, it’s amazing how hard it is to get the small stuff right. Building on both <a href="http://miksovsky.blogs.com/flowstate/2011/10/calendarmonthnavigator.html">last week’s CalendarMonthNavigator post</a> and the <a href="http://miksovsky.blogs.com/flowstate/2011/10/listcombobox.html">earlier ComboBox post</a>, this week’s control is the standard date picker found in countless web sites and applications. Date pickers are generally optimized to pick a date in the near future, such as a date of travel or a date for an upcoming appointment. Here’s a typical example from Google Calendar:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2015392c96f35970b-pi"><img alt="Google Calendar Date Picker" border="0" height="204" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20154369ce82a970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Google Calendar Date Picker" width="161" /></a></p>
<p>&#0160;</p>
<p>Key attributes</p>
<ul>
<li>The control always includes a text box. In the control&#39;s normal state, this may be all that is visible. Generally speaking, clicking in the text box or moving focus to it opens the dropdown calendar.</li>
<li>The control may include an icon, often a downward-pointing arrow,&#0160;to the right side of the text box&#0160;to indicate that the user can interact with the control to make a selection from a set of choices (i.e., the popup calendar). Some controls that offer an icon will require the user to click there to open the calendar, and will <em>not</em> dropdown the calendar when the user clicks in the text box.</li>
<li>The input portion of the combo box and the dropdown portion are generally kept in sync. As the user types, the calendar reflects the new date. As the user navigates the calendar, the text box shows the new date.</li>
<li>The user is generally expected to enter dates in short date format. In the U.S., this is month/day/year.</li>
<li>The control validates the user’s typed text to verify it represents a date. This validation may occur as the user types, after they move the focus away, or when they try to save the form.</li>
<li>Some variants of this control (e.g., Expedia’s) show two calendar months at a time. This makes it easier to select a date in the next few weeks when the current month is almost over.</li>
<li>Ideally, the dropdown should implicitly close if the user tabs away from the field or switches to a different window.</li>
<li>The dropdown calendar may offer a “Today” button that lets the user quickly select, or jump back to, the current date.</li>
</ul>
<p>Given the wide variety of implementations, and the complexity of this control, it’s not surprising to see wide variation of the quality of implementations. Some do a terrible job dealing with loss of keyboard focus, some don’t parse dates very well, some can’t keep the text and calendar in sync, and so on.</p>
<p><strong>Commentary</strong></p>
<p>Date pickers seem boring, but I think there’s something quite fascinating about them: they may represent a theoretical maximum of complexity possible in a monolithic approach to creating user interface elements. Nearly every user interface framework will offer a date picker — but they will rarely offer something more complex. Why is this?</p>
<ol>
<li>Apps need to let people enter valid dates that a program can understand. This means constraining input and/or parsing dates, and usually rendering a month calendar — and all these tasks turn out to be pretty hard. The problem gets even harder when one wants to handle multiple cultures. </li>
<li>The standard combo box solution for a date picker means that, in its normal state, the control to look very boring. It’s just a text box. This lets it fit in with pretty much any application’s visual style.</li>
<li>The popup calendar month navigator may not always look elegant, or fit in with the app’s visual style, but since it’s only a transient part of the user experience, design teams decide they can live with it — especially when confronted with a realistic development cost for something better.</li>
<li>The variety of situations that come up when picking a single date in the near future is small enough that a monolithic control can handle most of the common situations. Suppose you want to constrain the selected date to a weekday. You can probably find a date picker that lets you handle that specific constraint.</li>
</ol>
<p>The problem is that, once you get outside the narrow set of common scenarios, you’re out of luck. Suppose you want to let the user pick <em>two</em> dates that are usually close together. In the example above, they want to let the user pick the departure and return dates for a trip. But picking a date range is beyond the complexity of most date pickers. Even if they wanted to support that scenario, the variety of needs would quickly multiple out of control. Some apps would want to force the two dates to be within a certain number of days of each other, others would want to force the two dates to be a minimum number of days apart, and so on. There’s just no way to build a monolithic date picker than can handle all the common cases with a big pile of properties governing control behavior. So user interface frameworks give up on this problem, offer the single-date date picker, and let everyone cobble together multiple date pickers to get the desired result.</p>
<p>In an extensible user interface framework, you could simply provide all the building blocks required to construct a date picker, then let app designers snap those together to get the control they want. So if they want a stock single-date picker, fine, that’s provided, but the same <em>parts </em>can also be snapped together to produce a two-date date picker, or whatever else is needed. Those in turn can be offered as reusable user interface controls.</p>
<p><strong>HTML 5 is not going to solve your problem</strong></p>
<p>The HTML 5 spec defines a new “date” input type, allowing the browser to provide a standard date picker UI. That effort is laudable, but so far inadequate for all but the most basic needs.</p>
<p>The stock date picker controls in the mainstream browsers are god-awful. (<a href="http://www.w3schools.com/html5/tryit.asp?filename=tryhtml5_form_date">Try your own browser’s date control</a>.) Here’s a screen shot of Chrome’s date control:<br /> <br /><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20154369ce82f970c-pi"><img alt="Chrome Date Picker" border="0" height="22" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20162fc1eb26b970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Chrome Date Picker" width="194" /></a> <br /> <br />This is an unadulterated user interface disaster. The format Chrome’s decided to support (YYYY-MM-DD) is one that might be helpful to programmers, but I expect essentially zero consumers actually use it in their personal lives. I can’t think of a single situation in normal life where that format is even seen. In the U.S., at least, people expect to enter a short date like “11/7/2011”, but this format is rejected by Chrome’s control. So this browser’s standard date picker fails to support its home country’s<em>&#0160;single most common input format</em>. And the little up/down spinner arrows are completely out of place here. They only advance the day portion of the date, they’re tiny hit targets, they don’t let people think in calendar terms, etc., etc. And let’s not overlook the fact that so little attention has been paid to this control that the “up” spinner button is missing its top border.</p>
<p>If you take a look at <a href="http://marxsoftware.blogspot.com/2011/01/html5-date-picker.html">Opera’s date picker</a>, it’s more functional (it adds a dropdown arrow, a real calendar navigator, etc.) but, visually speaking, it still looks terrible. It’s hard to imagine a design team happy including this bit of UI in a consumer-facing application.</p>
<p>If these controls represent the sorts of designs which browser creators are capable of creating, that doesn’t bode well for the notion that adding <em>more</em> semantics to HTML is going to solve any meaningful user interface problems. Either the browser designers don’t care about those controls, or they don’t have the expertise to design them well, or they don’t see a payoff in doing so. It’s worth noting that having the browser try to solve everyone’s date picker needs is an even more implausible answer than having a monolithic date picker control solve everyone’s date picker needs. Browser controls are <em>less </em>flexible than nearly every date picker control out there.</p>
<p>Whatever the case, in their current state, I wouldn’t advise anyone to use these controls on a web site where even modest usability or aesthetics are a requirement. For reference: Even Google Calendar doesn’t even use Google Chrome’s own date picker.</p>
<p>The situation is different on mobile platforms, where the browser can fall back to the OS’ native date picker UI. They are generally well-designed, or at least have received a considerable amount of design attention (those are different statements).</p>
<p>On all platforms, it should be observed that there’s nothing that says a dropdown combo box is the ultimate UI for picking a date. In fact, in many applications, an inline calendar might actually be preferable. If you have a page that’s all about getting the user to pick a date in the near future, why force them to have to dropdown the calendar first? This is just to say that the right control for the job really depends on context. If anyone tells you that you <em>must</em> use the stock HTML 5 elements to let users enter data, I’d think very hard about whether that person actually has the interests of your users (and your business) in mind, or are simply touting a standard because it’s a standard.</p>
<p><strong>The DateComboBox control</strong></p>
<p>I’ve posted a <a href="http://quickui.org/catalog/DateComboBox">DateComboBox</a> control to the QuickUI Catalog. (Taxonomy note: this control is called DateComboBox instead of DatePicker to reflect the fact that it’s a combo box, and the fact that there are many other UIs possible for picking a date.)</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2015392c96f5e970b-pi"><img alt="DateComboBox" border="0" height="254" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20154369ce839970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="DateComboBox" width="212" /></a></p>
<p>&#0160;</p>
<p>As noted last week, the generic appearance of these controls is minimalist by design; they’re meant to be useful and unobtrusive as is, but can also receive further styling, subclassing, etc.</p>
<p><strong>Usage</strong></p>
<p>Use DateComboBox in situations where you want to let the user type or choose a single date (especially one in the near future) and space is a concern or you don’t want to focus too much attention on the date. If picking a date is, in fact, the focus of a UI, then it may be more appropriate to use an inline calendar, such as a <a href="http://quickui.org/catalog/CalendarMonthNavigator">CalendarMonthNavigator</a>.</p>
<p>Note that, if the user omits a year, the current year will be assumed. In applications I’ve worked on that let users enter dates (Microsoft Money, Cozi), we always found that users generally expect dates without a year to reflect the <em>future</em>. E.g., if it’s November 2011, and a calendar user in the U.S. creates an appointment with a date of “2/15”, they expect the appointment to end up on February 15, 2012 (in the future) and not February 15, 2011 (the current year, but in the past). At some point, this might be worth fixing in DateComboBox, but for now the control makes the more simplistic assumption about current year.</p>
<p>DateComboBox uses <a href="http://miksovsky.blogs.com/flowstate/2010/09/form-validation-feedback-be-slow-to-complain-and-quick-to-forgive.html">asymmetric validation</a>, which is to say that it will be slow to complain and quick to forgive. By default, if the user types an invalid date, this fact is not reflected visually by an error state until the user leaves the field (or, depending on the UI, saves the form). However, any error state is removed immediately upon the keypress that fixes the error; the user doesn’t have to leave the field to see whether their date entry is now acceptable to the app.</p>
<p>Because the content of the days in the dropdown calendar can be customized, you’re not limited to just showing dates in the calendar. You could show a small amount of date-specific information (e.g., room availability) in the calendar itself, helping the user make a more informed initial date choice.</p>
<p><strong>Implementation notes</strong></p>
<p>To me, the most interesting aspect of the implementation here is that the DateComboBox is assembled by snapping together three main controls, are three of which are interesting in their own right:</p>
<ul>
<li>The dropdown portion of the combo box is a <a href="http://quickui.org/catalog/CalendarMonthNavigator">CalendarMonthNavigator</a>, the exact same control used to create the <a href="http://quickui.org/catalog/FlickrInterestingnessNavigator">FlickrInterestingnessNavigator</a> last week. </li>
<li>The input portion of the combo box is a <a href="http://quickui.org/catalog/DateTextBox">DateTextBox</a>. This is a subclass of <a href="http://quickui.org/catalog/ValidatingTextBox">ValidatingTextBox</a>, and is responsible for parsing typed dates. </li>
<li>The above elements are joined in a <a href="http://quickui.org/catalog/ComboBox">ComboBox</a>. This is the same parent class which was used to create the <a href="http://quickui.org/catalog/ListComboBox">ListComboBox</a> and <a href="http://quickui.org/catalog/ColorSwatchComboBox">ColorSwatchComboBox</a> discussed earlier.</li>
</ul>
<p>Since I already had the first and third controls in the catalog, the bulk of the work this week was building a reasonable solid date-parsing text box. The hardest part of that work was handling tricky event interactions to ensure, among other things, that the user could navigate within a dropped-down calendar; that behavior to some extent conflicts with the desire to have the dropdown automatically close whenever the user moves the focus away from the text box.</p>
<p>I was happy I could delegate much of the date parsing responsibility to the fantastic jQuery <a href="https://github.com/jquery/globalize">Globalize</a> library mentioned last time, which covers a huge range of culture-specific date formats. In addition to supporting a standard short date format, Globalize also parses a number of other date formats, which is nice even if most users won’t ever use them. (If the culture is set to English, for example, you can type “January 2012”, and that will get parsed and shown as 1/1/2012.) If Globalize is not present, then the control falls back to a simpler parser that supports U.S.-style short dates (e.g., 12/31/2011).</p>
<p>I extended the supported abbreviated formats to handle short years (e.g., 12/31/11) and missing year (12/31). Those formats come up daily in people’s normal lives, so I thought it was important that a date control handle them. (It drives users absolutely nuts that, when scheduling a flight or booking a hotel, they have to enter a full four digit year. Is there some <em>other</em> century they’re going to be traveling in?) The supported abbreviated formats are sensitive to the local culture, so in France those examples would look like 31/12/11 and 31/12, respectively.</p>
<p>This control is designed for full web browsers only. At noted above, mobile browsers already provide fairly good date pickers. It should be straightforward to create a control that uses the HTML 5 date field on a mobile browser and a DateComboBox otherwise.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: S.I.
EMAIL: irwin.122@gmail.com
IP: 68.58.148.125
URL: 
DATE: 11/07/2011 09:10:57 AM
This looks really nice, though I have one suggestion-- if if a user types the date in the format MM/DD/YY, it defaults to the 2000's. I think it would be simple enough and quite elegant to have it default to the 1900's if the YY is greater than the current year's YY. Example:

1/1/10 would default to: 1/1/2010
1/1/20 would default to: 1/1/1920

The main issue is that the box auto-updates with the millennium and century only after the element loses focus, so if the user types in 1/1/20 and clicks away, they might not see that it changed to 1/1/2020.

Other than that, keep up the good work! I'm not sure how involved you are at Cozi anymore, but it's a great product. I don't use it as our family isn't big enough to need it, but I've suggested it to many friends who all adore it!
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 71.35.97.23
URL: http://profile.typepad.com/jan_miksovsky
DATE: 11/07/2011 12:01:49 PM
S.I.: Good point. If you include the core Globalize script (which I'm not doing on the site at the moment), the Globalize parser takes a more intelligent guess at the year. It defines a cutoff (2029, right now) below which a date is assumed to be in the 21st century; above that cutoff, the date is assumed to be in the 20th centure. So 1/1/12 is 1/1/2012, but 1/1/70 is 1/1/1970. This is useful for things like birthdays, while still allowing easy specification of dates in the near future (including next year).

It might be nice to add such a cutoff to the default parser, so that non-Globalize users could benefit from that too. I may add that in the future.

Glad to hear you like Cozi and have recommended it to friends. I continue to advise Cozi's board and product team, so it's always nice to hear positive feedback.
-----
COMMENT:
AUTHOR: Max
EMAIL: 
IP: 85.228.210.107
URL: 
DATE: 11/07/2011 02:38:07 PM
You expect essentially zero users using the ISO standardized date format? I guess by the same logic you also think no one actually uses the metric system, right? :)
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 71.35.97.23
URL: http://profile.typepad.com/jan_miksovsky
DATE: 11/07/2011 03:06:22 PM
Max: Perhaps I should have said, "consumers", or maybe, "U.S. consumers". In 20+ years of watching U.S. consumers try software, I've never once seen someone type a date in this YYYY-MM-DD format, or ask to be able to. I'm curious: where does that ISO format actually get used in real, everyday life?

To my (perhaps limited) knowledge, this doesn't seem anything like a U.S. vs metric question. This seems more like a question of picking a user-friendly date format versus a programmer-friendly date format. No?
-----
COMMENT:
AUTHOR: Miles Bader
EMAIL: snogglethorpe@gmail.com
IP: 218.231.149.182
URL: 
DATE: 11/07/2011 06:34:16 PM
YYYY-MM-DD is also one of the most common date formats in Japan, for "real people", not programmers....

(The separator character used varies, sometimes it's ".", sometimes "-", sometimes "/"...but the order is quite fixed)
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 71.35.97.23
URL: http://profile.typepad.com/jan_miksovsky
DATE: 11/07/2011 10:17:49 PM
Miles: As I've already said, perhaps I should have confined my comments to the U.S., but I don't think this changes the fundamental weirdness with the browser controls.

Granted, in Japan (and China, and Korea, and probably many others) may prefer YYYY-MM-DD. That's exactly what localization libraries like Globalize are for -- to cope with locale and/or culture preferences. In fact, if you use Globalize to select one of those cultures, the posted DateComboBox should support those formats already.

There's literally a world of difference in date formats. Anyone who wants to bank their business on getting *all* their customers around the world (including the U.S., France, Germany, ...) to enter dates in ISO 8601 format is obviously free to make that choice. They can even use the browser's built-in date picker to let users do so. They should be aware that their competitors may make different decisions. :)
-----
COMMENT:
AUTHOR: Max
EMAIL: 
IP: 85.228.210.107
URL: 
DATE: 11/08/2011 09:55:57 AM
You actually did say consumers, but yeah, I guess US consumers are used to their own particular date format, which is used in the US (and Saudi Arabia).

Funny how opinions on usability differs. As an outsider the MM/DD/YYYY format just seems very illogical to me. There's no order, it doesn't go from largest to smallest or vice versa. It's just.. random. By <a href="http://en.wikipedia.org/wiki/Date_format_by_country">http://en.wikipedia.org/wiki/Date_format_by_country</a> it look's like DD/MM/YYYY is much more common than the US format, so I guess you can imagine the confusion when entering dates on an English site - is it US English, or actual English? Hopefully your date picker will solve this!
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: UI Control of the Week: Rendering arbitrary data on a calendar with a Flickr-style CalendarMonthNavigator
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: calendarmonthnavigator
CATEGORY: Controls

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/10/calendarmonthnavigator.html 
DATE: 10/31/2011 08:00:00 AM
-----
BODY:
<p>This week’s UI control comes from Flickr, which for a number of years has offered a cool way to browse the most interesting user-contributed photos with their <a href="http://www.flickr.com/explore/interesting/">Interestingness</a> calendar:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20162fbf06054970d-pi"><img alt="Flickr Interestingness Calendar" border="0" height="562" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20154366e83bd970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Flickr Interestingness Calendar" width="799" /></a></p>
<p>&#0160;</p>
<p>As cool as this is, most of the work to build this specific page was probably allocated to reproducing the same aspects of any month calendar built anywhere. That is, some Flickr developer spent a long time mucking about with date math, writing code that had nothing to do with Flickr. I’m guessing that, since the web was first created, the logic to render and navigate a calendar for an arbitrary month in HTML like this has probably been written hundreds if not thousands of times. And there are probably web sites that would benefit from displaying data in a month calendar, but can’t be bothered to make that investment.</p>
<p><strong>Key attributes</strong></p>
<ul>
<li>The calendar shows a complete month at a time.</li>
<li>The user can navigate to the previous or next month. In Flickr’s case, navigation into the future is disabled.</li>
<li>Each month shows 4 to 6 rows of seven days a week.</li>
<li>Days in the previous month (on the first row, to the left of the first day of the month) and the next month (in the last row, to the right of the last day of the month) are hidden.</li>
<li>Given how the photos are selected based on historical data, Flickr only shows photos for days in the past. The current date and days in the future are grayed out.</li>
<li>A given date is represented visually in two ways: 1) as the number for the day of the month, and 2) as a photo thumbnail. In this case, the photo is the most interesting photo (according to the number of comments, etc.) on Flickr for that given day.</li>
<li>Clicking a thumbnail pops up more thumbnails of interesting photos on that same day. The popup offers links to specific photo pages, or to a more complete list of the interesting photos for that day.</li>
</ul>
<p><strong>Usage</strong></p>
<p>I started by creating a general-purpose <a href="http://quickui.org/catalog/CalendarMonthNavigator">CalendarMonthNavigator</a> to handle the date and navigation logic:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20162fbf0605d970d-pi"><img alt="CalendarMonthNavigator" border="0" height="203" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20162fbf06061970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="CalendarMonthNavigator" width="188" /></a></p>
<p>&#0160;</p>
<p>Basic controls like this in the QuickUI catalog deliberately come with very generic styling. This allows one to try out the control in a minimalist mode, which hopefully makes it easy to see what the control actually does without getting distracted by its appearance. The generic styling is automatically turned off in a subclass so one doesn’t have to fight much with styles defined by the parent classes. The class used to render individual days is intended to be overridden, so that arbitrary content can be placed within a day.</p>
<p>A month calendar like this is well-suited for displaying date-based information using the <a href="http://www.uxmatters.com/mt/archives/2005/12/small-multiples-within-a-user-interface.php">principle of small multiples</a>. This could be done to render historical information (sales data, etc.) as Flickr has done here, or to represent information about the future (a weather forecast, a calendar of events, etc.). If navigation is not desired — for example, if the application wants to fix which month is shown — the lower-level <a href="http://quickui.org/catalog/CalendarMonthWithHeadings">CalendarMonthWithHeadings</a> can be used.</p>
<p><strong>Implementation notes</strong></p>
<p>Following the principle of separation of concerns, the base CalendarMonthNavigator is comprised of <a href="http://quickui.org/catalog/LateralNavigator">LateralNavigator</a> and a CalendarMonthWithHeadings, which itself breaks down into a calendar control cornucopia: <a href="http://quickui.org/catalog/MonthName">MonthName</a>, <a href="http://quickui.org/catalog/DaysOfWeek">DaysOfWeek</a>, <a href="http://quickui.org/catalog/CalendarWeek">CalendarWeek</a>, and finally <a href="http://quickui.org/catalog/CalendarDay">CalendarDay</a>.</p>
<p>Once the base CalendarMonthNavigator was finished, creating a custom FlickrInterestingnessDay class was quite straightforward, as was styling the month navigator. Flickr’s calendar shows the names of the next/previous month alongside the next/previous buttons, which wasn’t hard to add. By dropping the day class into the month navigator, the FlickrInterestingnessNavigator (UPDATE: Now called <a href="http://quickui.org/catalog/FlickrInterestingNavigator" target="_self">FlickrInterestingNavigator</a>.)&#0160;fell out cleanly. The result is pretty close to the Flickr Interestingness calendar. One might even say it’s interestingnessish.</p>
<p>As far as I can tell, Flickr’s API lets you grab interesting photos only for a single date per call. Presumably they have an internal API that lets them grab the most interesting photo for each day of a given month in a single call, but no such call is documented. So this particular calendar is forced to make a separate call for each day, which is obviously terrible. Nevertheless, that performance seemed acceptable in a calendar intended mostly as a demonstration of how to create a custom CalendarMonthNavigator. In a real application, one would want to grab all the data in one call at the month level, then apportion the data to the corresponding days.</p>
<p>Given that performance was already an issue, I chose not to implement the popup Flickr shows when you click on a day (which shows additional interesting photos for that day). Instead, clicking a day takes you straight to the page listing the most interesting photos for a given date.</p>
<p>In creating the calendar controls, I was able to make use of the excellent jQuery <a href="https://github.com/jquery/globalize">Globalize</a> project, which defines culture-specific information like month names and day names for a staggering number of cultures. (Thanks are due to Microsoft for contributing their vast culture database.) So the subcomponents MonthName and DaysOfWeek localize their output to the current culture if the culture has been set via Globalize.culture(). Since Globalize also indicates which day of the week should be shown as the first day of the week — i.e., in the leftmost column — I went ahead and localized that as well. For example, the first day of the week will be Sunday in the U.S., but will be Monday in France, or Saturday in Saudi Arabia. (Flickr’s own Interestingness calendar localizes the month and day names into other languages, but doesn’t correctly adjust the calendar presentation to reflect in the local culture’s first day of the week.)</p>
<p>&#0160;</p>
<p><em>Aside: I’ve added a new gallery to the <a href="http://quickui.org/catalog" target="_self">main QuickUI Catalog page</a>, showing live demos of all the controls in the catalog so far. This is only the fourth Control of the Week, but the catalog started out with a handful of controls, and most weeks see the addition of multiple related controls to the catalog, so there’s about 40 controls there now. Based on community feedback, a high priority for the next month or so will be making it possible to use the catalog controls in plain JavaScript, without needing to know anything about how QuickUI controls are created, and without having to use the QuickUI markup language (which is more concise, but entails a learning curve).</em></p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Aaron
EMAIL: coder@wiredprairie.us
IP: 199.204.56.17
URL: http://www.wiredprairie.us
DATE: 10/31/2011 02:03:51 PM
FYI: Your link to the main QuickUI catalog is broken. It should be: <a href="http://quickui.org/catalog/">http://quickui.org/catalog/</a>
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 71.35.97.23
URL: http://profile.typepad.com/jan_miksovsky
DATE: 10/31/2011 02:48:26 PM
Aaron: Hmm. I assume you're talking about the link at the bottom? That works for me on Windows and Mac in a variety of browsers. (Apache should be mapping /catalog to /catalog/) Rather than just fixing the link, I'd like to try to understand why this is happening. Can you mail me at jan@quickui.org and confirm which link you're talking about and which browser you're using? FWIW, it'd also be helpful if you could try refreshing your cache, as I recently changed the default page for the /catalog directly.
Thanks,
Jan
-----
COMMENT:
AUTHOR: Jeff
EMAIL: jborlik@earthlink.net
IP: 199.64.0.252
URL: 
DATE: 11/07/2011 03:41:37 PM
Following up on the QuickUI link above:  The URL in the html is:  <a href="http://quickui/catalog.">http://quickui/catalog.</a>  On Win7 Chrome, the needed ".org" isn't automatically added.

More substantially:  Your next "UI of the week" is really a great example of the flexibility of this particular control (and this approach in general).  Well done!
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 71.35.97.23
URL: http://profile.typepad.com/jan_miksovsky
DATE: 11/07/2011 03:59:54 PM
Jeff: Ah, that's it! As it turns out, on my dev boxes I have <a href="http://quickui">http://quickui</a> pointing at a local copy of <a href="http://quikckui.org.">http://quikckui.org.</a> So the link would work for me -- but only for me. I was so focused on the trailing slash, I didn't even notice the incorrect domain name. Thanks for pointing that out.

And thanks for the nice words about the follow-up post! I'm often pleasantly surprised how elegantly things work out in this framework.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: UI Control of the Week: Microsoft Office combo boxes, still better than anything comparable in HTML
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: listcombobox
CATEGORY: Controls

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/10/listcombobox.html 
DATE: 10/24/2011 08:00:00 AM
-----
BODY:
<p>Sometimes the important user interface components aren’t the glamorous ones. One control the web could really use is a robust, extensible combo box. A standard dropdown combo box has been part of the UI lexicon for at least twenty years. I think I first heard about them when I was a summer intern at Microsoft in 1988 and some application group, perhaps the Microsoft Excel team, circulated a memo (on paper!) proposing their creation. (Perhaps there are antecedents in earlier platforms as well.) The gist of that memo then is the same as the core functionality now: let the user type whatever they want, but also offer them a list of choices they can pick from:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20162fbceb404970d-pi"><img alt="Excel 2010 Combo Box" border="0" height="421" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20162fbceb409970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Excel 2010 Combo Box" width="471" /></a></p>
<p>&#0160;</p>
<p>A combo box is one of those controls that seems like it couldn’t be that hard to implement, but in reality is ferociously complex.</p>
<p><strong>Key attributes</strong></p>
<ul>
<li>The user can type arbitrary text into the text box portion of the combo box. In some cases (such as the point size combo box directly to the right of the font combo box above), the text box performs its own validation (e.g., requiring that the input text be a number).</li>
<li>The user can click the arrow button to dropdown the list of choices. When the user makes a selection from this list, the dropdown collapses, the choice is placed into the text box, and the text is left selected.</li>
<li>The list provides AutoComplete behavior, even when the dropdown list is collapsed.</li>
<li>While the choices in the list ultimately can be represented with a text string, the choices may be rendered in richer ways. In the image above, a font is represented by an icon (indicating the type of font: TrueType, etc.), the font name (rendered in the font itself), and additional information on the right in the local language of the culture associated with the font. (I have no idea what the examples on the right say in the image above, but their English equivalents elsewhere in the list indicate the recommended usage for the font: for headings, for body type, etc. <strong>UPDATE:</strong>&#0160;Commenter Jonathan indicated that the characters next to the Hebrew font are the first several letters of the Hebrew alphabet. Presumably the other fonts show similar samples of the font’s&#0160;alphabet.)</li>
<li>If the current entry in the text box is present in the list, the corresponding list item is highlighted.</li>
<li>The list provides extensive support for keyboard navigation. The user can toggle the list by pressing Alt+Down; they can navigate the list using arrow keys, Page Up/Down, Home/End; they can make a selection by pressing Enter; etc.</li>
<li>The list is resizable.</li>
<li>By default, the dropdown list is at least as wide as the text box. (This behavior is not shown in the image above, but can be found in other combo boxes.)</li>
<li>The dropdown list is a transient popup that can be dismissed by clicking outside it.</li>
</ul>
<p>It’s too bad there’s no support for a solid, extensible combo box in HTML, because it’s really quite an elegant control. Many controls on the web are described as combo boxes, but in fact are slightly different, or exhibit fewer features than standard Microsoft Office combo boxes.</p>
<ul>
<li>A dropdown list box created with a standard HTML &lt;select&gt; tag (without the “multiple” option) does have a dropdown list, but does not allow the user to type arbitrary text. Moreover, the resulting dropdown list can only render choices as plain text.</li>
<li>A text box with AutoComplete does save the user some keystrokes, but does not give the user a way to see all the choices. The user may inadvertently (or intentionally) discover some of the choices through typing, but there’s no way to see the complete list.</li>
<li>The HTML 5 spec defines a &lt;datagrid&gt; element which browsers can use to create a combo box. However, at the time of this writing, <a href="http://quirksmode.org/html5/inputs.html">support for &lt;datagrid&gt; is lacking</a>, even in the WebKit browsers. Moreover, the existing Mozilla implementation doesn’t offer the user a true combo box, but rather a text box with AutoComplete, and the choices are only represented in plain text (see both of the above points).</li>
</ul>
<p><strong>Usage</strong></p>
<p>I’ve posted a reusable, extensible <a href="http://quickui.org/catalog/#page=ListComboBoxAbout">ListComboBox</a> in the QuickUI Catalog. This accepts any array of items which can be rendered as choices in the list. By default, choices are rendered as a generic button (without borders), but any custom control class could be used as well.</p>
<p>As implied above, a combo box is well suited for any situation in which you want to allow the user to type arbitrary text, while at the same time offering them choices. The ability to render a choice in the list as a custom control gives you the option of adding more detail, or otherwise helping the user to make a more informed choice. Because a combo box is very compact in its normal state, it can be used in almost any place a text box can.</p>
<p>Although combo boxes have a long history in user interfaces, I’ve observed many usability studies where a user did not actually notice the dropdown arrow. This is most likely a result of the arrow’s small size and placement on the far right; I expect the problem is a bigger issue in very wide combo boxes. Perhaps as a response to this shortcoming, many web sites that have hand-rolled combo boxes automatically pop up the list of choices whenever the user clicks on the text box or moves the focus into it, rather than requiring the user to click the arrow. That actually seems like a reasonable improvement on Office’s combo boxes – it doesn’t seem to hurt much to have the list available, even if the user doesn’t want to use it – so I’ve included that behavior as well, with an option to turn it off.</p>
<p><strong>Implementation notes</strong></p>
<p>ListComboBox derives from the more fundamental base class <a href="http://quickui.org/catalog/#page=ComboBoxAbout">ComboBox</a>, which is the class that actually binds together a text input control, the dropdown button, and the popup containing the choices. ListComboBox happens to render the choices as a vertical, single-column list, but it’s easy to create controls that drive from ComboBox that present their choices in very different ways. (To present an example, I’ll follow up in a later post on how to create a traditional date picker by deriving from ComboBox.)</p>
<p>As a testament to the complexity of a combo box, I was forced to leave out certain aspects of the Microsoft Office example. In particular, full keyboard support would have taken to long to implement reliably in the time I allotted for this control. Along with keyboard navigation, I’ve postponed working on a means to highlight the current item in the list. The list box currently grows as tall as necessary to show all the choices; with long lists it would obviously be helpful to let the list grow no longer than the bottom of the viewport. Finally, the resizability of the list didn’t seem worth the trouble.</p>
<p>Per usual, various aspects of the control were much trickier to implement in IE. It proved challenging to implement the behavior described above in which choosing an item from the list closed the list and left the entire text selected. Attempting to affect the selection in IE after the list had been closed had the unfortunate side-effect of leaving the list open: programmatic inspection revealed that IE claimed the list was now hidden, when in fact it was still clearly visible. For now, in IE, when the user makes a choice from the list, the full text of their choice is placed into the text box, but is not left selected.</p>
<p><strong>Possibilities</strong></p>
<p>With ListComboBox in hand, it’s quite easy to create a new kind of combo box that works basically the same way, but uses a custom input area and a custom list presentation. In about an hour, I was able to throw together a <a href="http://quickui.org/catalog/#page=ColorSwatchComboBoxAbout">ColorSwatchComboBox</a> that lets the user choose CSS colors by name or value:</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20162fbceb410970d-pi"><img alt="Color Swatch Combo Box" border="0" height="443" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20153927934c4970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Color Swatch Combo Box" width="227" /></a></p>
<p>Both the input area and the list show color swatches next to color names. The list of choices is populated simply by feeding the combo box a set of strings (the color names). The ComboBox ancestor class puts the input area and the list together, along with the dropdown behavior. The ListComboBox parent class takes care of rendering of the choices as list items, as well as doing the AutoComplete behavior. So most of the behavior of this rather intricate color picker is handled by the base classes; the classes specifically associated with picking colors are quite simple. It’s this sort of UI factoring that should allow people to quickly create much richer web sites than with the raw HTML controls, even the ones in HTML 5.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Jonathan
EMAIL: 
IP: 46.117.183.1
URL: 
DATE: 10/24/2011 01:29:16 PM
The examples on the right are samples of non-Latin characters that the font includes, if any. For example, the samples in the "Aharoni" font are the first few Hebrew letters (roughly equivalent to "ABCDEFG"), since that font contains Hebrew letters. The other samples appear to be the same in other scripts (I can kind of make it out in Arabic, though my knowledge of it is limited).
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 71.35.105.124
URL: http://profile.typepad.com/jan_miksovsky
DATE: 10/24/2011 02:01:33 PM
Jonathan: That makes sense. Thanks!
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Control of the Week: Facebook-style AutoSizeTextBox
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: autosizetextbox

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/10/autosizetextbox.html 
DATE: 10/17/2011 08:00:00 AM
-----
BODY:
<p>It’s nice to have multi-line text boxes resize to fit their contents. The native HTML &lt;textarea&gt; tag, which creates a multi-line text box, gives the text box a fixed height. (Chrome and Firefox will let you manually resize a textarea, which helps, but the resizing isn’t done for you.) A fixed height text box never feels like it’s the right height: if you don’t have any text to enter, a tall box is too big, and if want to actually enter a block of text, you always find yourself wishing the box were bigger.</p>
<p>Auto-sizing feels like a missing feature of web forms. Many forms need to let the user type in lines of text into a text box, and since the size of that text can vary, it seems to make sense to start out with a small text box, then grow the text box when necessary. HTML has had form support since at least HTML 2.0, so it’s surprising this feature is still not standard. For comparison, Microsoft Word’s form support has had auto-sizing text boxes for years.</p>
<p>I think the first solid implementation of a web auto-sizing text box was on Facebook, which offers you such a text box to enter a status update:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201543619f64b970c-pi"><img alt="Facebook Status Box" border="0" height="115" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201543619f653970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Facebook Status Box" width="511" /></a></p>
<p>&#0160;</p>
<p>Facebook&#39;s design varies from week to week (and user to user), but at the time I took the image above, the text box started out tall enough to contain three lines of text. As the user types more, the text box grows in size:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201543619f655970c-pi"><img alt="Facebook Status Box (with more text)" border="0" height="180" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201543619f65d970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Facebook Status Box (with more text)" width="511" /></a></p>
<p>&#0160;</p>
<p><strong>Key aspects</strong></p>
<ul>
<li>The text box has a minimum height. This can be sufficient for a single line of text or (as on Facebook) can be bigger. </li>
<li>As the user types, the text box grows. In a normal layout, the text box’s increased size will push down any elements below the text box. </li>
<li>The height of the text box is sufficient to contain the current text, plus an additional blank line. This latter aspect is helpful to let the user know that there’s still more room to type — i.e., that they don’t need to stop yet. </li>
<li>The text box may also have a maximum height. Note that this is different than the text box’s maximum <em>length</em>, which establishes how many characters can be entered. </li>
</ul>
<p><strong>Usage</strong></p>
<p>See&#0160;<a href="http://quickui.org/catalog/default.html#page=AutoSizeTextBoxAbout">AutoSizeTextBox</a>&#0160;in the QuickUI Catalog for a working, reusable implementation.</p>
<p>The default height of an AutoSizeTextBox is set to accommodate two lines of text. This suggests to the user that they’ll have ample room to type. As they begin to type on the second line, a third will automatically be created for them. As a result, they’ll never feel like they’re running out of room. In tight spaces, this minimum height can be overridden to produce an AutoSizeTextBox that’s only one line tall when empty.</p>
<p><strong>Implementation notes</strong></p>
<p>I’m not aware of a pure CSS solution to this problem; the variety of ways to implement an auto-sizing text box all require some degree of JavaScript. A while back I posted a <a href="http://stackoverflow.com/questions/7477/autosizing-textarea/2032642#2032642">solution on StackOverflow</a> that, at its core, leaves most of the layout calculations to the browser. In this approach, the textarea and a hidden element are both placed inside a containing div. I&#39;d originally used a div for the hidden element, but realized that using a &lt;pre&gt; (preformatted) element would automatically preserve line breaks and white space.</p>
<p>The hidden pre is set to use visibility: hidden, which tells the browser to layout the control as normal, but leave the pre invisible.&#0160;When the user types in the textarea, a small bit of JavaScript simply copies the contents of the textarea into the hidden pre element. As the pre gets bigger, it forces the containing div to become bigger, which in turn makes the textarea grow. The textarea ends up as big as the hidden copy of the text (plus an extra line), which gives us the effect we want.</p>
<p>The most finicky bit of the implementation deals with letting the control work with different font sizes. During initialization, the font of the overall control is copied over to the textarea and hidden pre so that the text metrics of the two elements will be the same. This operation has to wait until the control is actually in the DOM so that any relevant styles will have been applied.</p>
<p>Moreover, the initialization logic needs to know the line height of the text in the textarea. Unfortunately, if line-height has not been explicitly set, WebKit and IE report the line-height as “normal”, instead of giving us an actual measurement we can use. So the control calculates an approximate line-height by applying a constant factor to font-size. This approximation means that the text box height can be off by a pixel or so in WebKit and IE.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Ken Geis
EMAIL: 
IP: 128.32.16.149
URL: http://profile.typepad.com/kengeis
DATE: 10/17/2011 11:11:50 AM
A couple of things I don't love about the QuickUI implementation. First, when I start typing the first line, the box changes in height a pixel or two. This is on Chrome on Linux. Second, I'm used to an extra line being added on carriage-return, not on first character on the new line. That feels inconsistent between the first line and subsequent lines.
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 67.40.198.186
URL: http://profile.typepad.com/jan_miksovsky
DATE: 10/17/2011 12:06:34 PM
Ken: Thanks for the comments!

On the extra pixel in Chrome: This is probably the issue I raised above, where Chrome doesn't seem to give you a way of finding the actual line-height of something. One challenge of building general-purpose web controls is that it's not always possible to finesse little details like this by just hard-coding pixel values for specific elements that are carefully tuned to match the font metrics. Since I'm trying to build a general purpose control that works with a wide range of fonts and font sizes, I'm reluctant to do too much special casing in the base AutoSizeTextBox class: bumping a magic constant in the code one way or the other might make the control behave better with one font, but worse with another -- or better in one browser and worse in another. That said, it'd be quite easy for someone to create a subclass of AutoSizeTextBox that picked up all the base logic, but then forced the text box or hidden pre tag to have the specific font metrics that worked best for their site's font. I'd argue that even with a hack like that, the general solution still gives someone a big leg up compared to having to work out the entire UI behavior on one's own.

Your point about the extra line is well taken. In this implementation, I'd thought it'd be nice to always leave the user with an extra line, so they always know they have more room to type (i.e., they haven't run out of room). That said, what's good enough for Facebook is probably good enough for most sites. When I have a moment, I'll experiment with removing the extra line.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Announcing a UI control catalog and this week's Control of the Week: Apple-style SlidingPagesWithDots
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: slidingpageswithdots
CATEGORY: Controls

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/10/slidingpageswithdots.html 
DATE: 10/10/2011 08:00:00 AM
-----
BODY:
<p>I think the web UX field would benefit from having access to an open, comprehensive catalog of working, ready-to-use user interface controls. All programming platforms provide class libraries replete with hundreds of base classes, which are both standard implementations and starting points for custom work — but when it comes to user interface libraries, most provide something like a dozen very basic controls: a Button, a ListBox, a SpinBox, a Slider, etc. There’s also always a DatePicker, and it usually represents the pinnacle of complexity for the UI library. That’s about it. Everything else — i.e., much of the UI components a design team needs — has to be custom made from scratch.</p>
<p>This is incredibly inefficient, and a state of affairs tolerated perhaps in no other branch of software development. Few people seem to realize that a solution is even possible. I think at least one key reason for that is that most UI frameworks don’t define the semantics of specialization (subclassing) by which one person can take another person’s component and specialize both the component’s appearance <em>and behavior</em> to their needs. With such semantics in hand, it should be possible to build a much richer ecosystem for UI components.</p>
<p>A core purpose for the <a href="http://quickui.org/">QuickUI</a> framework is to address exactly that need: let people build robust, solid, well-tested base controls that can get quickly specialized for particular needs. To prove that is possible, and to verify QuickUI can do that well, I’m starting a project to create a large library of UI control base classes. My plan to tackle (first on my own, and then hopefully with the help of some of you) as many of the common UI controls found around the web as possible. Many of these aren’t even recognized as shareable controls; they’re often referred to as “patterns”, suggesting there’s no common behavior which could be shared.</p>
<p>These controls will get collected into a catalog of live examples and ready-to-use source code. Each control in the catalog will be live code: not screen shots of examples, not a pattern, not a template for a prototyping tool, not a recipe for doing it yourself. Each one should be ready to use in your web app. Furthermore, each control should be able to serve as the starting point for your own custom refinements. As a side effect, the catalog should also be a useful reference for developers building UI in other ways, but the biggest benefits should accrue to people who can just pick up the working controls and start using them.</p>
<p>As a working format for the project, I’ve been inspired by the efforts of various artists to create a something-a-day for 365 days (e.g., Noah Scalin’s <a href="http://gelconference.com/videos/2009/noah_scalin/">Skull a Day</a>). I think a good control implementation might take longer than a day to code and write up. I think a control a week is a more reasonable goal.</p>
<p>So here’s my plan for Control of the Week:</p>
<ol>
<li>Each week I’ll pick a common control to implement (or improve) and discuss.</li>
<li>I’ll code up a solution in QuickUI. Each implementation will generally focus on doing a single UI task really well.</li>
<li>I’ll do my best to verify that the solution works as expected in the major browsers: Chrome, Firefox, IE 8+, and Safari. Visuals will be done in CSS3 whenever possible, so things might look different (clunkier) in IE8, but I’ll try to allow for graceful degradation.</li>
<li>I’ll add an entry for the control to the <a href="http://quickui.org/catalog">QuickUI Catalog</a>. The control’s notes may include suggestions on when and how to use the control in a UI. The Catalog already contains a number of controls ready to go. Some of those will be revisited and spiffed up as part of this project. </li>
<li>I’ll post the control’s source code in the <a href="https://github.com/JanMiksovsky/quickui-catalog">quickui-catalog repo on GitHub</a>. From there the source could get copied into any web app project. For now, QuickUI is designed for use with an accompanying markup language, but they could fairly easily be invoked from regular JavaScript. I’ll be working on better documenting how to do that.</li>
<li>I’ll blog about the control here. This will likely include a look at one or two examples of sites using the control, and any thoughts on how the control came out. Additional related controls (like RotatingPagesWithDots, below) may fall out of the week’s work, and as time allows I will write up some of those as well.</li>
</ol>
<p>The project format and details will certainly evolve, but rather than plan that all out, I want to dive in and get started. So without further ado, here’s…</p>
<p><strong>Control of the Week: Apple-Style SlidingPagesWithDots</strong></p>
<p><a href="http://quickui.org/catalog/default.html#page=SlidingPagesWithDotsAbout">SlidingPagesWithDots</a> presents its content as a horizontal sequence of pages in which navigation between pages shows a sliding animation. The classic representation of this control is found in the iOS app launcher:</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20153922baec6970b-pi"><img alt="iPhone Standard Launch Screen" border="0" height="480" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e8c1fa9bb970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="iPhone Standard Launch Screen" width="320" /></a></p>
<p><strong>Key aspects</strong></p>
<ul>
<li>This control renders its content as a set of pages, one of which is shown at a time. </li>
<li>A set of small dots below the pages show the user how many pages there are; a highlighted button indicates the current page. </li>
<li>The user can navigate horizontally. </li>
<li>The pages slide left and right to provide a sense of physicality — even the unseen pages are conceptually “there”, just not seen. </li>
<li>To increase physicality, navigation doesn’t wrap once the user reaches the first or last page. Navigating from the last to the first page shows all intermediate pages sliding quickly by. </li>
</ul>
<p>In a touch screen implementation like the one above, the user swipes left and right to navigate the pages. Apple’s store also uses this device in the “hero” element of a product page (e.g., the <a href="http://www.apple.com/macbookair/">MacBook Air</a> page) to rotate between product shots:</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e8c1fa9c5970d-pi"><img alt="Apple Store Sliding Pages" border="0" height="379" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e8c1fa9c9970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="Apple Store Sliding Pages" width="640" /></a></p>
<p>Here the pages automatically rotate once through on a timer; the user can also click a dot to navigate to a specific page.</p>
<p><strong>Implementation</strong></p>
<p>Since iOS doesn’t (yet) make swiping easy to implement, for the implementation I’ve focused on the Apple Store-style example. The control renders each child as a separate page, so their visual treatment and behavior is completely open. The dots can be replaced with custom controls. A subclass of SlidingPagesWithDots called <a href="http://quickui.org/catalog/default.html#page=RotatingPagesWithDotsAbout">RotatingPagesWithDots</a> adds the Apple Store rotation behavior; the rotation interval can be customized.</p>
<p>As will likely become a common theme, getting this to work in Mozilla and WebKit was straightforward, and getting it to work in IE9 wasn’t too bad. Getting it to work in IE8 was an enormous pain that necessitated fixing some optimistic assumptions deep in the QuickUI framework. Furthermore, IE8&#39;s lack of border-radius support means that the circular&#0160;“dots” will degrade to squares. This could be addressed by falling back to a sprited image on IE8, but as I’d already spent more time than I’d intended on IE8, I’ve punted on that for now.</p>
<p><strong>Usage notes</strong></p>
<p>This control seems useful for showing a small set of, say, 3-7 pages. The sliding animation is nice, but for high-frequency tasks could become annoying. The automatic rotation could be distracting in any situation where the user is forced to perform a task while the animation is playing. It seems more appropriate for, say, a site’s home page, where it could be used to temporarily highlight content in the hopes of showing something that interests the user.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: elliptical reviews
EMAIL: queenofusa@gmail.com
IP: 98.158.117.158
URL: http://www.bestellipticalreviews.org/
DATE: 11/29/2011 02:08:47 AM
No offense, but if there's a facebook like button, it'll be much easier for me to share.
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 71.35.97.23
URL: http://profile.typepad.com/jan_miksovsky
DATE: 11/29/2011 09:12:12 AM
elliptical reviews: You're right! I'd tried to set this up in TypePad earlier, but seem to recall that the process was too involved. Now they've made it trivial, so I've gone ahead and done that. Thanks for the suggestion.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: And now for something completely different: moving on to other design challenges
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: and-now-for-something-completely-different-moving-on-to-other-design-challenges

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/09/and-now-for-something-completely-different-moving-on-to-other-design-challenges.html 
DATE: 09/12/2011 08:00:00 AM
-----
BODY:
<p>I recently stepped back from day-to-day work at <a href="http://www.cozi.com">Cozi</a>, the family-focused startup I cofounded with Robbie Cape in early 2005. The past six and half years were a marvelous education for me: Cozi was my first startup, and Robbie and I had the great luck (and perhaps a little insight) to stake out what has proved to be incredibly fertile product territory. It’s been gratifying to design something from the ground up, and also rewarding to contribute to the formation of a wonderful company culture. The company’s business has never been stronger, so from a business perspective, this year’s been quite an exciting time.</p>
<p>Still, what draws me to the office ach morning isn’t business success, it’s working on challenging user experience design problems. And it’s turned out to be harder to find fresh challenges in a project that’s heading for its seventh birthday. I think a designer who works indefinitely in the same product space may run the risk of becoming dogmatic in their response to new design problems, which potentially limits the ability to respond to users and dilutes the satisfaction of designing. Although I’d intended to stay with the startup for as long as it exited, over the past year I found my imagination sparked less and less by work, and more and more by personal projects. Robbie and I spent a long time talking this over, and ultimately concluded the company and the product were strong enough that other designers could pick up where I’m leaving off.</p>
<p>I remain extremely bullish about the product’s future, and am still retaining a hand in shaping the evolution of Cozi as a board observer and an adviser to its design team. But I’m no longer going into the office. For now, I’m using this opportunity to focus my attention on developing and promoting QuickUI, which I’ve now been working on for almost four years. (Among other things, I’ll be giving a talk on <a href="http://www.quickui.org">QuickUI</a> at <a href="http://events.jquery.org/2011/boston/">jQuery Boston 2011</a> on October 2nd.) I’m really curious to see whether it’s possible to create a rich ecosystem of UI controls for the web built on an easy-to-use design and development framework. I’ll likely post more about that work as time goes on.</p>
<p>This is actually the third time in my life I’ve made a break from my work, and each time I’ve made the break without any definite plan of what would come next. Each time, I’ve not only enjoyed the sabbatical from work and happily pursued independent projects, but ultimately found myself very happy with where I landed. We’ll see what comes up next.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Zaneshelby
EMAIL: 
IP: 76.8.92.250
URL: http://profile.typepad.com/zaneshelby
DATE: 09/12/2011 12:43:29 PM
This is really exciting! I can't wait to read up on QuickUI.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Indefinitely postponing really great feature suggestions is one of the toughest tasks in UX design
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: indefinitely-postponing-really-great-feature-suggestions-is-one-of-the-toughest-tasks-in-ux-design

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/08/indefinitely-postponing-really-great-feature-suggestions-is-one-of-the-toughest-tasks-in-ux-design.html 
DATE: 08/29/2011 08:00:00 AM
-----
BODY:
<p>This past week I had the occasion to reflect upon the towering list of fantastic feature suggestions people have contributed for Cozi which I’ve had to keep <em>out</em> of the product. I regularly hear good—sometimes brilliant—ideas for Cozi&#39;s product, but I’m generally forced to say, “Maybe later”, to nearly all of them.</p>
<p>One core aspect of software’s nature which shapes the user experience design discipline is the inherently iterative and <em>additive</em> nature of the publicly visible output. UX design shares this iterative trait with fields like urban planning and certain types of performance (e.g., stand-up comedy) where the artist is constantly tweaking what people see and hear. Those fields, however, are often zero-sum: a new downtown building replaces what was there before, and a new joke pushes an older joke out of the routine.</p>
<p>In contrast, there&#39;s a nearly irresistible tendency for software features to accrete:</p>
<ul>
<li>A user who has found something they like will scream bloody murder if that feature is taken away, and it turns out that every feature will always have at least <em>some</em> passionate adherents.</li>
<li>Removing a feature that affords access to previously-entered user data would effectively maroon it, a nearly unforgivable transgression. You’d have to first create some way of getting that data out, which is extra work, which means time, which you don’t have.</li>
<li>If you remove a feature, it will almost certainly be perceived as if you’re lowering your value proposition. Even if you hope the increase in usability will eventually allow you to deliver a better experience in the long run, that’s a pretty hard argument to sell to a customer.</li>
<li>Someone who worked hard to bring the feature into existence may still be around and defend it vigorously (perhaps failing to recognize the market has changed).</li>
<li>Or, on the other extreme, your team may have forgotten the feature exists.</li>
<li>Or, your team knows the feature exists, but may have forgotten <em>why</em> it exists. No one wants to pull the plug on something in case it turns out to be critical. Surely someone important needs it, right? Better to be safe and leave it there.</li>
<li>Given all the above, at any given decision point, the cost to keep an old feature working often seems pretty low compared to the cost of retiring it.</li>
</ul>
<p>So the number of features tends to monotonically increase, which generally means complexity does as well. This fact is so universal that <a href="http://miksovsky.blogs.com/flowstate/2010/08/ios-4-home-button-double-tap-rare-case-of-retiring-a-behavior-preference.html">it’s notable when a product team removes a feature</a>.</p>
<p>The catch is this: <em>not all those features will retain their relevance over time</em>. The world will change, user priorities will evolve, and your business goals will shift. A feature that was deemed vital when introduced may lapse into persistent clutter in your user interface or a persistent drag on your operation.</p>
<p>Here’s a common situation: we’re working hard on a pending release, and there’s a feature just out of reach; it’s not going to make it into the release. It’s painful to defer working on it, because we’re certain it’s very important. Then, when the pending release is finally finished, and we finally have time to do that important thing — no one’s really that excited about it. In the few weeks that have passed, we’ve learned something new that has convinced something <em>else</em> is more important. The earlier idea, which has previously seemed mission-critical, never ships. And—<em>whew</em>—that’s a good thing. We came this close to adding new clutter to our product that we can (obviously, in hindsight) live without.</p>
<p>Some people say you need to say, “No”, to ideas to keep a product clean and simple. But that makes it sound like you can make one decision and be done with it. You just never know; the feature you’re saying “No” to might turn out to be important after all. I think maybe it’s more correct to say, “Maybe later.” A good idea (or a clear user need) will be persistent, and over time will keep knocking at you until, one day, something clicks and you realize how you can address it and three other things at the same time, in a much better way than you could have if you’d plunged in right away. During this long period of consideration, the idea has aged and matured until it’s time has finally come.</p>
<p>This can only happen if one adopts a deliberately slow pace of idea adoption. Ultimately, I think being able to say, “Maybe later”, to a really great idea is a hallmark that distinguishes an experienced UX designer from a novice.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Ways to handle text that's too long: clipping, ellipsis, fading, and selective condensing
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: handling-long-text

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/08/handling-long-text.html 
DATE: 08/22/2011 08:00:00 AM
-----
BODY:
<p>Every UI that renders textual data has to cope with the question of what to do when text is too long to fit in the space allocated for it in the UI. Here are some basic approaches:</p>
<p><strong>Clipping.</strong> This is straightforward to do, and the result looks clean. If the text gets clipped in the middle of a word or, ideally, a letter, it will be obvious to a user what’s happened. In some cases, a column of clipped letters can create a virtual border, avoiding the need for an explicit border. (See this <a href="http://miksovsky.blogs.com/flowstate/2011/04/start-with-a-stripped-down-visual-design-and-slowly-add-elements-back-in.html">discussion of Cozi’s Month view</a>.) The biggest risk is that text will get clipped at a word boundary, and the user will be unaware (or unsure) there is more content.</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2015390d3787b970b-pi"><img alt="Long Text - Clipped" border="0" height="176" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2015390d37887970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Long Text - Clipped" width="150" /></a></p>
<p>&#0160;</p>
<p><strong>Ellipsis. </strong>The traditional client OS solution is to remove the last character or two that would have fit, and replace those with an ellipsis (…). The user is easily made aware of missing text. This strategy requires the ability to quickly measure the width of text runs at runtime—an ability current browsers lack—to determine where the ellipsis should go.</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e8ac6cfc2970d-pi"><img alt="Long Text - Ellipsis" border="0" height="176" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2015434a6f093970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Long Text - Ellipsis" width="150" /></a></p>
<p>One minor disadvantage of this technique is that, even when this approach is possible, it can lead to visual clutter if many lines of text will be so long that they require ellipsis. One variant of the ellipsis technique is employed by OS/X’s Finder and various IDEs, using ellipsis in the <em>middle </em>of a text run. This is particularly useful when showing long URLs or file paths, where the final page or file name is probably more interesting than a long list of directories in the middle. As a side benefit, this also reduces visual clutter in cases where many lines of text require ellipsis.</p>
<p>&#0160;</p>
<p><strong>Fading.</strong> This strategy employs an alpha-blended gradient on the right edge (or, for blocks of text, on the bottom) to make the text appear as if it has faded out. This technique, which looks quite clean, is beginning to get more popular as modern browsers support alpha-blended gradients. (See the QuickUI <a href="http://quickui.org/gallery/default.html#page=FaderAbout">Fader</a> control for sample code.)</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2015390d37892970b-pi"><img alt="Long Text - Faded" border="0" height="176" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2015390d37898970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Long Text - Faded" width="150" /></a></p>
<p>&#0160;</p>
<p><strong>Selective condensing.</strong> This tactic can be combined with any of the above techniques. Long strings are rendered with tighter kerning or in a condensed font variant, permitting extra characters to be shown which would have otherwise not been visible. If this effect is handled carefully, users may not even be aware of it. Like ellipsis, condensing requires the ability to measure text length. This is still not trivial in a web browser, which will generally require text to be added to the DOM before its width can be measured, but can be done by rendering text in an element with “visibility: hidden”. (See the sample QuickUI <a href="http://quickui.org/gallery/default.html#page=TextCondenserAbout">TextCondenser</a> control.)</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2015390d3789f970b-pi"><img alt="Long Text - Condensed" border="0" height="176" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2015390d378a7970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Long Text - Condensed" width="150" /></a></p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Cubee
EMAIL: kristof.ulburghs@gmail.com
IP: 84.192.54.222
URL: http://qbziz.wordpress.com
DATE: 08/22/2011 09:53:59 AM
<a href="http://qbziz.wordpress.com/2008/01/17/quick-graphical-string-truncation/">http://qbziz.wordpress.com/2008/01/17/quick-graphical-string-truncation/</a>
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 74.203.51.134
URL: http://profile.typepad.com/jan_miksovsky
DATE: 08/22/2011 10:40:16 AM
Cubee: Cool, thanks.
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 74.203.51.134
URL: http://profile.typepad.com/jan_miksovsky
DATE: 08/23/2011 12:05:03 PM
Regarding ellipsis: I just came across a reference to the "text-overflow: ellipsis" attribute value in CSS, which I hadn't previously known about. This value is supported by IE and WebKit but, as of this writing, not Firefox (although various workarounds exist).
-----
COMMENT:
AUTHOR: Bruce
EMAIL: btb6@cornell.edu
IP: 71.32.85.195
URL: 
DATE: 09/02/2011 09:03:12 PM
Another way is to add scroll bars in the dimensions that don't fit.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Celebrating 100 posts and 6 years of UI design craft on flow|state
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: 100th-post

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/07/100th-post.html 
DATE: 07/11/2011 08:00:00 AM
-----
BODY:
<p>This post marks my 100th post on flow|state. My <a href="http://miksovsky.blogs.com/flowstate/2005/07/cant_sleep.html">first post</a>&#0160;was on July 11, 2005, so by pure coincidence this milestone comes exactly on the blog’s birthday. There was a 1½ year blogging hiatus in 2009-10 (because 1 startup + 3 little kids = 0 discretionary time), so I’ve done about 4½ years of actual blogging. This works out to a post roughly every two weeks.</p>
<p>I’m still passionate about learning and teaching the craft of user interface design. When I started this blog, I thought I would focus exclusively on client-side app UI, but I shifted my attention to the web when my company, Cozi, did so in 2008; later my interests extended to mobile UI as well.</p>
<p>I’ve tried to focus on my own direct personal experiences as a UX designer, with an eye towards sharing practical knowledge to people in the industry, or conveying a sense of the designer’s work to a general audience. I generally prefer to write about the products I know best: the ones I’ve worked on. In cases where I critique other products to make a point, I try to concentrate on the nitty-gritty details of a UI that may go overlooked by users, but which nevertheless affect the user experience.</p>
<p>This focus is borne out in this list of the most popular posts on flow|state, either having driven the biggest transient spikes in traffic or for driving the most visits over time.</p>
<ol>
<li><a href="http://miksovsky.blogs.com/flowstate/2005/10/the_fractal_nat.html">The fractal nature of UI design problems</a></li>
<li><a href="http://miksovsky.blogs.com/flowstate/2008/04/using-a-grid-of.html">Showing the complete range of choices in a grid</a></li>
<li><a href="http://miksovsky.blogs.com/flowstate/2008/04/fit-and-finish.html">Cozi calendar UI overhaul</a></li>
<li><a href="http://miksovsky.blogs.com/flowstate/2010/09/every-app-has-a-scary-basement.html">Every app has a scary basement</a></li>
<li><a href="http://miksovsky.blogs.com/flowstate/2010/09/form-validation-feedback-be-slow-to-complain-and-quick-to-forgive.html">Form validation feedback: Be slow to complain, and quick to forgive</a></li>
<li><a href="http://miksovsky.blogs.com/flowstate/2007/08/openid-great-id.html">OpenID: Great idea, bewildering consumer experience</a></li>
<li><a href="http://miksovsky.blogs.com/flowstate/2008/01/facebook-applic.html">Looking forward to seeing Facebook apps drop their pointless mystery</a></li>
<li><a href="http://miksovsky.blogs.com/flowstate/2008/01/zune-a-fine-mus.html">Zune: a fine music subscription device</a></li>
<li><a href="http://miksovsky.blogs.com/flowstate/2010/10/reconsidering-stock-controls-to-create-an-optimized-user-experience.html">Reconsidering stock controls to create an optimized user experience</a></li>
<li><a href="http://miksovsky.blogs.com/flowstate/2011/01/speed-up-routine-animations-once-theyve-made-their-point.html">Once a routine animation has made its point, speed it up</a></li>
</ol>
<p>One thing I’ve missed over the past year is more engagement with you, the readers. A while back I tried to ward off comment trolls and spam by turning on the requirement that commenters must be signed in. This kept away trolls and spam—and everyone else. On the suggestion of a friend, I’m giving unsigned <em>moderated </em>comments a try to see that encourages more discussion.</p>
<p>In that spirit, I’d love to hear from you about this blog, especially the sorts of posts you’ve found most helpful or interesting. Leave a comment or send email via the About page.</p>
<p>Thanks for reading!</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Steph Hager
EMAIL: steph_hager@hotmail.com
IP: 71.231.190.252
URL: 
DATE: 07/11/2011 11:49:37 AM
Since we're reminiscing, it's interesting that just the other day I ran across a WSJ that I kept dated December 1995, and in it Walt Mossberg in his popular Personal Technology column in section B1 throws dozens of design compliments Jan's way. Here are a few highlights from the article that illustrates how design-centered thinking can be a life-long gift, and how Jan's design methodologies were put into practice to turn around Microsoft's Money product — Money95:
- "But the surprise is that Microsoft has finally turned Money into a very respectable competitor mostly by adopting a new, clean look and feel for the latest version"
- "...it's a handsome and smart product that's aimed at novice users of financial software."
- "Everything in Money is accessed from a single, simple contents screen trimmed in virtual wood paneling to give it that banker's look. Money automatically displays relevant charts for many situations."
- "Money is finally a worthy competitor to Quicken."
Cool stuff, and no - the product's wood paneling didn't look like a station wagon, ha. That would have been 1975 (not 1995).
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 74.203.51.134
URL: http://profile.typepad.com/jan_miksovsky
DATE: 07/11/2011 01:02:08 PM
Thanks, Steph!
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: A simple experiment to judge the quality of your link text: make the surrounding text invisible
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: a-simple-experiment-to-judge-the-quality-of-your-link-text-make-the-surrounding-text-invisible

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/07/a-simple-experiment-to-judge-the-quality-of-your-link-text-make-the-surrounding-text-invisible.html 
DATE: 07/05/2011 08:00:00 AM
-----
BODY:
<p>While reviewing UI text recently, a question arose regarding exactly which words in a sentence should be used as a hyperlink. My standard tactic to cut through this design problem is to ask: what if your user were blind? Assume they have a screen reader that, by default, is going to let them tab through just the links on the page and read the link text aloud to them. Which link text would produce the best experience?</p>
<p>At Microsoft I was first exposed to the proposition that creating products with universal access in mind (i.e., making the product’s features accessible to users who were visually impaired, hearing impaired, motion impaired, etc.) would also produce benefits for all users. I’d love to see a rigorous defense of this proposition from an economic point of view: could resources invested toward universal access have produced better products if those resources have been invested elsewhere? But even without that defense, I do believe this mindset opens up new ways of looking at design problems.</p>
<p>Although the W3C published its <a href="http://www.w3.org/TR/WCAG10-HTML-TECHS/">guidelines for creating accessible web content</a> in 2000, including the specific admonition that <a href="http://www.w3.org/TR/WCAG10-HTML-TECHS/#link-text">“click here” is a bad link choice</a>, it’s nevertheless common to find this still done over a decade later. Here&#39;s a random news article:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20154336615af970c-pi"><img alt="Huffington Post" border="0" height="710" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201538f92b6d6970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Huffington Post" width="602" /></a></p>
<p>&#0160;</p>
<p>To get an approximate sense of how this page might appear to a blind user (via the default screen reader experience) you can remove all the text that surrounds the links. You can easily do this on almost any web page by using your browser’s developer tools to change the body and paragraph text color to match the background color:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20154336615ec970c-pi"><img alt="Huffington Post (white text)" border="0" height="710" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201538f92b6fa970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Huffington Post (white text)" width="602" /></a></p>
<p>&#0160;</p>
<p>With the body text rendered invisible, the use of the link text “here” in “Click <span style="text-decoration: underline;">here</span> to see a sample of the new Calendar redesign” jumps out. If the link text had been written without depending on the surrounding text, perhaps better link text might have been selected: e.g., “See a <span style="text-decoration: underline;">sample of the new Calendar design</span>”. The link text “wrote” could be similarly improved.</p>
<p>I think it’s striking that, even when one tries <em>very hard </em>to focus on just the link text in the first image, you still don’t get the same experience as the second image. The second image makes it impossible for your eyes to grab a little bit of context from the surrounding text.</p>
<p>Perhaps the persistence of weak link text can be partially attributed to the assumption that web usability guidelines for, say, visually impaired users, apply only to companies or organizations that focus on those users. In this case, following the guidelines for link text (and using link titles that appear on hover, etc.) can benefit all your users.</p>
<p>I can’t pretend to understand or fully appreciate the user experience of blind users. I can speak to the question of what a typical user does when scanning UI text: they tend to focus on the links. Writing as if the surrounding body text were going to be invisible can help guide you in the selection of good link text.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: ValQuery
EMAIL: djfiredup@gmail.com
IP: 24.190.223.62
URL: 
DATE: 08/22/2011 11:56:34 AM
As many usability experts note, people scan rather than read online. This is why I think that web design is in many ways a different skillset than print design and that finding ways to minimize the amount of cruft onscreen really can help out. Bad design is why I think that a lot of companies are shooting themselves in the foot. Rather than devoting a bit more money to create designs that convert well, businesses are spending more money than necessary on Google or Facebook ads. This has led to a whole industry of companies listed at www.buyfacebookfansreviews.com that help businesses get Facebook fans or other similar advertising companies, but with good design people would have a lot more success on their own. I think that a lot of it can be traced down back down to ego. I have seen designers come up with effective sites over and over again that continuously get overruled by an executive that thinks he knows what he's talking about. Leave the design to designers and the executives can just go surf the web all day long for all I care.
-----
PING:
TITLE: recycleyourfashions.com reviews
URL: https://twitter.com/RYFashions
IP: 198.175.124.96
BLOG NAME: recycleyourfashions.com reviews
DATE: 12/24/2012 10:27:40 AM
flow|state: A simple experiment to judge the quality of your link text: make the surrounding text invisible
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: If a person talked to you the same way user interfaces talk, you'd ignore them too
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: user-interface-text-empathy

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/06/user-interface-text-empathy.html 
DATE: 06/27/2011 08:00:00 AM
-----
BODY:
<p>A standard trope in software is that, “Users don’t read”. This claim is often made after someone observes a user blow straight through an “Are you sure you want to do&#0160;<em>X</em>?” dialog without reading it (possibly with some catastrophic result). There’s plenty of usability research showing that users do indeed&#0160;<a href="http://www.useit.com/alertbox/whyscanning.html">scan text instead of reading it</a>, which has resulted in some good recommendations for&#0160;<a href="http://www.useit.com/papers/webwriting/">writing for the web</a>. But I think most of that discussion overlooks the fact that much UI text is almost pathological in its lack of empathy, failing to consider the situation from the user’s perspective.</p>
<p>Let’s consider some situations you might encounter in UI text, then consider how you would view similar behavior in a human conversational counterpart.</p>
<ul>
<li>UI text is highly redundant. A page or dialog may&#0160;<a href="http://miksovsky.blogs.com/flowstate/2005/08/make_every_piec.html">state its main question or point multiple times</a>. If a person stated the same point to you three different ways, you’d either think they were stupid, or conclude they thought&#0160;<em>you&#0160;</em>were stupid.</li>
<li>UI text can be highly predictable. Suppose an app displays a confirmation dialog every single time you perform a common action, perhaps an act that is universally confirmed. A typical example might be a dialog intended to&#0160;<a href="http://miksovsky.blogs.com/flowstate/2006/02/some_basic_ui_p.html">prevent accidental deletion</a>. A person who asks you such a near-pointless question signals a lack of interest in the interaction, and in you as a person generally. (How did you feel when airline ticket agents used to ask questions whether you were carrying weapons or whatever?)</li>
<li>UI text doesn’t address questions from the perspective of the your task. If an app, say, focuses on some technological detail rather than the user’s goal, the app sounds more interested in itself than in you or your goal. This sort of behavior in people is characterized as narcissistic.</li>
<li>UI text uses jargon. By using words you are unlikely to know, the app signals more than disinterest in you, it places itself in a superior position as it pushes you down. In a human conversational counterpart, this behavior can be placed on some continuum between obtuse and elitist.</li>
<li>UI text may&#0160;<a href="http://miksovsky.blogs.com/flowstate/2007/06/dont-bury-the-l.html">bury the lede in a UI interaction</a>, that is, fail to draw your attention to the larger point. Someone who claims to give you the information you asked for, but deliberately obfuscates the crux of the matter, could be viewed as passive-aggressive.</li>
<li>UI text can be abrupt and negative. The canonical example here might be form validation feedback that rejects your attempt to enter data: “Error: Invalid email address” or such like. There are nearly always softer terms that could convey the same meaning as harsh terms. If a person deliberately uses negatively charged words like “invalid”, “incorrect”, “missing”, or “failed” to discuss you, your goals, or your acts, you could reasonably assume they felt disappointed or disgusted with you.</li>
</ul>
<p>Everyone, whether speaking with you, or writing to you through UI text, gets to choose their words. The existence of that choice allows you to infer the emotional state and intent of your conversational counterpart. While it’s impossible for an app today to “speak” with the same understanding of the situation as a person, or to accurately reflect that understanding through the nuances of its words, it is nevertheless eminently possible to improve a user interaction by writing UI text with more empathy for the user.</p>
<p>Again and again, my standard UI text exercise is to envision those words arising in conversation between two people. If I’m playing the role of the app, and the words I’m saying sound obtuse, insulting, superior, or disinterested, then those words must be rewritten, or the UI refactored to avoid the need for them.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Boris Zakharin
EMAIL: 
IP: 8.12.63.33
URL: http://profile.typepad.com/zakharin
DATE: 06/28/2011 08:45:32 AM
I think abrupt and negative text is actually a good idea. It has been proven that the less text is displayed the more likely the user is to read it. Did anyone have problems with "bad command or file name" in the DOS days? The current equivalent in Windows 7, "Windows cannot find 'blorgh'. Make sure you typed the name correctly, and then try again." Imagine if this were even "nicer" with things like "we're sorry", "unfortunately", "please", and "thank you". How many people will look at it enough to figure out what it's telling us? Further, how many will notice the difference if the core message is "out of memory", say, if it's formatted with the same way and contains the same beginning "Unfortunately" and ends with "we're sorry"?
-----
PING:
TITLE: Kiara Milstead
URL: http://www.facebook.com/pages/Weight-Loss-Secrets/119956744767085#!/pages/Weight-Loss-Secrets/119956744767085?sk=app_190322544333196
IP: 97.74.86.127
BLOG NAME: Kiara Milstead
DATE: 12/13/2011 12:53:45 AM
A big thank you for your blog article.Much thanks again. Awesome.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Your most recent feature probably should NOT be the most prominent element of your UI
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: your-most-recent-feature-probably-should-not-be-the-most-prominent-element-of-your-ui

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/05/your-most-recent-feature-probably-should-not-be-the-most-prominent-element-of-your-ui.html 
DATE: 05/31/2011 08:00:00 AM
-----
BODY:
<p>A colleague once showed me the main toolbar for an app they worked on, and offered an archeological exposition of when and why each button had been added. The first three buttons represented the app’s core functionality, and had been on the toolbar since the app’s first release. All the other toolbar buttons had been added in successive releases. Each time one of those features were added, it had been deemed vitally important to give the feature prominent placement on the toolbar. There those buttons had remained to the present day. But when the team monitored click-through across all toolbar buttons, the first three buttons accounted for nearly all user clicks. Those other buttons were permanent meaningless clutter, doomed to forever confuse and distract users from the first three, meaningful buttons.</p>
<p>When adding a new feature to an app, there’s an almost irresistible tendency to put that new feature front and center in the UI. After all:</p>
<ul>
<li>Your customers may have been begging for it for months, or years.</li>
<li>You and the entire product team have been actively thinking about, and working on, that big new feature non-stop for many months.</li>
<li>You are all proud of the new feature.</li>
<li>Your team may be convinced this feature represents the difference between business success and failure.</li>
<li>You don’t want existing users to overlook this much-requested feature when it’s finally available.</li>
</ul>
<p>But, wait—is this new feature really so important that it should now be the dominant element in your UI?</p>
<ul>
<li>It’s unlikely that <em>in the user’s mind</em> your new feature is more important than the app’s core function. You most likely established that core function of your app very early on, probably in the very first release. It’s unlikely that you want to <em>decrease</em> the chance that users successfully find and use that function.</li>
<li>Once users learn how to find your new feature now, they’ll still expect to be able to find it that way a year from now—when you’re trying to release the <em>next</em> new big feature. What are the odds that, at that time, the feature that’s new today will still be so vitally important?</li>
<li>It’s incredibly hard to muster the will to <a href="http://miksovsky.blogs.com/flowstate/2011/04/start-with-a-stripped-down-visual-design-and-slowly-add-elements-back-in.html">strip out a UI element</a>.</li>
</ul>
<p>It’s appropriate to make a new feature visible; just make sure that, from a user perspective, the prominence of the entry point for the feature corresponds to its priority in the updated app’s overall functionality.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Negative space in a user interface is priceless — so it inevitably gets filled up
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: its-impossible-to-put-a-price-on-negative-space-in-a-ui-so-it-inevitably-gets-filled-up

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/05/its-impossible-to-put-a-price-on-negative-space-in-a-ui-so-it-inevitably-gets-filled-up.html 
DATE: 05/23/2011 08:00:00 AM
-----
BODY:
<p>A lot of my time as a design executive is spent defending the value of the unquantifiable. Business pressures argue for design compromises with some quantifiable and significant ROI (Return on Investment). But as Adaptive Path put it in their report on <a href="http://adaptivepath.com/ideas/reports/businessvalue">Leveraging Business Value: How ROI Changes User Experience</a>, “It’s impossible to measure ROI for user experience with a simple equation that can be applied across a wide swath of companies and projects.” And, in my experience, perhaps the hardest thing to quantify is the value of negative space: the space <em>between</em> your user interface elements.</p>
<p>Typically brand new apps have lots of space, because UI elements represent features, which require code, which requires time and money. With time and money, however, the app evolves, and the empty space is quickly filled in with new features. The availability of room, in fact, can contribute greatly to the decision to place a button in what was previously empty space. “Users are asking for this feature, and it looks like there’s room for us to squeeze in another button on the toolbar, so let’s do the feature and make it a toolbar button.”</p>
<p>I rarely hear discussion about setting aside room in a user interface for the <em>absence</em> of user interface elements. Speaking both aesthetically and from a usability perspective, negative space can be highly valuable in an interface. Used effectively, it can create a sense of calm, balance, manageability, and competence. It can help guide the user’s eyes across the page towards what’s important. The presence of space can separate things that are different; the absence of space can join things that are similar.</p>
<p>Cozi’s current web page template leaves some significant negative space in the lower left (above the clock), as well as a bit in the upper right. Both those spaces vary in size depending on the window dimensions. (The calendar view itself also has considerable space, but that’s highly dependent on which view is selected and how much data is on the calendar.)</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20154326e3f8a970c-pi"><img alt="2010.09.17" border="0" height="480" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e888ee2ff970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="2010.09.17" width="640" /></a></p>
<p>The challenge is that negative space doesn’t <em>look</em> like it’s doing anything. It can appear inefficient—like a lost opportunity. In a business driven by display advertising, there is pressure to make pixels generate revenue. It’s nearly impossible to count the value that effective negative space contributes to a user experience, but it’s very easy to estimate the rent those same pixels might generate if they were converted to display advertising inventory. The thing is, those empty pixels <em>are</em> doing something. The user experience would be different—worse—if the space were filled.</p>
<p>(The Leaderboard ad in the image above is actually a different problem. That ad isn’t filling space that was previously empty; it’s consuming space that would otherwise be used to show user data. See my earlier post on why <a href="http://miksovsky.blogs.com/flowstate/2010/08/its-easier-to-imagine-hiding-an-ad-than-completely-redesigning-a-ui.html">it’s easier for users to image hiding an ad than completely redesigning a UI</a>.)</p>
<p>Negative space is hard concept to love, but it turns out that most people demonstrate an intuitive grasp of negative space in the context of their own homes. In home after home, you can observe that the occupants have very carefully hung pictures or paintings on the wall so as to give each piece space to breathe. You will rarely see a bunch of paintings crammed together on a wall. Most people effectively use negative space with no training beyond the casual observations of positive examples in other homes, museums, offices, or anywhere art is displayed. At some subconscious level, people must be so sensitive to the value of negative space that they are willing to do work to preserve negative space in their own surroundings.</p>
<p>The defense of the negative space in a user experience, however, is a never-ending battle. New proposals to “fill that space in” with a new feature, ad, or other element arise on a monthly, sometimes weekly, basis. Defense of the open space is wearisome but necessary. Once that’s space is gone, it’s usually gone forever.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: If your user got the result they wanted, what do you care if they didn&rsquo;t do it the most efficient way?
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: if-your-user-got-the-result-they-wanted-what-do-you-care-if-they-didnt-do-it-the-most-efficient-way

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/05/if-your-user-got-the-result-they-wanted-what-do-you-care-if-they-didnt-do-it-the-most-efficient-way.html 
DATE: 05/06/2011 08:00:00 AM
-----
BODY:
<p>Probably the most painful experience I have on a regular basis in my professional life is watching usability studies. Last year I became a big fan of <a href="http://www.usertesting.com">UserTesting.com</a> for conducting remote, unmoderated usability studies. In my experience, it’s been ridiculously fast, highly informative, and very inexpensive. Years ago I could only experience the agony of watching a floundering user by sitting behind a one-way mirror in a very expensive usability research lab. Now I can recapture that agony for only $39.</p>
<p>The most painful aspect of watching a usability study is seeing a well-intentioned UI — one you were sure would be a success — actually cause a user emotional distress. But the <em>second</em> most painful aspect of watching a usability study is seeing a user successfully accomplish a task in 10 steps which they could have accomplished in two. For example:</p>
<ol>
<li>A user wants to copy and paste a word. They carefully mouse down at the beginning of the word, slowly drag across the word, then let go. They move their mouse waaaay up to the Edit menu, click, then slowly read down the list of menu items until they come to “Copy”. They select Copy. Whew, they’re halfway there. They reorient themselves, and then click where they want to paste the word. They move their mouse waaaay back up to the Edit menu, click, then slowly read down the list of menu items until they come to “Paste”. Click. Voilà!     <br /> <br /><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201538e5431d6970b-pi"><img alt="Microsoft Word Edit Menu" border="0" height="338" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e8847986f970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Microsoft Word Edit Menu" width="298" /></a> <br /> <br /></li>
<li>A user wants to move a window. They drag the upper-left corner of the window to a new location. They then drag the lower-right corner of the window to a new location, taking care to make sure the window is now roughly the same size it was before.</li>
<li>A user wants to browse to a URL. They click their browser’s Home button to return to a page that has a Google search box. They type the URL into the Google search box, then click Search. Google displays a long page of results (with ads!). The user finds a link to the desired URL at the top and clicks it. </li>
</ol>
<p>It’s impossible to watch these events and not want to rush in and tell the user about how to use keyboard shortcuts, drag a window’s title bar, type in the address bar. Hey, user, you could be <em>so much more efficient! </em>This instinct, while natural, and somewhat altruistic, also has at its core some compulsive behavior. Software developers obsess a bit about <a href="http://www.codinghorror.com/blog/2009/11/whitespace-the-silent-killer.html">Whitespace, The Silent Killer</a>. Software designers obsess a bit about user inefficiency.</p>
<p>To be clear, being on the lookout for such inefficiencies is an absolutely critical design skill, as is being able to iterate towards a design that’s more likely to encourage efficient behavior. It’s worth asking, however: if the user got what they wanted, and is satisfied with the time and energy they spent, why should the fact that they ignored a more efficient route have to be troubling?</p>
<p>Changing a design—even for the better—has its own costs: the designer’s, the engineer’s, the tester’s, the support staff’s, not to mention the existing users’ time to learn something new. And sometimes a blunt attempt to force-train the user a more efficient path is worse than the original problem. (Remember all those “Tip of the day” dialogs that used to pop up on application startup to tell you all about a keyboard shortcut the app’s designers thought you really should know?)</p>
<p>Sometimes, however, it’s best to leave well enough alone. It can be enough to rely on the user’s ability to follow the <a href="http://en.wikipedia.org/wiki/Information_scent#Information_scent">information scent</a>&#0160;down a path that’s circuitous, long — and successful. If a feature’s design is generally letting users accomplish their goals, you probably have more urgent design priorities to address.</p>
<p>I’m always interested in hearing cases like this, where a user followed a circuitous but ultimately successful path. What’s the most extreme case of this you’ve seen?</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Radiofreelunch
EMAIL: 
IP: 64.38.167.24
URL: http://profile.typepad.com/radiofreelunch
DATE: 05/06/2011 08:54:10 PM
I remember the great video of a 2 year old using the original MacPaint. He could use the mouse to draw. But in order to clear the window, he didn't know about File > New. Instead, he turned off the Mac and back on.
-----
COMMENT:
AUTHOR: Day Barr
EMAIL: 
IP: 86.19.200.252
URL: http://profile.typepad.com/daybarr
DATE: 05/07/2011 09:16:26 AM
I had a colleague who told me about his Mum who'd bought a digital camera, shortly after they hit the mass market several years ago. A few months later they were chatting and he asked her what she thought of it. She said, "Oh it's great but the film is a little expensive". Understandably confused, he probed further and sure enough found a drawer full of "used" 256MB Compact Flash cards.
-----
COMMENT:
AUTHOR: Jonathan Barner
EMAIL: 
IP: 94.245.127.14
URL: http://profile.typepad.com/jonathanbarner
DATE: 05/08/2011 01:00:13 AM
<a href="http://xkcd.com/763">http://xkcd.com/763</a>
-----
COMMENT:
AUTHOR: Bruce
EMAIL: btb6@cornell.edu
IP: 67.42.81.187
URL: 
DATE: 07/11/2011 03:07:57 PM
The ultimate circuitous path is creating an Excel spreadsheet but calculating sums with a calculator and typing them in, rather than using formulas. I've seen it done. By smart people.
-----
PING:
TITLE: Calvin Romans
URL: http://www:billymilesmusic.com
IP: 173.234.143.234
BLOG NAME: Calvin Romans
DATE: 12/28/2011 01:11:38 AM
Fantastic article post. Awesome.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Where should the hit target boundaries for UI elements go?
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: where-should-the-hit-target-boundaries-for-ui-elements-go

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/05/where-should-the-hit-target-boundaries-for-ui-elements-go.html 
DATE: 05/02/2011 08:00:00 AM
-----
BODY:
<p>Have you ever clicked on a portion of a screen you thought was interactive, but it had no effect? Or tapped on something expecting one action, but got another? Sometimes the issue is that the actual hit target for a UI element differs from what can be assumed from the element’s visual appearance. There are some subtleties in picking the hit target boundaries for a UI element, but I haven’t seen much analysis of the topic, so thought I’d share some observations.</p>
<p>Time was, if you wanted a UI element to be clickable, you put a thick 3D border around it:</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e88296088970d-pi"><img alt="Windows 95 OK Button" border="0" height="74" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e88296090970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="Windows 95 OK Button" width="240" /></a></p>
<p>The 3D border lets the user they can activate the UI element by “pressing” it with a pointing device. The hit target here could not be missed: it was the entire area defined by the rectangular border. This is clear, but those 3D borders add a considerable degree of clutter. The borders of the button above, from Windows 95, are actually quite refined from an earlier age of thicker, heavier, and uglier borders. (In the early 90s, I was asked to sit on a Microsoft task force in which representatives of different teams spent months arguing about what the standard button border treatment should be. The group fought over the correct width for a 3D border, over the placement of the apparent light source, and over the precise shadow treatment for corner pixels. See how the white line on the top dives into the black line on the right, so that the upper-right corner pixel is black? You have no idea how much blood was spilled over that corner pixel.)</p>
<p>As time passed, it became apparent there were other ways to suggest interactivity. For example, it turns out that an element’s mere existence can suggest interactivity: if you put a little icon in the corner of a window, and there’s no other obvious reason for why that icon would be there, a user can reasonably conclude the icon is an interactive element. Similarly, giving an otherwise flat piece of text a distinctive appearance (say, blue and underlined) can be enough to let a user know the text constitutes a clickable link. So borders began to drop away.</p>
<p>But once borders are removed, a question arises: exactly which pixels should constitute the element’s hit target? There seem to be several basic strategies:</p>
<p>&#0160;</p>
<p>1. <strong>Explicitly define the hit target with a boundary line</strong>. This is the strategy behind the 3D border shown above, although many other boundary treatments are possible. The boundary itself can be a line with an inner and outer edge, or it can simply be a change in background color. The boundary’s shape is nearly always rectangular, even if the corners sometimes appear to be rounded.</p>
<p>&#0160;</p>
<p>2. <strong>Implicitly define the hit target as being relatively close to the visible pixels</strong> for an irregular object, such as text or an icon.</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e88296096970d-pi"><img alt="Zune Player Progress Bar" border="0" height="52" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e882960a5970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Zune Player Progress Bar" width="240" /></a></p>
<p>The little heart icon in the upper right of this control group is interactive — but exactly which pixels are clickable? If only the gray pixels were clickable, that would be a disaster; a user could click through in the middle of the heart and miss the target. (I seem to recall an OS long ago—Windows?—in which it was indeed possible to double-click through holes in desktop icons and not actually open the corresponding application.) [UPDATE: David Buxton reports that the OS in question was actually the original Mac OS.] To avoid this problem, hit targets almost always surround the element’s visible pixels.</p>
<p>Since today’s UI tools still make it <em>much </em>easier to define rectangular UI elements than ones with irregular shapes, the most common hit target for an irregular element is a bounding box: the smallest rectangle that completely encloses the visual pixels in the icon or text. The bounding box for a very small element may have additional padding to make it easier to click or tap. Picking the degree of padding requires judgment; if the hit target extends too far away, a casual click or tap might inadvertently activate the element. This problem is especially acute with circular icons, where the corners of the rectangular bounding box can actually extend far past the visible pixels.</p>
<p>&#0160;</p>
<p>3. <strong>Create a row whose intervals define hit targets</strong>. By placing elements at regular rhythm in a visual grid, even irregular shapes end up implying a bounding box.</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201538e35d689970b-pi"><img alt="Twitter for iPad - Tweet (reduced)" border="0" height="134" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e882960b5970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Twitter for iPad - Tweet (reduced)" width="357" /></a></p>
<p>In this image from Twitter for iPad, the regularity of the inter-button spacing in the upper-right suggests horizontal cells that constitute bounding boxes for the icons they contain. In such a row, a button’s hit target typically extends halfway to its neighbors. That amount of padding is much larger than would be expected if one of these buttons were standing on its own. This approach was what allowed toolbar buttons to be some of the first buttons to lose their thick, 3D borders. It’s particularly useful on touch device, where large hit targets are beneficial.</p>
<p>&#0160;</p>
<p>Regardless of which hit target strategy you pursue, on a device with a mouse, you can employ mouse hover effects to clarify the hit target. The hover effect might reveal the actual hit target: e.g., showing the rectangular hit target boundary being applied to an irregular object. Or, in a case like that of a change in link color on hover (which still leaves an irregular shape), the appearance of the hover effect at least indicates when the mouse has crossed the hit target boundary.</p>
<p>This toolbar ribbon from Microsoft Word 2010 uses all three of the above strategies:</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201543208c2b6970c-pi"><img alt="Microsoft Word 2010 Ribbon - Font Section" border="0" height="105" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e882960cb970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Microsoft Word 2010 Ribbon - Font Section" width="363" /></a></p>
<p>The combo boxes use visible boundary lines (the first strategy above). The toolbar buttons appear in rows with regular spacing (the third strategy). The visual rhythm isn’t perfectly regular; it’s somewhat altered by narrow group separators, as well as dropdown arrows that make some buttons effectively wider, but the inter-button spacing is consistent. Finally, the tiny icon in the lower right corner, which is not part of any row, defines its hit target with a bounding box tightly drawn around the icon’s visible pixels (the second strategy). In all cases, hover effects are used to good effect to clarify the hit target.</p>
<p>&#0160;</p>
<p>As the opening questions of this post suggest, there are cases where hit targets may not be apparent, and may confuse users. In these palette tabs from Adobe Photoshop CS5, consider the small dropdown icon in the upper-right corner:</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201543208c2c3970c-pi"><img alt="Adobe Photoshop Palette Tabs" border="0" height="45" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201543208c2cb970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Adobe Photoshop Palette Tabs" width="239" /></a></p>
<p>The dropdown icon is an irregular shape, which suggests a tight-fitting bounding box — but it’s also inside a rectangular boundary (the leftover space not used by the tabs), which suggests the whole rectangle is targetable. The former is actually the strategy which Adobe employed here, but a user might easily be led to click in the empty space to the left of the icon. This is clarified somewhat by a hover effect on the icon, but there’s still opportunity for confusion.</p>
<p>Confusion can also arise when hit targets overlap, or appear to overlap. Apple makes occasional use of (apparently) overlapping hit targets in iOS table views:</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e882960d9970d-pi"><img alt="iPhone Recent Calls (reduced)" border="0" height="221" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201543208c2da970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="iPhone Recent Calls (reduced)" width="320" /></a></p>
<p>The blue disclosure arrow button at the right is a independently targetable UI element sitting on top of another, larger targetable table row. Tapping the disclosure button has a different effect than tapping the overall row. To me, at least, this is endlessly confusing. Sometimes I tap the blue button when I mean to tap the row; sometimes I want the effect of tapping the button, but tap the row instead, forgetting that action has a different effect. This confusion is compounded by the fact that <em>slightly different </em>disclosure arrows used elsewhere in other iOS table views to indicate that tapping anywhere in the row <em>including on the arrow</em> will bring up more detail. The table view UI above looks clean, but in my opinion, that comes at too great a cost. Perhaps the UI would be clearer if, for example, this table view displayed a vertical line, just to the left of the arrow, to carve out a square box on the right end of the row for the disclosure arrow (i.e., used the first strategy above instead of the second).</p>
<p>Hit target boundaries are rarely this confusing, however. In most cases, following one of the strategies above will lead to a UI people can readily pick up and use effectively.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: David Buxton
EMAIL: 
IP: 87.194.56.231
URL: http://profile.typepad.com/davidbuxton
DATE: 05/02/2011 12:54:31 PM
The old Mac OS had the problem with "hollow" icons that could be clicked through, I think it was Mac OS 8.5 that introduced masks for icons which had this side-effect. Particularly annoying with the default CD-ROM icon.
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 74.203.51.134
URL: http://profile.typepad.com/jan_miksovsky
DATE: 05/02/2011 04:13:23 PM
David: Ah, so it was the Mac! I've updated the post text to reflect that. Thanks.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Start with a stripped-down visual design and slowly add elements back in
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: start-with-a-stripped-down-visual-design-and-slowly-add-elements-back-in

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/04/start-with-a-stripped-down-visual-design-and-slowly-add-elements-back-in.html 
DATE: 04/04/2011 08:00:00 AM
-----
BODY:
<p><em>La perfection est atteinte, non pas lorsqu&#39;il n&#39;y a plus rien à ajouter, mais lorsqu&#39;il n&#39;y a plus rien à retirer.      <br /></em>Perfection is attained, not when no more can be added, but when no more can be removed.</p>
<p>—Antoine de Saint-Exupéry</p>
<p>&#0160;</p>
<p>I love the spirit of this oft-heard design maxim, but it’s not a <em>recipe</em> for design, or at least not for iterative software user experience design. The statement suggests you could design something that’s more elaborate than what would be ideal, then chisel away at it until you’re done. That approach might work for a one-off product, but in an evolving software app, removing something is rarely an option. All apps have to evolve or die, and since a product’s feature set nearly always increases in complexity over time, virtually all UI evolution is additive. Indeed, it’s so rare that a designer gets the chance to actually remove something in version <em>n</em>+1 that it’s notable <a href="http://miksovsky.blogs.com/flowstate/2010/08/ios-4-home-button-double-tap-rare-case-of-retiring-a-behavior-preference.html">when it happens</a>.</p>
<p>The only time you, as a designer, generally have the freedom to remove anything is before it gets into a user’s hands. After that, it’s almost a foregone conclusion that the feature will stay around for the life of the product. The only way to “remove” something is often to start over with a completely new product, typically on a new platform. The corollary of Exupéry’s claim in the UX realm might be that each product iteration should add as little as possible. You never know in which ways your evolving feature set will impose new design considerations, and what was perfect in version <em>n</em> might no longer be desired in version <em>n</em>+1.</p>
<p>With that in mind, when Cozi first designed a month view for our web client in late 2007, we felt that it was our last best chance to strip all the junk that normally clutters up month views (here, Microsoft Outlook 2010):</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e872c608d970d-pi"><img alt="Microsoft Outlook 2010 Month View" border="0" height="480" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e872c60ba970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="Microsoft Outlook 2010 Month View" width="616" /></a></p>
<p>&#0160;</p>
<p>Aside from the obvious clutter, it’s worth pointing out that this view <em>doesn’t even show the majority of the appointments actually in this user’s calendar</em>. At this size, the user only sees the first few appointments each day (which may or may not be the most important). To see the rest, the user must click the disclosure triangles in the lower-right corner of each day—which take the user completely out of context to another view entirely. And, in my opinion, the category-based color coding that’s quite useful in day view unfortunately overwhelms the user’s attention in month view.</p>
<p>Since we were effectively starting over on a new platform (as noted above, the most likely opportunity to remove something), we <em>did</em> have the chance to remove stuff. Asking ourselves, “What would Tufte do?”, we produced a minimalistic initial design concept:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e60516f2b970c-pi"><img alt="Cozi Month View (Original Design)" border="0" height="480" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e872c60d0970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="Cozi Month View (Original Design)" width="603" /></a></p>
<p>&#0160;</p>
<p>The main points were to remove the boxes around everything, eliminate background color for all but the most notable events, and to tone the gridlines way back. We also decided that a calendar view was almost useless if it hid appointments, and decided that the grid rows would vary in height to contain all the data. Since many people use months to conceptually map out their near future, we wanted to clearly delineate the month transitions with both boundary lines and a color change. We made the dates much larger (like those on many wall calendars) and pushed them into a background layer so that they could be easier to spot without consuming more room. And we maintained the Cozi precedent for showing non-routine appointments in bold so that they would be easier to spot.</p>
<p>By the time we shipped, we’d actually gone even further, removing all gridlines entirely. This is our initial web implementation:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e872c60d4970d-pi"><img alt="Cozi Calendar Month View (original web implementation)" border="0" height="473" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e60516f51970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="Cozi Calendar Month View (original web implementation)" width="640" /></a></p>
<p>&#0160;</p>
<p>Users told us we’d gone too far, and that it was hard to figure out which appointments went on which dates. In a later version, we added the horizontal rules line in:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e872c60ea970d-pi"><img alt="Cozi Calendar Month View (horiziontal rules)" border="0" height="461" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20147e3ac9e70970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="Cozi Calendar Month View (horiziontal rules)" width="640" /></a></p>
<p>&#0160;</p>
<p>This design has generally performed well, although we receive a range of feedback. For example, there’s a certain type of user who really, <em>really</em> wants vertical gridlines, not just horizontal gridlines. We prefer to use negative space itself as a sort of virtual gridline. We clip long appointment text on the right end of a day cell, which creates a vertical line of negative space. This effectively separates one day from the next without the cost of additional clutter.</p>
<p>One issue not revealed in these images is that we hadn’t gotten around to coding the thicker boundaries between months as called for in the original design. We recently got around to fixing that, and now use both a thick line and a background color change to delineate months:</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e872c611c970d-pi"><img alt="Cozi Calendar Month View (month boundaries)" border="0" height="405" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20147e3ac9e84970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="Cozi Calendar Month View (month boundaries)" width="640" /></a></p>
<p>&#0160;</p>
<p>We’ve also made other changes made along the way, like a switch to a <a href="http://miksovsky.blogs.com/flowstate/2010/08/lessons-switching-our-web-ui-from-stock-fonts-to-a-proprietary-font.html">custom font</a>, and dynamically vary leading to pack in more appointments into the same vertical space. We still haven’t implemented highlighting for special dates like birthdays or holidays, although perhaps we’ll get to that at some point.</p>
<p>We’re generally pretty cautious about adding something new.We’re cognizant of the possibility that the design might not work out for everyone—but the users who <em>did</em> like it would be unhappy if we tried to take the feature away. As said before, app UIs generally accrete new elements. This makes it challenging to deliver a clean design—and keep it clean.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: MaxSquare: a fast and simple algorithm for maximizing photo thumbnail sizes
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: maxsquare

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/03/maxsquare.html 
DATE: 03/07/2011 08:00:00 AM
-----
BODY:
<p>Is anyone else bothered by photo thumbnails that are smaller than they need to be?</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20147e30b7a16970b-pi"><span style="font-size: small;"><img alt="iPhoto" border="0" height="388" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20147e30b7a1d970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="iPhoto" width="600" /></span></a></p>
<p><span style="font-size: small;">The window above leaves plenty of empty space that could be better utilized to show the photos in more detail. Sure, there’s a Zoom slider in the toolbar, and I could fiddle with it to find the best zoom level that shows all the photos at the largest thumbnail size without forcing the appearance of scroll bars. One problem is that this zoom level applies to <em>all</em> photo albums, regardless of how many photos a given album has, so I have to keep fiddling with it to get the best results for any one album. When I switch to a different album with a different number of photos, I end up playing with the Zoom again until I’ve got the thumbnails at the biggest size that still lets them all fit. Another problem is that, if I change the window size at all, I have to play with Zoom yet again.</span></p>
<p><span style="font-size: small;">Virtually all photos apps, including OSes that display photos, work this way. Perhaps we’ve had manual Zoom sliders for so long we haven’t reconsidered their shortcomings. To me they feel cumbersome—like they’re making me do work the app should be able to do on its own. If I can manually fiddle with the Zoom slider to make the photos as big as possible and still fit all of them (or a good number of them), why can’t the app adjust the zoom level for me?</span></p>
<p><span style="font-size: small;">Perhaps the standard Zoom slider is a vestige of a time when dynamically scaling photos was slow, so apps (and users) didn’t want to do it that often. That’s no longer the case; CPUs and GPUs are such that photo scaling just screams these days. </span><span style="font-size: small;">In many situations, and especially for small albums, I think a user would prefer to see the photos at the biggest possible size, to make effective use of their window real estate. This might not be the case for every user or for every app, but surely this would be useful in many cases.</span></p>
<p><span style="font-size: small;">An interesting question is: given an arbitrary canvas size, and a collection of <em>n</em> photos with various aspect ratios, how big can those photos be shown and still have them all fit? </span><span style="font-size: small;">This turns out to be an issue of how to best divide the screen into squares. Squares are generally used to display thumbnails to account for the fact that photos have different aspect ratios. The bigger the square given to each thumbnail, the bigger the average rendered thumbnail can be. So the real question becomes: what grid dimensions (number of rows and columns) will divide the canvas into the biggest squares?</span></p>
<p><span style="font-size: small;">This line of thinking led to an algorithm I call MaxSquare which calculates the optimal grid size for a collection of <em>n</em> images such that each image is allocated the largest possible square cell. It seems to work well, and I’d love to see it find some real use.</span></p>
<p><span style="font-size: small;">In that spirit, I’ve put together a MaxSquare <a href="http://quickui.org/demos/MaxSquareDemo/?count=12">demo</a> and posted the <a href="https://github.com/JanMiksovsky/quickui/tree/master/site/demos/MaxSquareDemo">source</a>. The demo is written in </span><a href="http://quickui.org/"><span style="font-size: small;">QuickUI</span></a><span style="font-size: small;">, but the core MaxSquare algorithm is in a <a href="https://github.com/JanMiksovsky/quickui/raw/master/site/demos/MaxSquareDemo/maxSquare.js">standalone JavaScript file</a> with no dependencies. <span style="font-size: small;">The demo is especially fast under Chrome, and works nicely under Firefox and Safari as well. (The demo currently doesn’t run in IE; while MaxSquare itself performs fine under IE, the demo’s use of jQuery.get seems to have trouble retrieving the sample photos from Flickr.)</span></span></p>
<p><span style="font-size: small;">Once you’ve opened the demo, resize the browser window to see the photos automatically zoomed to use the available space. You can also adjust the “count” parameter on the URL to view a smaller or larger number of photos. E.g., enter count=24, and as you resize the browser, you can watch the column and row dimensions jump between the various factor pairs of 24 (8x3, 6x4, etc.).</span></p>
<p><span style="font-size: small;">To walk through some examples: Given a window with a 2:1 aspect ratio and twelve photos (drawn from Flickr’s </span><a href="http://www.flickr.com/explore/interesting/7days/"><span style="font-size: small;">Interestingness</span></a><span style="font-size: small;"> set), MaxSquare renders the photos in a 6x2 grid:</span></p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e5fb09da9970c-pi"><span style="font-size: small;"><img alt="MaxSquare Widescreen" border="0" height="285" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e868b57e6970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="MaxSquare Widescreen" width="600" /></span></a></p>
<p><span style="font-size: small;">When the window is resized to approach a 4:3 aspect ratio, MaxSquare appropriately determines that a 4x3 grid is better, again giving each photo the maximum square possible:</span></p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e5fb09e96970c-pi"><span style="font-size: small;"><img alt="MaxSquare 1024x768" border="0" height="450" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e5fb09ec6970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="MaxSquare 1024x768" width="600" /></span></a></p>
<p><span style="font-size: small;">When more photos (say, <a href="http://quickui.org/demos/MaxSquareDemo/?count=30">30</a>) are added to the same 4:3 window, MaxSquare determines that a 6x5 grid gives the best results:</span></p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e868b5929970d-pi"><span style="font-size: small;"><img alt="MaxSquare 1024x768 (30 photos)" border="0" height="450" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e5fb09fa5970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="MaxSquare 1024x768 (30 photos)" width="600" /></span></a></p>
<p><span style="font-size: small;">For large albums (or small window sizes), the thumbnails can be too small to be useful, so there’s still a role for scrolling. This could be governed with a minimum thumbnail size: once the thumbnails hit that size, a scroll bar kicks in. The minimum thumbnail size could be chosen by the user. In fact, maybe <em>that’s</em> the right use for a Zoom slider: to pick the <em>minimum</em> thumbnail size which the user finds acceptable.</span></p>
<p><span style="font-size: small;">If you work on an app that presents photo or image thumbnails, try using MaxSquare in your UI and let me know what you think; I&#39;d love to hear if it works well in practice. (Or if you like the demo, and have a favorite photo app that could benefit from this behavior, ask the app makers to consider picking this up. It&#39;s free, and open!)</span></p>
<p><span style="font-size: small;">&#0160;</span></p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Stop abusive task list UIs: highlight imminent tasks, not overdue ones
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: stop-abusive-task-list-uis-highlight-imminent-tasks-not-overdue-ones

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/02/stop-abusive-task-list-uis-highlight-imminent-tasks-not-overdue-ones.html 
DATE: 02/21/2011 08:00:00 AM
-----
BODY:
<p>Most task list management applications abuse their users by displaying overdue tasks in red text. The original, noble intent is to use red, a highly noticeable color, to draw the user’s attention to a task they must have missed so that they can take immediate corrective action. The reality (as best as I can determine it) is that tasks usually fall overdue for reasons that have nothing to do with the user’s lack of attention.</p>
<p>For example, a person might assign an arbitrary due dates to a task, in the belief that this self-imposed deadline will goad them into action. Unfortunately, since the person is well aware the date is completely arbitrary, when that date arrives, there’s no reason they can’t push the task out one more day. A sort of personal time management mathematical induction kicks in: day after day, the task can be pushed out one more day,&#0160;<em>ad infinitum</em>.&#0160;The person will likely leave the original deadline untouched—why bother? Even if they assign a new date, that date will also be arbitrary, and time will eventually catch up to the new date as well. The inevitable result, for all but the most disciplined user, is a sea of red ink:</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e5f50f412970c-pi"><img alt="Outlook To Do List" border="0" height="309" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20147e2abf781970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Outlook To Do List" width="600" /></a></p>
<p>This is software UX at its soul-crushing worst. One technique for evaluating a UX design is to imagine a human being performing the same task <em>and&#0160;in the same manner</em> as the software. So ponder the question: who would want a personal assistant who behaved like this? Someone who was utterly silent about a task until after it was due, and then began ranting: “You’re late! <em>You’re late!</em> You’re so completely late! Everything on your list is late! You’re pathetic! You can’t get anything done! You’ll <em>never</em> get anything done!” No one would put up with this abuse—from a person. But millions of people put up with this abuse from software.</p>
<p>When Cozi created its initial area for <a href="http://www.cozi.com/To-Do-List.htm">To Do lists</a>, I determined to avoid this UI and come up with something more humane. I would rather have delivered a bare-bones UI that met at least some people’s needs than one which purported to meet broader needs, but did so in an obviously terrible way. Without time to do better than the above, we shipped our original To Do list implementation without support for dates on tasks. As an alternative to assigning arbitrary dates, the design allowed people to drag-and-drop tasks to prioritize them.</p>
<p>Interestingly, when I observed paper To Do lists in user homes, tasks were largely free of dates. Penciled dates that did appear were often <em>externally imposed</em> deadlines. Those were meaningful, and the users knew it. Such dates were probably motivating. Why, then, do people apply arbitrary dates so readily in task management software? Probably just because there’s a “Due Date” field. The field’s there. They feel compelled to fill it in. The abuse ensues.</p>
<p>Now let’s reconsider our human personal assistant, and ask how we’d really want them to work with us. We want someone who will give useful <em>advance </em>notice of a task before it becomes due. This assistant should recognize that, if a deadline has passed with a task still incomplete, perhaps that’s not the end of the world. Either the task just wasn’t that important, or we couldn’t get it done by the original date (and are taking steps to remedy the situation already), or we just couldn’t work up the energy to do it (but still mean to). Our clever assistant recognizes that can’t know which one of these is the case, and takes the most prudent course of action—it shuts up.</p>
<p>This line of thinking gave rise to the upgraded To Do lists design which Cozi recently deployed:</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e862b7e19970d-pi"><img alt="Cozi To Do List" border="0" height="397" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e862b7e1f970d-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Cozi To Do List" width="576" /></a></p>
<p>Key points:</p>
<ol>
<li>There’s no Due Date field. For tasks with external deadlines, users can type a date anywhere in the text of the task. Cozi parses out the date and formats it in bold to confirm recognition. </li>
<li>Cozi highlights <em>imminent </em>tasks: tasks due within the next week. The yellow highlighter effect is used to draw attention without raising alarm (the way red can). The user interface says: “All is well; just pay particular attention to these few tasks.”</li>
<li>Cozi does absolutely nothing special with overdue tasks. You’ve had a week’s notice of the imminent task, so once the date passes, the task&#39;s priority is entirely for you to determine.</li>
<li>A side effect of the above point is that the the highlighted tasks can’t pile up. Because the highlighting gets dropped from past due tasks, the overall “volume” at which the task list speaks to you is relatively constant from day to day.</li>
<li>For extra reference, Cozi puts tasks with dates on your <a href="http://www.cozi.com/Family-Calendar.htm">family calendar</a> so you can track them there as well. </li>
</ol>
<p>While not perfect, I think it’s a big step forward towards a more humane task management UI. If your own application includes any sort of date-based view, and it’s currently yelling at users in red text, consider turning down the volume on the “overdue” representation and focusing instead on proactive highlighting of imminent tasks.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Users are better at adapting features to their idiosyncratic needs than inexperienced designers realize
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: users-are-better-at-adapting-features-to-their-idiosyncratic-needs-than-inexperienced-designers-realize

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/02/users-are-better-at-adapting-features-to-their-idiosyncratic-needs-than-inexperienced-designers-realize.html 
DATE: 02/14/2011 08:00:00 AM
-----
BODY:
<p>A common instinct I’ve observed in inexperience designers is a desire to overly complicate a new feature based on their own expectations about how perfectly suited the feature needs to be to a wide range of scenarios. In fact, users constantly surprise me with their ingenuity at adapting basic features to cover their idiosyncratic needs.</p>
<p>I recall a user who built an organization chart in a very early version of Microsoft Excel (the only productivity app they really knew) by entering employee names in cells—and then carefully&#0160;<em>drawing connecting lines with cell borders</em> for cells in between. On Microsoft Money, I saw users employ Money’s general-purpose system of accounts and categories to track a bewildering array of financial instruments and personal financial arrangements. As time goes on and an application’s user base grows, the feature set can expand into the long tail of specialized needs. But in the beginning, users find all kinds of ways to make do with what they’ve got.</p>
<p>Cozi’s own UI contains a basic household settings page for defining the <a href="http://miksovsky.blogs.com/flowstate/2006/10/asking_for_firs.html">names</a> of each family member. Early pre-release builds of the product allowed a family to define two primary adults at the head of the household, followed by a list of children. This definition of a family might cover many households, but it obviously couldn&#39;t represent every family. This didn’t cover a grandparent or other relation that lived with the family, nor did this arrangement handle divorced families. We debated whether to add more UI complexity to better model a wider range of families before shipping.</p>
<p>In the end, we launched with this basic definition of a family, and it turned out that many families had no trouble adapting it to their needs. Users were quick to realize the shortcomings of the UI, but just as quick to realize that the list labeled “children” imposed no real functional restriction against entering adults. So while it wasn’t ideal to describe a grandparent as a “child”, the family could still accomplish their objective of tracking the grandparent’s schedule in the family calendar. A surprising number of families went further, entering their dog or cat (or horses!) as family members.</p>
<p>Where the UI didn’t explicitly cover the users’ needs, they improvised. This makeshift arrangement was functionally acceptable for those families, and allowed to Cozi to deliver value to them sooner than if we had had to postpone the release until we could explicitly cover a wider range of cases. It’s that value, in fact, that caused users to put up with the need for adaptation.</p>
<p>Cozi’s household data model remains essentially the same today, although we have responded to user feedback by relabeling the list of children:</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e5f28e347970c-pi"><img alt="Cozi - About your household" border="0" height="482" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2014e5f28e384970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Cozi - About your household" width="600" /></a></p>
<p>The current label for the list of additional household members is “Children, other adults, and busy pets!” With that change, we essentially recognized, accepted, and formalized the adaptation our users were already making. (The “busy pets!” bit took some time to settle on. We wanted to encourage families who were inclined to count pets as family members to do so. However, simply saying “pets” would suggest to families that they needed to record every fish or hamster they owned, even if those pets never had vet appointments or otherwise appeared on the calendar. Hence, “busy pets”. We wanted to be clear that this was somewhat tongue-in-cheek, and considered adding a smile emoticon, but that seemed to trivialize the UI. The exclamation mark seemed to strike the right balance of playfulness and utility.)</p>
<p>In the end, it turned out that having, for example, a separate section of the settings page for other adults was not strictly necessary; the common adaptation proved sufficient.&#0160;We’ll continue to evolve Cozi’s definition of a family (to, say, handle divorced families), but for now this seems to be good enough for many, many families.</p>
<p>In general, I think it’s a sound strategy to assume that a user who wants to make your product work for them will find ways to do so. You’re best off shipping the simplest thing that could possibly work, seeing how people use it, then evolving the design from there.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Justin Magaram
EMAIL: 
IP: 76.22.66.175
URL: http://profile.typepad.com/justin32
DATE: 02/14/2011 01:51:42 PM
Here is an example where I "made do" with the limitations of a piece of software. I was editing playlists in iTunes and dragged some songs onto the list. iTunes asked something like "those songs are already in the list. add them again as duplicates?" At the time I thought this was a ridiculous question. Why would you ever want duplicate songs in your playlist? A couple months later I bought a iPod Nano which didn't have enough space for all my music. So I built a playlist called "Nano Playlist" with a subset of my music. It turned out I still had lots of extra space on the Nano and wanted to browse the music that wasn't yet in the playlist to see what else to add. iTunes doesn't have the ability to query "all my music minus stuff in playlist x". So I created a playlist called "All my music" and put everything in it. I then dragged the contents of my Nano playlist onto it and answered "yes" to the "ridiculous" question about adding duplicates. I then used the iTunes feature to "show duplicates" and deleted all those duplicates. Voila! Now I could see all the music that wasn't yet in the Nano playlist and choose new music to add to it. I still wonder what Apple had in mind with the "add duplicates?" question since I really doubt they envisioned the steps I took to make use of it.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Placebo controls make implicit actions explicit
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: placebo-controls-make-implicit-actions-explicit

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/02/placebo-controls-make-implicit-actions-explicit.html 
DATE: 02/07/2011 08:00:00 AM
-----
BODY:
<p>My <a href="http://miksovsky.blogs.com/flowstate/2011/01/speed-up-routine-animations-once-theyve-made-their-point.html">last post</a> referenced the toolbar in Cozi’s <a href="http://www.cozi.com/Family-Calendar.htm">family calendar</a> for entering appointments in natural language. Interestingly, the toolbar’s little “X” button for cancelling appointment entry is something of a placebo control—it’s not strictly necessary, but nevertheless improves usability:</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20148c855db50970c-pi"><img alt="Cozi Calendar Toolbar Animation 2" border="0" height="131" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20148c855db61970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Cozi Calendar Toolbar Animation 2" width="600" /></a></p>
<p>It turns out that the user can implicitly cancel appointment entry and close the toolbar by clicking <em>anywhere</em> on the page outside the highlighted box. They can also press the ESC key. These mechanisms seem to suffice when the text box is empty; the user figures they can click outside the box to close it, and discovers that does exactly what they want.</p>
<p>However, once the user enters some appointment text, the stakes for a mistake increase. In that state, it’s not at all clear whether clicking outside the box will save the appointment or throw it away. By offering a little “X” close box, the user can see a clear, explicit means of cancelling the appointment, and can be confident that a click on that control will produce the expected result.</p>
<p>Here both the implicit and explicit means of closing the toolbar feel necessary to me. The implicit means isn’t clear enough when it really matters, and the explicit means feels too demanding in the common case where the user is just clicking around to explore the product. A casual click inside the toolbar produces the state shown above, and a click outside cancels that state. So both mechanisms play a useful role.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Once a routine animation has made its point, speed it up
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: speed-up-routine-animations-once-theyve-made-their-point

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/01/speed-up-routine-animations-once-theyve-made-their-point.html 
DATE: 01/24/2011 08:00:00 AM
-----
BODY:
<p>As animations make their way into more user interfaces, many applications would benefit from a simple trick: speeding up routine animations after the user has had a chance to digest the animation’s message.</p>
<p>An interesting and fairly thorough <a href="http://msdn.microsoft.com/en-us/library/aa511285.aspx">Animations Overview</a> from MSDN describes several different reasons for using animation in a user interface “to give feedback, preview the effect of an action, show the relationship between objects, draw attention to change, or explain a task visually.” More and more applications are using animations for these purposes as web UI frameworks like jQuery and mobile platforms have made implementing such animations trivial.</p>
<p>Occasionally one can come across an animation that’s elegant and informative the first time one sees it, but which eventually gets tiresome. I’ll use the otherwise excellent Windows Phone 7 home screen as a case in point. I’ve been trying a Samsung Focus phone with the Windows Phone 7 OS for the past couple of weeks, and in general I think it’s 80% awesome. (I wish the Facebook app were faster; it needs a Google Reader app as good as Reeder; it needs backup and restore; and the phone’s browser is an abomination.) In its favor, the <a href="http://en.wikipedia.org/wiki/Metro_UI">Metro User Interface Style</a> is elegant to a revolutionary degree. Windows Phone 7’s clean UI makes Apple’s iOS look kitschy and cluttered.</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20148c7ecc3f9970c-pi"><img alt="Windows Phone 7 Phone" border="0" height="240" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20148c7ecc42a970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Windows Phone 7 Phone" width="125" /></a></p>
<p>The Windows Phone 7 home screen plays a quick animation when you tap on an app tile (the squares above). The tiles on the page all flip away, but the tile you tapped on lingers just a fraction of a second longer to confirm what app you’re about to see. This is all quite elegant and subtly informative. It also gets old fast.</p>
<p>If you launch, say, the email client, it will play its own beautiful animation. When you navigate back to the home screen, you see both animations again in reverse. To slip between two email accounts via the home screen, you see four separate animations: email closing, home page resuming, home page launching app, email app opening. These short animations add up, and start to grate. You already understand their point, and each additional playing of the animations just beats that point into the ground.</p>
<p>A quick cure for a situation like this is to speed up the animation. You can play a fairly long one second animation the first time, play it for only half a second the next time, then a quarter second, and thereafter either leave a residual high-speed animation or drop it altogether.</p>
<p>Here’s a simple example. Cozi’s family calendar has a toolbar at the top with a text entry area in which the user can type new appointments in natural language. This text entry area is normally shown in a collapsed state to save space:</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20148c7ecc442970c-pi"><img alt="Cozi Calendar Toolbar Animation 1" border="0" height="130" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20148c7ecc459970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Cozi Calendar Toolbar Animation 1" width="600" /></a></p>
<p>When the user starts typing, or explicitly clicks in the text entry area, the area transitions to an expanded state:</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20148c7ecc473970c-pi"><img alt="Cozi Calendar Toolbar Animation 2" border="0" height="131" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20148c7ecc492970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border-width: 0px;" title="Cozi Calendar Toolbar Animation 2" width="600" /></a></p>
<p>This transition has four components:</p>
<ol>
<li>The text area gains a box around it. This lets the user know they can type.</li>
<li>The text area grows wider. This gives the user more room to type long appointments. The area animates from its original narrow width to the full width of the main page area. This animation lets the user know that the narrow text area and the wide text box are, in fact, the same thing. The user can infer that this wide box has the same intent (“Type appointment”) as the original narrow area.</li>
<li>A white layer over the rest of the toolbar controls animates from fully transparent to semi-opaque. This helps make the wider text area stand out, and suggests a quasi-modal state. Again, the animation orients the user; they understand that the faded controls are the same ones they were looking at a second ago, only now those controls are not relevant.</li>
<li>Additional controls appear(“X” for cancel, “What can I type”?) which are specific to this modal state.</li>
</ol>
<p>The animation of the text box’s width (#2) and the background opacity (#3) run concurrently for a short duration. We wanted the animation to be visible to new users so they could visually parse what was happening. However, it turns out that text entry is not possible until the animation completes, so a long animation will not only get tedious, it will slow the user down. (And even if the user could type while the animation was running, most people would probably wait for the animation to finish before starting to type.)</p>
<p>So the compromise is this: the first time the user triggers the animation, it runs for 600 milliseconds (i.e., 6/10 of a second). Thereafter, the animation runs for only 200 milliseconds (three times as fast). This simple speeding-up seems to work well in practice. Users appear to successfully understand the animation’s message, and at the same time we’ve never heard complaints that the animation is slow or gets in the way.</p>
<p>Going back to Windows Phone 7, that team seems have lavished so much attention on their UI,&#0160;let’s give them the benefit of the doubt, and assume that they not only thought about speeding up their routine animations, but had a good reason&#0160;<em>not</em>&#0160;to&#0160;do that here. Perhaps switching an app takes a couple of seconds no matter what, and the animations at least give you something to watch while that’s happening in the background. In which case, this solution might not have helpful in this particular case.</p>
<p>In general, though, this is such a simple trick that it’s worth adding to your bag of tricks in anticipation of the next time you&#0160;want to add an animation users will see all the time.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Custom context menus always forget to support right-clicking *on* the context menu
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: custom-context-menus-always-forget-to-support-right-clicking-on-the-context-menu

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/01/custom-context-menus-always-forget-to-support-right-clicking-on-the-context-menu.html 
DATE: 01/17/2011 08:00:00 AM
-----
BODY:
<p>Most users I see these days know they can use the right mouse button (or, if you’re being picky, the secondary mouse button) to produce a context menu. Essentially all creators of operating systems and UI frameworks (for platforms with mice) allow for this behavior. An interesting question is what happens when the user, having produced a context menu, <em>right-clicks again on the context menu itself</em>.</p>
<p>This isn’t odd at all to see in practice. For one thing, there are plenty of “right-click people” who habitually right-click on anything. And even for users who understand the difference between a left and right click, it’s fairly natural to inadvertently use the right mouse button twice in close succession to first invoke a context menu and then, in the next second, to select a command from that menu.</p>
<p>Microsoft Windows and Apple OS/X both handle this gracefully: right-clicking on a context menu command has the same effect as left-clicking the command. This behavior lets people who aren’t playing very close attention to which mouse button they’re clicking to still get what they want. The user can click with the right-mouse button to get the menu, and then immediately right-click again to select a command. (I’ve personally found this behavior worth exploiting; it feels faster to select context menu commands more quickly with two right clicks than a right and then a left click.)</p>
<p>This right-click-on-a-menu behavior is an example of a behavior that distinguishes long-time UI platforms from application UI creators that think they know better than the platform—or haven’t studied the platform closely enough. Virtually every application with custom context menus I’ve found fails to implement this behavior.</p>
<p>Case in point: Microsoft Office 2010, which should know better. I could have sworn they had this right at some point, but this knowledge was probably lost during the creation of their 19th proprietary UI framework. And if Office got this wrong, it&#39;s no surprise that most other apps with custom context menus get this wrong too. Generally, right-clicking on a context menu in such an application has no effect, which isn’t what the user wanted, but at least no harm is done.</p>
<p>It’s worse in the case of web application that override the browser’s context menu to provide their own context menu. The user gets seriously confused when the browser’s context menu comes up <em>on top of the custom context menu:</em></p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20148c79d4e17970c-pi"><img alt="Right Click on Context Menu" border="0" height="540" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20147e19401f7970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Right Click on Context Menu" width="600" /></a></p>
<p>Now, there&#39;s a small chance that the browser&#39;s context menu is left active by design; i.e., that a standard context menu on a custom context menu actually provides some value. Say, the custom context menu provides a plain hyperlink, and the user wants to be able to right-click on the link to copy the link&#39;s address. However, that rarely seems to be the case with most custom context menus. It seems more likely the implementors just didn&#39;t consider this scenario.</p>
<p>This whole situation isn&#39;t a big deal, but it’s precisely small details like this that prove the value of relying on the OS (or a mature UI platform) to provide stock control behavior. Most people assume that stock controls like menus,&#0160;scroll bars, and combo boxes can’t be <em>that</em> hard to implement, failing to appreciate the years of hard usability learning baked into the platform.&#0160;If you do have to roll your own context menus, consider whether you could save your users a bit of confusion by taking the time to get this right.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Are wireframes, paper prototypes, and other design outputs simply reflections of the cost of developing a real UI?
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: design-outputs-as-reflections-of-the-cost-of-developing-ui

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2011/01/design-outputs-as-reflections-of-the-cost-of-developing-ui.html 
DATE: 01/10/2011 08:00:00 AM
-----
BODY:
<p>I wonder how much of the current design process would go away if building real, functioning, deployable UI code were cheap and easy.</p>
<p>The conventional wisdom of the UI design industry generally espouses a process in which a design proceeds through a series of increasingly sophisticated representations: starting with hand-drawn sketches, then wireframes, paper prototypes, simple interactive prototypes, and finally high-fidelity images (often PhotoShop) or movies showing the desired result. Most of these outputs are often completely static or otherwise reduced (less than fully functional) representations of the desired result. Much of them are thrown away when the real coding begins. Are those steps really necessary, or are they just a way to minimize the risk of spending time and money building the wrong UI?</p>
<p>Over the last two years, my own design process has changed radically. In 2006, in a post titled <a href="http://miksovsky.blogs.com/flowstate/2006/10/using_crude_ske.html">Matching design sketches to the desired level of design feedback</a>, I outlined a fairly standard design process that started with hand-drawn sketches and proceeded from there. At that time, I felt that it was vital to receive critical feedback on a design concept before it got too far along. That post offers two reasons to recommend that practice:</p>
<ol>
<li>A minimalistic representation of the UI focuses reviewer attention on deep content instead of surface details.</li>
<li>People feel more comfortable criticizing a crude representation of the UI because they assume it didn’t take long to create, and so they won’t be asking you to waste too much investment if you have to throw it away.</li>
</ol>
<p>The post does not mention a third, implicit reason I created sketches: developing a real, functioning UI was, in comparison, at least two orders of magnitude more costly. I could sketch in one hour’s time enough UI complexity to consume several weeks of an engineer’s time. Worse, the cost (to the designer) of a design change often has a non-linear relationship to the cost (to the engineer) of the implied architectural change. Pixels can be pushed around like so much fingerpaint; changing real UI code can be like trying to the change the framing for a house. Once you pick an architectural direction, you may not be able to simply change your mind without tearing it all down and starting over.</p>
<p>Surely that’s not a given, however. Surely someday we’ll have dev tools that let us tinker with the whole UX stack as easily as we tinker with pixels in PhotoShop. It’s not even like a computational breakthrough is required for that to happen—all that’s probably necessary is a much, much better model for the UI, and a corresponding set of tools.</p>
<p>So assuming we someday <em>do</em> have better coding tools that let even fundamental design decisions be reconsidered at any stage—what would our design process look like <em>then</em>? Would we really still have wireframes and paper prototypes and all?</p>
<p>It’s not too hard to imagine all the paper stuff going away. If you could write real code as fast as creating a paper prototype, why bother with something that’s not as close as possible to the final UX? Static wireframes probably go too, for the same reason. It does seem like there still might be a point to creating stripped-down representations of a UI to focus user attention more on the content of the interaction (point #1 above), although even that I wonder about.</p>
<p>Let’s assume you had the UI componentry to quickly assemble a UI whose very first representation already looked drop-dead gorgeous. Who’s to say that you’d get more meaningful results by showing users something less than beautiful? And, if that really were the case, would people still bother to create stripped-down UIs that looked like they were drawn on napkins (something deliberately crude, to hit point #2 above)? If everyone knew you could whip out something amazing in an hour, surely they’d recalibrate their reluctance to give you their honest opinion. And, ultimately, wouldn’t the whole idea of reviewing a UI change radically, moving away from off-the-cuff reactions to PowerPoint presentations in a conference room and more about watching the real performance of real users test-driving a real UI?</p>
<p>I can’t wait for that day. Although such tools still aren’t here yet, my design process these days focuses a great deal more on UI coding at the very earliest stages, with an eye towards creating something interactive right away and refining from there. I’ll try to cover that process in more in detail in a separate post.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Id
EMAIL: 
IP: 38.98.105.130
URL: http://profile.typepad.com/id13
DATE: 01/10/2011 04:00:26 PM
Photoshop isn't going to happen, but Balsamiq or Keynote mockup speed for a production quality site is doable for the web with the current technology. The caveat is that you're trading flexibility in both design and implementation for speed.

If you have a relatively stable set of UI conventions/patterns and your engineering department has been investing in tools, you CAN achieve this sort of speed. Check the Lunascript video for a demo. Unfortunately, I have yet to work for a design-oriented company willing to invest heavily enough to get implementation down to hours, but it is doable. The design limitations will never go away, but how loose they are entirely depends on how clever your developers are. I've personally spent a decade working on this problem and it's only in the past year that I've seen the light at the end of the tunnel.
-----
COMMENT:
AUTHOR: Hulbert
EMAIL: 
IP: 75.62.93.102
URL: http://profile.typepad.com/hulbert1
DATE: 01/11/2011 07:09:09 PM
> Let’s assume you had the UI componentry to quickly assemble a UI whose very first representation already looked drop-dead gorgeous.

Seems like a big assumption! This would be do-able when working on perhaps an existing product. That said, I usually find even with wireframe tools that there's not enough flexibility in producing the visual elements I want, so I can't imagine having a library of UI components that would meet all the needs.

I rarely use wireframes and instead build prototypes with HTML&CSS (using PHP & YAML to insert data pieces) as I have a very strong front-end background. This allows me to drop in past pieces from prior features (same company's product) with some ease but rarely can I get away with dropping in the component without some customization.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: What designing a user interface shares with creating a puzzle
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: what-designing-a-user-interface-shares-with-creating-a-puzzle

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2010/12/what-designing-a-user-interface-shares-with-creating-a-puzzle.html 
DATE: 12/20/2010 08:00:00 AM
-----
BODY:
<p>At various points in my adult life, I’ve taken up the challenge of creating puzzles for other people to solve, generally in the context of fairly elaborate treasure hunts created for friends or my children. A relative of mine recently observed the contrast between designing such puzzles and creating user interfaces. I’d never really considered how these activities are similar; ultimately they’re both examples of experience design. The interesting thing to me is that they both involve careful consideration of progressive disclosure — in one case hard-won, while in the other case, it should be effortless.</p>
<p>User interface designers often concerned themselves with what they call the initial user experience: the sequence of actions they expect a new user to take in, say, the first ten minutes of using a product. Similarly, a puzzle designer gives careful consideration to the alternating sequence of bafflement and insights they hope the solver will experience. Both design tasks require consideration of the audience’s abilities and especially motivation, which in turn establishes a timeframe.</p>
<p>Take, for example, a simple puzzle I created for Hope2Die, the 1996 installation of <a href="http://en.wikipedia.org/wiki/The_Game_(treasure_hunt)">The Game</a> in Seattle. Treasure hunts for The Game entail something like 18-20 puzzles over 24 hours, including driving time between locations, and the time required to solve the puzzle. This leaves about 15-45 minutes for actual puzzle solving time. The audience is a set of 10-20 teams, which are highly motivated by the desire to outperform their peers. They have free access to technological tools, including the Internet, in solving a puzzle.</p>
<p>In this case, game teams found the following card (in a burned-out building, I believe, although that’s not relevant to solving the puzzle):</p>
<p>&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20147e0cc90da970b-pi"><img alt="Hope2Die Clue" border="0" height="428" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20148c6d6acaa970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Hope2Die Clue" width="640" /></a></p>
<p>&#0160;</p>
<p>The hope2die text on the card is simply a logo. Likewise the “PW” is just an indicator that the clue will produce a password to unlock the next clue — in that day and age, on a CD-ROM each team had received. The title and body text constitute the puzzle.</p>
<p>The experience I’m looking for goes something like this:</p>
<ol>
<li>First reading. Bafflement.</li>
<li>Attempts to interpret the clue as simply as possible. (Here, trying to make sense of the text as English words.) A tiny bit of frustration, but reader was expecting — or desiring — it, so this really leads to satisfaction.</li>
<li>The search of patterns. Confidence, crumbling to frustration.</li>
<li>Opening the set of possible interpretations. New but dwindling hope with each, wilder, idea.</li>
<li>Catching hold of something that seems significant; identification of a hypothesis. Faint hope.</li>
<li>Initial testing of the hypothesis (applying it to a few cases; here, words). Anxiety about whether this will work, turning to excitement as each result doesn’t disqualify the hypothesis.</li>
<li>First intelligible results. Complete elation.</li>
<li>Complete application of the confirmed theory. Satisfaction.</li>
<li>In many cases, the puzzle has more than one layer, in which case this process repeats.</li>
</ol>
<p>Some nice parts of this puzzle: The word “BeAm” here turned out to coincidentally reference the next clue. The password obtained by solving the puzzle produced the surprisingly short and vague instruction to simply “Go to Redmond” (Washington). This didn’t seem to be nearly enough specific information to get teams to the next clue. It was early evening as the teams approached the town of Redmond — where they saw green lasers shooting into the sky from the location of the next clue. The password itself was also fun to select, being the longest interesting one I could construct given the puzzle’s mechanics, and one consistent with the over-the-top tone of the game show theme in this particular Game.</p>
<p>The real challenge in designing a puzzle like this is trying to get <em>everyone</em> through it in somewhere between 15 and 45 minutes. It’s easy to make something that looks like a puzzle but is, in fact, trivial. It’s also not that hard to make a puzzle that’s impossible — that requires either time-consuming brute force, or some completely wild conceptual leap for which the puzzle offers insubstantial support. The puzzle needs to resist easy solution, then yield upon sustained effort. Some individuals will see the solution to the above puzzle instantly; others will need a full-team effort for the full time.</p>
<p>Over and over again, I keep asking myself: Is this puzzle going to be fun to solve? I’m just a dilettante puzzle designer, so in a case like The Game, I feel satisfied if the puzzle simply keeps hyped-up teams in the flow of the event. This felt like the right puzzle for the right place in the treasure hunt. In the end, it was part of a sustained sequence of about 5 hours’ worth of puzzles and activities that were, by all accounts, interesting, and for many the highlight of the game.</p>
<p>Designing a puzzle requires controlling that progression of understanding so that it unfolds at just the right pace to produce the intended experience. Designing a user interface is the same: the user’s understanding needs to unfold at just the right pace to produce the intended experience. Unlike a puzzle, a UI needs to look simple, interesting, and useful at the very first glance. In the next few minutes, it needs to show the user everything they <em>think</em> they might want to do, while still not overwhelming them. And then it needs to tuck a bunch of rarely-used stuff away somewhere where the user won’t even notice it until the day, maybe months later, when they suddenly need it and think to look for it. The emotional experience needs to balance the sense of potential power and possible mastery with delight and instant accomplishment.</p>
<p>Pulling that off, of course, can be quite a puzzle.</p>
<p><em>[If you’ve found the solution to the puzzle, feel free to offer it, or perhaps a hint, as a comment.]</em></p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Grant Richins
EMAIL: 
IP: 131.107.0.85
URL: http://profile.typepad.com/grantrichins
DATE: 12/21/2010 03:33:15 PM
Please somebody give us a hint.  I'm well over the 45 minutes, and I guess this proves why I'm never in these puzzle games.
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 74.203.51.134
URL: http://profile.typepad.com/jan_miksovsky
DATE: 12/21/2010 03:41:15 PM
Grant: No worries! The Game always had a Game Control group offering live hints, and there always plenty of teams that needed the help for any given puzzle. (So the 45 min. limit here *includes* the time for a team to solve the puzzle with hints of increasing helpfulness.) And puzzles like this tend to yield more quickly to group efforts, where more perspectives leads to more ideas on how to start (point #4 above).

Anyway, to speak as Game Control here, I might start by offering:
* Each individual "word" above can be split into two parts.
* The title includes a pun.
-----
COMMENT:
AUTHOR: Grant Richins
EMAIL: 
IP: 131.107.0.85
URL: http://profile.typepad.com/grantrichins
DATE: 12/22/2010 01:28:06 PM
OK, thanks for the tips, but sadly they got me nowhere!  Maybe if I was better at puns...  I'm still stuck on point #4.  For the record I have found several different ways to spilt the words: Upper-Lower, vowels-consonants, letters in the title, letters in the other line, but none of those yield a useful result.  I've tried it as an anagram, a shift cipher, and mixing all of the above.

Game Control, more help please.
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 97.113.160.28
URL: http://profile.typepad.com/jan_miksovsky
DATE: 12/22/2010 09:23:52 PM
The following page will help: <a href="http://bit.ly/g7BFcs.">http://bit.ly/g7BFcs.</a> With that in hand, everything should add up nicely.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: A fun photo collage Facebook app that was fun to create
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: a-fun-photo-collage-facebook-app-that-was-fun-to-create

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2010/12/a-fun-photo-collage-facebook-app-that-was-fun-to-create.html 
DATE: 12/10/2010 09:20:41 AM
-----
BODY:
<p>Ever since I wrote the first version of the <a href="http://www.cozi.com/Photo-Screensaver.htm">Cozi Collage photo screen saver</a> in 2005, I’ve been itching for the chance to port it from Windows to the web. Things that were only possible on a desktop client five years ago — access to user photos, animated transition effects — are now trivial in a web app. A quick attempt to generate photo collages from Facebook photos led to an idea: what if you could condense an entire year’s worth of interesting moments in your friends’ lives into a 3 minute video showing Cozi-style photo collages set to music?</p>
<p>This seemed like a fun year-end project for the holiday season, when people are inclined to take a look back at the past year. A Cozi colleague joined me in bringing the idea to fruition, and we released the app earlier this week. The result is <a href="http://garage.cozi.com/collage/">The Year in OUR Pictures 2010</a>.</p>
<p><a href="http://garage.cozi.com/collage/"><img alt="The Year in OUR Pictures 2010" border="0" height="363" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20148c6962428970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="The Year in OUR Pictures 2010" width="600" /></a></p>
<p>I thought this came out pretty neat myself. The experience of creating this was itself&#0160;fun and interesting, so I thought I’d share some highlights and lessons.</p>
<ol>
<li>The Facebook Graph API is awesome. I worked on a Facebook app just about a year ago using their older JavaScript SDK, and it was a complete pain (you couldn&#39;t easily develop on localhost, etc.). The new API is straightforward and easy to use. In particular, it was a joy to discover that Facebook can return data via JSONP in exactly the right way to be consumed by jQuery’s AJAX functions. The result of this was that the entire application is comprised entirely of static web resources and client-side code. The app entails no code running on Cozi’s servers, which makes it highly scalable. All the heavy pounding to get photos happens on servers that belong to <em>Facebook</em>. (Thanks, guys!)</li>
<li>The first time the user clicks on one of the video thumbnails (above), they’re presented with a Facebook permissions dialog. We were pretty concerned about the degree of fall-off we’d see at that point. We crafted a bunch of language for the above screen intended to prepare the user for the Facebook permissions dialog. (“When you click the button above, you’ll see a dialog from Facebook…”) We ultimately concluded that this sort of text wouldn’t help. People weren’t likely to read it, and there didn’t seem to be any wording we could put in that would <em>increase</em> the number of people successfully getting through the dialog. As it turns out, the vast majority of visitors are making past the Facebook permissions dialog with no preparation. This is great for us and lets us keep the above introduction very clean.</li>
<li>The whole user interface is created in jQuery and&#0160;<a href="http://quickui.org" target="_self">QuickUI</a>, which let us move extremely quickly. It was great to have a QuickUI library of general-purpose&#0160;JavaScript/CSS-based UI&#0160;components that already worked in all browsers, so we could just drop them in and focus on the experience. And being able to refactor UI classes cleanly kept things stable even as we iterated quickly.</li>
<li>Today’s web browsers rock. The original Cozi Collage screen saver has a drop-dead simple crossfade animation between collage slides &#0160;implemented in DirectX. That simple, stupid DirectX crossfade cost us days and days of development time. No matter how we coded it, the hardware-accelerated transition was only as good as the user’s video card driver — which is to say, we could always find someone whose machine would crash when running the screen saver. The current state of browser rendering engines and JavaScript engines is such that we can make simple jQuery fadeIn/fadeOut calls that work reasonably well everywhere. (Oh: To move quickly, we completely ignored IE 7. Good riddance.)</li>
<li>We were excited to use the HTML5 audio tag. (Hey, we wanted to join the <a href="http://miksovsky.blogs.com/flowstate/2010/11/html5-buzzword.html">HTML5 bandwagon</a>.) However, for backward compatibility with IE 8, we also included a standard Flash audio player. We ran into a puzzling JavaScript error, and eventually learned there are <a href="http://groups.google.com/group/jquery-en/browse_thread/thread/58a9cbc1068d28c0/eb4bedb2cc36b126?pli=1" target="_self">issues using jQuery to insert HTML5 tags into IE 8</a>.</li>
<li>The music completely makes this user experience what it is. It was a delight to discover Wikimedia Commons’ extensive catalog of freely usable <a href="http://commons.wikimedia.org/wiki/Category:Ogg_sound_files">audio files in the Ogg format</a>&#0160;so we could find music that was both appropriate and free.</li>
<li>The volume of information posted by Facebook friends is literally overwhelming. Even if your best friend posts a photo album of people you care about, the chances are very high you’re not going to see it because it will be quickly buried below the “Older posts” fold. The most common reaction to seeing a slideshow of friends’ pictures is: “I never saw any of these”.We’ve discovered that people really enjoy posting photos of food, cats, and weird signs.</li>
<li>People are more narcissistic than we’d imagined. It’s our observation that most people have a more interesting experience if they click the option to see a slideshow of “Your friends’ pictures”. However, they’re more likely to <em>share</em> the experience if they click the option to see their own pictures. Since we want people to share this, we moved the “Your pictures” option to be first, where it gets the most clicks.</li>
<li>The one thing I’d wish we could get via the Facebook Graph API that is a list of friends sorted by Facebook’s own magic friend-weighting algorithm. With no way to evaluate the <em>quality </em>of a friend relationship, the end user’s experience is something of a crapshoot. If the user has liberally accepted all Facebook friend requests (or they’re just really unlucky and our algorithm happens to pick their least-favorite friends), they’ll see a bunch of people they don’t even know, and they’ll have a lousy experience.</li>
<li>On the other hand, when this thing works, it really works. If someone’s been parsimonious in accepting Facebook friendships (or they get very lucky, and our algorithm happens to pick their best friends), they’ll see a bunch of photos of people they care about celebrating meaningful moments of the past year: a birth, a vacation, a wedding. And the music can get people into a contemplative mood. (We’ve been using Debussy’s <a href="http://commons.wikimedia.org/wiki/File:Claude_Debussy_-_clair_de_lune.ogg">Clair de Lune</a>, but are thinking of switching to a shorter piece.)</li>
</ol>
<p>One person wrote me to tell me that watching this made them choke up and cry. Wow. I’ve worked on Microsoft Windows, which has probably made a lot of people cry. But I’ve never before written a piece of software that made someone cry for joy.</p>
<p>Anyway, <a href="http://garage.cozi.com/collage/">take a look for yourself</a>.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Presentation: "UX Design at a Startup"
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: presentation-ux-design-at-a-startup

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2010/11/presentation-ux-design-at-a-startup.html 
DATE: 11/23/2010 08:00:00 AM
-----
BODY:
<p>This past September, I was invited to present a short 20 minute talk on user experience design at the StartupDay 2010 conference in Bellevue, WA. This is a nice bootcamp event for nascent entrepreneurs—a single day touching on every aspect of starting a company, from finding cofounders, identifying an audience, searching for a business model,&#0160;getting funding, ... all the way to potential exits.</p>
<p>Since the vast majority of the audience were engineers and business types (i.e., not designers), I focused on the topic: What should user experience design at a startup look like to a founder or executive?</p>
<p><a href="http://www.seattle20.com/tv/clip/StartupDay-2010-Design-for-Startups-by-Jan-Miksovsky-1.aspx" target="_self" title="Video">Video</a>&#0160;(took me a while to find my groove; things pick up around 03:00)</p>
<p><a href="http://www.slideshare.net/JanMiksovsky/startupday-2010-design-at-a-startup" target="_self" title="Slides">Slides</a>&#0160;(not&#0160;much text, might be interesting where the slides in the video are too hard to make out)</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Even if HTML5 doesn’t actually give you much, its buzzword status could still help you deliver a better UX
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: html5-buzzword

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2010/11/html5-buzzword.html 
DATE: 11/22/2010 08:00:00 AM
-----
BODY:
<p>Sheesh, there’s a lot of <a href="http://en.wikipedia.org/wiki/HTML_5">HTML5</a> talk these days. I was initially confused and disappointed by HTML5’s buzzword status, until I realized that its very buzzword existence could ultimately help me deliver a better user experience.</p>
<p><a href="http://agent8ball.com/"><img alt="Agent 008 Ball" border="0" height="450" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f6196b00970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Agent 008 Ball" width="600" /></a> <br /><em><span style="color: #666666;">The Canvas tag makes a game like Agent 008 Ball awesome — but a productivity app, maybe not so much</span></em></p>
<p>Each time I hear someone tell me that HTML5 the answer to, say, <a href="http://miksovsky.blogs.com/flowstate/2010/09/dear-phone-oses-in-3rd-place-and-beyond-please-accelerate-your-demise.html">the challenge of developing mobile clients for multiple platforms</a>, I have to wonder if they have actually reviewed the set of technologies actually comprising HTML5. On its face, HTML5 would seem to mean very little for a productivity app like Cozi.</p>
<ol>
<li>The most immediately useful aspect to Cozi is probably the &lt;audio&gt; tag for the few situations in which the Cozi web application plays a sound. We currently do that with Flash, and it’d be nice to jettison that baggage. Audio is not a big deal for us, however. </li>
<li>Offline storage? Maybe. The cynic in me is betting that, once we begin investigating this, we’ll discover that HTML5 offline storage solves 70% of what we want. Still, this is somewhat interesting.</li>
</ol>
<p>And, from what I can see, that’s about it for Cozi. I’m missing the magic of the rest.</p>
<ul>
<li>The &lt;canvas&gt; tag is a huge step forward for slick graphically-intensive apps like <a href="http://agent8ball.com/">Agent 008 Ball</a>, but I’m not seeing the big breakthrough for an app that can already render everything it wants with native HTML elements.</li>
<li>We don’t do much with video.</li>
<li>Drag and drop. This is only interesting if you believe that drag and drop is an intuitive and convenient UI for moving files. My own belief is that users would benefit much more from optimized modal UIs designed for common tasks like picking photos. (The File Open dialog could start out showing the user’s actual photo storage location, show thumbnails by default, the dialog could allow multiple selection across multiple folders, etc.)</li>
<li>The pile of new tags of purportedly general utility like &lt;section&gt; or &lt;figcaption&gt; solve no problem anywhere on our list of the 50 Biggest Problems We Have. What would really help instead would be a framework by which different communities could define new domain-specific tags that solve domain-specific problems. Hence my investment of time and labor in the <a href="http://quickui.org/">QuickUI web control framekwork</a>.</li>
</ul>
<p>“But wait!” cry the poorly-informed or deliberately overexcited <a href="http://www.technologyreview.com/web/25838/">HTML5 buzzword-pushing media</a>. “What about animations? And things with rounded corners and drop-shadows? And <a href="http://miksovsky.blogs.com/flowstate/2010/08/lessons-switching-our-web-ui-from-stock-fonts-to-a-proprietary-font.html">embedded fonts</a>? And <a href="http://www.20thingsilearned.com">single-page applications</a>? And increased standardization? Those things are all revolutionary!” Yes, they are—and all those things were possible before HTML5.</p>
<p>There are however, some very important second-order benefits of HTML5:</p>
<ol>
<li>HTML5 provides a useful shorthand for “modern web browser”. All I really need to pull off most of Cozi’s current feature designs is a fast JavaScript engine and CSS3. Those things are independent of HTML5 — but chances are that if someone claims their browser supports HTML5, it <em>also</em> sports a fast JavaScript engine and CSS3 support. So even though Cozi may not care about HTML5, the term “HTML5” provides a great proxy for the things we <em>do</em> care about.</li>
<li>The relentless repeating of the HTML5 buzzword may have the beneficial side-effect of finally giving consumers a way to evaluate whether, for example, the latest mobile phone they’re considering buying is going to provide them a good browsing experience. “I’ve heard that I need HTML5. Does this phone has HTML5?” It doesn’t matter that the literal interpretation of the question is probably not what the consumer cares about; the question’s answer may still give the user what they want. We might finally see consumers and IT departments wake up and jettison their ancient copies of IE in favor of a modern browser on a reasonable upgrade cycle.</li>
</ol>
<p>Of course, I’m sure there are many web applications that will directly benefit from HTML5 in ways that completely change their business. They must be very happy. For now, my company probably isn’t one of those beneficiaries. Still, the above second-order effects of HTML5 might eventually allow me to deliver a better user experience to more users. If that means reducing HTML5 to a buzzword, I’m all for it.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Peter H
EMAIL: 
IP: 70.103.221.189
URL: http://profile.typepad.com/6p0134896f8532970c
DATE: 11/22/2010 01:27:04 PM

Speaking as someone who commented on that earlier post, I guess I have to ask - why the hate?  Was just trying to be helpful.

To your question - yes I know what HTML 5 is.  And yes, as you astutely point out, people use HTML5 as a shortcut for "the most recent of a large set of alphabet soup standards that all current browser versions should be supporting."  It's just a lot easier to say "HTML5".

Where I think you are missing the point is HTML5 is not just about video and drop shadows.  The offline features, for example, are much more powerful than you realize - they store both code and data, making fully offline apps possible in the browser. Also, offline data storage allows your app to cache data locally, which you can then access with javascript, making a much faster experience possible than with pre-HTML5 web technologies. 

There are also many other niceties - for example the type=email form input element will cause iphone to use its email-address-oriented keyboard when in this field.  You might write that off as "drop shadow"-like trivialities but it makes for a nicer app.  Web apps are easier to deploy than iphone apps.  Etc.

So in your other post you were making the point that you didn't like having to put effort into so many different mobile platforms.  Let me try to make my earlier point then without using the term "HTML5":

Why would you create different native platform applications (including all the testing and deployment hassle involved in each), when you can create just as great of an experience with a single coding effort by using the latest browser standards?

Here's a scoble interview that makes some of the same points: <a href="http://www.youtube.com/watch?v=Jks-idxVrCs.">http://www.youtube.com/watch?v=Jks-idxVrCs.</a>  (Nextstop has since been acquired and integrated into facebook, thus the app is gone, but this video shows the result)

For an app like Cozi, and for an astute cutter like Robbie, I just do not see what would cause you to invest the development effort when you can create the same experience using (sorry) "HTML5".  Objective-C, Android Java, and Silverlight do not relieve you of any of the problems that QuickUI solves, either.

Unless you really really need to be in the app store, I was just attempting to suggest you should work through each of your requirements and ask why they cannot be achieved in an application that makes use of recent browser standards.  You may save yourself a lot of dev time by doing so.  It can solve exactly the cross-platform aggravation problem you were complaining about, today.  That's what I meant when I said "HTML5".

-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 74.203.51.134
URL: http://profile.typepad.com/jan_miksovsky
DATE: 11/22/2010 01:33:01 PM
Peter: No hate here. I have received the same suggestion from many, many people now to use build a web app instead of native apps for the various phone platforms.

So far, own experience has been that we *can't* yet achieve the UX we want using the preloaded phone browsers. This isn't a limitation of the underlying technologies; it's a limitation of their current executions. Among other things, we *do* need to be in the app store -- that's where our mainstream consumers look for us. We're still interested in the web app route, but I think it's just too early for us to depend upon it today. So for the time being, we're still building native apps.

And please believe me when I say that I absolutely appreciate the comments.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Squeeze wide page content into narrow windows: let the content overlap the left navigation pane
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: squeeze-wide-page-content-into-narrow-windows-let-the-content-overlap-the-left-navigation-pane

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2010/10/squeeze-wide-page-content-into-narrow-windows-let-the-content-overlap-the-left-navigation-pane.html 
DATE: 10/25/2010 08:00:00 AM
-----
BODY:
<p>UI designers can find themselves challenged today by the need to address a huge range of window sizes. In Cozi’s case, we still target 1024x768, but we want to take advantage of additional space in larger sizes (sometimes much larger), and we want pages to function all the way down to 800x600. Sometimes we have to invent to tricks to work well across this range of sizes.</p>
<p>That 800x600 minimum size, for example, comes into play surprisingly often. It never fails to surprise me how many users with small monitors leave windows in their default positions, which can often be unnecessarily small. And the current generation of netbooks (and now tablets) can have rather short or narrow displays, so even users who maximize window size can still end up with a pretty small window.</p>
<p>Cozi’s current design places navigation links in a left pane, and page content on the right. One challenge at small window sizes is leaving ample room for the left-hand navigation at all sizes, while still making right-hand page content (e.g., calendar data) wide enough to be useful. Typical patterns for balancing these forces:</p>
<ol>
<li><strong>Make the left navigation as narrow as possible. </strong>The downside here is that, on large monitors, the navigation ends up feeling narrow — literally marginalized.</li>
<li><strong>Size the left navigation width as a percentage of window width. </strong>Others might find that they can pull this off, but in our case, we couldn’t find a simple percentage that worked well across the range of window sizes we wanted to support.</li>
<li><strong>Let the user set the width of the left navigation. </strong>This can work well, but punts the problem to the user to solve. Many users won’t realize they can resize the left pane, and even for those who do, many won’t bother investing time tuning the display of a tool they only use sporadically.</li>
<li><strong>Let the user collapse/dismiss the left navigation. </strong>A special case of the above point, with the same issues.</li>
</ol>
<p>We came up with another solution: <strong>let the page content overlap with the left navigation pane</strong>.</p>
<p>It’s likely we’re just independently reinventing an existing solution, but it’s worked out well, so here’s how it works. At wide window sizes, a typical Cozi page looks like this. The navigation links and other content (e.g., the family photo) on the left are completely exposed.</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f5451773970b-pi"><img alt="Calendar 1200x768" border="0" height="300" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f545178c970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Calendar 1200x768" width="468" /></a></p>
<p>As the user resizes the window to be narrower, the page reduces the width of the right-hand page content. When a threshold is reached, however, the right-hand content begins to overlap the left pane. This threshold varies by page, depending on how much width they need to show their content. (The calendar shown here in Month view demands a good deal of width, so its threshold is above 1024px page width. Other pages, like Settings, don’t need so much.)</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f54517ca970b-pi"><img alt="Calendar 1024x768" border="0" height="300" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201348864f56e970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Calendar 1024x768" width="400" /></a></p>
<p>This overlap continues all the way down a size that reveals a minimum amount of the left pane. (Below this size, the right content will start to clip.)</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f54517f4970b-pi"><img alt="Calendar 800x768" border="0" height="300" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f5451802970b-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Calendar 800x768" width="313" /></a></p>
<p>In this overlapped state, the user can still see enough of each navigation link to tell what each one is. E.g., the visible text “Calen” on the left is obviously a link to the calendar; “Shopp” is the shopping list, and so on. In this state, the user can mouse over the left navigation to see the full pane pop forward:</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f545182b970b-pi"><img alt="Calendar 800x768 (Hover)" border="0" height="300" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201348864f5a7970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="Calendar 800x768 (Hover)" width="313" /></a></p>
<p>If the user now moves their mouse back to the right, the left pane drops back to the background.</p>
<p>The show-navigation-on-hover solution requires that we handle one case specially: If the user clicks a navigation link on the left, then when they arrive on the new page, <em>the mouse will still be over the left pane</em>.</p>
<ul>
<li>The user’s most likely next action is to move the mouse to the right to interact with the page content. As soon as they move the mouse, the page will sense the mouse hovering over the left pane. It’d be annoying at that point to pop the navigation forward again — this would distract the user, who is trying to get to the right. So we disable the hover on page load until the user got the mouse to the right, then turn it on.</li>
<li>However, some of the time, the user may be using the left pane to surf around the product. Perhaps they’re just exploring, or they’re looking for something and don’t know what page it’s on. They’ll be clicking in the left pane immediately after the page loads, without ever moving the mouse to the right. To support <em>that</em> case, we examine two factors: the direction the mouse is moving, and the time that has elapsed since the page loaded. If the user moves the mouse to the right reasonably quickly, we continue to suppress the hover behavior. However, if they move the mouse straight up or down, or linger on the left, then we re-enable the hover behavior.</li>
</ul>
<p>(The latter behavior was borrowed from a similar trick used to finesse pop-up behavior in hierarchical menus. I believe it was Microsoft who first came up with this trick for Windows or Office; it then made its way to OS/X. <em>[UPDATE: Commenters recall that the Mac had this first.]</em> If the user wants to move from a top-level menu item to a submenu, their mouse may cross over a point that’s not over either of those elements. So the OS uses a combination of timing and mouse direction to decide whether the user is still moving towards the submenu, or has decided to explore other top-level menu items instead.)</p>
<p>So far this overlap solution seems to be working in practice. Most users don’t see it much, and users with narrow window sizes can now see more page content while still having full access to site navigation. All of this is achieved automatically; the user doesn’t have to pick up the burden of optimizing the page display for the current window size.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Matt Chaput
EMAIL: mchaput@rogers.com
IP: 173.34.0.174
URL: 
DATE: 10/25/2010 09:03:54 AM
No, Microsoft didn't invent that menu behavior. It was always in Mac OS since it had hierarchical menus, and its lack in Windows was always one of those things Mac fans would make fun of.
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 74.61.53.150
URL: http://profile.typepad.com/jan_miksovsky
DATE: 10/25/2010 09:21:09 AM
Matt: I recall the history of this differently than you do. I seem to recall early Mac hierarchical menus that forced the user to carefully move the mouse exactly through the right end of the top-level menu item. I also seem to recall conversations at Microsoft about how fix this exact point. My memory could easily be mistaken, however.
-----
COMMENT:
AUTHOR: Tim McClarren
EMAIL: grug@yahoo.com
IP: 206.111.143.30
URL: 
DATE: 10/25/2010 01:17:53 PM
Jan: actually, your memory is mistaken.  X Windows suffered from this flaw for a very long time, making it painful to use.  I can't comment on early Windows, as I never used early versions.  The Mac OS, even very early on, allowed for a good amount of slop when you trailed off the right hand side of a hierarchical menu, and behaved nicely.  You didn't have to move the mouse pointer perfectly off the right hand side.

-----
COMMENT:
AUTHOR: Tim McClarren
EMAIL: grug@yahoo.com
IP: 206.111.143.30
URL: 
DATE: 10/25/2010 01:22:32 PM
Jan: I even dug up some links to support this.

<a href="http://www.mackido.com/Interface/hysteresis.html">http://www.mackido.com/Interface/hysteresis.html</a>
<a href="http://www.teresi.us/html/writing/mac_vs_windows.html">http://www.teresi.us/html/writing/mac_vs_windows.html</a>

-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 74.203.51.134
URL: http://profile.typepad.com/jan_miksovsky
DATE: 10/25/2010 01:22:36 PM
Matt/Tim: Okay, I've updated the post to indicate that the Mac had this first.
-----
COMMENT:
AUTHOR: Jonathan Allen
EMAIL: grauenwolf@gmail.com
IP: 68.7.105.121
URL: 
DATE: 10/25/2010 04:45:48 PM
UI Designers that know how to use resizable elements like table don't have a problem with this. It is only the ones who don't understand the limits of a "pure CSS" approach that have trouble with this.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Some observations of the pluses and minuses of Android's user experience
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: some-observations-of-the-plusses-and-minuses-of-androids-user-experience

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2010/10/some-observations-of-the-plusses-and-minuses-of-androids-user-experience.html 
DATE: 10/18/2010 08:00:00 AM
-----
BODY:
<p>For the last few weeks I’ve been playing with an Android phone, a Motorola Droid X. The UI takes some adjustment for an iPhone user like me, not unlike they adjustment I’ve made going back and forth between the Mac and PC several times over the years. In evaluating the Android user experience (including aspects shaped by Motorola), the following points seemed interesting to me.</p>
<ol>
<li><strong>On a touch device, it’s easy to constantly forget the presence of the hardware buttons.</strong> A glowing, colorful screen with detailed interactive elements is just too visually compelling to remember that, in some applications, critical features are only available via the hardware Menu button. A typical experience for me has been to stare at a screen looking for the UI element I’m certain should be there, and only a frustrating minute realize, “Oh, that’s right, I forgot to check what’s hidden behind the Menu button.” If it’s not on the screen, I can’t be bothered to keep checking it. It took me forever how to get out of “directions” mode in Google Maps because I was in a maze of twisty little passages (all alike) each of which produced a slightly different Options menu when the Menu button was pressed.      <br /> <br />I think the Menu button flies in the face of evidence that users do better when they have a clear and consistent search path for finding the commands available at any given point. Jensen Harris wrote on this topic in his discussion of <a href="http://blogs.msdn.com/b/jensenh/archive/2005/09/14/467126.aspx">why the Microsoft Office team invented the Ribbon</a> to provide “the one and only place to look for functionality in the product”.      <br /> <br />The same thing goes for the other hardware buttons, especially the Search button. It seems like a shameless ploy to plug Google search out of all proportion to the button’s utility. Even if an application has a Search feature, it seems like they’d want to be certain users remembered it was there by offering an on-screen UI to invoke it. Given that, why burden the user with an extra hardware button?<br /><br /></li>
<li><strong>Long press to invoke commands = Win.</strong> The ability to hold down one’s finger on an object to invoke what’s essentially a context menu (“Quick Actions”) is a gain for power users, and doesn’t impact users who are unaware of this facility. When I go back to the iPhone, this is the Android feature I miss the most. Thankfully, this useful UI convention is already starting to make its way over to iPhone apps.      <br /> <br />On the downside, this UI will likely lead to a wave of “long press people”. Their habit will parallel that of “right-click people” on Windows: users who, at some point in the past, found the right click button produced some interesting commands. They therefore now right-click on everything—the Windows Start menu, OK buttons, <em>everything</em>—whether it has a context menu or not.<br /><br /></li>
<li><strong>Dear Google: Thanks for taking the iconic dropdown arrow, an element which otherwise universally communicates “Click me”, and using it as a completely static element that offers no interaction whatsoever.</strong> <br /> <br /><img alt="" border="0" src="http://developer.android.com/images/radio_buttons.png" style="background-image: none; padding-left: 0px; padding-right: 0px; padding-top: 0px; border: 0px;" /> <br /> <br />That little arrow-in-a-circle next to &quot;Map mode&quot;? <em>Users want to click on it</em>. They want to click on it because every other app they have ever used has used a similar icon as an affordance for interactivity. By abusing this dropdown arrow icon, Google might untrain users from clicking on it when they see it. Google’s non-standard use of this arrow is precluding the standard use of it on Android. (Cozi’s own mobile UI plans called for using a dropdown arrow-in-a-circle very much like the one above, and we’ve had to abandon that for fear that Android users wouldn’t click on it.)<br /><br /></li>
<li><strong>Motorola made a curious decision to set the geeky robotic “Droid” sound from a Droid X marketing campaign as the phone’s default error sound.</strong> So Motorola has decided that, at completely random intervals throughout a customer’s day, the device should proclaim in a loud robotic voice, “MY. OWNER. IS. A. GEEK.”<br /><br />If you like that, great; I&#39;m all for self-expression. If you want to customize your phone to announce new emails with Worf&#39;s voice stating, &quot;Captain... Incoming message&quot;, more power to you. That&#39;s your choice. Having a phone manufacturer make a choice like this without user participation&#0160;seems unaccountably presumptuous.<br /><br />This one tiny experience made me feel like Motorola views me as nothing more than a marketing tool, and they don&#39;t care if they make me feel stupid in front of my friends. I disabled the sound at the first opportunity. It took a bit of hunting around. Let’s imagine there’s a normal person out their who <em>doesn’t</em> want to have their phone scream that they’re a geek. How quickly will they learn to hate their new phone?<br /><br /></li>
<li><strong>Motorola has managed to completely conflate Droid and Android in the minds of mainstream consumers.</strong> Perhaps this is due to the aforementioned marketing campaign, but it’s more likely a result of Motorola’s savvy willingness to pay Lucasfilm through the nose for the rights to the “Droid” name. I’ve personally seen the effectiveness of this branding decision—on a daily basis I see requests from Cozi users asking when we’re going to have a “Droid version”. It’s certain that many of those users are actually asking for an Android version (which we’re working on, BTW)<br /><br />[<strong>UPDATE:</strong> A reader pointed out that Verizion, not Motorola, is the firm that licensed the &quot;Droid&quot; trademark from Lucasfilm.]</li>
</ol><ol>
<li><strong>I still don’t see the high value of Home page widgets. </strong>Maybe my usage will change over time, but it still seems odd to have to, say, swipe my Home page to the left twice in order to see a few calendar appointments, when I could also just launch the Calendar app and see <em>all</em> my calendar appointments. When I go back to the iPhone, I don’t miss Home page widgets at all. Widgets seem like a great idea in theory. In practice I’d imagine most people just can’t be bothered to invest a bunch of time optimizing their phone’s Home page in order to get a miniscule gain in efficiency. YMMV.<br /><br /></li>
<li><strong>It’s fantastic to be able to install apps without valueless interference by the carrier, manufacturer, or OS provider. </strong>Freedom to install the apps you want is a core part of the Android value proposition. It’s good for users. It’s <em>great </em>for ISVs during app development. Platforms that make ISVs happy often do well; the conventional wisdom is that it’s an unnatural—and probably unsustainable—state of nature for developers to hate the OS they’re developing for. Installing a prerelease build of Cozi’s iPhone application is a pain: I have to get my device ID to a developer, who has to embed that ID in a list of devices approved to run the prerelease build, and then have to go through shenanigans with iTunes to install the app. Installing a prerelease build of Cozi’s Android application is a breeze: just click a link to download and install the app, and I’m done. </li>
</ol>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Eric H
EMAIL: eric.hanchrow@gmail.com
IP: 206.124.138.125
URL: 
DATE: 10/18/2010 09:46:30 AM
Home page widgets: my mileage _does_ vary: starting an app the normal way is just tedious enough, that I really do save time by having (e.g.) the weather and my shopping list always visible on the home screen.
-----
COMMENT:
AUTHOR: Jodyfanning
EMAIL: 
IP: 91.156.146.198
URL: http://profile.typepad.com/jodyfanning1
DATE: 10/18/2010 09:54:51 AM
Droid belongs to Verizon, not Motorola. There are other Droid devices, for example, from HTC.

So you can blame Verizon instead.
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 74.203.51.134
URL: http://profile.typepad.com/jan_miksovsky
DATE: 10/18/2010 11:34:54 AM
Jodyfanning: Thanks for the correction. I've updated the post.
-----
COMMENT:
AUTHOR: Ben
EMAIL: seraph.ben@gmail.com
IP: 64.94.117.123
URL: 
DATE: 10/18/2010 12:00:59 PM
I think widgets are great for the primary screen. I have my podcast player's music controls always accessible, and a short list of my latest emails on there. 
Other, sometimes overlooked, Android homepage features are dynamic folders and 'deep link' shortcuts. I have a link that automatically gets directions home via public transit from wherever I am. That's just a special way to launch google maps. I also have a 'folder' of pandora stations that opens instantly instead of waiting for the app to launch.
-----
COMMENT:
AUTHOR: Barrkel
EMAIL: 
IP: 69.233.52.137
URL: http://profile.typepad.com/barrkel1
DATE: 10/18/2010 06:27:24 PM
Widgets are definitely a win: rather than having to swipe or touch anything to view my calendar, it's on my default home page. Similarly for weather.

Also, dedicated home, menu and back buttons are huge wins. The back button is probably the Android feature I miss most switching back to an iOS platform.
-----
COMMENT:
AUTHOR: John Doe
EMAIL: not.available@test.com
IP: 217.75.90.138
URL: 
DATE: 10/18/2010 11:53:09 PM
ad 1) Hardware buttons are that single place to look for functionality. On iPhone, I have usually problem "which corner has the back button now"/"is there back button at all". On Android, the back button solves this problem neatly, universally.
-----
COMMENT:
AUTHOR: jinushaun
EMAIL: jinushaun@gmail.com
IP: 184.78.136.156
URL: 
DATE: 10/19/2010 11:58:42 PM
I disagree with other posters on here regarding the back button. I find it confusing. I can never reliably predict what the back button will do. Sometimes it undoes something, sometimes it closes a popup, sometimes it goes back to the previous screen, sometimes it returns to the app's main screen, sometimes it goes back in history and if I'm not careful, sometimes it leaves my app and goes all the way back to the Android home screen. The ONLY reason I can even remotely predict what the back button will do is because I've done Android development and know what sorts of actions feed into the back stack. 

On iOS devices, the back button always navigates to the previous screen and the home button always leaves the app. 

As for Android's menu button, I always forget about it. I feel that many apps hide too much extremely useful PRIMARY and secondary actions in the menu. The iPhone has no dedicated menu button, so primary actions usually take up UI space (aka: on-screen buttons). Google Maps is a great example. Fortunately, Google moved some actions out of the menu and into the UI. 
-----
COMMENT:
AUTHOR: Alex
EMAIL: alexrussell.101@gmail.com
IP: 92.232.149.206
URL: 
DATE: 11/03/2010 03:52:34 PM
First off I'd like to congratulate you on a post comparing Android and iOS (from a designer's (and therefore iOS fanboy's (swooping generalisation time!)) point of view) and not saying that Android is vastly inferior to iOS.

Here are my comments on your points (as someone who used Android for 18 months and now uses iOS):

1) I half agree. Sometimes you don't really think about the menu button, but it's definitely something I appreciate in Android and miss in iOS. Same goes for the back button. In iOS these two features neatly hidden behind the hardware buttons take up valuable screen space. There are two very frustrating specific examples:

- The menu key is great for hiding "settings". I find that different apps can't really decide where the contextual settings button should go. Google Maps is a prime example - it's great that on Android you press menu to switch between map/satellite/hybrid/etc., and annoying that on iOS it's that page flip thing. And in some apps, a "settings" button in the top right or bottom right or in the "settings" app of the OS. It's just all over the place and not intuitive at all.

- The back button on Android is great when an app calls another app. A lot of iOS apps really try their best (the Twitter app is one that jumps to mind - everything possible opens in the app) and yet there are still times when it fails. Take a YouTube video. it needs the YouTube app. when you're done there there's not easy "back" (that I've found) back to where you were other than the multitasking double-home. Android's back is genius in comparison. But I do agree with commenter jinushaun that it can sometimes be confusing exactly what you're saying "back" to. The best apps will make it obvious but there are plenty where it exits the app for some strange reason.

2) I agree that long pressing (like the menu key) is great. I also agree that it's really for so-called power users - just like right-clicking. There's nothing wrong with that as long as valuable UI components aren't hidden under a right click or a long press there's no harm done. It's a shortcut for people who want to get things done quicker. Another example from the Twitter app on iOS is that you can swipe a tweet for a quick menu. Pretty cool, a bit like a long press but a little more engaging, but it's far from universal and I'd say quite a bit less obvious than a long press, but that's my programmer's brain talking there. I also agree that people could take it to extremes but I don't see any harm in that really so I'm all for it.

3) Not so bothered by this. It's a little weird maybe, but it's pretty obvious to me at least that the options are already fanned out for you. I really don't think any Cozy users (but what do I know, I'm no UX expert) will have trouble. I mean they'd have to be very experienced with Android while at the same time being extremely lay (to put it very mildly) not to know the difference. Still I see how some people may be a little confused if you use a very similar icon for different things.

4) I found the same thing when I got a Mac. That stupid sound when they boot up is infuriating and at least you can turn the Droid sound off! Apparently the only way to turn off the Apple one is to mute your volume before you shut down (or get a small app that does it for you). How amazingly stupdi is that? So in comparison (and I know Mac OS is not iOS) your Droid sound is a breath of fresh air to me! But yes, stupid and annoying on both counts, but at least you can turn Droid off (form what you said).

5) Not a biggie?

6) [a.k.a. 1] I found widgets great. The calendar widget told me the next thing (or two) I had to do, the power switcher bar thing was great too. iOS kinda misses a trick here (and I have a feeling it's on the way in some form at least). I specifically hate notification in iOS (and I know I'm not the only one). The floaty-red-number-badge-thing on icons is great, but doesn't provide any real info. Android's 'window shade' is great for obvious notifications and as I said, the calendar is good (although it could be better) for upcoming things in my life.

7) [a.k.a. 2] Full agreement, although I actually found as a regular user I didn't need it much. But it's nice to have it.


This wasn't meant to be a point-by-point thing but it kinda worked out like that. Hopefully I don't look too Android fanboyish (I do understand though that I've made quite a few complaints for Android over iOS after congratulating you on not being an Apple fanboy). I'm really happy with my iPhone, but there are just quite a few things that I miss about Android. And there are plenty of things iOS does better than Android, don't get me wrong.
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 74.203.51.134
URL: http://profile.typepad.com/jan_miksovsky
DATE: 11/03/2010 04:31:24 PM
Alex: Thanks for the thoughtful comments!
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Reconsidering stock controls to create an optimized user experience
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: reconsidering-stock-controls-to-create-an-optimized-user-experience

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2010/10/reconsidering-stock-controls-to-create-an-optimized-user-experience.html 
DATE: 10/11/2010 08:00:00 AM
-----
BODY:
<p>One of my core design principles is that, when a designer tackles a new problem, they start by trying the simplest thing that could possibly work. Once you get that into users’ hands, you’ll discover whether the simple thing works. You might have gotten lucky, and can move on — or else you’ll learn what users really want (as opposed to what you thought they wanted) and your next iteration will be much better. The thing to avoid is stopping after the first iteration, avoiding improvements to UI elements that are clearly core to a product’s function. This situation often comes up with the use of stock controls, because their ubiquitous presence and fundamental nature often blinds people to other possibilities.</p>
<p>Take the standard solution for entering a time into a form. Given the above design principle, it’s completely reasonable that people designing calendar or calendar-like interface would start by using stock HTML controls to input appointment or event data. In the case of entering the appointment time, the standard solution is a SELECT tag, which on most browsers produces a dropdown list box. Here’s a typical example from Expedia flight search form:</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f4ef29df970b-pi"><img alt="image" border="0" height="402" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20134880ee74c970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="image" width="302" /><br /></a><em>Expedia time picker</em></p>
<p>This time dropdown list works, but isn’t particularly elegant, and has numerous shortcomings. Depending on your browser, you may only see about 18 times at once, so you’re often forced to scroll to select a time. This scrolling issue is exacerbated by having the dropdown start by showing times from midnight through the early morning — times that are unlikely to be selected. (In other words, the first third of the options shown will rarely be picked.) Furthermore, the times aren’t aligned for easy reading. And, despite the heavy capitalized AM and PM markers, from usability experience I can attest to the fact that users will often overlook these, and select a time 12 hours off from the time they want.</p>
<p>Overall this is a brute force solution to a problem. That would be fine for an initial attempt, but seems puzzling on the home page of a site where task completion time (here, selecting flight parameters) almost certainly has an inversely proportional effect on revenue.</p>
<p>It’s even more puzzling to see the same stock control used as a core component of a web-based calendar, where the entire point of the site hinges on entering appointments. Yahoo! Calendar uses essentially the same stock control, with all the same shortcomings:</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f4ef29f0970b-pi"><img alt="image" border="0" height="402" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20134880ee76a970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="image" width="302" /><br /></a><em>Yahoo! Calendar time picker</em></p>
<p>Google Calendar and Microsoft’s Hotmail Calendar (or Windows Live Active Calendar, or whatever it’s called this week) are more puzzling still. Both sites have developed custom time pickers, and in both cases they’ve created combo boxes to allow typing times (in addition to picking from a list). From experience, I can say that this is a non-trivial endeavor — it’s surprisingly difficult just to correctly reproduce all the keyboard navigation and other interaction behavior of a standard dropdown list, let alone improve upon it.</p>
<p>But for all their investment, as far as I can tell, in both cases the dropdown list behavior is no better than the standard solution. In fact, both solutions are <em>worse</em> because the dropdown list is, amazingly, <em>shorter </em>than the stock control. The Google solution only shows six times at once; Hotmail’s shows ten. It’s almost impossible to use these UIs without scrolling to find the time you want. It’s also noteworthy that both sites fail to take the opportunity to improve the legibility of the times and leave them left-justified.</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20134880ee770970c-pi"><img alt="image" border="0" height="203" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20134880ee780970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="image" width="302" /><br /></a><em>Google Calendar time combo box</em></p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20134880ee787970c-pi"><img alt="image" border="0" height="252" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20134880ee799970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="image" width="302" /><br /></a><em>Hotmail Calendar time combo box</em></p>
<p>With these object lessons in mind, I really wanted to find a better time picker solution for Cozi’s own <a href="http://www.cozi.com/Family-Calendar.htm">family calendar</a>. When we began working on our own combo box time picker (following the same pattern as Google and Hotmail), it struck me that all the scrolling pain resulted from an insistence on showing all times in a single vertical column. Moving to multiple columns let us show a complete day’s worth of times at once, and completely eliminate scrolling:</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f4ef2a52970b-pi"><img alt="image" border="0" height="302" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20134880ee7b2970c-pi" style="background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;" title="image" width="302" /><br /></a><em>Cozi multi-column time combo box</em></p>
<p>Once we introduced the idea of using the horizontal dimension, we realized we could take it even further. Each row normally shows just the top of the hour, but the row the mouse is over also shows additional fifteen minute increments within that hour. This allows the user pick, with a single click, from 96 discrete times. We also align right-align the hours to improve legibility. The fact a user can see all the hours at once makes it slightly more likely they will choose the AM or PM time correctly, an effect we’ve tried to reinforce through a background gradient to suggest day versus night.</p>
<p>In practice, this control works exceedingly well. It’s very fast, and thorough usability testing of the control over the years has shown that users intuitively grasp its use, despite never having seen anything like it before.</p>
<p>I mention this not (just) to toot Cozi’s horn or to sneer at other calendar sites. The other sites mentioned above all have aspects in which their user interface is better than Cozi’s, and I aspire to match them in those areas. My point is that stock controls such as dropdown lists are so pervasive as to be invisible even to the product’s own designers. These controls are a perfect starting point for a UI design—but they shouldn’t be the end. If your product uses a stock control (or any basic UI pattern) in a core function, it might well be worth your time to reconsider those controls and explore an optimized solution.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Craig
EMAIL: craigvn@gmail.com
IP: 203.206.204.123
URL: 
DATE: 10/11/2010 01:53:49 PM
I have seen calendars like you are designing before but have always considered them too hard to use. Make sure the user doesn't need fine grained mouse handling to use it.
-----
COMMENT:
AUTHOR: Dick Boogaers
EMAIL: d.boogaers@mmpaura.bl
IP: 92.64.74.129
URL: http://www.mmpticketing.nl
DATE: 10/13/2010 08:24:27 AM
How do you handle countries with a 24 hour clock?
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 74.203.51.134
URL: http://profile.typepad.com/jan_miksovsky
DATE: 10/13/2010 10:33:35 AM
Dick: Cozi is currently focused on the U.S. market, so we haven't been forced to address 24 hour support yet. I actually think simply showing 24 hour times (13:00, 14:00, etc.) down the right column might turn out to work just fine. It probably wouldn't hurt to keep the AM/PM meridiem row at the top, but could kill it if users in those countries found it distracting. Beyond that, I think everything else in the design should hold up.
-----
COMMENT:
AUTHOR: Dick Boogaers
EMAIL: d.boogaers@mmpaura.bl
IP: 92.64.74.129
URL: http://www.mmpticketing.nl
DATE: 10/15/2010 08:15:13 AM
Countries with a 24 hour clock tend to have another division of the day: from 0:00 till 8:00, from 8:00 till 18:00 and from 18:00 till 24:00. For such countries the division in two columns looks a bit artificial.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Need an inexpensive designer for your project? Consider hiring a college student!
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: looking-for-an-inexpensive-designer-consider-hiring-a-college-student

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2010/09/looking-for-an-inexpensive-designer-consider-hiring-a-college-student.html 
DATE: 09/27/2010 08:00:00 AM
-----
BODY:
<p>This past weekend I had a lot of fun giving a talk at <a href="http://www.seattle20.com/startupday/">StartupDay</a> 2010 on the topic of user experience design in the context of a startup company. After my talk, I volunteered my time at a table in the advisory area, where lawyers, VCs, and various experts on others topics of interest met with new and hopeful entrepreneurs. I ended up spending time with four entrepreneurs, and three of them asked the exact same question: <strong>Where can I find budget design talent?</strong></p> <p>I really wanted to help these people get their business started, so did my best to come up with a meaningful suggestion. They all liked my advice, so I want to share it with you too: <strong>Try finding a college student to do your design project.</strong></p> <p><img border="0" src="http://farm3.static.flickr.com/2449/4068847233_573e2e4317_z.jpg" style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" />   <br /><em><font color="#666666">Photo: Matt Hintsa</font></em></p> <p>There are a bunch of good reasons to hire a college student:</p> <ol>
  <li>There are incredibly talented undergraduate and graduate students studying every form of design that’s out there. </li>
  <li>They are looking for a job that pays better than part-time work in the campus library or a local restaurant, and so are willing to work for less money than you might imagine. (That said: Be fair.) </li>
  <li>They want to build a portfolio. The extent to which your design project is actually interesting increases the chance the result of the project will look good in their portfolio. This portfolio benefit can translate into more motivation (and possibly willingness to work for less).</li>
  <li>They can have drive and energy to spare.</li>
  <li>Instructors want their students to work on real-world problems! I’ve been approached in the past by professors looking for projects for their students. They are farming out cheap (or free) labor, but don’t always know who’s looking for design work, and may not have local small-company connections. These engagements can come with particular constraints: the project probably needs to start and end within a given semester, you may be obligated to submit an evaluation at the end of the project, etc. </li>
  <li>If the relationship works well, you can use them for future projects, or potentially recruit them. You may discover someone great before anyone else does! </li>
  <li>This is a way of doing some good in the world. </li>
 </ol>
 <p>The obvious downsides to hiring a college student for a real business project are lack of experience: specifically in the particular design discipline you’re looking to hire, and generally as a professional with business responsibilities. They may not yet have worked on a project for which failure can entail consequences worse than a bad grade.</p> <p>It can also be hard to find a good student—it takes time to separate the wheat from the chaff—but if you’re on a&#0160; budget, it may be worth the extra time. And if you’re on a really tight budget, you may have no better option.</p> <p>Reaching out to local instructors can be a good place to start; even if they don’t have a specific work/study project coming up (or one that matches your parameters), they may know current or past students that might be good for your project. These instructors can be found not only at the local college or university, but also at trade schools and other adult learning institutions.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Jennifer Cabala
EMAIL: jennifer@seattle20.com
IP: 67.185.160.43
URL: http://www.seattle20.com
DATE: 09/27/2010 02:27:40 PM
Thanks Jan!  Another benefit is that if the student qualifies for work study, the state of Washington will pay a good chunk of their salary, decreasing your cost and helping the student.
-----
COMMENT:
AUTHOR: Nathan Parcells
EMAIL: nathan@internmatch.com
IP: 24.22.211.139
URL: http://internmatch.com
DATE: 09/27/2010 02:34:39 PM
Great suggestion Jan. As the founder of InternMatch we have seen a ton of small businesses and startups take advantage of qualified design students to tackle projects from creating marketing collateral to doing UI work. In fact we hired a Seattle University designer who made hand-outs, business cards, and more for us -- all projects that could have been very costly otherwise.

As far as trade schools, the Art Institute of Seattle is a great one.  Thanks for the informative post for all the boot strappers out there.
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 74.203.51.134
URL: http://profile.typepad.com/jan_miksovsky
DATE: 09/27/2010 02:50:11 PM
Nathan: Thanks for sharing your experiences with specific schools. And InternMatch itself looks like an awesome resource! I've forwarded it to Cozi's own internship coordinator.
-----
COMMENT:
AUTHOR: Justin
EMAIL: 
IP: 67.153.70.18
URL: 
DATE: 10/08/2010 09:57:27 AM
Great Cornell pic, btw!
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 97.113.155.238
URL: http://profile.typepad.com/jan_miksovsky
DATE: 10/08/2010 11:08:30 AM
Justin: Ah, you spotted it! Cornell's my alma mater.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Dear phone OSes in 3rd place and beyond: Please accelerate your demise
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: dear-phone-oses-in-3rd-place-and-beyond-please-accelerate-your-demise

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2010/09/dear-phone-oses-in-3rd-place-and-beyond-please-accelerate-your-demise.html 
DATE: 09/20/2010 08:00:00 AM
-----
BODY:
<p>Cozi is expanding its family software to the mobile domain. We have a <a href="http://itunes.apple.com/us/app/cozi-family-organizer/id364719312?mt=8">Cozi iPhone application</a>, and are obviously looking at Android as well. The problem is what to do about Blackberry, Palm webOS, and perhaps Windows Phone 7. As an entrepreneur with friends at two of those companies, I wish good luck to those OSes in third place and beyond. As a designer of family software, I have a goal to address the needs of my users, and support whatever phone they find meets their needs. And as an executive at a company that makes mobile phone applications, I wish those OSes in third place and beyond would please die—and soon, if they wouldn’t mind.</p> <a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20134877bee2b970c-pi"><img alt="Blackberry[4]" border="0" height="240" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20134877bee38970c-pi" style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="Blackberry[4]" width="181" /></a>&#0160;&#0160;&#0160; <a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20134877bee44970c-pi"><img alt="Windows 7 Phone" border="0" height="240" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f45c62cb970b-pi" style="background-image: none; border-bottom: 0px; border-left: 0px; margin: ; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="Windows 7 Phone" width="143" /></a>&#0160;&#0160;&#0160; <a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f45c62f7970b-pi"><img alt="palm-pre-plus-6" border="0" height="240" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20134877bee4e970c-pi" style="background-image: none; border-bottom: 0px; border-left: 0px; margin: ; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="palm-pre-plus-6" width="160" /></a> <br /><em>Dear Blackberry, Windows Phone 7, Palm webOS: Could you all go away? Please?</em> <p>As an ISV working on top of a platform, I want exactly two platform providers. Not one, not three, or four, or ten. Two. If there’s only one platform provider, the provider inevitably becomes arrogant and insensitive to the needs of the ISVs that keep it alive. Not three, or four, or more—those platforms can never get enough market share to make it worth your while. All they will do is produce enough users to make your life miserable with endless requests for when you’ll get around to supporting the OS they prefer, with its 3% market share. The only good case with the smaller players is if they can become commoditized, ideally in combination with the first or (more likely) second place platform, in which case their existence makes no difference to the ISV.</p> <p>An ISV wants exactly two platform providers in any given space. The first one can be the successful one, with something like 70% market share. The second one can be the underdog, with 25% market share. From the ISV’s perspective, the underdog’s job is to keep the top dog honest, while maintaining sufficient market share to justify the ISV’s investment developing for that platform. Without the latter justification, the ISV can’t justify the investment, which means the underdog eventually loses compelling apps, and loses market share until they can no longer play a meaningful role as underdog. The remaining 5% of the market should be splintered among tiny players. None of them should have sufficient market share to create a compelling business case to the ISV, so the ISV can focus on the two players that really matter.</p> <p>This effect has been demonstrated over and over again.</p> <ul>
  <li>In the golden age of personal computer OSes, the Mac had just enough market share to be worth developing for, which kept Microsoft honest. When the Mac nearly became irrelevant, Microsoft slowed its pace of innovation, and took forever to release Vista. Without OS/X nipping at its heels, it’s exceedingly unlikely that Microsoft would have gone on to produce a nice Windows 7. Thankfully, a personal computer OS is now largely a commodity whose greatest purpose is to run a web browser, and web-based ISVs can often ignore the space entirely.</li>
  <li>In the gaming console space, game ISVs resent Nintendo’s steadfast refusal to die. Microsoft and Sony can keep each other honest on their own. So, from a game developer’s perspective, Nintendo’s existence doesn’t improve their life, it only complicates it.</li>
  <li>When Microsoft maneuvered IE into a position of browser dominance, ISVs had no choice but to optimize for IE, giving Microsoft so much market power that they could ignore the call to adopt standards. When Mozilla, Chrome, and Safari eventually became clawed their way to being good enough and threatening enough, Microsoft finally had to get serious again about making IE good. In this particular case, web standardization has commoditized the smaller players, so as an ISV, I really don’t care whether Mozilla and WebKit both stick around. All that matters is that, collectively, they can force Microsoft to improve.</li>
 </ul>
 <p>Now, the mobile OS space is increasingly dominated by iOS and Android. To an ISV, that’s fantastic news! The fewer players, the less work the mobile ISV has to do to reach more users. I’m really hoping Android manages to create a meaningful application marketplace and sustain fast growth. When iPhone was the sole high-end mobile OS of interest, they could afford to subjugate ISVs with completely mysterious and arbitrary rules for who could be in the App Store. With Android on the rise, Apple has been finally forced to <a href="http://www.nytimes.com/2010/09/10/technology/10apple.html?_r=1&amp;src=me&amp;ref=technology">open up a bit</a>.</p> <p>The mobile ISV wants to see that tussle between Apple and Android. But what would really make me happy would be to see those other guys get a lot weaker. The other mobile OS providers don’t weigh enough on their own, and hence can only serve to make the ISV’s life harder. Hey, you guys can all share that last 5%!</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Speed
EMAIL: rovingbroker@hotmail.com
IP: 24.93.231.44
URL: 
DATE: 09/20/2010 08:59:17 AM
I'm sure that Toyota and GM (or is Ford number two?) share your sentiments.

-----
COMMENT:
AUTHOR: Evanfeldman.wordpress.com
EMAIL: 
IP: 65.161.188.11
URL: http://profile.typepad.com/evanfeldmanwordpresscom
DATE: 09/20/2010 12:21:22 PM
You bring up a great issue!  However, I wonder if there are other ways to extend your reach to all of those other platforms without having the expense of deeply developing on all the minor different platforms.  Cozi does have a passable mobile website, the question I would have is why not build out the mobile website to a higher degree (think what Facebook did with touch.facebook.com) that would generally render well on all of the different smartphone platform out there?

However I think part of your motivations is the ability to be "featured" in the platform's application market and thus having a quick and available shortcut to the service.  Obviously prominent placement in the Apple App Store did wonders for Cozi :-) ...

This could be addressed by creating a "wrapper" application that adds some additional on device functionality onto of the mobile web site which would be embedded into the app.  In theory this could mean a small amount of development work on these minor platforms, but wouldn't necessarily require making a "HUGE" investment especially since you didn't even consider Meego in addition to Windows Phone 7, Palm, and BB.

But of course life is simpler with only 2 contenders since it helps to reduce the number of tools needed.  But HTML apps really can be cross platform to a decent extent and the heart (brains?) of the app can be something that could thus be shipped out to as many platforms as needed -- assuming that the platforms continue to (and improve) the ability to render it.






-----
COMMENT:
AUTHOR: Peter H.
EMAIL: peter@horadan.net
IP: 98.125.162.237
URL: 
DATE: 09/20/2010 02:58:10 PM
I'm curious why you did not choose to implement Cozi's mobile experience in HTML 5.  This has been well hashed in other places, but it seems for a wide swath of applications there are few to no benefits of going to the expense of building an native app.  And with HTML 5 you could just pivot the argument of the 3d place platform customers back to their vendor- we'll gladly support the device when it supports HTML 5.

-----
COMMENT:
AUTHOR: Jody
EMAIL: jodyfanning@hotmail.com
IP: 192.100.112.210
URL: 
DATE: 09/20/2010 10:51:25 PM
Er, so you want Android and iPhone to die?!

Smartphone OS's Q2 2010 top three are Symbian, RIM, Android.
<a href="http://en.wikipedia.org/wiki/Smartphone">http://en.wikipedia.org/wiki/Smartphone</a>

So, are you targeting the US market only or globally? In the global case you are completely off the mark.
-----
COMMENT:
AUTHOR: tzenes
EMAIL: tzenes@gmail.com
IP: 97.126.94.196
URL: http://tzenes.com
DATE: 09/20/2010 11:11:48 PM
I have to say, that most of your arguments seem to lack data to back them up.  Your initial assertion is that you'd wish RIM (who makes Blackberry) would disappear so you could have a larger market penetration (you're not the only one).  However, this logic suffers from the fact that RIM has the largest Smart Phone OS following.  According to Comscore, RIM has almost 40% market share in the Smart Phone market.  By comparison Apple is at 23% and Google 17%.  

I'm not saying that I don't understand your frustration, working on multiple platforms is a headache, but I think you've sort of missed the boat here.  By developing for RIM you could double your market penetration...

Later on you seem to suggest that Vista is the result of a lack of competition, but Apple's market share was growing by 16% back in 2006 (when Vista was released, today it is growing at 20%).  Certainly Apple benefited from the poor quality of Vista, but their velocity predates Vista's launch. (cite: Gartner)

You also bring up Nintendo in comparison to Sony and Microsoft in the console market.  But the Nintendo Wii has sold 30.6 million units compared to Microsoft's 21.6 million Xbox 360s and Sony's 13.4 million.  While month to month sales of Wii have lagged in Summer 2010, it still out sells the Playstation 3. (cite: NDP)

I understand as an independent software vendor, too much competition is bad for business, but I think you have a heavily slanted point of view based on which companies you personally favor.  If nothing else, I'd take a second look at developing for the Blackberry.  While it may be losing market share today, there are still 21 million RIM phone users who you could be selling your product to.
-----
COMMENT:
AUTHOR: theone
EMAIL: theone@gmail.com
IP: 69.236.68.37
URL: 
DATE: 09/21/2010 12:00:12 AM
HTML5 is your answer.
-----
COMMENT:
AUTHOR: no_more_walled_gardens
EMAIL: 
IP: 87.236.5.83
URL: 
DATE: 09/21/2010 01:13:36 AM
Just make a web interface that works on mobile browsers. There is simply no need for a native app for something such as cozi.
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 97.113.152.66
URL: http://profile.typepad.com/jan_miksovsky
DATE: 09/21/2010 12:49:25 PM
tzenes: I appreciate the thoughtful comments; thanks for taking the time to share them and for your readership. As you, Evan, and several others have pointed out, RIM has bigger phone market share in absolute terms. But I am skeptical of the proposition that they have bigger market share in terms of phones that get heavy application use -- the sort of phone an ISV cares about. Or, at least, the sort of phone Cozi users care about. The vast majority of Cozi's mobile users have iPhones; there's simply no contest. This was true back when we didn't even have an iPhone app, and only offered a mobile-optimized web site. And Android is coming up quickly. Our customer service feedback shows that far fewer Blackberry users ask for Cozi. We could go through the expense of creating a Blackberry app (and regularly consider this), and while it might double our addressable market, it's unlikely this would double our market penetration as you suggest. And as for Symbian, I can't recall hearing a single piece of feedback about Cozi's mobile site from a Symbian user. Overall, I don't think I have a bias towards the companies I personally favor (I personally resisted our entry into the iPhone app market); I have a bias towards the companies my users favor. YMMV.

I don't make video games, and don't follow the market closely.The source I checked showed that Nintendo currently holds the #3 position. But they could be wrong, or I could easily have misinterpreted their data. And regardless of which companies are in which position, I think my initial point still stands: 2 platforms are better for the ISV than 1 or 3.

Having joined the Vista team when the project got underway (about March 2001), I can attest to the fact that Apple's small market share definitively contributed to a sense of complacency on the team.
-----
COMMENT:
AUTHOR: Everettm
EMAIL: everettm@comcast.net
IP: 24.60.28.174
URL: 
DATE: 09/24/2010 10:15:46 AM
Ouch, Jan! This post is harsh!
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Form validation feedback: Be slow to complain, and quick to forgive
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: form-validation-feedback-be-slow-to-complain-and-quick-to-forgive

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2010/09/form-validation-feedback-be-slow-to-complain-and-quick-to-forgive.html 
DATE: 09/13/2010 08:00:00 AM
-----
BODY:
<p>Anyone designing a form will eventually come across the problem of: 1) when to validate the form data which the user has entered, and 2) how to provide the user feedback on fields that don’t meet the validation criteria. Many approaches have been tried for the second problem, but I think the first problem—when to validate the data and provide feedback—could use more consideration.</p> <p>Suppose you’re designing a form containing a text box in which you will ask the user to enter a mobile phone number. For a variety of reasons, you’ve decided that you want to perform some initial validation of the number to minimize the chance of later problems. There’s no easy way to ensure, on the spot, that the number is, in fact, that of a real mobile phone, but you can at least ascertain via some regular expression that the text looks like a valid phone number. (Er, have fun with that, especially if you want to support international numbers.) Your regex is quick to evaluate, but you need to decide <em>when</em> to evaluate it and do something with the result.</p> <p>Here are some choices for when to validate the phone number, along with some pros and cons:</p> <ol>
 <li><strong>When the user types a key.</strong><br /> <br />Pros: The user will get the feedback as quickly as possible, and so they should be able to correct the problem immediately. Because they’re looking at the phone number field, feedback positioned next to the field will be noticeable. Because the user is thinking about the phone number, they don’t need much prompting to spot the problem. The keyboard focus is probably already in exactly the right place to fix the problem. <br /> <br />Cons: It can be incredibly irritating to use a program which instantly complains about a problem which you yourself can tell you’ve made. If you’re reaching for the “1” key, and see you’ve accidentally hit the “q” key, you can see for yourself you’ve made a mistake. You don’t need the additional shame of being yelled at. A program that validates on a key press can act like the jerk in the car behind you who honks their horn the instant the traffic light turns green. <br /> <br />There are also plenty of situations in which such error feedback is completely premature. Suppose the user is pasting in a phone number they’ve copied from their address book or some other location, and the pasted text contains some extra characters. The user can see the extra characters, and would be perfectly happy to remove them if only the program wouldn’t yell so loud.<br />&#0160;</li>
 <li><strong>When the field loses focus </strong>(e.g., the user has moved the keyboard focus to the next field).<br /> <br />Pros: The user has had a chance to get the field text into the state they desire, so any feedback at this point is likely more warranted. Perhaps the user may not have noticed that they’re missing a digit from the phone number. <br /> <br />Cons: The user’s attention has already begun to move on, so the error feedback may need to be more prominent. Also, while this technique is less hasty than the one above, the error feedback may still preempt the user’s own ability to recognize the problem. The user has to manually move the keyboard focus back to the phone number field.<br />&#0160;</li>
 <li><strong>When the user attempts to save the form.</strong><br /> <br />Pros: By pressing a commit button like Save, the user has indicated that they think they’re done entering data. If there’s an error at this point, they haven’t noticed it, so the feedback will be timely. <br /> <br />Cons: By this point, the user’s attention may be far from the phone number field, so the feedback needs to be quite prominent. It may need to be supplemented by overall form validation feedback near the commit button or at the top of the page. Once the user sees that overall feedback, it may take a moment for them to visually reacquire the problematic phone number field, diagnose the problem, and get the insertion point to the point where they can correct it. </li>
 </ol>
 <p>All these methods have their place, although in a situation like this, I personally prefer to defer giving validation feedback to the point where the user is attempting to save the form (#3 above). I’d rather give the user a reasonable chance to fix any errors, and have observed countless usability studies in which they have done so. I believe this leaves the user feeling in control, and to me this is worth the disadvantages listed above for this approach.</p> <p>Still, there’s one common downside to this approach: <em>applications that validate on Save tend to keep the error feedback visible until the user tries to save again</em>. I find this annoying; it’s like the program continues to scold me even after I’ve admitted I was wrong and atoned for my mistake. Once I see the problem and have fixed it, I wish I could get credit for fixing it right away.</p> <p><strong>Asymmetric validation feedback triggers</strong></p> <p>There’s no reason the triggers for showing and hiding the validation feedback need to be symmetrical. I’ve been working on the idea of asymmetrical validation triggers: validate on save to show validation feedback <em>and</em> validate on keypress hide the feedback. In this scenario, the UI shows validation feedback (validation message, change field background color, etc.) if the user attempts to save the form with something that doesn’t appear to be a phone number. But as soon as the user types the key that fixes the problem, the validation feedback goes away.</p><br /><p></p><p></p><p><em>The user is typing…</em></p> <p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f418c3f0970b-pi"><img alt="image" border="0" height="26" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f418c3f8970b-pi" style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" width="380" /></a></p><p><em><span style="font-style: normal; "><em>They mistype. The UI doesn’t complain; maybe the user will fix the error.</em></span><br /></em></p> <p><em><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f418c3fa970b-pi"><img alt="image" border="0" height="26" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f418c3fd970b-pi" style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" width="380" /></a></em></p><p><em>The user tabs away with the error uncorrected. Still no complaint.</em></p> <p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f418c3ff970b-pi"><img alt="image" border="0" height="26" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f418c404970b-pi" style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" width="380" /></a></p><p><em>They try to save the form. NOW validation feedback appears (with an explanation nearby).</em></p> <p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20134873923fd970c-pi"><img alt="image" border="0" height="26" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2013487392406970c-pi" style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" width="380" /></a></p><p><em>The user clicks to correct the error…</em></p> <p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201348739240b970c-pi"><img alt="image" border="0" height="26" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f418c412970b-pi" style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" width="380" /></a></p><p><em><span style="font-style: normal; "><em>As soon as they type that fixes the error, the validation feedback goes away.</em></span><br /></em></p> <p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2013487392410970c-pi"><img alt="image" border="0" height="26" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f418c416970b-pi" style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" width="380" /></a></p><br /> <p><strong></strong></p> <p></p><p></p><p>In other words, the UI is slow to complain, and quick to forgive.</p> <p>I think this is generally the proper conversational posture for a program to take regarding the validation of user input. Most programs treat validation feedback as if it were the user’s fault, when to me this feels like almost exactly the wrong spirit in which the view the situation. Data validation is a sign of program weakness — a sign that it’s still too hard to design a program that can process input flexibly and resiliently.</p> <p>If I fill out a paper form that asks for my home and work phone numbers, I can fill in the first phone number and write the word “SAME” for the second phone number, and any human would process that correctly. I can even cross out the field label “Work” and handwrite “Cell” and write in my cell number, and again this is meaningful to a human reader. I can make all kinds of minor errors, and still my input can be interpreted.</p> <p>That is a breathtaking level of input flexibility which no UI today can match. And so when a form has attempted to recognize user input, and failed to do so, the appropriate stance should be not, “Invalid phone number”, but rather, “I’m really sorry, I’m not smart or sophisticated enough to understand you. Could you please help me by making this more recognizable as a phone number so that I, a mere program, can process it for you?”</p> <p>I’m not saying that’s what the program should really <em>say</em>, but that’s a useful mindset to have when approaching the situation as a design problem. Such thinking led to the asymmetric validation triggers above, and perhaps more thought along these lines will lead to further refinements to this very common aspect of user experience design.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: S. Irwin
EMAIL: 
IP: 24.98.253.113
URL: 
DATE: 09/13/2010 08:09:47 AM
In the first paragraph, do you mean "minimize" problems?
-----
COMMENT:
AUTHOR: S. Irwin
EMAIL: 
IP: 24.98.253.113
URL: 
DATE: 09/13/2010 08:10:14 AM
Sorry, second paragraph.
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 74.61.53.150
URL: http://profile.typepad.com/jan_miksovsky
DATE: 09/13/2010 08:47:43 AM
S. Irwin: Right you are! Fixed. Thanks.
-----
COMMENT:
AUTHOR: Mike W
EMAIL: mikew@hyperreal.org
IP: 69.110.157.92
URL: 
DATE: 09/13/2010 09:41:24 PM
Nice ideas.  This topic is tangentially related to an issue I am dealing with in a project right now.  I'm developing a data entry screen.  The screen should give feedback to the user about the validity of the data, but I want the user to be able to save invalid data so that they can come back later to fix it.  I want to avoid the situation in which a user enters a bunch of data and is then unable to save it.  So the program will need a maintained a "valid" bit.
-----
COMMENT:
AUTHOR: Bruce
EMAIL: btb6@cornell.edu
IP: 63.229.27.28
URL: 
DATE: 09/13/2010 11:39:04 PM
You make an interesting point about writing "SAME" in a field, but an electronic form can offer an even better option: a "Same" checkbox. That's common for billing/shipping addresses and should be used wherever else it's a likely desire.

My pet peeve is forms with rigid date and phone format requirements. A form should recognize all the common formats. Of course it might be necessary to disambiguate between mm/dd/yy and dd/mm/yy, but no software should demand a 4-digit year if there's only one conceivable century (e.g., when making travel plans).
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Every app has a scary basement
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: every-app-has-a-scary-basement

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2010/09/every-app-has-a-scary-basement.html 
DATE: 09/07/2010 08:00:00 AM
-----
BODY:
<p>It takes a while for a designer on a mature product to realize that not all parts of the application&#39;s user interface are equally stable. As an application evolves over the course of years, it tends to develop some critically important yet unbelievably fragile component upon which too much rests. I picture such a feature as a scary basement: the dark, old, mysterious, and temperamental body of code which is vital to the running of the operation. The scary basement is cantankerous and hard to maintain—something only operated upon by the most senior and stalwart of the team&#39;s engineers, and conspicuously avoided by everyone else.</p> <p>When I worked as the lead designer on Microsoft Money, I eventually came across its scary basement: the elaborate checkbook register control for viewing and editing account transactions. This register control was first created around 1990 by legendary Microsoft engineer Doug Klunder. To get the most performance out of the PCs of the day, I believe he had the register itself more or less<em> directly read and write transaction data from disk</em>. In this capacity, this specific UI control was entirely and solely responsible for validating all transaction data; there was no separation between presentation, business logic, and on-disk representation.</p><p>This gave rise to all sorts of odd restrictions. For instance, any dialog that created an account transaction had to instantiate, somewhere behind the scenes, a hidden instance of the register control. When the user entered data in dialog fields, the dialog carefully copied those values into the register, told the register to save it, and then tried to divine whether the save operation had worked.</p><p>With each new product version, the register control had new functionality bolted on (investments, online banking, localized features), and each addition increased the complexity of the code. By the time I joined the team four years later, the register control had become so incredibly Byzantine, only one or two people on the team could, and would, touch it.</p> <p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f3e7bf77970b-pi"><img alt="Microsoft Money 95 Account Register" border="0" height="226" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201348709b1a4970c-pi" style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="Microsoft Money 95 Account Register" width="461" /></a><br /><em>Money register control, circa Money 95: Be afraid… be very afraid.</em></p> <p>A distinguishing characteristic of the scary basement is that all work on it will take an indeterminate length of time; any bug fixes or improvements are essentially uncostable. In the case of Money’s register control, simple changing the order of the transaction fields might take a day—or several weeks. There was just no way to tell beforehand.</p> <p>When I was first exposed to this reality, some friends on the nearby Microsoft Word team shared stories about their app&#39;s own scary basement: a routine called FormatLine. Given a point in a document and a column width, FormatLine would lay out the next line of text at that point. As I heard it, this routine had evolved into a handful of functions that were each thousands of lines long. Developers assigned to descend into the depths of FormatLine were treated with the same respect and concern as spelunkers attempting to reach trapped miners.</p> <p>The basement metaphor isn&#39;t just a way of describing the unnerving nature of tiptoeing around such a feature—it&#39;s meant to reflect the fact that such a feature is invariably foundational to the application. And like a building foundation, this code can’t be replaced with something more solid without a colossal engineering effort. In most cases, the scary basement just stays that way until the platform the app sits upon becomes irrelevant, and the app is ported over to some new, saner, foundation.</p> <p>To prevent a critically important aspect of your UI metastasize into a scary basement means investing time in refactoring as you go, and this means moving more slowly that you would like. UI changes need to be evaluated in terms of the degree to which they compromise the solidity of the foundation.</p> <p>This past week, a developer here at a Cozi came to me with a tough decision. I&#39;d designed what, IMHO, was an interesting modification of our family calendar UI that could have helped optimize screen real estate for both user data and advertising impressions. Unfortunately, after a couple of weeks of working on this, the developer indicated that it was proving ferociously complicated to get the new UI to work correctly with the infinite scrolling on our calendar page. The infinite scrolling feature was itself delicate, and doing anything to it was complicated by the need to work across multiple browsers. While it might be possible to slowly stabilize this particular new feature to an acceptable level of quality, our calendar UI would likely become unacceptably fragile—the next feature we tried to add would apply new stresses, and things would break in unpredictable (and uncostable) ways. Our calendar UI would turn into a scary basement.</p> <p>We couldn&#39;t let that happen. For a family-focused product like Cozi, being able to evolve our calendar UI is crucial to the business. So while it was painful to let a neat feature improvement go, we ultimately decided that it wasn&#39;t the right time for it. Maybe someday cross-browser compatability won&#39;t be such a pain (probably when we can drop support for IE 7 and 8), and we&#39;ll give it another shot. In the meantime, we have a clean, well-lit basement.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Justin Bailey
EMAIL: jgbailey@gmail.com
IP: 207.109.69.9
URL: http://blog.codeslower.com
DATE: 09/07/2010 09:15:11 AM
Excellent metaphor!
-----
COMMENT:
AUTHOR: John Stracke
EMAIL: francis+miksovsky+2010@thibault.org
IP: 63.107.91.99
URL: 
DATE: 09/07/2010 09:51:00 AM
My mother-in-law actually did have her basement replaced about 15-20 years ago.  The photos are impressive.  :-)
-----
COMMENT:
AUTHOR: chris
EMAIL: 
IP: 208.82.64.120
URL: 
DATE: 09/07/2010 11:15:37 AM
The scary basement isn't just limited to the UI. I think this metaphor can be extended to all application development -- whether you're developing a desktop application or a web services platform, there's always going to be a scary basement somewhere unless you tread carefully :)
-----
COMMENT:
AUTHOR: Leon
EMAIL: info@fluxforge.com
IP: 87.206.147.120
URL: http://www.fluxforge.com
DATE: 09/07/2010 11:23:13 AM
I know these basements. In my case they result from "I'll hack this together so that it somehow works and later I'll tidy it up and make it bullet proof" - guess what: There's no later.
-----
COMMENT:
AUTHOR: guy at HockeyBias dot com
EMAIL: guy@hockeybias.com
IP: 170.153.62.251
URL: http://hockeybias.com
DATE: 09/07/2010 11:36:59 AM
Well put!
-----
COMMENT:
AUTHOR: Trolololol
EMAIL: Hohohoh@youtube.com
IP: 94.1.175.62
URL: 
DATE: 09/07/2010 12:29:23 PM
I think John Stracke's comment was a euphemism.
-----
COMMENT:
AUTHOR: White Wizzard
EMAIL: the.white.wizzard@gmail.com
IP: 173.210.53.91
URL: 
DATE: 09/07/2010 01:18:13 PM
AT my work, we call it before time code or BTC.
-----
COMMENT:
AUTHOR: daev
EMAIL: librik@panix.com
IP: 76.195.220.166
URL: 
DATE: 09/07/2010 02:55:57 PM
"The infinite scrolling feature was itself delicate, and doing anything to it was complicated..." It sounds like you have a scary basement already. You can't implement apparently-simple changes without delving into how they interact with it.
-----
COMMENT:
AUTHOR: Jeff Grigg
EMAIL: JeffreyToddGrigg@gmail.com
IP: 76.70.28.196
URL: http://jeffgrigg.wordpress.com/
DATE: 09/07/2010 02:59:03 PM
When I find the scary basement, I clean it.  In software, that means that I refactor it.  I don't care how scary it is; it is more scary *NOT* to clean it.  When it's too scary to change, I change it until it's not scary to change any more.

And by the way, I'm also a spelunker.  I rappel into deep dark caves.  And I've been known to clean them too.

And you should see the basement in my house:  It's clean and tidy too.
-----
COMMENT:
AUTHOR: Bobby
EMAIL: bobpow@ymail.com
IP: 76.200.114.235
URL: 
DATE: 09/07/2010 03:52:04 PM
Why does it take large teams of people to code these applications?  

Wouldn't it be better if only a few people handled it, so they could keep track of what the basement is like at all times?
-----
COMMENT:
AUTHOR: Lars Holm Jensen
EMAIL: lhj@larsholm.net
IP: 95.166.145.236
URL: http://codeblog.larsholm.net
DATE: 09/07/2010 05:05:40 PM
The cross-browser issue has been resolved; Silverlight!
-----
COMMENT:
AUTHOR: Billy Korando
EMAIL: wkorando@gmail.com
IP: 75.87.67.181
URL: http://www.turnleafdesign.com/
DATE: 09/07/2010 08:30:10 PM
Good metaphor. I have had the unfortunate experience of having had worked on applications that are more akin to haunted houses, than simply having a scary basement. It emphasizes the importance of making code modular and using interfaces between layers. Every app will still have the scary basement, or the haunted room, but by making a commitment to modularity you give your team the opportunity to rework the problem area without affecting the entire app.   
-----
COMMENT:
AUTHOR: Alex
EMAIL: alextim@rediffmail.com
IP: 122.176.162.160
URL: http://www.debtconsolidationavenue.com/
DATE: 09/08/2010 01:29:17 AM
Its just a shame I have to work with a 12 year old, constantly evolving codebase, with so many scary basements they have to be connected via a complex arrangement of dank underground tunnels.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: iOS 4 Home button double-click: Rare case of retiring a behavior preference
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: ios-4-home-button-double-tap-rare-case-of-retiring-a-behavior-preference

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2010/08/ios-4-home-button-double-tap-rare-case-of-retiring-a-behavior-preference.html 
DATE: 08/23/2010 08:00:00 AM
-----
BODY:
<p>Like a lot of iPhone users, I was surprised that Apple changed the behavior of double-click the Home button in iOS 4.0. That action had previously taken the user to a user-selected favorite application, which by default was the Phone application. On a phone with a tiny number of hardware buttons, having a fast way to actually make a phone call seems like a good idea. In iOS 4.0, this double-click&#0160;action was redefined to invoke the task switching UI:</p> <p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20134865645c8970c-pi"><img alt="iPhone Home Button Settings Page" border="0" class="wlDisabledImage " height="480" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f332af3e970b-pi" style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="iPhone Home Button Settings Page" width="320" /></a>&#0160;&#0160;&#0160; <a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20134865645e8970c-pi"><img alt="iPhone Task Switcher" border="0" class="wlDisabledImage " height="480" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20134865645f7970c-pi" style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="iPhone Task Switcher" width="320" /></a> <br /><em>In iOS 3.x (left), double-clicking&#0160;Home was customizable; in iOS 4.x (right), it invokes the task switcher</em></p> <p>I happen find the new behavior fine, and find a use for it many more times a day than I did the previous behavior. Some number of users, however, howled when they upgraded their phones and found a favorite feature was missing. Apple essentially took a feature away, an occasion so rare in software design that I can only think of a handful of cases in more than twenty years where I’ve done it myself.</p> <p>Regardless of what one thinks about Apple’s decision, I’m impressed by their resolve to retire the old behavior. Features tend to live forever, sometimes out of all proportion to their utility. It’s usually cheaper to keep things than get rid of them, and as this case shows, every feature has at least some number of users that will be inconvenienced and upset if the feature were to be removed. Some of the most passionate of those feature users may, in fact, work on the team that make the product, and those people serve as advocates to ensure the conservation of old features.</p> <p>Usually, the tendency to conserve features is so strong that old features are usually buried as settings, rather than eliminated entirely. When Microsoft finally <a href="http://miksovsky.blogs.com/flowstate/2006/07/insert_key_safe.html">fixed the behavior of the Insert key in Microsoft Word</a>, it still preserved the old behavior as a behavior preference. Here it would presumably have been trivial for Apple to keep the old behavior<em>&#0160;by simply folding the new behavior into the very configuration UI it replaced</em>. That is, the list in the image on the left above could have been extended with a new option to “Switch applications”, and that option could have been made the default. Given the low cost of doing that, Apple’s decision to retire the old behavior is even more impressive—or, depending upon your point of view, more reprehensible.</p> <p>The complexities of preserving such behavior preferences in perpetuity is one of the many reasons I personally try very, very hard to avoid introducing them in the first place.</p><p></p><p><em>Side note: This week I&#39;ll be at <a href="http://www.uxweek.com/">UX Week 2010</a> in San Francisco. If you&#39;re coming, it&#39;d be great to meet up. Send mail to jan at cozi dot com.</em></p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: RichB
EMAIL: rbirkby@gmail.com
IP: 195.249.166.4
URL: 
DATE: 08/24/2010 02:23:24 AM
Apple removed another feature in iPhone OS3. In iPhone 2 you could slide the home screens half way to another screen and then with a second finger tap the page 'dots' at the bottom. The screen would then freeze mid-way between pages.

This feature wasn't missed by many....
-----
COMMENT:
AUTHOR: Macha
EMAIL: macha@webicity.info
IP: 109.76.73.228
URL: http://blog.webicity.info
DATE: 09/07/2010 01:54:13 PM
For what it's worth, this option still exists on the iPod Touch (2G in my case, but I presume 3G is the same) on iOS4. Of course, it doesn't have the phone or camera options.
-----
COMMENT:
AUTHOR: Wolf 
EMAIL: wolfhardeyk@gmail.com
IP: 82.132.139.201
URL: 
DATE: 09/13/2010 05:14:01 AM
Fair enough they chose to change the behaviour but having a quick way to access the iPhone 4's vastly improved camera would be a good idea. 
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Lessons learned switching our web UI from stock fonts to a proprietary font
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 0
BASENAME: lessons-switching-our-web-ui-from-stock-fonts-to-a-proprietary-font

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2010/08/lessons-switching-our-web-ui-from-stock-fonts-to-a-proprietary-font.html 
DATE: 08/16/2010 08:00:00 AM
-----
BODY:
<p>Four years ago I wrote about how <a href="http://miksovsky.blogs.com/flowstate/2006/05/what_the_font.html">impoverished</a> most UIs were when it came to rendering live text in fonts other than the small set of stock fonts generally available on all operating systems. This situation has thankfully changed in the interim, tipping to the point where Cozi was able to incorporate a proprietary font in a recent redesign of our web client. We’re now using <a href="http://www.fonts.com/findfonts/SearchPage.htm?kid=Avenir">Avenir</a>, a sans serif font in the Futura vein by reknowned designer Adrian Frutiger. <br />&#0160;</p>
<p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f3198287970b-pi"><img alt="image" border="0" class="wlDisabledImage " height="68" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f3198294970b-pi" style="display: inline; border-width: 0px;" title="image" width="549" /></a> <br /><em><span style="color: #a5a5a5;">Sample of Avenir 45 Book</span></em></p>
<p><br />While many other sites cover the technical aspects of using fonts in web pages, I thought it was worth sharing some lessons I learned from a designer’s perspective. Using custom fonts is something that actually works now, but there are still hassles today:</p>
<ol>
<li><strong>There are currently two distinct routes to using custom fonts:</strong> 1) buy them and host them yourself, or 2) use a font hosting service like <a href="http://www.typekit.com/">Typekit</a> or the (free!) <a href="https://fonts.google.com/">Google Font Directory</a>. Using a font hosting option seems much simpler, but in my mind has some significant limitations. <br /> <br />Depending on which service you use, your choices may be quite limited. This issue will certainly fade away quickly (a year?), but at the moment, you still don’t have access to everything you’d want. If you already have a brand identity you care about and worked to refine, it may be impractical to chuck it all and go with some new font just because it’s easy to reference on a web page. In our case, we selected a font that we felt was consistent with our brand values and good for both body text and data (like a family calendar). The font we picked wasn’t available on a hosted service at the time, and we were willing to go to some lengths to get it. <br /> <br />With the service route, actually getting the supplied font code to work can be a hassle. Most suppliers of web componentry seems to feel that it’s fine to dictate where you <em>need</em> to stick their &lt;script&gt; tag. These solutions always work great in some toy test app, and completely break when added to a large complex web application. Google actually get this right: you can host a font with a completely plain &lt;link&gt; tag. Unfortunately, Google currently offers a tiny number of fonts, none of which were appropriate for our use. <br /> <br />Based on these factors, we elected to just license the fonts and host the files ourselves. This required a bit of pain, on several fonts… <br />&#0160;</li>
<li><strong>The major font foundries are still just waking up to the potential of hosting.</strong> The Avenir typeface we wanted to use is owned by Monotype Imaging, which earlier this year hadn’t yet released their own <a href="http://webfonts.fonts.com/">Fonts.com web fonts</a> hosting service. This meant we’d have to host the files ourselves, which required signing a licensing contract. This is an old-school purchasing process: we had to, like, <em>sign documents</em> and fax them to Monotype. We also had to (or, depending on your prespective, got the chance to) negotiate a price. This consumed quite a bit of time. <br /> <br />Moreover, Monotype’s lawyers were still grappling with some legal aspects of hosting fonts. They’re used to an older world where fonts are licensed to a customer for use exclusively within that company’s internal design team for producing printed material, or creating web imagery in which the text is baked into the image. In either case, there’s no risk to the foundry that the people who <em>read</em> the printed material or imagery are going to be able to use the fonts themselves. Hence, heretofore there hasn’t been such a pressing need to clarify what can be done with the font files. <br /> <br />Now that people want to serve up web pages using proprietary fonts, that situation has changed. The lawyers are focused on protecting their intellectual property (the fonts they own), and are nervous about controlling where those fonts get used. If site A has paid to use a font on site A, what’s to stop the folks who make site B from digging through site A’s CSS, finding the reference to the font, and using that reference on site B? <br /> <br />In our case, we asked Monotype if we could serve the licensed fonts in the emergent <a href="http://en.wikipedia.org/wiki/WOFF">WOFF</a> format, and had to wait while their lawyers finished an investigation of WOFF and came up with legal language in the contract to cover it. <br />&#0160;</li>
<li><strong>Hosting a font can entail legally-mandated server configuration.</strong> Monotype’s licensing contract stipulated measures we had to take to protect their intellectual property. Internet Explorer’s proprietary EOT font file format includes built-in DRM, but the WOFF format does not. We were forced to set up a form of Cross-Origin Resource Sharing to prevent other sites from linking directly to Cozi’s copies of the font we licensed. This didn’t take too long, but it was still annoying to deal with. <br />&#0160;</li>
</ol>
<p>These hassles will likely disappear in a year or so. When our licensing contract runs out, we’ll likely switch to a hosted solution to avoid most of the trouble above. Even when the above issues are addressed, however, moving from a stock web font to a proprietary font will entail some issues you should keep in mind:</p>
<ol>
<li><strong>Fonts that look great in simple samples may look unacceptably bad in real use. </strong>A font that looks great in print may look awful online unless it’s been specifically <em>hinted</em> for on-screen use. That is, the font foundry has to spend an insane amount of time optimizing the font for a range of specific point sizes at which the font may be used to render text. The online font stores all give you a way to see samples of the text, but (for the time being) in many cases those samples are rendered on a server, and may use better rendering than what your users will see in practice. Similarly, trying out a font in Photoshop may produce great-looking results that cannot be reproduced in a browser. The only way to ensure a font is going to look great on a web page is to actually use it on a web page. That wouldn’t be such a problem if… <br />&#0160;</li>
<li><strong>Online font stores aren’t designed for real experimentation. </strong>You generally have to buy the font before you can really try it out. While this may be a small cost ($25, say), that only covers one weight of the font. We ended up having to test about 6 weights of Avenir to settle on the two we wanted to use. This experimentation can get expensive. <br /> <br />I’ve seen a lot of fonts that with insufficient hinting, so I was particularly careful to evaluate the fonts we were considering at a wide range of point sizes. I was particularly happy to see that, just in time for our use, Monotype made available a full set of Avenir weights with improved hinting. Despite this attention on hinting, however, we still got burned a bit. It turns out that a specific letter (the lowercase “e”) looks bad a specific point size (11pt) in a specific weight (Avenir 85 Heavy) we just happen to use in some of our menus. This was easy to work around (by bumping the text size up a point), but just goes to show that you can’t be too careful. <br />&#0160;</li>
<li><strong>Type metrics change between fonts.</strong> The same text rendered in the new font may be slightly bigger or smaller than the same text in the old font. In our case, most of our web pages had been constructed well, and were resilient to this change. I don’t recall any places where we need to make a substantial change to the UI in response to changing the font. YMMV. <br />&#0160;</li>
<li><strong>The feel of the text may change. </strong>This was something of a surprise to me. While Arial (our old font) has roughly similar text metrics to Avenir (our new font), the overall feel of Avenir is lighter. This is due to a thinner stem weight; i.e., the lines that make up the characters are slightly thinner in Avenir. When we initially deployed the Avenir font, users responded that the text was too light. As it turns out, we’d previously been using a medium-dark gray (#474040) for body text in Arial — precisely to lighten Arial up a bit. So we had to tweak our colors to adjust to the new, lighter font. <br />&#0160;</li>
<li><strong>Users of older versions of Firefox, Safari, and Chrome won’t see the proprietary font.</strong> (Internet Explorer has supported them for years.) This lag can complicate the tuning of your site for the specific text metrics of your new font: optimizing for the new font can make things worse for users seeing the old font, and it’s a pain to create slightly different style sheets for both conditions. <br />&#0160;</li>
</ol>
<p>So switching from a stock font to a proprietary font isn’t quite as easy or perfect as it should be. I’m still ecstatic things have improved to the point where sites can start making real use of real fonts to achieve new levels of design expression. In five years, we’ll all look back on screen shots of sites from this age and laugh at them. Today’s web sites will look <em>old</em> — and part of what will make them look old will be their use of stock fonts.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Ken Geis
EMAIL: 
IP: 128.32.16.149
URL: http://profile.typepad.com/kengeis
DATE: 08/16/2010 10:43:38 AM
Wow.  Your post four years ago got lots of negative comments.

Can you post a before/after of your font change?
-----
PING:
TITLE: Fernanda Dowler
URL: http://www.howtoenlargeyourpeni.com
IP: 23.19.83.51
BLOG NAME: Fernanda Dowler
DATE: 09/27/2012 12:28:41 AM
I appreciate you sharing this blog.Really looking forward to read more. Great.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Lessons from adding a proprietary font to our web product
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 1
ALLOW PINGS: 1
BASENAME: lessons-from-adding-a-proprietary-font-to-our-web-product

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2010/08/lessons-from-adding-a-proprietary-font-to-our-web-product.html 
DATE: 08/13/2010 11:28:54 AM
-----
BODY:
<p>Four years ago I wrote about how <a href="http://miksovsky.blogs.com/flowstate/2006/05/what_the_font.html">impoverished</a> most UIs were when it came to rendering live text in fonts other than the small set of stock fonts generally available on all operating systems. This situation has thankfully changed recently, to the point where Cozi was able to incorporate a proprietary font in a recent redesign. We’re now using <a href="http://www.fonts.com/findfonts/SearchPage.htm?kid=Avenir">Avenir</a>, a sans serif font in the Futura vein by reknowned designer Adrian Frutiger.</p>  <p>&#160;</p>  <p>While many other sites cover the technical aspects of using fonts in web pages, I wanted to summarize some lessons I learned from a designer’s perspective. Using custom fonts is something that actually works now, but there are still hassles.</p>  <ol>   <li>There are currently two distinct routes to using custom fonts: 1) buy them and host them yourself, or 2) use a font hosting service like <a href="http://www.typekit.com/">Typekit</a> or the (free!) <a href="http://code.google.com/webfonts">Google Font Directory</a>. Using a font hosting option seems much simpler, but in my mind has some significant limitations.      <br />      <br />Depending on which service you use, your choices may be quite limited. This issue will certainly fade away quickly (a year?), but at the moment, you still don’t have access to everything you’d want. If you already have a brand identity you care about and worked to refine, it’s simply impractical to chuck it all and go with some new font just because it’s available. In our case, we selected a font that we felt was consistent with our brand values and good for both body text and data (e.g., a family calendar). The font we picked wasn’t available on a hosted service at the time, and we were willing to go to some lengths to get it.      <br />      <br />Actually getting the supplied font hosting code to work can be a hassle. Most suppliers of web componentry seems to feel that it’s fine to dictate where you <em>need</em> to stick their &lt;script&gt; tag. These solutions always work great in some toy test app, and fall completely apart when added to a large complex web application. Google actually get this right: you can host a font with a completely plain &lt;link&gt; tag. Unfortunately, Google currently offers a tiny number of fonts, none of which were appropriate for our use.      <br />      <br />Based on these factors, we elected to just license the fonts and host the files ourselves. This required a bit of pain, on several fonts.      <br /></li>    <li>The major font foundries are still just waking up to the potential of hosting. The Avenir typeface is licensed by Monotype Imaging, which earlier this year hadn’t yet released their own <a href="http://webfonts.fonts.com/">Fonts.com web fonts</a> hosting service, which meant we’d have to host the files ourselves. This required working with Monotype’s licensing group, and we ultimately had to negotiate a contract for use the Avenir font on our site. This consumed quite a bit of time, and Monotype’s lawyers were still grappling with some legal aspects of using fonts.      <br />      <br />They’re used to an older world where fonts are licensed to a customer for use exclusively within the customer’s design team to product printed material that uses the fonts, or else web imagery in which the text is baked into the image. In either case, there’s no risk to the foundry that the people who <em>read</em> the printed material or imagery are going to be able to use the fonts themselves. Hence, heretofore there hasn’t been such a pressing need to clarify what can be done with the font files.      <br />      <br />Now that people want to serve up web pages using proprietary fonts, that situation has changed. The lawyers are focused on protecting their intellectual property (the fonts they own), and are nervous about controlling where those fonts get used. If site A has paid to use a font on site A, what’s to stop the folks who make site B from digging through site A’s CSS, finding the reference to the font, and using that reference on site B?      <br />      <br />While Monotype had a boilerplate contract for licensing fonts, they’re still just barely keeping up with the technology. We asked Monotype if we could serve the licensed fonts in the emergent <a href="http://en.wikipedia.org/wiki/WOFF">WOFF</a> format, and had to wait while their lawyers finished an investigation of WOFF and adding language to the contract to cover it.      <br /></li>    <li>Cross-Origin Resource Sharing</li>    <li>hinting</li>    <li>hard to test, expensive to buy lots of weights</li> </ol>  <p>These hassles will likely disappear in a year or so. Beyond that, there are still some implications of changing fonts in a UI, e.g., to move from an old stock web font to a new proprietary font.</p>  <ol>   <li>Type metrics change. The same text rendered in the new font may be slightly bigger or smaller than the same text in the old font. In our case, most of our web pages had been constructed well enough to be resilient to this change, and I don’t recall any places where we need to make a substantial change to the UI in response to changing the font. YMMV.</li>    <li>The feel of the text may change. While Arial (our old font) has roughly similar text metrics to Avenir (our new font), the overall feel of Avenir is lighter. This seems to be mostly due to a thinner stem weight; i.e., the lines that make up the characters are slightly thinner in Avenir. When we initially deployed the Avenir font, users responded that the text was too light. As it turns out, we’d previously been using a medium-dark gray (#474040) for body text in Arial — precisely to lighten Arial up a bit.</li>    <li>had to darken color to compensate</li>    <li>WOFF browsers</li>    <li>Money</li> </ol>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: It&rsquo;s easier to imagine hiding an ad than completely redesigning a UI
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: its-easier-to-imagine-hiding-an-ad-than-completely-redesigning-a-ui

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2010/08/its-easier-to-imagine-hiding-an-ad-than-completely-redesigning-a-ui.html 
DATE: 08/09/2010 07:00:00 AM
-----
BODY:
<p>Over the past week, I’ve seen an uptick in feedback from Cozi’s users, some of it responding to a recent change we made in Cozi’s standard page template. It seems some users have perceived a significant loss of vertical screen real estate on the main family calendar page.&#0160;The odd thing is that the new layout has roughly the same vertical amount of calendar data as the old design:</p> <p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2013486079cc0970c-pi"><img alt="Calendar" class="wlDisabledImage " height="375" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f2e3fe01970b-pi" style="display: inline" title="Calendar" width="500" /></a>   <br /><em>Old Cozi design</em></p> <p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e2013486079d19970c-pi"><img alt="Calendar (new 2.5 page template)" class="wlDisabledImage " height="375" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f2e3fe1d970b-pi" style="display: inline" title="Calendar (new 2.5 page template)" width="500" /></a>   <br /><em>New Cozi design</em></p> <p>Two main changes are at work here:</p> <ol>
  <li>We <a href="http://miksovsky.blogs.com/flowstate/2010/06/evolving-cozis-calendar-ui-controls.html">simplified the layout of our calendar UI controls</a> so that they take up less room. The new design consolidates three rows of calendar controls (one from the top, two from the bottom) into a single row at the top. </li>
  <li>We redesigned our standard page template. Among other things, we moved the navigation controls from a footer at the bottom to the left side. At the same time, we moved our standard display advertising unit from the left side to the bottom. Specifically, we upgraded the unit from an IAB 180x150 Rectangle to a IAB 728x90 Leaderboard. The latter is worth more to advertisers, and hence commands higher revenue for Cozi. </li>
 </ol>
 <p>The new design should address some long-standing usability issues, while simultaneously increasing revenue — a win/win. So I was surprised when users contacted Cozi to complain that the new design showed significantly less vertical room for calendar data than the old one. There <em>is</em> a loss, it’s true: at 1024x768, the old design allows for 560px of vertical height for calendar data, whereas the new design only allows 553px. This is a loss of seven vertical pixels of data. (As it turns out, the new design could easily gain that space back if we get rid of the rounded corners in the visual design. We’re working on that.)</p> <p>I don’t think users begrudge the loss of seven pixels. I think the main issue is that the new design makes it really apparent that Cozi has to make a trade-off between the needs of its users and its advertisers. That trade-off is just a fact of life for an ad-driven business, and most people would prefer that Cozi to keep its product free for users. Virtually every user I’ve interviewed on this specific point has indicated that, in the abstract, they’re comfortable with this trade-off.</p> <p>Here, though, the user can readily see what the ad is costing them. It’s very easy for them to imagine that, if only that Leaderboard at the bottom were hidden, they’d be able to see more data. Compare this with the old design: it’s hard for someone to imagine what they would gain if the small Rectangle ad on the left were hidden. It’s harder still for a user to imagine what would need to happen at the bottom of the old design, with its multiple stacked toolbars, to allow them to see more data. The lesson here is that <em>it’s easier to imagine turning off an ad than to envision a complete redesign of the user interface</em>. (That’s, um, actually a good thing for me, or else I wouldn’t have a job designing user interfaces.)</p> <p>We’re in the midst of making further page layout and calendar UI improvements, so I’m looking forward to being able to gives users a design that they can see is unequivocally better than the old one. In the meantime, we’ve learned a valuable lesson in the user perception of advertisements in screen layouts.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Alex McCarthy
EMAIL: alex.mccarthy@gmail.com
IP: 81.210.228.224
URL: http://www.alexmccarthy.net
DATE: 08/09/2010 09:32:11 AM
Hi Jan,

Long time reader, first time commenter :)

Could the perceived loss in vertical space come from the bigger date font?

The 8th is a relatively empty day in both of the screenshots you provided, so its height is limited by the date on the left. The 8th was 105 pixels tall in old UI, and it's 112 pixels high in the new UI. If your schedule is mostly empty, you used to see 5.33 days on your screen. Now you'd only see 4.94, and you've lost half a day! Your screenshots show this: The new screenshot's schedule is less busy, but you can only see one of Tuesday's entries (compared to 3.5 entries on Monday in the old UI).

Could this have more impact than the moved ad? I haven't used Cozi before and I'm just working from your screenshots, so I might be off the mark here.

Keep up the great posts!

-Alex
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 74.203.51.134
URL: http://profile.typepad.com/jan_miksovsky
DATE: 08/09/2010 11:38:47 AM
Hi Alex,

Thanks for your kind words!

We did change our typeface (I hope to talk about that experience in a post at some point), but it has very little effect on the amount of data the user can see. The differences between the above two images aren't really controlled as well as I would like. For one thing, the two images aren't showing the same calendar: the first image was actually taken a year earlier, and it just happened that the rough date range was similar. For another thing, upon investigation, the second image was taken on a monitor with Large Fonts turned on, which in this case had the effect of making the large dates bigger. So there are several things I could have done to permit a more accurate comparison between the old design 
and the new design. Nevertheless, the key measurement being examined here (the vertical height of the total calendar data) is pretty accurate, and I think the general point still stands.

-Jan
-----
COMMENT:
AUTHOR: Michel
EMAIL: 
IP: 78.22.113.25
URL: http://profile.typepad.com/michel6
DATE: 08/09/2010 04:25:14 PM
I think the left sidebar has much to do with the perception that you're losing part of your calendar: it continues all the way to the bottom, and that makes it all the more obvious the calendar does not. 

Perhaps if you "stopped" the sidebar? Changed the bottom 100-odd pixels to a different, more neutral background colour?
-----
COMMENT:
AUTHOR: Stefan Möbius
EMAIL: 
IP: 62.154.250.75
URL: 
DATE: 08/11/2010 01:23:16 AM
Hi Jan,

Even though you're probably right in saying that most users prefer to have a free service in exchange for getting ads, I'd still like to point out that this is not true for all users. Some years ago I decided that I'd be willing to pay for a web-based mail service, just to get rid of all those annoying ads. At the time I was using Yahoo mail, but they just didn't offer ad-free service - not for any money in the world! Consequently, they lost me as a customer.

Cheers,
Stefan

PS: Let me also thank you for a very interesting blog.
-----
COMMENT:
AUTHOR: Nikki
EMAIL: nikki9696@gmail.com
IP: 208.51.208.150
URL: 
DATE: 08/16/2010 11:27:25 AM
My 2 cents: The users were ignoring the side ad (or blocked it, like I do), and the calendar was small. Thus, content appeared to go way past the left side content. The stuff you notice on the left ends at the 7, two days into the content.

Now, instead of a nice calendar control, there are text links, so your eye must read them instead of being able to glance, and you stop "seeing" content at the 9 (4 days in).

It's like those puzzles where they show the line lengths and put different size lines next to them, and you think the original line is much smaller when in fact it hasn't changed. Do an image search for "which line is longer" is see what I mean.
-----
COMMENT:
AUTHOR: Jonsatwit
EMAIL: 
IP: 24.22.141.248
URL: http://profile.typepad.com/jonsatwit
DATE: 08/18/2010 12:54:29 AM
In the old design the list of dates continues above and below the screen in the mind's eye, with the banner, the user's focus is boxed into a space about a 3rd of the overall data displayed so as to visually avoid the ad at the bottom. The controls at the top are better, but that ad placement is hugely distracting.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Closure between UI states
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: closure-between-ui-states

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2010/07/closure-between-ui-states.html 
DATE: 07/19/2010 07:00:00 AM
-----
BODY:
<p>Like the panels in a comic, the sequence of pages in a user interface requires <em>closure</em> in the user’s mind to logically connect each step with the preceding step. At each step, the user is trying to mentally confirm that the place they’ve just arrived logically follows from the action they just took in the previous step. A designer can create a smooth experience by ensuring good closure; a disjoined interface can interfere with closure, producing substantial confusion.</p> <p>Scott McCloud describes the concept of closure in comics in his book, <a href="http://www.amazon.com/gp/product/006097625X?ie=UTF8&amp;tag=httpmiksovskb-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=006097625X">Understanding Comics</a>, as “observing the parts, but perceiving the whole”. A comic reader subconsciously fills in the action that must be taking place <em>between</em> the comic’s panels in order to give sense to the story.</p> <p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f254aad3970b-pi"><img alt="At Least Jerry Never Called" border="0" class="wlDisabledImage " height="231" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201348579f653970c-pi" style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="At Least Jerry Never Called" width="240" /></a>  <br /><em>from Understanding Comics</em></p> <p>Users of a software product perform similar closure any time an interface transitions between states: the user clicks a button and a window appears; they click a link and their browser navigates to another page; they type something and a button becomes enabled. Like the comic reader, the user connects (at least subconsciously) what they’re looking at now with what they just did. The closure either helps confirm that they’re on the right track, or gives them pause to wonder whether things are amiss. Interfaces that facilitate closure produce a smooth user experience and a satisfying sense of control and accomplishment.</p> <p>Any time the interface interrupts the user with an unasked-for dialog, page, or similar state, the product runs the risk of irritating or confusing the user. Errors are often especially problematic in this regard. A user clicks a button that says, “Save”, and an error appears telling them that a particular field is required. The user must expend enormous mental effort to achieve closure between the thing they asked for, and the error they ended up with.</p> <p>Cozi recently completed an A/B test experimenting with the destination of a “Calendar” link on the Home page. Cozi’s calendar is oriented towards families, and allows a family to color-code appointments with the names of the family members who will attend. For this to work, the user has to first enter the names of their family members. Usability studies had shown that users who didn’t complete that task before entering the calendar overlooked that aspect of the product, so we were looking for ways to encourage users to perform that simple setup task.</p> <p>Users in the control condition who clicked the “Calendar” link went straight to their calendar, while users in the experimental condition went to a page that asked for their family member names and <em>then</em> took them to the calendar.</p> <p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f254ab1a970b-pi"><img alt="Home Page (Initial State)" border="0" class="wlDisabledImage " height="240" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f254ab2a970b-pi" style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="Home Page (Initial State)" width="320" /></a>&#0160;&#0160;&#0160; l<a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f254ab49970b-pi"><img alt="Calendar with Toolbar" border="0" class="wlDisabledImage " height="240" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201348579f6b2970c-pi" style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="Calendar with Toolbar" width="320" /></a>  <br /><em>Control condition: clicking the Calendar link takes the user straight to the calendar</em></p> <p><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201348579f6cd970c-pi"><img alt="Home Page (Initial State)[5]" border="0" class="wlDisabledImage " height="240" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f254ab66970b-pi" style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="Home Page (Initial State)[5]" width="320" /></a>&#0160;&#0160;&#0160; <a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201348579f6e7970c-pi"><img alt="Calendar Introduction" border="0" class="wlDisabledImage " height="240" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f254ab84970b-pi" style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="Calendar Introduction" width="320" /></a>  <br /><em>Experimental condition: clicking the Calendar link takes the user to a page to set up their calendar first</em></p> <p>The experiment results indicates that the control condition performed better than the experimental condition in getting new users to adopt Cozi. This surprised us, because earlier experiments showed that completing this simple setup task gives the user a better calendar experience. However, it seems that forcing the users through a setup task they didn’t ask for had the counter-productive result of making them less likely to use the product.</p> <p>There are likely many factors at work here, but I expect at least one factor is that the flow violated the user’s expectations. In other words, the closure between the two states in the experiment was not as satisfying. When a user clicks a link that says, “Calendar”, they expect the very next thing they see to be a calendar. That’s an eminently reasonable expectation. When the experiment didn’t meet their expectations, they had reason to believe that the <em>next</em> link they clicked on wouldn’t deliver them to their desired destination either (perhaps they were now trapped in some wizard of indefinite length) and they gave up.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Michael Zuschlag
EMAIL: zuschlag@fast-mail.org
IP: 68.163.200.154
URL: http://www.zuschlogin.com/
DATE: 07/23/2010 06:17:10 AM
Classic dilemma: Users are notorious for wanting to get to work _now_, and not bother with setup or reading documentation or taking a tutorial. So how to encourage more effective product use without diverting the users from their goals or expectations? I wonder if it’s possible to create a family member seamlessly with setting a calendar event. Maybe if the user enters a name/email that doesn’t exist for an event, the app creates a new family member with a default color. Type-ahead encourages users to select family members that already exist.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Paternalistic design
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: paternalistic-design-1

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2010/07/paternalistic-design-1.html 
DATE: 07/12/2010 07:00:00 AM
-----
BODY:
<p>A recent Cozi usability study offered an interesting example of the paternalism latent in the task of designing something for someone else. In short, a designer is often required to make decisions which are directly counter to the requests of some of their users.</p> <p>The usability subject in this study was an avid user of Apple iCal. A particular iCal feature which they repeatedly praised was its ability to show color-coded appointments in Month view. In contrast, Cozi’s Month view eschews our own color-coding scheme (which we use in our Week view and our new Day view) and presents all appointments in monochrome.</p> <p><img alt="Apple iCal Month View" border="0" class="wlDisabledImage " height="240" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20134855272f1970c-pi" style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="Apple iCal Month View" width="320" />&#0160;&#0160;&#0160; <img alt="Cozi Calendar Month View" border="0" class="wlDisabledImage " height="240" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20133f22cac1d970b-pi" style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="Cozi Calendar Month View" width="320" />   <br /><em>Apple iCal (left) and Cozi (right) views of the same calendar</em></p> <p>The iCal user insisted that they required a Month view with color-coding. They found other Cozi features like liked, but they repeatedly dinged Cozi for the lack of color in Month view. At the end of the study, when asked if they had any general comments to offer on Cozi, they returned to this point. And then a curious thing happened. As they flipped between Apple iCal and Cozi to make their point, they stopped on the Cozi calendar. They paused, then slowly began:</p> <blockquote>  <p>“Hmm… you know, now that I look at the two calendars side by side, there <em>is</em> something about the Cozi calendar. It’s cleaner…</p>  <p>“Gosh, all that color is really kind of distracting.</p>  <p>“I guess it’s easier to read the calendar without all that color. And because the one-time appointments are in bold, I can really see the stuff I need to pay attention to…</p>  <p>“Okay, I’m going to take back everything I said. I like the Cozi calendar better. Maybe if I had been using Cozi’s calendar, <em>I wouldn’t have missed this usability study scheduled today.</em>”</p> </blockquote> <p>This was the clincher. The user had in fact been completely surprised at the beginning of the appointed study time we had scheduled with them, even though we could see they had the usability study appointment on their iCal calendar. They had completely missed it in the rainbow of color.</p> <p>Design requires a degree of paternalism. The word has an unfortunate nuance; adult users are not children, and not to be treated as such. But there is nevertheless something about listening and responding to user feedback that mimics the way a parent listens and responds to requests from their children. A child may ask for all kinds of things that the parent judges to be counter to the short and long term interests of the child, the parent, the family, or society. Due to cognitive or developmental limitations, the child may not be able to arrive at the same point of view, or at least not at that time.</p> <p>Adult users are constrained by different forces. They are extremely busy, and don’t have the time, skills, energy, or interest to pursue a particular point of feedback to its logical conclusion. They use a product, something about it differs from their expectations, a response pops into their head, and they voice it—sometimes strenuously.</p> <p>That feedback has to be taken seriously, but not slavishly. Many, many users have similarly demanded that Cozi’s Month view show color-coding. It’s a reasonable request, which of course we have considered closely. From the earliest days of work on our calendar, we have tried various approaches to introduce color coding into Month view. (Cozi has the the additional challenge of showing a single family appointment that involves multiple users, each with their own color.) To date, none of our design experiments with color-coding in Month view have satisfied us.</p> <p>Maybe someday we’ll crack the design problem, and delight that we can finally give these users what they’ve been asking for. In the meantime, the consequences of following through on that feedback would so compromise the legibility of the calendar that we think it would represent a net loss in utility. (Offering color-coding in Month view via an option is another story, but the short answer there is that such options compromise things in a different way.)</p> <p>An individual user doesn’t have anywhere near the time (or, likely, the ability) to perform these design explorations on their own, or even to find and read through arguments like this one here as to why we’ve done what we’ve done. In the end, we make a conscious, paternalistic decision not to give them the very thing they’re asking for. We trust in our own judgment, then look for research like this usability study to confirm that we’ve made the right call.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Calbucci
EMAIL: 
IP: 98.117.120.197
URL: http://profile.typepad.com/calbucci
DATE: 07/12/2010 09:31:41 AM
Hey Jan, isn't this the case that people are averse to change? 

It seems on this study you showed something that was different from what the test user was used to, so he just start to name (random?) visual elements why he liked his thing best. Once he let the emotions go, he could rationalize it and really make a practical comment about the design.
-----
COMMENT:
AUTHOR: Andrey_shipilov
EMAIL: 
IP: 95.31.17.204
URL: http://profile.typepad.com/andreyshipilov
DATE: 07/12/2010 10:58:15 AM
Gosh, why I've read this...
Useless.
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 74.203.51.134
URL: http://profile.typepad.com/jan_miksovsky
DATE: 07/12/2010 01:07:03 PM
Marcelo: Yes, I think aversion to change is indeed a factor that comes up in these situations -- that is a designer often has to make a paternalistic decision to make a substantive change to a product's design toward some long-term end, despite resistance from users in the short term.

That said, in the design point described here (color-coding in Month view), I've also heard the same request from existing Cozi users. Those users weren't reacting to something new; they were asking for an improvement to something they were already quite familiar with. So aversion to change isn't the only cause of feedback like this.
-----
COMMENT:
AUTHOR: Bill Kuhn
EMAIL: 
IP: 76.28.254.73
URL: http://profile.typepad.com/billkuhn
DATE: 07/15/2010 09:57:40 PM
Isn't paternalism in design what's brought us the recent troubles with the new iPhone? And isn't the Apple paternalistic UI exactly what this study is contradicting with Cozi's own paternalism?

I guess I'm confused about who's my daddy
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Paternalistic design
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 1
ALLOW PINGS: 1
BASENAME: paternalistic-design

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2010/07/paternalistic-design.html 
DATE: 07/08/2010 03:59:00 PM
-----
BODY:
<p>Apple iCal rainbow vs Cozi monochrome with bolding</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Evolving Cozi's calendar UI controls
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: evolving-cozis-calendar-ui-controls

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2010/06/evolving-cozis-calendar-ui-controls.html 
DATE: 06/21/2010 10:57:50 PM
-----
BODY:
<p><em>[This post marks a tentative return to blogging. We’ll see how it goes…]</em></p>
<p>Spring and summer have turned out to be the busiest time of the year for design at Cozi. The driving force behind this annual cycle is the Back to School period: when parents prepare their household for their children’s return to school from summer vacation. American schools traditionally started in September after Labor Day, but various forces have moved the start of school earlier, such that roughly half the school districts now have resumed by the middle of August. As part of their Back to School preparations, parents often reconsider the way they will manage their calendar—and the family’s calendar—during the coming school year. This presents a good opportunity for Cozi, and so we are often focused on delivering new features and improvements by early August.</p>
<p>This year we’re making significant changes to the layout of the calendar page to make more room for the family’s calendar data, so they can take in more calendar information at a glance. Towards that end, there are a number of changes in the works. One change we just released today is a consolidation of various calendar commands into a single toolbar at the top of the page:</p>
<p></p>
<p></p>
<p>href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e20134849d5103970c-popup" onclick="window.open( this.href, &#39;_blank&#39;, &#39;width=640,height=480,scrollbars=no,resizable=no,toolbar=no,directories=no,location=no,menubar=no,status=no,left=0,top=0&#39; ); return false" style="display: inline;"><img alt="Calendar with Toolbar" class="asset asset-image at-xid-6a00d83451fb6769e20134849d5103970c " src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20134849d5103970c-500wi" /></a><br />After</p>

<p>Here we’ve merged three rows of user interface elements (the Week and Month buttons at the top, the appointment entry area at the bottom, and the row of buttons below that) into one. This buys us some vertical real estate, and lays groundwork for some future changes.</p><p>A toolbar is a standard user interface design pattern, but applying this design here has still been interesting for several reasons. For one thing, it’s always interesting to me to see how UIs evolve over time.</p>

<ol>
<li>We didn’t start with the proposition that we should have multiple places for commands. We started with the row of colored dots at the top, and the appointment entry area below.</li>
<li>Then we needed a place to put a Print command, and later a Send to Phone command. They didn&#39;t fit anywhere else, so we created a new row for them.</li>
<li>We added several other forms of Send to Phone, which evolved into a Phone menu.</li>
<li>When we transitioned from a Windows application to the web, we changed the UI model for calendar views, and moved the Week and Month buttons to the top. </li>
<li>We added the ability to sync with Outlook and subscribe to Internet calendars, necessitating more buttons.</li>
<li>We added some more buttons to the appointment entry area. To keep things clean, those buttons are <a href="http://miksovsky.blogs.com/flowstate/2008/06/transient-contr.html">transient controls that only appear while typing</a>.</li>
</ol>
<p>Now we’re preparing to add some more features, which would have meant even more buttons. But by now the UI is reaching a tipping point where it begins to feel clunky, and so we’ve decided to simplify the UI by consolidating the controls into a toolbar.</p>
<p>Many, many other UIs have passed through similar stages. In Stewart Brand’s book, <a href="http://www.amazon.com/gp/product/0140139966?ie=UTF8&amp;tag=httpmiksovskb-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0140139966" target="_blank">How Buildings Learn</a>, he describes a similar evolution of a house’s porch into a proper room:</p>

<blockquote>
“Porches fill in by stages, not all at once you know…. The family puts screens on the porch one summer because of bugs. Then they see they could glass it in and make it part of the house. But it&#39;s cold, so they add a duct from the furnace and some insulation, and now they realize they&#39;re going to have to beef up the foundation and the roof. It happens that way because they can always visualize the next stage based on what&#39;s already there.”
</blockquote>

<p>We’ve got more changes for the toolbar coming in the next couple of months. (And hopefully no bugs.)</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Announcing QuickUI: a fast and powerful way to create web UI controls
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: introducing-quickui-a-tool-for-creating-web-ui

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2009/11/introducing-quickui-a-tool-for-creating-web-ui.html 
DATE: 11/09/2009 12:01:00 AM
-----
BODY:
<p>Today I want to announce the project I&#39;ve been working on as a hobby for most of the past year: <a href="http://quickui.org">QuickUI</a>, a framework for creating web user interface controls. The work on QuickUI has taken the place of my normal blog writing, hence the long hiatus here on flow|state.</p>
<p><strong>Why create a web control framework?<br /></strong></p>
<p></p>
<p>I couldn&#39;t find anything</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p>
<p>This idea eventually took shape as QuickUI, and evolved into the release I&#39;m announcing today. For details and examples, including a full tutorial, please see the <a href="http://quickui.org">QuickUI</a> site. Here I&#39;ll simply mention that QuickUI currently comprises:</p><ol>
<li>The Quick markup language for defining new controls.</li>
<li>A compiler for compiling Quick markup files into JavaScript and CSS files.</li>
<li>A build tool for compiling a collection of Quick markup files and combining the generated output into a project-level .js and .css file.</li>
<li>A JavaScript library used by QuickUI controls at run time.</li>
</ol>
<p></p><p>The QuickUI compiler and build tool are themselves written in C#, and I use the tools on Windows machines and Macs (via <a href="http://www.mono-project.com">Mono</a>) alike. (For the time being, I&#39;ve posted instructions only for Windows use, but hope to document Mac use soon.)</p><p>The generated JavaScript makes use of the jQuery library to build the user interface on demand. QuickUI works well with jQuery, but should be able to interoperate with other JavaScript frameworks.</p><p>Adding a compile-time step to web UI design is, admittedly, a
hassle—but only a minor one. A small amount of tinkering with a
reasonable development environment makes it possible to automatically
invoke the QuickUI build tool whenever a Quick markup file is updated. These days I prefer Aptana Studio, and have documented steps for
integrating QuickUI into that environment on the QuickUI site. Other
tools make similar integration possible. With that in place, working in Quick markup feels only a small step removed from working in raw .html and .css files, and the productivity gains of a modular control framework quickly outstrip the minor inconvenience of compilation.</p>



<p></p>
<p></p>
<p><strong>So far, so good<br /></strong></p>
<p>I now use QuickUI almost exclusively to quickly prototype functional UI designs for <a href="http://www.cozi.com">Cozi</a>. I occasionally take recourse to PhotoShop to create image assets for inclusion in specific QuickUI controls, but the vast majority of my design work is now authored in Quick markup. The tools are good enough for my everyday use that I&#39;d never go back to working without such a framework. And, as I slowly build up a library of reusable controls, I&#39;m spending less and less time fighting old problems, and more time moving forward.</p><p>I consider the current state of QuickUI to now be minimally interesting to others, hence this announcement. Nothing’s set in stone, and any part of it could be made better.</p>
<p>If you&#39;re interested, please check out <a href="http://quickui.org">QuickUI</a> for yourself. You can post questions or comments on the discussion board there. If you like this and want to make it better, I would welcome the help.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Richard Birkby
EMAIL: 
IP: 145.62.32.129
URL: http://profile.typepad.com/6p0128756640c0970c
DATE: 11/09/2009 03:11:31 AM
The primary way to encapsulate a control is using a new block formatting context. But you don't seem to do that. So how do you localize any floats to within the control?
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 75.92.224.96
URL: http://profile.typepad.com/jan_miksovsky
DATE: 11/09/2009 09:20:52 AM
Richard: QuickUI controls ultimately manifest themselves as divs that can be styled however you want. The section on "More on styling" in the tutorial (<a href="http://quickui.org/tutorial/section11/default.html">http://quickui.org/tutorial/section11/default.html</a>) shows how to style the top level control element, i.e., the control's topmost div. So you can apply your clear, float, overflow, position, etc., there, and be able to achieve any result you're looking for.

I hadn't considered trying to set something like display: block on all controls. I've tried to make the smallest number of assumptions to start, and only add things that seem really necessary and near-universal. (I've occasionally had controls whose topmost div has, for example, display: table or inline). If you wanted to really isolate controls through some universal styling, you could define a rule on the .Control class (which is applied to all QuickUI controls). If people generally found that helpful, that behavior could get folded into QuickUI. Please let me know what you think.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Introducing QuickUI: Modular web control framework
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: introducing-quickui-modular-web-control-framework

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2009/11/introducing-quickui-modular-web-control-framework.html 
DATE: 11/02/2009 11:03:24 AM
-----
BODY:

-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Attending UIE's Web App Summit this week
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: attending-uies-web-app-summit-this-week

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2009/04/attending-uies-web-app-summit-this-week.html 
DATE: 04/19/2009 09:27:35 AM
-----
BODY:
<p>Just breaking the radio silence to say that this week I&#39;ll be down in Newport Beach, CA, attending UIE&#39;s <a href="http://www.uie.com/events/web_app_summit/2009/">Web App Summit 2009</a>. If you&#39;ll be there, let me know via a comment or mail to jan at cozi dot com; it&#39;d be great to connect in person.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Hiatus
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: hiatus

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2009/02/hiatus.html 
DATE: 02/01/2009 09:06:09 PM
-----
BODY:
<p>At the beginning of January, I set myself a goal to see if I could make at least one post on flow|state a month. January&#39;s now over, with no post. I&#39;ve had a draft of the promised follow-up to the last post on the <a href="http://miksovsky.blogs.com/flowstate/2008/10/the-shared-suff.html">Shared Suffering Hypothesis</a>&#0160;under construction for three months. (Thanks to Michael, Barry, Evan, &amp; co. for their comments, the most interesting dialogue I&#39;ve received on a post in a long while.) I still&#0160;can&#39;t find the time to finish off the darn post.</p><div><div><br /><div><div>It&#39;s sinking in that helming a startup through a stormy economy while adequately parenting three young children just doesn&#39;t leave enough personal time to do this blog justice. FeedBurner says I&#39;ve got several thousand subscribers, and I&#39;ve occasionally run into readers who offered me their encouragement (thanks, John F.!). I would prefer not to leave them wondering why there&#39;s no activity.</div><br /><div>I need less stress, not more, right now, and think the safest thing to do is declare an indefinite blog hiatus. There are still countless UI topics on which I would like to write, and I hope at some point to find the time to get some down. At that point you—and I—can be pleasantly surprised. Until then, thanks for reading.</div><br /><div>Best,</div><div>Jan</div></div></div></div>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: daves561
EMAIL: dave@ohdave.com
IP: 97.118.135.153
URL: 
DATE: 02/02/2009 11:41:03 AM
Color me understanding but sad. How about one last easy post: Two must-have books on the topic of UI design...?
-----
COMMENT:
AUTHOR: Max Howell
EMAIL: max@methylblue.com
IP: 94.193.125.246
URL: http://methylblue.com
DATE: 02/02/2009 12:12:29 PM
A real shame since some of your posts have been truly enlightening for me.
-----
COMMENT:
AUTHOR: zaine_ridling
EMAIL: zridling@gmail.com
IP: 216.229.79.10
URL: http://www.thegsblog.com/
DATE: 02/02/2009 03:33:15 PM
I encourage this. Once a year, I proclaim a tech-vacation for 1-2 months just to recharge the batteries. Besides, tech is a treadmill that never stops. And trying to keep up will kill the spark of what inspires this fantastic blog. So take all the time you need, even a year. The world will still be here when you get back, and so will we. And trust me when I say, when you do come back, we'll spread the word!
-----
COMMENT:
AUTHOR: Jennie
EMAIL: jenniewoo@gmail.com
IP: 99.225.182.119
URL: 
DATE: 05/15/2009 11:11:01 AM
Just came across your blog and have been going through the archives. Hope you return to writing - love your style and topics!
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: The economics of configuration, part 1: The value of preferences
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
BASENAME: the-economics-o

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2008/10/the-economics-o.html 
DATE: 10/08/2008 10:02:41 PM
-----
BODY:
<p>The economics of configuration is a matter of preferences, bugs, and other people. These three factors all affect user value (or, in economic terms, utility). Starting with this post, I want to look at each of these factors in turn. <p><strong>What is configuration?</strong></p> <p>In the abstract, configuration is the act of adapting a product to your needs. In the abstract, configuration can be viewed as selecting a combination of desired behaviors from a range of available behaviors. In the hardware domain, you may sometimes need to configure a product (or its software stack, at any rate) so it will work correctly with other hardware or software components. In the software application realm, configuration entails selecting program options so the product works in a manner that's optimal for you. The canonical UI is the Options, Settings, or Preferences dialog that contains controls for configuring hardware or software behavior. <p>Consider at primitive hypothetical software application, version 1.0 of which offers no end user-configurable options. Set aside the fact that this simple application sits atop a towering stack of program libraries, operating system services, device drivers, and myriad forms of hardware—all of which have their own configuration. If this is a web-based application, let's also ignore the configuration of various network layers, the long chain of networking hardware and software at every point through which the packets travel, and the servers on the other end. And set aside the reality that every piece of this puzzle hides, beyond the user-visible options, a near-infinite abyss of internal state. We're just going to focus on the application in isolation. <p>Since there are no options, this program has a population of users which are, in theory, all alike: <p>Diagram: block of 100% <p>Research into user reactions to application v1.0, alas, identifies the unfortunate fact that the above users are not, in fact, all alike in their needs. Approximately 25% of the users complain that an important application behavior, call it X, can't be changed and runs counter to their desire. These users would prefer the opposite of the X behavior, or in any event something other than X. Let's call that behavior they want "!X" (not X). <p>Diagram: 75/25 split  <p>Research suggests because application behavior X is wrong for the users on the right, the application is half as valuable to them as it is for the larger population, whom are happy with the current X behavior.  <p>Diagram: Value <p>To address this value gap, the application's designers create v2.0, which offers a single end-user option to control X. This is a binary setting that can be changed from a default value of X (the original behavior), to a new value of !X (the opposite of Foo). This <em>should</em> rectify the value equation, so that both camps should be equally happy. <p>&nbsp; <p>The bad news is that some users still complain that they don't like X—even though they have a way of controlling this behavior! Further research uncovers the fact that many of the applications users never change the program option X from its default setting. Those users may be unaware the option even exists, may not understand its value, or may not feel it's worth their time to find and change it. It's reasonable to imagine that of the users that <em>could </em>benefit from changing X to !X, only 40% may ever do so. (And for this exercise, let's ignore those users who change the setting in such a way that they're worse off than they would be if they hadn't changed it.) If we apply that to the above proposition that the 25% of the users that might benefit from changing this option, perhaps only 10% of the total actually do. So maybe the relative breakdown actually looks like this: <p>Diagram: 90/10 splits</p> <p>&nbsp;</p> <p>This means there are still a chunk of people unhappy with the way things work. That 40% of the users who live with behavior X but actually prefer behavior !X are getting half as much value from the application as the other 60%.</p> <p>While our poor application designers are struggling to find a solution, more bad news arrives. Another round of user studies finds another form of dissatisfaction, this time because of an issue with a different application behavior called Y. The X and Y behaviors are orthogonal (i.e., mutually independent). Once again, the designers decide to respond by creating a binary option with a default value of Y, and a new value of !Y. By setting these two binary options, each user places themselves into one of four subpopulations of the program's user base.</p> <p>&nbsp; <p>Let's call each user base subpopulation a <em>configuration cohort</em>: the set of people sharing a given configuration.  <p>&nbsp; <p>But both possible settings for a given option are rarely going to be equivalently interesting to equal numbers of users. There's generally going to be a bias to one option setting or another. If the designer's doing their job, then the default setting will be the setting which most users prefer. Perhaps users split 75/25 in their preference to have Foo = 1 vs. Foo = 2, and the same goes for Bar. So if every user carefully chooses these options to optimize the program for their own use, we'd end up with a balance of cohorts that looks like this:</p> <p>Diagram: 75/25 splits</p> <p>&nbsp;</p> <p>Even this split is probably not realistic enough. Many users will never change the program options from their default settings. They may be unaware the options even exist, may not understand their value, or may not feel it's worth their time to find and change them. It's reasonable to imagine that of the users that <em>could </em>benefit from changing Foo or Bar from their default setting, only 40% may ever do so. (And for this exercise, let's ignore those users who change the setting in such a way that they're worse off than they would be if they hadn't changed it.) If we apply that to the above proposition that the 25% of the users that might benefit from changing those options, perhaps only 10% of the total actually do. So maybe the relative sizes of the configuration cohorts actually looks like this:</p> <p>Diagram: 90/10 splits</p> <p>The users who change Foo and/or Bar obtain a different program experience, hopefully one more tailored to their needs. The people who benefit the most are those who carefully tune the options to their needs, or those for whom the default settings were already perfect. The people who receive the worst experience are those who would benefit from changing an option—but don't know it's there, or can't figure out how to set it, or don't have the time to bother. Alternatively, a user might have changed the setting inadvertently, or without really understanding it, to a value that's actually worse for them. If we come up with some arbitrary representation of the relative value delivered by this application to each of its configuration cohorts, we end up with something like this:</p> <p>&nbsp;</p> <p>&nbsp;</p> <p><img height="440" alt="Slide5" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e20105361402d7970b-pi" width="575" border="0">  <p>&nbsp; <p>Relative value delivered to each configuration cohort  <p>Next time: The (negative) value of bugs  <p><strong>The (negative) value of bugs</strong>  <p>Diagram value  <p><strong>The value of people</strong>  <p>Diagram value  <p>Bugs can drive people out of a cohort. A cohort can also collectively solve or identify workarounds for bugs, and thereby overcome them.  <p>In reality, configuration cohorts do not have hard boundaries. The user community for a product does not explicitly distinguish between cohorts. The social value of a cohort is really more of a distance function: the closer you are to a given cohort, the more valuable that cohort’s interactions are to you. To some degree, any two users of a product can assist each other, even when they belong to different cohorts. Nevertheless, the further you get from the default settings, the more likely you are to run into a bug that few other users have encountered, and the less likely it is that someone can solve your problem. Some of the dialogue between AX users benefits AY users, and some of the AY dialogue benefits BY users. When a BY user is diagnosing a problem with the BY configuration, information gathered by users in the AY cohort may be of some value. But it may be the case that the BY users are experiencing a problem the other cohorts don’t see, and the BY cohort is on its own.  <p><strong>The aggregate value of a configuration</strong>  <p>All three value factors discussed here—preferences, bugs, and people—combine to form an aggregate value (utility) of the product to the user. The way in which the user configures the product will affect all three.  <p>What that means for the aggregate value obviously depends on the situation. In this example, the software application may be useless to a user in the default configuration where Foo = A, but the product may be incredibly useful to them when Foo = B. Maybe Foo controls the language of the product’s user interface, and the user only understands the language B. In this situation, the user may be willing to put up even with significant bugs, so long as those values don’t entirely erode the product’s overall value to them. In another example, a crashing bug in the non-default Foo = B / Bar = Y configuration may entirely eliminate the product value, such that that configuration cohort ultimately holds no members.  <p>From my own experience, I think it’s possible to draw some general inferences about configuration. In an effectively networked user community, I believe the social value of a large configuration cohort often overwhelms the other factors.  <p><strong>What this means for designers</strong>  <p>Unfortunately, the benefits of a customized experience may be offset by a decline in program quality experienced by the user. When the creators of this program implemented the behavior of Foo and Bar, they introduced new paths through the code: portions of the code that are only executed when a particular option setting is used. Each path makes the program incrementally harder to test, debug, and fix.</p> <p>If not for this fact, the chance of hitting a bug in any given configuration should be equal:</p> <p>Relative chance of hitting a bug along given code paths</p> <p>.1%/.1%</p> <p>.1%/.1%</p> <p>But the distribution of bugs isn't going to be equal, for a couple reasons. First, among the different code paths for each option, one path is likely to be more complex than the other. Second, we must bear in mind that <strong>developers use the defaults too</strong>. Most developers, in fact, rarely use something other than the default values for most options. They're <em>constantly</em> wiping things clean so they can get things into a known good state: erasing config files, creating test accounts, running in a clean virtual machine, and so on. Of course they'll try out non-default settings for options like Foo and Bar when writing out the code which implements those options. The developer may even maintain a separate configuration profile for their own real, personal use of their own product—but even then, they're only testing one more configuration. If the developer is extremely thorough, they'll retest the complete range of option settings later when adding code that's potentially entangled with the options.</p> <p>*** running with the same hardware as the product's devs ***</p> <p>However, mature programs can easily end up with a collection of obscure options which are rarely tested regularly. (Actually, it's my experience that, on a mature program, many of its developers may not even be aware a rarely-used option even <em>exists</em>.) Automated testing such as unit testing can help, but the combinatorics implied by even a small handful of options can dictate the impracticality of testing every configuration every time. And it's worth noting that, if the team takes a pragmatic approach to testing, they really should focus their efforts on the default configuration—that's what the vast majority (81%) of their users use.</p> <p>So maybe the distribution of bugs is unequal. And if the effects of options Foo and Bar happen to be mutually independent, their bug probabilities are merely additive:</p> <p>Relative chance of hitting a bug, adjusting for defaults, if options are independent</p> <p>.05%/.2%</p> <p>.2%/.4%</p> <p>Note that a user who turns On both Foo and Bar—who's configured themselves into a state furthest from the default state—has the greatest chance of hitting a bug. Worse, it's entirely possible the code paths for Foo and Bar are actually not independent, but entangled. The entanglement might be intentional (the developer coded for the various combinations of settings) or unintentional (e.g., a code path related to Foo sets some internal program state that affects how Bar works). In that case, the further you get from the default state, the less likely you are to be traversing code paths commonly run by developers or other product team members. The rarer the combination of settings, the more likely there's a bug lying there.</p> <p>Relative chance of hitting a bug if options are entangled</p> <p>.05%/.2%</p> <p>.2%/1%</p> <p>Here there's clearly significantly more danger the further you get from the defaults. This degradation in experienced quality surely erodes user value. If we adjust the value to each configuration cohort according to its quality, perhaps we end up with an adjusted balance of user value:</p> <p>User value, adjusting for quality</p> <p>Here the users who would theoretically have benefited by configuring the settings away from the defaults actually lose less (or may even gain something) by virtue of the fact that they're sticking in a more heavily-tested configuration.</p> <p><em>Next time: The social value of configurations</em></p> <p>Last time we looked at how program options define subpopulations of the program's user based, calling these subpopulations <em>configuration cohorts</em>. I suspect which cohort you belong to turns out to be a significant, if not the most significant, factor in determining the overall value of the program to you.</p> <p>The second factor is a social one: the way you configure this program determines the degree to which your configuration overlaps with those used by other people. These other people are the most significant customer service resource to whom you have access. Even if they are not as directly connected to the product's own support personnel, these people have the benefit of using the product the same way you do.</p> <p>By selecting Foo2, they've reduced by a factor of 4 the number of people that can help them. And if the program exhibits a bug when Foo=Foo2, then only a quarter of the user base might become aware of the bug, and be motivated in collaborating on a solution. </p> <p>Suppose this product has an active user community with 10,000 members. Applying the percentages above, we get the following cohorts.</p> <table cellspacing="0" cellpadding="0" width="400" border="0"> <tbody> <tr> <td valign="top" width="133">10000 user base</td> <td valign="top" width="133">Foo = 0 (75%)</td> <td valign="top" width="133">Foo = 1 (25%)</td></tr> <tr> <td valign="top" width="133">Bar = 0 (75%)</td> <td valign="top" width="133">5625</td> <td valign="top" width="133">1875</td></tr> <tr> <td valign="top" width="133">Bar = 1 (25%)</td> <td valign="top" width="133">1875</td> <td valign="top" width="133">625</td></tr></tbody></table> <p>These fellow configuration sharers are also your fellow configuration sufferers—any problem you might have, they have too. Let's call the general set of people whose configuration overlaps with yours your "configuration cohort". If you belong to a sufficiently large cohort, your cohort members are likely to solve your problems before you even know you have them. The bigger the cohort, the more like this is. And even when the community can't solve your problem, that's helpful too, because it means there's probably no solution, and you can spare yourself the time that would have been wasted looking for one.</p> <p>The Shared Suffering Hypothesis is just another <a href="http://en.wikipedia.org/wiki/Network_effect">network effect</a>. If we make a simplistic assumption and assume that discussion board activity, etc., of members of a cohort only benefit the members of that cohort, then we can look at the above breakdown as four mutually exclusive cohorts. If we apply <a href="http://en.wikipedia.org/wiki/Metcalfe%27s_law">Metcalfe's Law</a> to those groups, we might imagine the value of a cohort to its members grows exponentially with the size of the cohort. If we plot the relative size of cohort value, a different picture emerges:</p> <p>&nbsp;</p> <table cellspacing="0" cellpadding="0" width="401" border="0"> <tbody> <tr> <td valign="top" width="133">n^2</td> <td valign="top" width="133">Foo = 0</td> <td valign="top" width="133">Foo = 1</td></tr> <tr> <td valign="top" width="133">Bar = 0</td> <td valign="top" width="133">31640625</td> <td valign="top" width="133">3515625</td></tr> <tr> <td valign="top" width="133">Bar = 1</td> <td valign="top" width="133">3515625</td> <td valign="top" width="133">390625</td></tr></tbody></table> <p>log square side = 6250</p> <p>*** apply this to the breakdown, cohort with bugs and small social value = smallest realized value ***</p> <p>You want to join the largest configuration cohort you can.</p> <p>If you leave the product settings completely alone, and use it in its default configuration, the network value of your cohort is <em>enormous</em>. The number of discussion board posts, blog posts, knowledge base articles created in response to customer service calls from members of the default cohort, etc., far outweigh the activity among the other cohorts. In terms of network value, the default cohort is more valuable than the smallest cohort by a factor of 100.</p> <p>Let's say you ignore these effects, and happily tailor the product to your needs by picking Foo = 2 and Bar = 2. Did you really increase the value of the product to you by 100?</p> <p>*** The further users configure themselves away from the defaults, the more likely they are to hit a bug—and the smaller number of people in their cohort who can help diagnose and fix it. ***</p> <p>... and are unlucky enough to hit this bug. Now you're a member of a tiny cohort: just 6.25% of the user base shares your configuration.</p> <p>Every product of any significance, be it hardware or software, is ultimately covered so well by web-based community discussions that the collective hivemind can effectively solve any problem that can be solved.</p> <p>When a designer makes a decision to add an option to a program</p> <p>The more people who share a configuration, the greater the chance someone will be able to solve any problem that arises with it.</p> <p>Every program option you change away from the default setting reduces the number of people with whom you share your configuration.</p> <p>In truth, not all cohorts are equivalently valuable to you. If you happen to configure yourself into a cohort whose members are fanatically obsessed with the product, you're in good shape. Consider the cohort of people who jailbreak their Apple iPhones. This might represents a small percentage of iPhone owners, but they're also a highly networked and communicative group.</p> <p> <blockquote> <p><em></em></p></blockquote>PC manufacturers like Dell know they can get you to spend more money if they let you configure your own box, seducing you with promises of a better PC if you just shell out another $30 for a slightly faster GPU. That strategy might maximize their profits, but it also creates a combinatoric explosion in the number of configurations, and so ultimately works against your interest.  <p></p> <p>People often point to Apple's ability to create a more stable Mac experience as a result of its closed hardware platform. The historic rationale for this was that Apple could test their OS on a much smaller set of configurations than Microsoft had to test Windows on, and thereby focus their engineering efforts on a smaller and better-understood set of bugs. I suspect that, these days, the Shared Suffering Hypothesis is at least as powerful an explanation: more users on a smaller number of Mac configurations equals more problems solved than on Windows.</p> <p>I think it's helpful to look at this principle not only from the perspective of the consumer, but from a designer's perspective as well. As a designer, every UI choice I offer my users bifurcates my product's user base, creating ever-smaller pockets of people who share the same configuration. Every choice not only increases the company's testing burden—the choice also makes it harder for our users to help themselves.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: The Shared Suffering Hypothesis, or setting things up the way everyone else does
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: the-shared-suff

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2008/10/the-shared-suff.html 
DATE: 10/05/2008 09:45:00 PM
-----
BODY:
<p>Tinkering endlessly with computer hardware and software can be fun... if you have the time. As for me, I eventually came to the paradoxical conclusion that the more I tuned a product to my specific needs, the less likely the product would actually work as intended—and the less likely I could find someone to help me when a problem did arise. Product manufacturers often tout the ability of their products to be configured to a user's idiosyncratic needs, but maybe users can most effectively minimize heartache this way:</p> <blockquote> <p><em>The Shared Suffering Hypothesis: You're best off configuring a product so as to maximize the number of other people who can help identify and resolve problems with that configuration.</em></p></blockquote> <p>Here's an example: A number of years ago I set up a media PC, eschewing the small number of commercial media PCs then available to get a tricked-out gamer PC. I maxxed every spec—video card, hard drive, etc.—and for its day, this machine <em>rocked</em>. What didn't occur to me was that, with each component I picked, I was reducing the number of other people who had the same device I had. And upon receiving the box, I wiped it and installed an early beta of an obscure OS version. Fantastic! Now I had a blazingly fast PC, the likes of which were possessed by no one else on the planet!</p> <p>I was a user community of one. When sorting through the inevitable driver weirdness and other nightmares, I had no one to turn to for help, because no one else shared this configuration or anything like it. The OEM and its component manufacturers, of course, had no experience with that OS, nor had the OS manufacturer ever tested on any of that hardware. The nascent media PC user community couldn't help either. This left me solving every configuration issue on my own. I spent hours on exciting tasks like trying to see if the PC motherboard would cope better with the hard drive configured for RAID 0 or RAID 1, or maybe I should try RAID 5? Damn, and all I wanted to do was watch TV on this thing.</p> <p>Lesson learned, when I bought a new media PC a couple years later, I abandoned impressive computer specs in favor of amassing the largest number of people who could share my problems. If I ran into a problem, I wanted a hundred other people to have already hit it and collectively solved it. I purchased a basic media PC from a huge OEM—not because they made great media PCs, but because they sold a lot of them. I purchased the most vanilla configuration possible, more or less blindly accepting the OEM's self-serving default hardware recommendations. The more defaults I could accept, the more likely it was someone else would have something like the same box I did. When the box arrived, I tried hard to avoid changing anything from the default config, and in generally avoided installing funky apps on the box. In the end, the new PC wasn't a perfect media experience—but it worked, and I spent very little time keeping it that way.</p> <p>(And now the impending forced cutover to digital cable in the U.S. is going to kill me. It's forcing me to rebuild a perfectly good media PC setup, all so that our seldom-watched analog cable TV can now be a seldom-watched digital cable TV. Once again I'll be searching for the solution that involves the least weird configuration.)</p> <p>The problem here are the economics of configuration. You'd think you'd benefit by tailing a product to your needs, but I believe in most cases that benefit is overwhelmed by the benefits of <em>not</em> customizing. And the issue has implications for software designers: each time you add an option to your product, you might be making things worse for your users, not better. I'll take a cut at that question in the next post.</p> <p><em>Next time: The economics of configuration</em></p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: NickM
EMAIL: nick@matsakis.net
IP: 209.150.60.57
URL: 
DATE: 10/05/2008 10:10:18 PM
This is one of the reasons I use a Mac. 

The smaller Mac ecosystem has long been counterintuitive in providing (in my opinion) a better experience.  I think this is a due to a confluence of factors including Apple's obsessive minimalism and an extremely enthused userbase, but the fact was that if you had a problem it was typically not too difficult to find someone else who had it too.
-----
COMMENT:
AUTHOR: Marvin
EMAIL: a@b.com
IP: 66.27.82.250
URL: 
DATE: 10/05/2008 11:21:45 PM
Couldn't agree more.

In addition to the reasons you gave there is another argument against customization which applies more to software. *You get used to it*. This:

1) Forces you to repeat customization process every time you re-install the software or the machine. If you spent 1 hour on customizing per piece of software on your box this might not seem much if spread over the span of a year or two. But then your box invariably dies, you buy/build another and now you are suddenly facing the prospect of repeating customizations for everything at once. (Yes backups and "transfer my settings" thingies help but not nearly enough).  

2) Makes it hard for you to use a machine that doesn't and/or cannot have the customizations for whatever reason. You can usually see this with people who have to fix/maintain/troubleshoot/help with something on other people boxes. Those that customize usually have a very hard time.

I used to laugh at people who used vi as their primary editor since I always installed something much more convenient and powerful on my machines. This was until I had to do lots of work on customer's Unix boxes and discovered that often times vi is the only thing available there.

These days I always buy stock machines, only install software that I absolutely need (and usually make sure I can run it from USB key if needed) and only ever tweak anything if I absolutely cannot live with the default. Saves lots of effort in the long run.

-----
COMMENT:
AUTHOR: Barry Kelly
EMAIL: bkelly.ie@gmail.com
IP: 93.97.41.252
URL: http://barrkel.blogspot.com/
DATE: 10/06/2008 02:23:18 AM
I strongly disagree with you. You plumbed one extreme and made a handful of newbie mistakes, and then, burned from that experience, you ran screaming to the safety of true mediocrity :)

On custom hardware: do not, I repeat, do not, use a non-mainstream OS.

Furthermore, think long and hard before using RAID (the boot-up driver issues / repair & reinstall are problematic) and if you do go with RAID, do not choose anything that splits one logical volume over more than one disk; i.e. choose mirroring of some kind.

On pain of random data loss, never choose RAID 0 or JBOD.

If you stick to these two things, pretty much all other problems can be dealt with in isolation. If you have problem X with hardware A, you can search on those parameters. Confounding factors of other pieces of hardware are, frankly, very rare. As long as you don't bring oddball OSes into the mix, you're in good shape.

PS: I was a computer technician for three years, during my last years of secondary school for a year out. I built and upgraded computer systems on a daily basis. I must have installed Windows 95 well over 100 times. PC hardware is very much a commodity, and it is extremely rare that you get two different pieces of hardware from the *same* generation that don't just "plug and play".
-----
COMMENT:
AUTHOR: Barry Kelly
EMAIL: 
IP: 93.97.41.252
URL: http://profile.typekey.com/barrkel/
DATE: 10/06/2008 02:26:39 AM
@Marvin - Re customization issue, I have my own special tree filled with dual-OS custom scripts and executables, so that I have the same environment whether in Linux or in Windows (Cygwin bash in rxvt).

However, in general, there is at most two days or so of pain for the initialization of a new system, and most of it is unavoidable things like installing the latest software packages, like IDEs etc. Actually customizing individual bits of software is generally done in a just-in-time basis, and generally doesn't take more than 10 minutes at most. Amortized, it doesn't add up to much.
-----
COMMENT:
AUTHOR: Christopher
EMAIL: c45207@zoomtown.com
IP: 168.7.237.182
URL: 
DATE: 10/06/2008 03:39:34 AM
And then there's Emacs, configurable to the point of being programmable. However, I still swear by it.
-----
COMMENT:
AUTHOR: Paul
EMAIL: pjhuck@yahoo.com
IP: 99.2.74.222
URL: 
DATE: 10/06/2008 09:54:48 AM
The impending digital transition shouldn't affect you at all. The switchover is for analog transmissions through the airwaves. Analog cable will continue to work fine for as long as your cable provider chooses to support it. 
-----
COMMENT:
AUTHOR: Evan
EMAIL: evanmf@hotmail.com
IP: 75.151.113.105
URL: 
DATE: 10/06/2008 10:24:04 AM
Of course when you and I worked at a certain software company on the other side of the lake, the decision on what hardware was easy, if you understood the prevailing logic.  Buy exactly what the OS developers were using for their production machines, regardless of your particular usage (developer environment, home pc, media pc, etc) you were pretty much guaranteed that it would work perfectly out of the box and that all of the drivers would exist and work perfectly :-)

That was my standard operating procedure for years and it seemed to let me have hardware that would be stable and last as long as practical.
-----
COMMENT:
AUTHOR: Peter H
EMAIL: peter@horadan.net
IP: 98.203.238.214
URL: 
DATE: 10/06/2008 10:48:30 PM
Tangentially related to your post - As I understand it the digital cutover only affects broadcast TV.  If you have cable, what comes over the cable line is up to your cable provider, and is not not at all affected by the government's Feb 17 transition deadline.  I have Comcast and so far they have stated they will continue to send analog signals over their cable just like they are doing today.
-----
COMMENT:
AUTHOR: Michael Zuschlag
EMAIL: zuschlag@fast-mail.org
IP: 12.104.27.5
URL: http://www.zuschlogin.com/
DATE: 10/07/2008 10:32:24 AM
Is this where 30 years of personal computers has brought us? Driver weirdness is "inevitable"? Getting new computers to simply work is a "nightmare"? We buy big-name computers, not because they’ve less bugs, but because they have _widely known_ bugs? We live with not-quite-right defaults because anything else could ruin our chances of fixing OEM defects? You’ve identified a new way that users have to adapt to the machine. 

A large user community engaged in handling computer failures is not a solution. It’s a sign of a dreadful problem.
-----
COMMENT:
AUTHOR: online survey software
EMAIL: papa13ear@gmail.com
IP: 76.8.195.98
URL: http://www.qualtrics.com/survey-software.html
DATE: 11/05/2008 02:00:02 PM
good thing companies are finally starting to release mac backup programs.
-jack
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Transient controls: a delicate balance between discoverability and visual clutter
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: transient-contr

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2008/06/transient-contr.html 
DATE: 06/22/2008 09:51:43 PM
-----
BODY:
 <p>Last week Cozi posted an update to our <a href="http://www.cozi.com/products/familycalendar.aspx">family calendar</a> that included a small but significant usability fix to the UI for entering appointments. In addition to a traditional form-based UI for entering appointments, the bottom of the main calendar page offers a text box in which a user can type an appointment in English:</p> <p><a href="http://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Entry%20Area%203.png"><img height="480" width="640" border="0" alt="Calendar" src="https://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Calendar_thumb.png" /></a> </p> <p>In general this UI for entering appointments works well, but usability testing had indicated that a sizable population of users would hesitate when entering an appointment. They would type the text of the appointment, then move their mouse over the right end of the text box, apparently searching for a button they could click to save the appointment.</p> <p>These users were likely conditioned by web browsers, which generally have a Go button to the right of the address field. Advanced users generally don't click the Go button (and may take steps to hide it), but many users navigate with it. We had originally left off a Go button in the interests of reducing visual clutter, and expected people would be able to figure out they could just press the ENTER key to save the appointment.</p> <p>In testing, it became apparent that we were correct, but only to a point. Most users would, in fact, eventually try pressing the ENTER key. The issue is that it would take a second or two of uncertainty before they would figure it out. We didn't like the thought of producing any uncertainty or anxiety, especially in relation to the natural-language appointment feature. That's a star feature in our calendar, and we want to show off. (Yes, Google Calendar and others have a similar feature, but we think ours is better.)</p> <p>We were reluctant to add a permanent button to the page if we could avoid it. Instead, we opted to follow the lead of Internet Explorer and Firefox and use a <em>transient control</em>: a control that's only visible part of the time. Both IE and Firefox used to have their Go buttons visible all the time, but both changed the Go buttons to a transient control that is only visible when the user is actually typing a URL.</p> <p>Here's how it works in Cozi's case. When the user enters the page, the focus is in the appointment entry text box. The text box sports hint text to let the user know what the text box is for. (Significantly, the hint text does <em>not</em> disappear when the text box has the keyboard focus—since the text box has the focus by default, hiding the hint text on focus for this field would mean the hint text was invisible when it would have been most valuable. If the user clicks on the text box, we do hide the hint text, so the user doesn't waste any time trying to delete the hint text before typing their own text.)</p> <p><a href="http://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Entry%20Area%201_2.png"><img height="53" width="640" border="0" alt="Entry Area 1" src="https://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Entry%20Area%201_thumb_1.png" /></a></p> <p>When the user starts typing, the transient Enter button appears on the far right:</p> <p><a href="http://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Entry%20Area%202_1.png"><img height="53" width="640" border="0" alt="Entry Area 2" src="https://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Entry%20Area%202_thumb.png" /></a></p> <p>When the user moves the mouse (not shown below) over the Enter button, the Enter button exhibits its hover state:</p> <p><a href="http://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Entry%20Area%203_2.png"><img height="53" width="640" border="0" alt="Entry Area 3" src="https://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Entry%20Area%203_thumb.png" /></a></p> <p>The user presses the button or types the ENTER key, and the appointment data is sent to the server to be parsed. During this round-trip to the server, the text box and its associated change to a quasi-disabled state to suggest that: a) something is happening, and b) the user shouldn't type again until the text box has left this state.</p> <p><a href="http://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Entry%20Area%204_1.png"><img height="53" width="640" border="0" alt="Entry Area 4" src="https://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Entry%20Area%204_thumb.png" /></a></p> <p>When the updated calendar data returns from the server, the calendar view updates to show the new appointment. The appointment entry text box resets to its original state to let the user know they can type again:</p> <p><a href="http://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Entry%20Area%201_3.png"><img height="53" width="640" border="0" alt="Entry Area 1" src="https://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Entry%20Area%201_thumb_1.png" /></a></p> <p>So far, this transient Enter button seems to work well, but we will continue to watch that button closely in testing. We're cautious about employing this UI technique, because it's easy to accidentally sacrifice discoverability in the name of visual cleanliness. Here the transient control works well because it manages to appear just when a user is about to start looking for it. In other cases, a user might hold their mouse still while looking around the page, and if they didn't see the control they were expecting, they might jump to the reasonable conclusion that such a control did not exist.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Dan
EMAIL: flowstate@dan-gottlieb.com
IP: 170.148.10.44
URL: 
DATE: 06/23/2008 06:40:28 AM
Um, what about the obvious - changing the hint text to: "Type appointment here and press Enter"?  We've found that works great for our search box.
-----
COMMENT:
AUTHOR: Brian Smith
EMAIL: brian@briansmith.org
IP: 70.253.63.102
URL: http://briansmith.org/
DATE: 06/23/2008 07:27:02 AM
I agree with Dan. If you want to avoid having the button on the screen all the time then you just need to make the instructions clearer.

Even the hover state of the button is so muted that it will hardly be noticed. It isn't distracting at all. I would guess that you could leave the button visible all the time and no users would be bothered. Did you test that out in your usability lab?
-----
COMMENT:
AUTHOR: Mihai
EMAIL: mihnita@yahoo.com
IP: 192.150.10.200
URL: 
DATE: 04/21/2009 10:13:16 AM
Sounds cleaner.
I did not use your calendar, but my first reaction to "Type appointment here" was that it is going to do a search in the existing appointments (again, maybe conditioned by browsers).
I had to read the blog to figure out that type + Enter = add new appointment. And it still does not feel right.

Maybe changing the hint to something like "Type here to add appointment" or something along these lines might help?

-----
COMMENT:
AUTHOR: aion kinah
EMAIL: huangzhongtang@163.com
IP: 58.212.4.81
URL: http://www.playerassist.com/aion/
DATE: 07/06/2009 12:06:07 AM
I did not use your calendar, but my first reaction to "Type appointment here" was that it is going to do a search in the existing appointments (again, maybe conditioned by browsers).
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Halfway done moving into the cloud
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
BASENAME: whats-left-befo

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2008/06/whats-left-befo.html 
DATE: 06/04/2008 10:22:31 PM
-----
BODY:
<p>Recently I was able to take another step toward moving my digital life further off the local desktop and completely into the web-based cloud. In this case, the event was finally setting up a system for automatically syncing my entire documents tree across the constellation of computers I use at home and at work.</p> <p>I'm using SugarSync, which does a reasonably nice job of making this easy to set up. The first version had a bug, but they seem to have fixed it in their latest release—and they even got back to me when they fixed it. I prefer SugarSync over two other tools I tried: FolderShare (stagnant product, didn't work behind our corporate firewall) and Groove (ridiculously complicated, and generally confused about what it wants to be). There are others you can find, I'm sure some do the job at least as least as well as SugarSync. It doesn't matter; file sync is just a commodity.</p> <p>*** SugarSync screenshot ***</p> <p>I feel like I'm about halfway through the transition from the desktop to the cloud. What's left?</p> <ol> <li>Web file associations. On my PCs, I can indicate that I want to use app Foo to edit .foo documents. There's still no general way to do this across web sites. Some specific services are beginning to make app-to-app integration deals. For example, *** (somethingbox) is a backup service that lets you open files stored in the cloud using Zoho. This is similar the way some early DOS and Windows applications built specific app-to-app connections, but has a long way to go before the user can mix and match freely.  <li>Web service associations. As above, but for services like email or chat. I can tell my PCs I use Microsoft Outlook to read email, and then all sorts of apps will defer to that preference when they want to send email. This is just beginning to happen in web browsers. Firefox 3, for example, lets you establish which web-based email client you want to use to handle mailto: links on web pages—but only if you follow ridiculously long *** instructions***.  <li>A real web-based email+PIM. Probably 75% of my work at my desk is done in Outlook, and I use make broad use of its extensive feature set. I have spent years refining my system for managing incoming email, and the system makes specific use of several Outlook features. Existing web-based email clients do offer email management tools, but with nowhere near the flexibility I need to impose my system on the email client instead of the other way around. Furthermore, none offer the rich integration with a full-featured calendar and contact management product. Gmail probably comes the closest, but for me it's just not rich enough. YMMV.  <li>A real web-based text editor. At work I use a variety of hosted web services that offer rich text editing: SocialText for our company wiki, TypePad for blogging, Google Documents for word processing. When compared to Microsoft Word, these apps are toys. Some people may hate Word's UI, I like it and am well used to it. When I hear most people talk about Word's features, they tend to do things like count menu items or count toolbar buttons. Most of them never mention the truly vast number of tiny details that comprise the bulk of Word's behavior. For that matter, designers of web-based word processors seem to overlook those details too. Microsoft Word does more work fixing up spaces and punctuation for me after a cut-and-paste operation then a web-based text editor does for me all day.  <li>Cloud storage of favorites/history integrated into the browser.  <li>settings/desktop window arrangement  <li>Browser-driven web-based screen saver. I use one screen saver on all my PCs: Cozi's own Cozi Collage photo screen saver, naturally. (Try it! You don't need an account.) I'd like to be able to express this preference only once, but there's no standard way to build a screen saver that lives completely on the web: every OS makes you install local bits.  <li>Browser-based entertainment system. I like Hulu for web TV, and somafm is my current favorite source of streaming audio, but there's no web-based world that puts it all together.</li></ol>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Looking for concrete research on impact of animated ads on user experience
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: concrete-resear

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2008/05/concrete-resear.html 
DATE: 05/15/2008 09:08:22 PM
-----
BODY:
<p>I find myself faced with the question of whether to accept animated ads in an ad-based product. An animated ad likely detracts from the user's experience—everyone says they dislike them—but to what degree? I'm finding it difficult to find persuasive research quantifying that effect.</p>



<p>It's relatively easy to find data on the side of the advertiser or the site showing the ad. An animated ad will likely be noticed by more people, and can have higher click-through rates, which is what an advertiser is looking for. Accordingly, a site willing to show an animated ad can charge a higher premium for such an ad over a static ad. Animated ads = more revenue. It's hard to argue with that—especially at an ad-funded startup.</p>
<p>To put the potential revenue upside in perspective, I'm looking for concrete research on the impact of animated ads on the user experience. Here's the kind of research that would be most helpful:</p>

<ul><li>Hard data. An anecdotal personal claim that, &quot;I refuse to use a site that shows an animated ad&quot;, holds little weight. Same goes for claiming, &quot;Everyone hates animated ads... obviously!&quot; If everyone hates animated ads, then it should be easy to find research proving that point.</li>

<li>Focused on the actual effect on site usage. The little research I can find seems focused on user opinions. (<a href="http://www.useit.com/alertbox/20041206.html">Example</a>, from Jakob Nielsen's AlertBox) I don't want to know whether people like animated ads—I want to know how much they actually impair site usage, or diminish a site's brand, or drive people away.</li>

<li>Recent. I can't use a study done way back in the halcyon days of
1997 when the web was fresh and new and people didn't think there
should be ads in it anywhere.</li>

<li>Expressed in money terms. It'd be helpful to find, for example, a case study comparing a site's gain in ad revenue from the introduction of animated ads with the monetary downsides (if there are any) of those same ads.</li>

<li>Objective. A tiny study done by a user interface designer with a personal bias may not help. A large study done by a company that's taking the long view, and trying to balance revenue with customer satisfaction would be better. A peer-reviewed scholarly paper on the topic would be ideal.</li></ul>

<p>Any timely pointers here would be helpful in making this decision. Thanks.</p>
<p><em>Updated 6/22/08: A big thanks to Michael who </em><em>in the comments </em><em>posted links to a pair of relevant papers. Those papers were very helpful to us in deciding whether to accept animated advertisements. We ultimately did decide to accept animated ads, but did put in place some guidelines that we hope will keep out the more egregious uses of that medium.</em></p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Michael Zuschlag
EMAIL: zuschlag@fast-mail.org
IP: 68.163.182.138
URL: http://www.zuschlogin.com/
DATE: 05/16/2008 10:39:25 AM
These show animation hurts user performance on objective measures, hitting four out of your five requirements:

http://melody.syr.edu/pzhang/publications/JAIS00_Zhang.pdf
Zhang, p (2000). The Effects of Animation on Information Seeking Performance on the World Wide Web: Securing Attention or Interfering with Primary Tasks? Journal of the Association of Information Sciences, 1(1) (March) Article No. 1.  

http://thoughtcrumbs.com/publications/TOCHI05.pdf
Burke, M., Hornof, A., Nilsen, E., & Gorman N. (2005). High-Cost Banner Blindness: Ads Increase Perceived Workload, Hinder Visual Search, and Are Forgotten. ACM Transactions on Computer-Human Interaction (TOCHI), 12(4) (December).

I don't think there's much doubt that animated ads harm the user experience. Translating that into dollars is going to be difficult. Even if you find a study where a _particular_ site add/loss revenue from adding/removing animations, it would be a leap to assume that it'll work the same for you.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Showing the complete range of choices in a grid
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: using-a-grid-of

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2008/04/using-a-grid-of.html 
DATE: 04/13/2008 09:14:22 PM
-----
BODY:
<p>The previous post on Cozi’s updated family calendar reminded me to point out a small but interesting aspect of the Cozi calendar UI that’s worked out rather well. As it turns out, the UI in question is in the Settings area of the product—an area where interesting design opportunities are often overlooked in the haste to get that peripheral stuff out of the way so one can get back to designing core features. </p>
<p>During Cozi's early family research, we met parents who liked to color-code calendar entries according to the person or people involved in the appointment. Accordingly, Cozi lets families color-code appointments in the calendar. (Color is used as a shorthand; it’s not the only way of seeing who an appointment is for, so color blind users need not worry.) Cozi picks a color for each family member by default, but since color is a highly emotional element, we wanted to offer a way to let family members choose their own color.&nbsp; </p>
<p>We had the following constraints in mind for our color settings UI:&nbsp; </p>

<ol> <li>The available colors should all be attractive and work well with the overall Cozi color palette.&nbsp; </li>

<li>The UI should ensure each family member ends up with a unique color for each family member, otherwise the family won’t be able to tell whose appointments are whose when scanning the colors. </li>

<li>The colors need to cover a sufficiently broad range that each family member can get a color they like.&nbsp; </li>

<li>The palette from which colors are chosen shouldn’t contain colors that are too similar. If one family member chooses dark blue and another a slightly darker blue, they’ll never be able to tell them apart.&nbsp; </li>

<li>It shouldn’t be hard for a family to collectively choose a set of colors that all work well together. This is a challenging design constraint: once you’ve got about 6 colors in a palette, your choices for each additional color are either going to start running close to your existing colors, or else create the potential for ugly combinations. Some applications like Microsoft PowerPoint have a sophisticated color model to help people create reasonably attractive combinations of colors. (Alas, they still can’t prevent the determined user from creating something hideous.) We didn’t have the capacity to develop such a model, and needed something simpler.&nbsp; </li>

<li>As a consequence of the above point, the palette of choices should be as small as possible. The smaller the palette, the smaller the chance of a clashing disaster. Here Cozi’s targeted focus on families works in our favor, since we can optimize the UI for the demographics of a family. Our database schema allows a maximum of 10 people per household, but in practice our sweet spot is families with 2-4 children. A family with two parents and two kids gets 5 colors: 4 colors for the family members, plus an additional color to represent appointments for the whole family. We eventually settled on a palette with 16 colors. This is sufficient to satisfy the above constraints and still leave some breathing room. (In any given family, there are certain to be colors liked by none of the family’s members.) </li>

<li>A family should be able to have some fun picking the colors.</li></ol> <p>Our starting point for the design was fairly standard: we listed out the names of the family members, and next to each name put a dropdown color picker. You can see something similar in other applications that let users choose a set of colors from a large palette. Here's a clean example from Microsoft PowerPoint 2007's &quot;Create New Theme Colors&quot; dialog, which lets users select twelve colors from a large palette that is revealed when a dropdown color picker is clicked: </p>
<p><img width="265" height="431" border="0" alt="PowerPoint Theme Colors" src="https://miksovsky.blogs.com/flowstate/WindowsLiveWriter/PowerPoint%20Theme%20Colors_thumb.png" />&nbsp; </p>
<p>One wrinkle in using a design like this for our calendar settings UI was created by requirement #3 above: the need for unique color mappings. This is an instance of a cross-field validation rule: the validity of one field value may depend upon another. In a UI like the one above, it’s hard to come up with a good design to communicate cross-field validation rules without confusing or irritating the user. Suppose the colors must be unique, and the user wants to swap the colors in field A and field B. They try to change B’s value to the value in A, but the field complains that B's value duplicates A's value—and forces the user to fix field B before they can leave it. This is terrible! They’re forced to clear B (or assign some temporary value to B), go to A, change it, and come back and enter the desired value in B.&nbsp; </p>
<p>One solution is to leave such cross-field validation rules until the user tries to commit the whole form. Alternately, you can deliver the feedback about the need for uniqueness modelessly. The problem with either solution is that the user ends up being surprised: just at the point they think they’re done, they have to go back and rethink their entries. You can try to let them know the uniqueness requirement up front via instructional text, but most users aren’t going to read it, so you’d probably just spend some screen real estate for nothing.&nbsp; </p>
<p>Our strategy in such a dilemma is always to refer back to our family domain and see whether we can optimize for it. Here, we see that the above UI allows for an arbitrarily large palette, but we don’t need that: we only have 16 choices for each color. And the typical user will only need to pick 3-5 colors. Instead of displaying the palette in a dropdown, we display all the available choices in a row:&nbsp; </p>
<p><a href="http://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Cozi%20Calendar%20Colors.png"><img width="640" height="432" border="0" alt="Cozi Calendar Colors" src="https://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Cozi%20Calendar%20Colors_thumb.png" /></a>&nbsp; </p>
<p>The immediate advantages of this approach is that the user can see all the color choices at a glance, and they can make a choice with a single click (instead of having to spend one click revealing the dropdown palette, and another to make a selection). But the true benefit of this approach is that <em>the user will infer the requirement for uniqueness</em> without it needing to be enforced. In usability tests, we see users intuitively grasp that they should pick a color from any given column no more than once. They can work that out on an intellectual level, of course, but the UI makes that easier to see. With that in mind, we were able to relax the enforcement of unique color selections—the user takes care of that on their own. This lets us deal handily with situations like the need to swap color choices. And, finally, people seem to enjoy using the UI to pick colors. </p>
<p>This design approach could be applied in other situations. It's quite similar to what you find in online surveys. The design requirements here are slightly different, but the final result still shares the presentation of the complete range of choices: </p>
<p><a href="http://miksovsky.blogs.com/flowstate/WindowsLiveWriter/SurveyGizmo%20Template.png"><img width="510" height="160" border="0" alt="SurveyGizmo Template" src="https://miksovsky.blogs.com/flowstate/WindowsLiveWriter/SurveyGizmo%20Template_thumb.png" /></a><br /><span style="font-size: 0.8em;color: #666666;">from <a href="http://www.surveygizmo.com/">SurveyGizmo</a></span> </p>
<p>It's well understood that a dropdown control will generally be more compact than a set of radio buttons, but in situations where the same dropdown control is repeated across multiple rows, a grid of radio buttons can be efficient as well. Each column only needs to be labeled once, so the individual radio buttons don't need their own labels. (The color swatches in the Cozi design are effectively self-descriptive radio buttons that don't even need column labels.) And though the repeated controls take up considerable space, they afford the user the ability to quickly apprehend relationships between field values. In the Cozi color UI, the user can spot-check whether each color has been used only once. And in the survey UI, the user can quickly perceive the balance of their responses across the range of choices. </p>
<p>If you have a similar settings UI in your own product, perhaps with dropdown controls, consider whether the set of choices is small enough that you can display the complete range in a grid. </p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Michael Zuschlag
EMAIL: zuschlag@fast-mail.org
IP: 12.104.27.5
URL: http://www.zuschlogin.com/
DATE: 04/14/2008 06:40:44 AM
Is it a problem of the user realizing colors should be unique, or realizing when one is considering a non-unique color? I suspect the same effect can be had without using more space by the dropdown listing the name(s) of the user beside each “taken” color. However, there are other advantages of listing choices in a row rather than using a dropdown that can make it worth the real estate:

1. Single click selection is faster than the two clicks needed for a dropdown, making it especially desirable for frequently changed items.

2. Lets the users see all choices at a glance (no click) so they can more quickly evaluate if there’s anything they like better than what they have already.

3. It self-documents the item better. For example, consider the item labeled “White Balance” with a dropdown value of “Tungsten”. As opposed to, what, Molybdenum? With a list, the user can sees other choices of Sunlight, Shade, Fluorescent, Candle, establishing that white is balanced depending on the light source.
-----
COMMENT:
AUTHOR: Ryan Hennig
EMAIL: rhennig@microsoft.com
IP: 131.107.0.105
URL: 
DATE: 05/13/2008 08:20:39 PM
Mike, this is an interesting design question.  I have a suggestion that would be cool to try:

- Create a 4 x 4 grid of regions colored in each of the 16 colors available.  
- Family members appear as floating icons with their name and a tiny face photo
- To assign a color, you drag and drop the icon onto the region. If somebody is already there, they are "bumped" out, perhaps onto the color that the new person was at previously.
- Intelligent defaults: people are initially preassigned to the most commonly chosen colors for their gender/family role/whatever
- Instant feedback: A "preview" area (or even their actual calendar) shows how several color coded appointments will appear on the calendar with the color scheme as each choice is made.

This is intuitive because each color becomes a "territory" which only one person can have at a given time.  Note that I've intentionally ignored the implementation effort and just focused on making a cool interface.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Cozi calendar UI overhaul
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: fit-and-finish

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2008/04/fit-and-finish.html 
DATE: 04/02/2008 09:57:24 PM
-----
BODY:
<p>It's been way too long since I was last able to post here, mostly because having three small children equates to having zero personal time. Still, work has been productive. Today Cozi posted an update to the web version of our <a href="http://www.cozi.com/products/familycalendar.aspx">family calendar</a>. Our web calendar has long lagged behind the PC version, but we've been working hard to correct that, and today's release represents a big step towards that goal.</p> <p>Before today, the calendar was a bare-bones UI that looked like this:</p> <p><a href="http://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Calendar%20-%20Old.png"><img width="640" height="462" border="0" src="https://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Calendar%20-%20Old_thumb.png" alt="Calendar - Old" /></a> </p> <p>The new calendar looks like this:</p> <p><a href="http://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Calendar%20-%20New.png"><img width="640" height="462" border="0" src="https://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Calendar%20-%20New_thumb.png" alt="Calendar - New" /></a> </p> <p>We still have a long list of improvements in the works for the calendar, but this latest public release already includes a range of large feature enhancements and small fit-and-finish details that collectively make the new calendar, IMHO, quite polished for an AJAX UI:</p> <ul> <li>Asynchronous loading of appointment data. We used to reload the entire page whenever we needed to display new calendar data (e.g., when adding an appointment). Now we just refresh the days we need to.&nbsp; </li>

<li>Infinite scrolling. The old implementation would only let you see one week's worth of appointments at a time. Movement between weeks was generally managed with &quot;Previous Week&quot; and &quot;Next Week&quot; links. The new UI uses infinite scrolling, so the user can move as far into the future (or past) as they need to with just the scroll bar. This work dovetails with the aforementioned async loading of data. </li>

<li>Complete typography overhaul. Improved margins and leading make it easier to visually parse the information into three vertical columns and a large horizontal row for each date. This included details like right-aligning the color-coded family member dots so that they are visually grouped with the appointment subject. </li>

<li>We took extreme pains to line up the start times and end times by the colons to improve legibility. This was somewhat at odds with our desire to follow proper typographic convention and separate times with an <a href="http://en.wikipedia.org/wiki/Endash#En_dash">endash</a> instead of a hyphen. Using an endash with vertically-aligned colons produced a situation in which a bit of extra white space would appear before end time that had a single hours digit. That is, &quot;–<span face="Courier New">&nbsp; 3:00</span>&quot; would have more interior space than <span face="Courier New">&quot;</span>–<span face="Courier New"> 12:00</span>&quot;. We finessed this by using an endash when the end time has a single digit hour, but a hyphen when the end time has a double digit hour:<br /><br /><img width="135" height="112" border="0" src="https://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Cozi%20Calendar%20Timetable.png" alt="Cozi Calendar Timetable" /> <br /><br />For all we know zillions of other people have done the same thing, but we think this bending of the rules lets you produce a clean and highly legible timetable with plain HTML.<br /> </li>

<li>Tuned the color of all text elements in the calendar data. Dates are shown in color, body text in gray. For contrast, the subjects of a non-routine appointment (something that doesn't happen weekly) are set in black to make them stand out—since those are the appointments a family needs to focus their attention on. </li>

<li>Placed the day of the week over the date. Users of a family calendar are extremely interested in what's happening during the coming week, and much less so in what's happening months away. Placing the day of the week over the date reflects that priority. </li>

<li>Tweaked the background color banding on alternate days to make it a bit more prominent. This is really hard to get right so that it's perceptible on all monitors, but not overpowering on monitors with excessive contrast. </li>

<li>Revised the UI controls for selecting the family member whose calendar you want to look at. The old design had big tabs, which users immediately understand, but they occupied more space than was justified by their relatively infrequent use. We took the opportunity to more explicitly present the list of names as a legend for the color-coded dots. </li>

<li>Added gradients to the colored bars at the top and bottom of the calendar. These are done as a series of one pixel-high DIVs so that we can easily swap out the gradient based on the current family member's color without needing to store a ton of images. </li>

<li>Cleaned up element margins overall. </li>

<li>Tightened borders around the natural language appointment entry area at the bottom. </li>

<li>Shifted the little triangle that had been to the left of the text box so that now it's inside the box. That triangle is one of a pair of triangles used to visually imply a connection between the text box and the calendar: the triangle on the calendar indicates the day where new typed appointments will go (if you don't type a date). Moving the bottom triangle inside the box more clearly connects the two triangles: they're now directly horizontally lined up, and they can now both share the same black color. (Users will readily infer a connection between two elements on a page if they share a color.) </li>

<li>Shortened the hint text inside the text box. Although being able to double-click a day to create an appointment is a useful shortcut, users can find it on their own without instruction. </li>

<li>In that same area, replaced the &quot;What can I type?&quot; link (which was spec'ed as white, but had ended up as black due to a bug) with a smaller question mark icon. </li>

<li>Cleaned up the &quot;Home&quot; button script in the upper left. We'd previously used <a href="http://www.mikeindustries.com/sifr">sIFR</a> for this and other instances of &quot;handwritten&quot; text in the product. It's a nice bit of technology, but in this case the text was static, so using Flash was complete overkill. Now it's a simple transparent PNG (or a <a href="http://blogs.cozi.com/tech/2008/03/transparent-png.html">transparent PNG8 in IE 6.x</a>). </li>

<li>Cleaned up the mini-calendar on left. The mini-calendar now shows a minimal set of information and controls in its normal state (when the mouse isn't over it). This keeps the UI clean. When the user moves the mouse over the mini-calendar, various navigation controls appear for navigation to the previous month, the next month, and today. In the rollover state, the mini-calendar also shows the dates at the end of the previous month and the dates at the beginning of the next month. This makes it quicker to navigate to dates just outside the current month. We've built this calendar by styling the <a href="http://docs.jquery.com/UI/Datepicker">jQuery UI date picker</a>, which has worked well in practice. </li>

<li>Added advertising in the left pane. Hey, we have to pay for all this work somehow! We've been careful to keep advertising separate from the family's calendar content on the right.</li></ul> <p>Overall, we're quite happy with the result. We have more improvements to the Cozi calendar in the works, and are eager for those to see the light of day too.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: squidbot
EMAIL: funtech@gmail.com
IP: 66.162.141.132
URL: 
DATE: 04/03/2008 03:05:32 PM
"Placed the day of the week over the date." 

Yay! This was my #1 frustration with the UI.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: A brief history of button visuals
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
BASENAME: a-brief-history

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2008/02/a-brief-history.html 
DATE: 02/03/2008 09:50:31 AM
-----
BODY:
<p>Buttons: <p>DOS or character mode windows <p>Mac with Chicago <p>Win 3.1 <p>Win 95 or Next <p>tricked-out Flash button or web button -- Kai's power tools? <p>OS/X <p>Office 2007 <p>forces: <p>give button proper degree of prominence <p>make it look clickable -- affordance <p>distinguish it from nearby controls <p>respond to mouse/keyboard actions -- show that it's listening make it big enough to read make it big enough to let the user know what it does make it big enough to be easy click -- Fitt's Law stay out of the user's way and let them focus on data/content/task</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Looking forward to seeing Facebook apps drop their pointless mystery
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: facebook-applic

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2008/01/facebook-applic.html 
DATE: 01/27/2008 09:53:00 PM
-----
BODY:
<p>Consider the following hypothetical computer experience:&nbsp; </p><blockquote> <p><em>One day a friend of yours sends you a one line email saying, &quot;Hey, check out FooBar!&quot; That's all the message says. &quot;Okay&quot;, you're wondering, &quot;What the heck is FooBar?&quot; You follow the link to the FooBar site, and all you can see is a EULA check box and a &quot;Sign Up&quot; button. You have no idea what FooBar does, so you're reluctant to entrust any information to this site. Before leaving, you notice a tiny link that says, &quot;Learn more about FooBar&quot;. You click it, and are presented with the FooBar logo and a short paragraph that says that FooBar is pretty cool. You're still confused about what it does because you can't actually get inside and see it for yourself. Finally, overcome with curiosity about why your friend would recommend the site, you give in and click the Sign Up button.</em>&nbsp; </p>
<p><em>Once inside the site, you realize the site is stupid, and wish you'd never signed up. You later discover that all your friends have just received a one line email from you saying &quot;Hey, check out FooBar!&quot;</em></p></blockquote> <p>This, in a nutshell, seems to be the experience of trying the typical <a href="http://www.facebook.com">Facebook</a> app. Granted, in Facebook, the above experience would generally take place entirely within the world of Facebook (with its own messaging system, etc.), but I think the story captures the basic pointless mystery of it all.</p> <p>I've been watching with interest how Facebook's application model will pan out, particularly the user experience of engaging with an application: discovering it, learning about it, adding it to one's profile, and using it. A while back I noted how many companies were busily removing <a href="http://miksovsky.blogs.com/flowstate/2007/05/hurdles_in_the_.html">hurdles at a site's entrance</a> so people could experience a product's value (or at least a taste of the product's value) before committing to the product. Facebook, in contrast, seems to be confidently bucking this trend with the apps that live on top of its platform. </p>
<p>On the one hand, Facebook users can quickly add a new app to their profile because they don't have to reenter personal information for each app. However, in my opinion, this advantage is overwhelmed by the <em>de facto</em> requirement that a user add a Facebook app to their profile before they can derive any meaningful value from it—or even understand what it does. </p>
<p>The first point of contact you may have with an app may be when it tries to catch your attention in your feed: </p>
<p><img width="461" height="73" border="0" alt="Facebook News Feed - Friend Added Application" src="https://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Facebook%20News%20Feed%20-%20Friend%20Added%20Application.png" /> </p>
<p>Many apps are deliberately coy about what they do before you install them. Many (or sometimes all) of the links in the feed entry will require that you first add the app to your profile: </p>
<p><img width="649" height="410" border="0" alt="Facebook Add Super Wall" src="https://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Facebook%20Add%20Super%20Wall_thumb.png" /> </p>
<p>If the anecdotal accounts of my friends are anything to go by, at this point most people just go ahead and click the big Add button. A curious user can read the laconic and non-descriptive Developer's Description. An especially cautious user can click the tiny &quot;More information about &lt;application&gt;&quot; link to view an About page: </p>
<p><a href="http://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Facebook%20Super%20Wall%20(Full).png"><img width="248" height="480" border="0" alt="Facebook About Super Wall" src="https://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Facebook%20Super%20Wall%20(Full)_thumb.png" /></a> </p>
<p>If you do add the application, unless you're careful to uncheck &quot;Publish stories in my News Feed and Mini-Feed&quot;, you'll end up telling all your friends that you've just added the app to your profile (in the manner of the original news feed entry shown above). The app has enlisted your unwitting help in perpetuating its pointless mystery. </p>
<p>That mystery would, in fact, seem to be the basis for the viral distribution model of many Facebook apps. I have trouble with this approach, being founded on a disregard for a user's intelligence and precious time.This model relies entirely on mystery to entice you add the application—and then banks on the fact that, once you add an application to your profile, you'll just leave it there rather than remove it. This is fundamentally deceptive. </p>
<p>(The deception is compounded in cases like the one above, in which the app developer has deliberately incorporated a <em>huge </em>amount of white space into their description. Below the app's description, Facebook displays commentary from friends and other users of the app about the app itself. The obvious purpose of incorporating lots of white space into the description is to push all the commentary far below the fold, the better to leave the app's potential users uninformed.) </p>
<p>That a Facebook app would hide information about itself suggests the app offers no persistent, real value. If it were actually valuable, the app would employ all the means at the disposal of a normal web site to balance the amount of value they provide to user with the degree of commitment they require from the user. For example, a normal site might let a curious potential customer: start a process but not finish it; read content but not write content; do something a fixed number of times; use the site for a trial period; perform certain basic operations but not other, more interesting ones; etc. Even the most brain-dead web site at least presents information about itself <em>first</em>, before making you sign up for the site. The first generation of Facebook apps generally forego all these techniques in favor of an all-or-nothing requirement that you add the app to your profile. </p>
<p>Remove a Facebook app you don't like is not hard, requiring a simple click on the little &quot;X&quot; in the app's profile box. Still, it's a tiny bit of work, and the work adds up with every app you try. I have to believe that most people will eventually tire of removing applications, and therefore tire of adding them. That in turn means the Facebook world is biased in favor of the first set of Facebook apps a user comes into contact with (i.e., all the apps used by their initial Facebook friends), and impairs the ability of later apps to succeed. </p>
<p>One could argue that it's in the interests of Facebook and an app's developer to force a user to agree to an app's terms of use before they can use it. And yet somehow the rest of the Internet doesn't have this problem. In the normal web, users implicitly agree to a &quot;browse wrap&quot; agreement whenever they visit the site, conferring a degree of legal protection to the site. Presumably this same level of protection extends to browsing Facebook apps, so it's unclear why Facebook would be more concerned about this than sites on the open web. </p>
<p>I also find it hard to stomach the presumption that, when you add an app on Facebook, by default the platform and app presume to advertise that the app is now part of your identity. That's absurd. <em>You haven't even seen what the app does.</em> What else in the world works this way? When you pick up a book in a bookstore to <em>consider</em> buying it, are you really prepared to declare to everyone you know that you've picked up the book? The news feed entries about adding applications seem like nothing more than spam. They do, however, also also serve Facebook's ulterior goal of giving every user the illusion of social activity, regardless of how many friends they have or how active those friends are. </p>
<p>All the behavior described here appears to stem from a combination of deliberate platform limitations, unintentional platform limitations, <em>de facto</em> conventions that arose around the plaform's first apps, and plain bad design. A newer generation of apps do let you see a tiny bit of their functionality before you the add the application to your profile, but what you can see is generally still a very limited subset of what the app does. </p>
<p>Regardless of their intent, it's fascinating to see Facebook facilitate such a closed app adoption model—and still create a successful and vibrant application platform. Clearly there are a huge number of people who don't mind (yet) adding unknown applications to their profile, nor do they mind (yet) advertising that fact to the world. What's odd is that those same users don't tolerate the same experience on every other web site. I'm hopeful those users will eventually turn away from Facebook's unnecessarily mysterious apps, and eventually force those apps to open their front doors as wide as the rest of the web.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Leo Davidson
EMAIL: leo@ox.compsoc.net
IP: 62.56.89.27
URL: http://www.pretentiousname.com
DATE: 01/28/2008 12:05:30 AM
Well said!

Another question is why we need to install "applications" in the first place. Why must we give code written by god-knows-who which does god-knows-what access to our personal information, simply to view a message that someone has sent us, or to answer a simple quiz or see what is essentially a web page?

If the web was like Facebook we would have to install a new web browser to view every site. Each web browser would be written by different, random people we've never heard of and would be given full control of our machines. A web browser that to download we had to give our phone number and the address of all our friends. That just wouldn't fly.

Oh, you can limit the access applications get, but there is absolutely no way to know what level of access apps require to work, so the easy thing to do is leave all the boxes ticked and click continue. They don't tell you which access they need, let alone justify it by explaining why it is needed and what will be done with it. Worse, the only restrictions you can impose are about what the application can write, not what it can read. If you untick the "know who I am and access my information" checkbox you won't be allowed to install the app at all. Why on earth do I have to tell a 3rd party who I am and my list of friends and interests just so that I can see a bit of HTML that a friend created? It's insane.

Facebook is handy for staying in touch with distant friends but I ignore every app request I get now. It's a very strange website because some aspects of it are very well designed while others seem to be a combination of complete stupidity and user-hostility.

-----
COMMENT:
AUTHOR: Michael Zuschlag
EMAIL: zuschlag@fast-mail.org
IP: 68.163.177.118
URL: http://www.zuschlogin.com/
DATE: 01/28/2008 01:42:37 PM
So, Facebook apps are remarkably like socially engineered malware that spreads through email: get the user to click a link in an email, and everyone in the user's address book gets the email next. Maybe, like malware writers, the objective is not to be helpful to the user, but to spread an app as far as possible. But to what benefit for Facebook?
-----
COMMENT:
AUTHOR: Jonathan Nicol
EMAIL: jonathan@f6design.com
IP: 220.233.6.2
URL: http://f6design.com/journal/
DATE: 02/08/2008 03:56:02 PM
This post perfectly describes everything I dislike about Facebook. 

When you liken Facebook apps to spam, you hit the nail on the head. As well as all the app requests, my 'super wall' is filled with chain-mail messages from friends exhorting me to 'forward this message' to my friends or risk dying in a freak accident.

This brand of time wasting peer-to-peer spam died out years ago in the email medium, but seems to have found new life on Facebook.

As Facebook matures (assuming it lasts that long) I imagine (or rather, hope) its users will become less tolerant of spam and spyware, as they have with email and websites.
-----
COMMENT:
AUTHOR: anderlan
EMAIL: 
IP: 216.226.180.2
URL: http://profile.typekey.com/anderlan/
DATE: 08/07/2008 08:40:01 AM
This has not bothered me firsthand as a user myself because I weigh it against the insidious terror which is MySpace.  Yes, yes, yes, my peeps are finally all off myspace!  Alleluiah!  Alleluiah!
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Zune: a fine music subscription device
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: zune-a-fine-mus

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2008/01/zune-a-fine-mus.html 
DATE: 01/10/2008 10:08:00 PM
-----
BODY:
<p>Last month I received a Microsoft Zune 80 as a gift. (Thanks, Johnny!) Having used the device for several weeks now, I wrote up some opinions of that experience to send to a friend on the Zune team, and have decided to share those thoughts here as well.</p> <p>My experience with Zune actually goes back a few months, to when I first subscribed to the Zune music service without actually owning a Zune device. I'm partial to having a <strong>music subscription</strong> rather than &quot;owning&quot; tracks. This is due to personal past experiences wrestling with DRM, and the sense of freedom I find in paying a flat fee for unlimited music. For $15/month I can listen to whatever I want within the reasonably spacious Zune Marketplace. In practice I could use the same amount to buy a big pile of audio tracks from iTunes, but for me a subscription enables a freer sense of experimentation. Case in point: a relative who visited over the holidays wanted to share music by an obscure Chilean musician. It felt great to listen to several esoteric albums through the subscription, and there's simply no way I would have felt good forking over money on the spot to listen to something I might never listen to again.</p> <p>Nevertheless, owning a Zune in an iPod world feels akin to belonging to an oppressed religious minority. Discussions about the Zune with fellow Zune owners must be conducted in secret, lest the conversation be overheard by the dogmatic iPod-wielding masses. This is too bad, since I found the second-generation Zune client software and the Zune device itself to work quite well in practice.</p> <p><a href="http://miksovsky.blogs.com/photos/uncategorized/2008/01/10/zune_player.png"><img width="640" height="480" border="0" alt="Zune_player" title="Zune_player" src="https://miksovsky.blogs.com/flowstate/images/2008/01/10/zune_player.png" /></a>


 </p> <p>The Zune client on Windows generally looks attractive. The client UI is designed carefully enough to reward a close look:</p> <ul> <li>I found it trivial to find new music, download it, and sync it to the Zune. YMMV.</li> <li>The original Zune client felt like a warmed-over skin for Windows Media Player, while the new one feels distinct enough to have its own style. The swirly background fractal may not be to your taste, but at least it's making a statement. I like it.</li> <li>A very subtle visual orange/pink gradient animates in the background at the bottom of the window when music is playing. I didn't notice this until I tried to take screenshots for the image above and compared them. It's similar to, but much more subdued than, the background effect in Windows Media Center. I assume the effect is there to confer a (slight) sense of movement.</li> <li>The UI makes extensive use of elements that come alive or reveal more detail on hover, such as scroll bars, the volume label, the device/disc/playlist icons in the lower left.</li> <li>The five-star rating system from Media Player always seemed to be more detail than I cared to supply. The Zune client replaces this with three simple states: neutral, I Like It, or I Don't Like It.</li> <li>The client makes good use of web-style navigation, a style I've referred 
to as a <a href="http://miksovsky.blogs.com/flowstate/2005/10/bbop_the_ubiqui.html">BBOP</a> 
UI (Buttons, Back, One task, Page-based). My only complaint is that the little back 
arrow in the upper left disappears in the Settings area, which is treated like a 
giant modal dialog. I think that's a mistake—if you're going to offer web-style 
UI with a Back button, you really <em>have</em> to offer the Back button on 
every page, or you're really going to confuse the user. I can sympathize with 
the designers' dilemma, though. It's hard for client software designers to 
accept the fact that a user might want to walk away a page in which data has 
been entered—without making an explicit command to save their changes or cancel 
the operation. People do this every day on the web without issue. The Settings 
area should offer a Back button, and if the user happens to click it and loses 
it, so be it. That's how virtually all web pages already work.</li> <li>I was happy to discover that I could sync recorded TV shows from my Windows Media Center to the Zune. This worked well overall, even if video files did have to go through a slow conversion process. One annoyance was that the Videos view on the Zune client only shows the episode title, not the show title, air time, or episode description. This makes it hard to find the show you want to sync. I assume that essentially no time has been spent designing Zune and Media Center to coexist happily, and that minor issues like this will get resolved as Media Center integration improves in the future.</li></ul> <p>I'm no hardware guru, but the Zune device itself seems well designed.</p> <p><img width="182" height="320" border="0" src="https://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Zune%20Device.png" alt="Zune Device" /></p> <ul> <li>The out-of-box experience was reasonable.&nbsp; </li>

<li>The Zune 80 device itself is attractive and lightweight. </li>

<li>The headphones seem better than most. My only complaint is that, like most headphones, you can't tell the Left and Right phones apart without looking closely at them to find a tiny &quot;L&quot; or &quot;R&quot;. It would be great if one could feel which one was which through some means (a raised letter, dots, whatever). Interestingly, the Zune cable already does something similar: there's a raised bump on one side of the connector so you can tell which of the otherwise identical flat surfaces on the connector needs to be facing up as you plug it in.&nbsp; </li>

<li>Just once I wish I could buy a device with an expensive screen that came with its own cheap plastic stick-on screen protector in the box, instead of having to hunt for an aftermarket screen protector myself. </li></ul> <p>The software on the Zune device also looks and feel pretty good.</p> <ul> <li>The touchpad is an elegant way to scroll up and down through lists—while allowing you to navigate laterally across lists to the left or right. </li>

<li>The UI uses animated transitions to good effect. </li>

<li>I wish the Zune device UI weren't <em>quite</em> so minimalist. It feels like Microsoft is trying to out-minimize Apple by pursuing <a href="http://miksovsky.blogs.com/flowstate/2005/07/the_impenetrabl.html">Apple's desire for a UI that's clean to the point of inscrutability</a>. Case in point: I couldn't find the UI for turning on Shuffle. Through trial and error I discovered that pressing the middle of the touchpad brought up a context menu of sorts which included the Shuffle command. If hardware buttons must be context sensitive to keep down the number of buttons, I always appreciate an on-screen indication of what they're going to do if I press them now. Windows Mobile does a decent job of this by always showing what the two soft buttons directly below the screen will do. </li>

<li>I'm really curious about the decision to have the main menu scroll. In the above image, you can see that the designers have very carefully sized and positioned the menu items so that one item (&quot;podcasts&quot;) is clipped at the bottom of the screen. This is a great way to indicate that the user can scroll down to see more items without having to resort to a heavy-handed scroll bar. Very elegantly done, yes? So, how many additional menu items do you think you will gain access to if you scroll down? <em>One</em>. One! If you scroll down, you'll see one more item (&quot;settings&quot;). I'd be inclined to dismiss this as insanity, if it weren't for the careful attention to detail here. It would have been trivial to position and size the text slightly differently to get all the text to fit on the screen without scrolling. More to the point, it would have a been a <em>lot</em> easier to develop. I can only conclude that making the menu feel more dynamic (by forcing the user to scroll) felt better than offering a completely static menu. </li>

<li>The Photos area was fine, but I was disappointed the device doesn't include a rotation sensor like the iPhone (or most modern digital cameras). This means that, when looking at photos, valuable screen real estate is often wasted, and pictures are shown at a size smaller than that of the screen.</li> <li>The Zune offers a modest personalization option: you can set the background of the main menu to a photo. Surprisingly, that was entirely sufficient for me to feel like I'd made the device mine. Many other devices do this, of course, but here the trick felt a particularly effective because the main menu itself is so minimal.</li></ul> <p>In putting the device through its paces, I ran into more than a few issues:</p> <ul> <li>The Zune client incorrectly catalogued a few albums under the wrong artist. This appears to be a <a href="http://support.microsoft.com/?id=945319">bug</a> introduced during the upgrade from Zune 1.x to Zune 2.0. </li>

<li>I was puzzled why the Zune client doesn't offer a context menu on every UI element a user might conceivably want to right-click on. There are no context menus on many online store data elements, for example. A UI that makes inconsistent use of context menus can be pretty frustrating, here all the more so because context menus are a nearly perfect way to offer a rich set of commands without cluttering the UI. </li>

<li>I'd prefer a Now Playing area in the client that showed what was playing without a distracting album art visualization. </li>

<li>The Zune Marketplace often appears to get confused as to which online tracks are already in my collection. </li>

<li>The client frequently hiccups when I move between PCs. One of the major benefits of a music subscription is being able to move from one PC to another and not have to go through the absurd exercise of copying massive piles of audio bits everywhere I want to listen to music. The Zune client sometimes gets confused if I switch PCs and try to listen to music through the subscription. Signing out and back in always fixes the problem, but that's an irritating workaround. I'm hoping the client will eventually do a better job of automatically signing in whenever one switches to a different PC. </li>

<li>I had trouble syncing over WiFi: nothing would happen, or else I would see a cryptic error message. I eventually discovered that the error message would go away if I got closer to the wireless router, so presumably the error message was just a (very bad) way of saying the WiFi signal wasn't strong enough. </li>

<li>The aforementioned Settings area pegs its buttons to the lower right, which is a bad idea. On a large monitor, these controls all but disappear in a distant corner of the screen, far from the content they pertain to. This common UI flub occurs when <a href="http://miksovsky.blogs.com/flowstate/2005/07/if_a_ui_sketch_.html">designers optimize too much for a specific window size</a>. </li>

<li>While home videos on my local PC show up in the Zune library, videos on a networked PC don't show up at all, with no explanation. I still can't figure this out. </li>

<li>The Zune would make for a decent podcast player—if it weren't for a crippling bug: the Zune sometimes (randomly?) forgets what portion of the podcast already I've listened to. For me, being able to Resume a paused podcast is the feature that distinguishes a music player from a podcast player. The unreliability of this feature on the Zune nearly wipes out it's value as a podcast player. </li>

<li>Both the Podcast and Videos areas are missing a crucial feature: the ability to remove a podcast or TV show when you're done listening or watching to it. A list of podcasts isn't like a list of songs you want to listen to over and over. It's more like a To Do list of things you want to listen to once. It's tedious to have to go back to your PC just to remove a podcast you've listened to or a TV show you've watched.</li></ul> <p>Overall, I'm pretty happy with my Zune 80. As a music player for an online music subscription service, the Zune works nearly flawlessly. It's less effective as a podcast or video player, but I'm looking forward to seeing those deficiencies addressed. </p> <p>I'm not sure what Microsoft can do about Zune's biggest handicap: its brand. People like buying Apple products because of what they feel the purchase says about them. At this point, buying a Zune either tells people that you're a Microsoft-loving sap, or else so uninformed as to be unaware that you've just purchased a second-place music player. Virtually all of this bad vibe is attributable to the unshakable feeling that Microsoft is trying too hard to be cool. I actually think Microsoft has made some bold and innovative moves in designing and marketing the Zune, but all that works has to fight against the grain of the intrinsically uncool brand of Microsoft itself. And for what? I can't think of a single way in which the Microsoft brand has helped the Zune in any way, and one can only wonder how much more successful the Zune would be if it had been marketed as a completely independent entity. To their credit, the Zune folks at Microsoft are painfully aware of this enormous marketing handicap, and I wish them the best of luck overcoming it.</p> <p>In the meantime, I'll be happily listening to all the music I can eat on my Zune.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Peter H.
EMAIL: peter@horadan.net
IP: 67.160.2.23
URL: 
DATE: 01/11/2008 02:44:39 AM
Very interesting as usual.

I would be curious to know if you *have* found a decent podcast player.

I limp along with my Sansa Rhapsody device aided by iPodder ... but this suffers from a number of items you mention (not being able to delete from the device) as well as some other nifty problems like having the podcasts interspersed in with the music so you have to really hunt around (while driving) to find that podcast you grabbed before leaving the house.

iPod had better Podcast support, but since making the switch from purchased music to subscription it feels silly to use iTunes/iPod just for podcasts.

Astonishing someone hasn't made a market play for the consumer-friendly podcast service/device given (1) the number of great and professional podcasts avaialble now, and (2) the massive amount of time Americans collectively spend commuting each day.

Haven't found a better device, and curious if you have ...

- Pete

-----
COMMENT:
AUTHOR: Tim Hall
EMAIL: trendytim@gmail.com
IP: 210.84.32.153
URL: 
DATE: 01/16/2008 04:12:52 PM
Another fatal flaw, is with Windows Media Player itself, when synchronizing, it deletes last meaning it gets its knickers in a knot when it runs out of space.

I don't have a Zune myself (but id definitely prefer it to a iPod, which i hate with a passion, i just with Rio didn't go out of business after i bought my Karma, which i adore). But that is the experience i had with the Creative PMP my dad had, and he said it was the same with the zune.

Of course if you show me ANY piece of technology and i will point out a dozen flaws that infuriate me (even my beloved Karma).
-----
COMMENT:
AUTHOR: David Hayes
EMAIL: david.hayes@spindriftpages.net
IP: 204.50.234.198
URL: http://www.spindriftpages.net/blog/dave
DATE: 04/03/2008 02:32:13 PM
Interesting review, thanks! I'm pretty sure I'm going to switch from iPods (I have 3) to a Zune when version 3 comes out. I'm becoming increasingly annoyed with iTunes, it seems to be gaining more bugs with each update and the recent Safari 'update' fiasco didn't help. 
-----
PING:
TITLE: It's late...
URL: http://geeks.ms/blogs/roller/archive/2008/02/20/it-s-late.aspx
IP: 209.51.209.82
BLOG NAME: Noticias externas
DATE: 02/20/2008 02:24:19 AM
...and Im catching up on my blogroll. Two things that popped for me this evening are Brand New,
-----
PING:
TITLE: It's late...
URL: http://blogs.msdn.com/kamvedbrat/archive/2008/02/20/it-s-late.aspx
IP: 209.34.241.63
BLOG NAME: Kam VedBrat
DATE: 02/20/2008 01:33:25 AM
...and I'm catching up on my blogroll. Two things that popped for me this evening are Brand New, which
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Directional keyboard navigation could improve PC-based browsing too
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: directional-key

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2007/11/directional-key.html 
DATE: 11/08/2007 10:02:00 PM
-----
BODY:
<p><em>Many thanks to people who shared suggestions in the previous post on keyboard navigation. I'm looking forward to trying them out on Cozi's site.</em> </p>
<p>Continuing a discussion of <a href="http://miksovsky.blogs.com/flowstate/2007/10/show-mercy-to-k.html">keyboard navigation</a>, it's worth asking whether the Tab navigation model itself is a problem that needs fixing. The Tab model works well in the small dialogs for which it was designed, but has completely failed to scale up to navigating complex web sites. Consider two user interfaces, one old and one contemporary: </p>



<p><a href="http://miksovsky.blogs.com/photos/uncategorized/2007/11/08/windows_95_dialup_networking.png"><img width="172" height="200" border="0" src="https://miksovsky.blogs.com/flowstate/images/2007/11/08/windows_95_dialup_networking.png" title="Windows_95_dialup_networking" alt="Windows_95_dialup_networking" /></a><br /><em>Windows 95 dialog with approximately 10 focusable controls</em>&nbsp; </p>





<p><a href="http://miksovsky.blogs.com/photos/uncategorized/2007/11/08/msn_home_page.png"><img width="490" height="728" border="0" alt="Msn_home_page" title="Msn_home_page" src="https://miksovsky.blogs.com/flowstate/images/2007/11/08/msn_home_page.png" /></a> </p>
<p><em>Default MSN.com home page with approximately 200 focusable controls</em> </p>
<p>Note that <strong>the relative scale of these two screens has been preserved</strong>. Both spatially and logically, the user has a much, much larger area to move around. </p>
<p>Modern operating system UIs provide two standard mechanisms for moving the focus around a window using the keyboard: a linear Tab model, and explicit keyboard shortcuts (e.g., Alt keys). The Tab model is the most commonly used for moving between fields in a UI. It evolved from a UI intended for navigating through the modest collection of input fields that could fit on small character-based display (with, for example, 24 rows of 80 characters), and represented an evolution in turn from Tab keys on typewriters. The Tab model hasn't evolved much since the character-based days. A single control in the active window has the keyboard focus. This control indicates its active state in one of several ways: button-like controls and list boxes show a dotted marquis or other highlighting effect, while text controls show an insertion point or selection. Pressing the Tab key moves the keyboard focus through the focusable (interactive) controls on the page in a linear order defined at design time by the programmer. Pressing Shift+Tab moves the focus through that order in reverse.</p> <p>That the Tab model was adequate for simple dialogs like the one above is evidenced by the model's survival over decades of change in UIs. To my mind this model has completely broken down, however, in its application to typical web pages. The first issue is one of scale: the page above has <strong>twenty times</strong> the number of focusable controls as the simple dialog. A user trying to use the keyboard to reach a link in the middle of the page might have to press the Tab key 125 times to reach it. (Or, if they were exceptionally efficient, they could tab around the other direction and only have to press Shift+Tab 75 times.) The second issue is that the page has a much more complex two-dimensional columnar layout that the dialog, but that layout cannot be captured in the one-dimensional tab order. To the user, the behavior of the Tab key is therefore quite unpredictable. </p>
<p>The other standard keyboard navigation technique—explicit keyboard shortcuts—are also inadequate for complex user interfaces. Microsoft Windows allows users to move the focus directly to a control on the dialog by pressing a keyboard shortcut, generally the Alt key plus a single letter in the control’s label. (OS/X does this too, although I find it less discoverable and generally weaker in execution.) This system is workable for dialogs with a small number of controls and a reasonable distribution of letter frequencies in control labels, but is obviously unable to scale well beyond a handful of controls. (I remember once running out of available letters in a large dialog and having to resort to using the label's trailing colon as the shortcut character.)<br /> </p>
<p>The leading web browsers have adopted these legacy keyboard navigation techniques despite their inadequacy to scale up to modern web-based UIs. Mozilla Firefox, for its part, does offer one more keyboard navigation technique: Emacs-style incremental searching. This lets the user move the focus to a specific link by typing the apostrophe ('), or to specific text by typing a slash (/), then typing the initial text of the desired target. This is quite fast, although I personally find this method less than satisfying. I find it less brain-taxing to just point at the thing I want instead of having to read it and type it. I also have trouble keeping straight the three different keys for the three slightly different kinds of search Firefox offers for searching within a single page. In practice this UI doesn't work well for long scrolling pages: you need to be able to see the thing you want. Once you start typing and move the focus somewhere, you can't easily move the focus to an adjacent element without starting over or falling back to tabbing. The incremental search mechanism can't target controls other than textual links, and then only if the link text is unique. A substantial number of links are images, and don't even have visible text. And finally, because the keyboard shortcuts are unmodified by a key like Ctrl, they don't work if the keyboard focus is already in a text box. </p>
<p>Interestingly, a much better user interface for navigating screens with lots of elements is already ubiquitous—but not on PCs. It's found on mobile phone web browsers, which of necessity do a good job at keyboard navigation. They support two-dimensional directional navigation by using Left, Right, Up and Down arrow keys (or a joystick) to move to the &quot;nearest&quot; element in the corresponding direction. For example, if you press the Right key, heuristics determine whether there's an element you might be trying to reach towards the right, and if there are multiple elements, which element you probably want.</p> <p>Significantly, these heuristics <strong>respect the rendered visual representation of the page</strong>, not the structure of the document's object model or the original location of elements at design time. This is necessary to account for the fact that the user may be viewing the page at a different width than the designer used, with different fonts, at different sizes, etc. Directional navigation UIs also tightly connect keyboard focus and scroll position, allowing someone to continually press the Up and Down keys to move through focusable controls <em>and</em> to page over large blocks of text.</p> <p>The first time I saw a directional navigation UI was actually in the original WebTV browser, later acquired by Microsoft and rebranded as MSN TV. I was inspired by that UI to push for inclusion of directional navigation support in Windows Presenation Foundation (&quot;Avalon&quot;), and was happy to hear that that work eventually saw the light of day in the .NET 3.0 release. (I haven't played with the final result myself, but my understanding is that you can turn it on or off for a page via its DirectionalNavigation property. I'm not sure if that feature made it into Silverlight.)</p> <p>Directional navigation works so well on mobile devices, I'm hoping it will get built into a browser someday. To avoid conflict with the existing semantics of arrow keys, the final UI could optionally support a keyboard modifier like Ctrl. (So that, e.g., Ctrl+Left means move the focus to the &quot;nearest&quot; control to the left). Microsoft has already filed for a patent on the very elegant heuristics in the WPF DirectionalNavigation feature, so it would make a natural addition to a future version of Internet Explorer. I'd love to see a similar approach adopted by Firefox, or at least developed as a Firefox add-on.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Grin
EMAIL: copelandj5000@yahoo.de
IP: 217.224.82.13
URL: 
DATE: 11/08/2007 11:57:12 PM
The Opera browser already has spatial navigation -- for quite some time, actually. It uses the Shift key in combination with the arrow keys. It works just as fine as in their terrific Opera Mini browser for mobile phones.
-----
COMMENT:
AUTHOR: wx
EMAIL: socr8s@gmail.com
IP: 80.233.156.204
URL: 
DATE: 11/09/2007 02:51:56 AM
In Firefox, the cursor navigation you are talking about, can be enabled by pressing F7. It also can be turned to be on by default using Tools-Options-Advanced-General-[x] Always use the cursor keys to navigate...
-----
COMMENT:
AUTHOR: icqfaquest
EMAIL: dietfaq2007@yandex.ru
IP: 89.223.127.254
URL: http://www.dietfaq.ru
DATE: 11/09/2007 03:26:58 AM

-----
COMMENT:
AUTHOR: Michael Zuschlag
EMAIL: zuschlag@fast-mail.org
IP: 68.163.153.175
URL: http://www.zuschlogin.com/
DATE: 11/09/2007 06:34:58 AM
Expanding navigation from one dimension to two would certainly be a big help, with mean key-presses going from about n/2 to n^0.5, where n equals number of controls. Ironic that directional nav would first be common on the small screens of phones when the more controls the greater the advantage of directional over linearized navigation. 

I wonder if an alternative or complimentary nav method could leverage the hierarchical structure common in web pages now. Maybe we could have Ctrl-Home-End-Page-Up-Down move among <div> blocks, allowing gross navigation, with Ctrl-arrow keys for zeroing in. Probably would need the browser to highlight the active div.

Firefox's F7, which navigates by character not control, might have something like this; I can’t figure out exactly what its doing with Page Up and Down. It seems there has also been some problems with users accidentally hitting F7 and not knowing how to get out of it, which Firefox attempts to handled with a message box. Perhaps the otherwise unused and more aptly labeled Scroll Lock would have been a better choice than F7. Using a quasi-mode like Ctrl-cursor keys won’t have this problem.
-----
COMMENT:
AUTHOR: spugbrap
EMAIL: spugbrap.com+miksovsky@gmail.com
IP: 204.194.77.3
URL: http://www.spugbrap.com/blog
DATE: 11/09/2007 07:50:22 AM
@wx:
have you tried actually using Firefox's cursor navigation that you described (thanks for the tip, btw. I've always wondered what that option was about) on this blog? I just did, and it wasn't pretty. It kept getting stuck in the sidebar, no matter how much i tried to keep it in the main content section. bummer.
-----
COMMENT:
AUTHOR: Brian
EMAIL: brian.romanko@frogdesign.com
IP: 204.57.75.26
URL: 
DATE: 11/09/2007 09:32:05 AM
I also recommend checking out the Hit-a-Hint add on for FireFox (https://addons.mozilla.org/en-US/firefox/addon/1341). When you hold down an accelerator key (space) it renders a unique identifier above every usable element currently onscreen. You can then enter the identifier and it will activate the control. It's the most usable keyboard navigation scheme I've come across thusfar.
-----
COMMENT:
AUTHOR: fijal
EMAIL: fijall@gmail.com
IP: 194.187.53.19
URL: 
DATE: 11/09/2007 01:34:11 PM
Well, that's just not helping at all. What I do is I press / (search) and type think I would like to find then enter. This means I don't really need to read this crap anyway, which helps me to survive on such cluttered page as described in an example :-)
-----
COMMENT:
AUTHOR: Assume Rhino
EMAIL: test@example.com
IP: 213.65.82.23
URL: 
DATE: 11/10/2007 08:44:06 AM
You mean you haven't tried Opera's spatial navigation? I can't live without it since they introduced it ages ago.
-----
COMMENT:
AUTHOR: davidicus
EMAIL: blog@davidicus.com
IP: 69.225.116.183
URL: http://www.davidicus.com/blog
DATE: 11/10/2007 08:26:30 PM
.

check out the directional nav in the PS3's browser as well, where you may not have a mouse available, and can use a controller's thumb stick.

.
-----
COMMENT:
AUTHOR: Kpwaidfj
EMAIL: vexemavo@ehrlichisbush.com
IP: 205.150.104.10
URL: http://ehrlichisbush.com/map.html
DATE: 11/13/2007 05:42:39 AM

-----
COMMENT:
AUTHOR: Dave
EMAIL: dave@example.com
IP: 125.238.113.43
URL: 
DATE: 11/14/2007 05:50:38 PM
Unfortunately Firefox's caret navigation is broken for the very reason given in the original post:

>Significantly, these heuristics respect the rendered visual 
>representation of the page, not the structure of the document's 
>object model or the original location of elements at design time.

Firefox doesn't do this, making its caret navigation quite painful to use (try it on this page to see an example of this).
-----
COMMENT:
AUTHOR: Johnny Lee
EMAIL: lynnhoj@hotmail.com
IP: 216.95.15.83
URL: 
DATE: 02/14/2008 09:34:29 PM
Hey Jan, it's Johnny from WGA days.

I added spatial navigation to the WinCE port of IE4, back in 1999/2000. The browser showed up on Sega Dreamcast and MSN Companion.

No idea if the changes ever got merged in to other WinCE ports of IE.

On sub-PC devices, spatial navigation is the obvious navigation method since the TAB key is non-existent on cellphones, PDAs and game console controllers.
-----
PING:
TITLE: Spatial Navigation and Opera
URL: http://www.codinghorror.com/blog/archives/001057.html
IP: 208.106.251.207
BLOG NAME: Coding Horror
DATE: 02/14/2008 12:08:08 AM
 In Where the Heck is My Focus, I wondered why web developers don't pay attention rudimentary of keyboard accessibility issues. I didn't mean navigating the entire web with your keyboard; I was specifically referring to login pages, which tend...
-----
PING:
TITLE: Where the Heck is My Focus?
URL: http://www.codinghorror.com/blog/archives/001055.html
IP: 208.106.251.207
BLOG NAME: Coding Horror
DATE: 02/11/2008 01:46:50 AM
 The web is quite mouse-centric. Ever tried navigating a typical website without your mouse? I'm not saying it can't be done-- if you're sufficiently motivated, you can indeed navigate the web using nothing but your keyboard-- but it's painful....
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Show mercy to keyboard users (yourself included) by setting the default keyboard focus
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: show-mercy-to-k

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2007/10/show-mercy-to-k.html 
DATE: 10/10/2007 10:20:00 PM
-----
BODY:
<p>As more of my UI work moves from client software to web sites, I'm often struck by the lack of attention most web sites spend on details of UI interactions. As a case in point, compare the degree to which a software company considers its keyboard users. Most client software products do a fair to middling job of keyboard support, but at least provide some basic facilities like keyboard accelerators for input fields, and give at least a bit of thought to the order in which a user will tab through fields. Most web sites, in comparison, apparently fail to give the keyboard user the slightest bit of thought.&nbsp; </p>
<p>Keyboard support is often considered to be something done just for people who, for various physical reasons, can't use a mouse. That's an important community to serve, but not the only reason to think about keyboard users. Most people use a keyboard at some point in a given computer session. The vast majority of people searching with Google, sending email, IMing, twittering, and so on, every day are doing so with a keyboard. Laptop users routinely find themselves in situations where using a mouse or pointing device is cumbersome. As with many services initially intended for users with disabilities (closed captioning, sidewalk curb cuts, wheelchair ramps), keyboard support benefits the broader public.&nbsp; </p>
<p>For all people complain about Microsoft Windows, the platform and its applications do a great deal of work in service of keyboard users. As much as I love my MacBook, I'm often frustrated by operations that have no obvious keyboard shortcut. And I was amazed to discover OS/X disables a good portion of its keyboard support by default, requiring a trip to System Preferences to fix. Still, OS/X does a fantastic job of keyboard support in comparison to almost every web site today.&nbsp; </p>
<p>The very simplest thing a UI designer to help keyboard users is <strong>deliberately pick a good control to receive the keyboard focus by default.</strong> This is usually a trivial task—just figure out which control the user is likely to want to interact with first, and put the focus there. Often this control will be a text box. In a decent visual UI designer, setting the default keyboard focus is usually something that can be done purely through design-time UI, without resorting to code. In HTML, the default focus can usually be easily set with a tiny amount of the most rudimentary JavaScript in an onload event handler. [Example: onload=&quot;document.myform.textbox1.focus()&quot;] </p>
<p><strong>Yet virtually no web pages bother to do this.</strong> This is pretty remarkable, even more so for web forms with text input fields. On such pages, almost every user is going to have to click the mouse on the first input field so they can start typing. Every user, every day, will have to spend a second or two to do this. In a minute or so, a web developer could permanently eliminate the need for that extra click. So why don't more people bother?&nbsp; </p>
<p>As far as I can tell, the most prominent class of web sites that consistently set the default keyboard focus is search engines: <a href="http://www.google.com">Google</a>, <a href="http://www.yahoo.com">Yahoo</a>, <a href="http://www.live.com">Windows Live</a>, etc. Most other sites don't bother, even those like <a href="http://www.facebook.com">Facebook</a> that have obvious fields, like Search boxes, that could receive the focus. And even the search engines that do set the keyboard focus don't appear to reflect a consistent corporate design goal. <br /> </p>
<p><img width="446" height="163" border="0" src="https://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Google%20Search%20Box_thumb.png" alt="Google Search Box" style="border-width: 0px;" /> </p> <p><span style="color: #808080;"><em>Google home page sets the default keyboard focus</em></span></p> <p>&nbsp;</p> <p><img width="700" height="72" border="0" src="https://miksovsky.blogs.com/flowstate/WindowsLiveWriter/Google%20Reader%20Search%20Box_thumb.png" alt="Google Reader Search Box" style="border-width: 0px;" /></p> <p><span style="color: #808080;"><em>Other Google properties generally don't</em></span></p> <p>Google's home page sets the keyboard focus, but the main page for other Google properties like <a href="http://www.google.com/reader">Google Reader</a>, <a href="http://news.google.com">Google News</a>, and <a href="http://www.youtube.com">YouTube</a> don't. Windows Live does, but <a href="http://www.microsoft.com">Microsoft's corporate home page</a> doesn't. This last example is particularly telling. Microsoft spends untold hundreds of hours every year ensuring that its Windows products comply with regional accessibility regulations such as the wide-reaching <a href="http://en.wikipedia.org/wiki/Americans_with_Disabilities_Act_of_1990">Americans with Disabilities Act</a>. American federal agencies generally insist that suppliers like Microsoft create products that comply with these laws if they want to do business with the agency. I have no specific knowledge, but it's reasonable to assume that the Microsoft home page doesn't fall under these regulations—maybe for the simple reason that no one's paying to use the page.&nbsp; </p>
<p>I think the primary reason web companies ignore keyboard users boils down to expectations. Web sites don't bother to set the keyboard focus because other web sites don't, and because by now users don't expect them to. This double standard is so pervasive that, as much as I care about well-designed keyboard support, the web version of the product I work on generally doesn't set the keyboard focus either. It just never occurred to me as something to worry about, <em>even as I devoted attention to keyboard users of the downloadable Windows client version of the same product.</em>&nbsp; </p>
<p>Starting to write this post provided me the impetus to finally address this UI problem in some portions of on Cozi's marketing site. Some pages like the <a href="https://secure.cozi.com/accounts/signup.aspx">Cozi sign-up page</a> had forms that were completely straightforward to fix. The <a href="http://www.cozi.com/">Cozi home page</a> proved tougher to fix. I wanted to set the focus to the search box. Unfortunately, that control happens to use hint text, the light gray text inside a field that serves as a field label. Like most HTML implementations of hint text, the particular implementation we happen to use clears the hint text when the control receives the focus. This means setting the default keyboard focus has the unwanted side effect of removing the hint text, thereby obscuring the purpose of the very field the user might want to type in. As it turns out, we've been developing a better hint text implementation anyway that won't disappear until the user starts typing, and I'm looking forward to eventually using that control for our search box.&nbsp; </p>
<p>In the meantime, I've at least resensitized myself to the interests of keyboard users, myself included. If your web product has a commonly used form or search box, why not take a minute to put the default keyboard focus in the right place? Setting the default keyboard focus is only a simple tiny step towards designing a good experience for keyboard users, but at least it's a start.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Matt Hamilton
EMAIL: mabster@madprops.org
IP: 203.48.134.57
URL: http://www.madprops.org/cs/blogs/mabster
DATE: 10/09/2007 10:45:31 PM
Setting keyboard focus to a textbox by default works well for some pages, but not others.

For example, I can remember visiting a site where I wanted to scroll down a page. I instinctively hit "space" to scroll down, and nothing happened, because my keyboard focus was in a search box. That was pretty frustrating. It stops the arrow keys and pgup/pgdn keys from working too.

Matt
-----
COMMENT:
AUTHOR: Matt Lacey
EMAIL: matt@mrlacey.co.uk
IP: 62.3.226.241
URL: http://mrlacey.blogspot.com
DATE: 10/10/2007 03:00:06 AM
There is another issue here.
Because web developers have not been setting focus by default, the keyboard didn't have any immediate impact when used.  At some point the keyboard began being used for navigation. (And why not, it's not being immediately used for anything else.)

Do you use the backspace to navigate back to the previous page? I do quite a lot and it's a right pain when I've navigated through a stack to almost the page I want but can't because the cursor has become trapped by a text box.  I am then forced to move to the mouse to perform the task of moving back through the history stack.

Or consider Google reader, as per your example.  If the cursor was immediately set to the search box, I wouldn't be able to use all the keyboard shortcuts to navigate posts.  For me at least searching in GR is something I don't do very often.  Far more frequently I want to read my messages and having the Space, J, and K keys to help me do that is a great benefit and time saver.

Some times it is appropriate to set the focus of an item on a page, some times it isn't.  Now, how do we deal with the backspace key?
-----
COMMENT:
AUTHOR: David Eliason
EMAIL: david@eliason.eu
IP: 193.180.197.254
URL: 
DATE: 10/10/2007 04:41:38 AM
I agree with Matt & Matt. I use both the backspace key and arrow keys to navigate, and it is very frustrating to navigate a site that puts the focus in a textbox on every page.

I guess the best solution would be if this could be made a per user setting. Preferably in the browser settings, and not for each site.
-----
COMMENT:
AUTHOR: Kent Boogaart
EMAIL: kentcb@internode.on.net
IP: 199.67.203.142
URL: http://kentb.blogspot.com
DATE: 10/10/2007 05:02:59 AM
It's all about probabilities, I think. If it is probably that the user will want to start typing once the page loads (google, online form) then setting focus is a good thing. If, however, it is unlikely (informational page) then setting focus is not so good. For that reason, I think you're better off leaving focus off the search text box unless it's actually a dedicated search page that the user has requested.
-----
COMMENT:
AUTHOR: Damien Guard
EMAIL: damien@envytech.co.uk
IP: 213.163.195.4
URL: http://damieng.com
DATE: 10/10/2007 07:18:28 AM
Setting the focus can be especially annoying if navigating back/forwards through pages in the cache with the keyboard.

Surely it would be possible to make a GreaseMonkey script that found the first text box with the word search in the id or class attribute and set the focus for those people that want it?

Anything more would probably require adding to the standards.

[)amien
-----
COMMENT:
AUTHOR: Grin
EMAIL: copelandj5000@yahoo.de
IP: 130.83.165.38
URL: 
DATE: 10/10/2007 08:27:33 AM
I strongly disagree for the reasons already mentioned.

Setting (I'd even call it "stealing") focus on a web page completely destroys the user's expectations of the software he's currently using -- which is his web browser. Aside from the mentioned problems with scrolling and navigation, web browsers themselves feature search boxes that might have keyboard focus.

All one-key keyboard shortcuts simply stop working when a site steals focus.

So, I think the polite thing to do is to leave keyboard focus where it is. The sole exception to that would be sites whose single purpose it is, to enter text (like Google's homepage).

That's why I think that the Google and Microsoft examples given in the article just illustrate the right thing to do.
-----
COMMENT:
AUTHOR: Michael
EMAIL: mdavids@gmail.com
IP: 72.14.227.1
URL: 
DATE: 10/10/2007 09:25:32 AM
Reader actually does the right thing. When it loads, focus is in 'keyboard shortcut' land so that you can immediately start interacting. The default thing a user wants to do is hit space over and over to get through their feeds, not search for something.
-----
COMMENT:
AUTHOR: spugbrap
EMAIL: spugbrap.com+miksovsky@gmail.com
IP: 204.194.77.3
URL: http://www.spugbrap.com/blog
DATE: 10/10/2007 10:51:01 AM
I agree with the other commenters; setting focus can be useful for pages that have one clear purpose, like a dedicated login page. But, if there's a login form in the sidebar of a large page, you probably wouldn't want to set the focus there, because logging in is clearly a secondary feature of that page.

One thing to note when you do try to automatically set focus, though, is that having it triggered by the onload event may do more harm than good. Onload waits for all the scripts, images, etc. to load before firing, which may take a while. Meanwhile, the HTML has already rendered and the form appears ready, from the user's perspective. 

I can't count the number of times I've gone to a login page, clicked the username field, started typing my username (or, worse yet, gotten as far as typing my password), and had the focus stolen and set back to the beginning of the username field. 

Some sites put a little script block at the bottom of the page, right before the closing BODY tag, and set the form field focus, there. This seems to work a lot better.

-----
COMMENT:
AUTHOR: Jonathan Snook
EMAIL: jonathan@snook.ca
IP: 99.241.150.102
URL: http://snook.ca/jonathan/
DATE: 10/10/2007 06:36:15 PM
Also, especially relying on window.onload (or <body onload="">) is troublesome because there's a lag between initial render time and when that even fires. How often have you come across a login page, begun typing before the page has loaded all the images, get halfway through the password field and have the page shift focus to the username field. Half the password gets entered in the wrong place.

Don't set initial focus. Let the user do it.
-----
COMMENT:
AUTHOR: Ignas
EMAIL: ignas@pov.lt
IP: 213.164.108.111
URL: 
DATE: 10/18/2007 11:16:01 AM
Couldn't you make the search field (the one with the hint text) at least be the first one in the tabindex? Actually i consider tabindex on form fields to be a better way of doing it than javascript that focuses things, because it leaves it working for people who use keyboard for navigation (backspace as a back key), while still making the website easy to use without a mouse. Also - you can add elements of your page that don't have such a high priority with tabindex, while you can only focus one single control.
-----
COMMENT:
AUTHOR: James Littlefield
EMAIL: Jim.Littlefield@gmail.com
IP: 74.184.114.57
URL: http://smallpastures.blogspot.com
DATE: 10/19/2007 02:03:29 PM
Amen!  This was something we had to deal with very early on at PeopleSoft when we first released browser based applications.  People who were known as 'heads down users' relied heavily on the keyboard for entering transactional data.  Many adjustments where made to address the needs of heads down users; we even created ways individual users could personalize the behavior of the application to their preferences.  I am amazed when I go to many major websites and see little or nothing has been done to accommodate keyboard centric users.

Jim
-----
COMMENT:
AUTHOR: Lvinseges
EMAIL: lghedc57g@mail.ru
IP: 200.138.37.143
URL: http://www.abta.org.br/newsVisualizar/news_20070410/defloration-hardcore-movies.html
DATE: 11/17/2007 11:13:32 PM

-----
COMMENT:
AUTHOR: Cameron Simpson
EMAIL: 
IP: 211.30.180.241
URL: http://profile.typekey.com/cameronsimpson/
DATE: 01/12/2008 09:00:22 PM
Well, a default focus is a nice sounding idea, but ...

In practice, this makes web pages that _break_ the browser navigation controls. You go to the page, and suddenly all the keys you expect to work... stop! It is because some input form now has the focus, and I, the user, didn't give it the focus. It totally breaks the user's mental model of the browser.

What _should_ exist is an easy and common keystroke convention for "take me to the primary widget on this page"; at least common per browser. That way web pages might indicate where focus should start, where currently you advocate just taking it, and users don't have focus snatched away.

-----
COMMENT:
AUTHOR: Anthony
EMAIL: anthonyf@rockynet.com
IP: 24.8.36.184
URL: 
DATE: 02/13/2008 02:58:11 AM
The first time I found my favorite homepage had started stealing focus  so that on page load I had to click on the url bar to enter a new url, I was so angry, then I set my homepage to about:blank and lived a happier life.
-----
COMMENT:
AUTHOR: shinmai
EMAIL: aapon@ihanu.us
IP: 80.221.2.211
URL: 
DATE: 09/01/2008 01:47:22 AM
Like many have said before, setting default focus is really annoying on pages with more than one screenfull of content, but for pages with only a search form, sign-up forms or comment-forms in new windows (which is a horrible practice, but if it's used I'd rather get it over with as quick as possible :-) it works like a charm, BUT should be used with caution. If the page is image-intensive or has a larger bandwith payload for other reasons, it should really be done WAY before the window.onLoad-event fires.

The reason for this is obvious; a user loads the page, starts typing in the input box (or worse yet, boxes), and suddenly the cursor either jumps to the beginning of the text, or selects all the existing text, erasing what the user has written. So it's important that the page loads fast, and the focus is delegated as early as possible.

Like so many other JavaScript-tricks, this too needs to be used in moderation, and with careful consideration. It can be a great timesaver (like Googles front-page) or a really annoying usability glitch (I tried hard to find a real example, but many forums f.e. first load a bunch of flash-ads and after that focus on the login-form making keyboard navigation a pain).
-----
COMMENT:
AUTHOR: Rob
EMAIL: waxingsatirical@gsmail.com
IP: 62.31.43.176
URL: 
DATE: 11/21/2008 11:30:32 AM
I hate the focus stealing, half the time I open my browser I have started typing a URL before my homepage has loaded, then when i am halfway through it nicks the bloody focus!

All it takes is a tab press to get to the intended focus of the web-page, leave my focus where it is!
-----
COMMENT:
AUTHOR: Bud Strong
EMAIL: bud@budcams.com
IP: 75.147.120.125
URL: http://budcams.com/
DATE: 01/22/2009 03:37:58 PM
When you click LOGIN to load a page less than one screen, and with the sole purpose of signing in to a website, I ALWAYS expect the keyboard focus to go to the Username: field!  I don't care about those other cases.  I don't know how many times i have typed my login and had to type it again after clicking the Username box. It doesn't require onload.

         

         document.getElementById("username").focus();


works fine.

-----
COMMENT:
AUTHOR: Peter R
EMAIL: astropcr@gmail.com
IP: 192.168.130.202
URL: 
DATE: 05/11/2010 03:14:11 PM
Another problem is that as a developer, I cant find a consistent way to do it. Each browser's java-script engine seems to do focus differently and it is just not worth the effort trying to make a separate case for each browser. I cant even figure out a way to get Webkit (Chrome and Safari) to do it at all!

Until java-script engines are more unified I am leaving focus alone.
-----
PING:
TITLE: Where the Heck is My Focus?
URL: http://www.codinghorror.com/blog/archives/001055.html
IP: 208.106.251.207
BLOG NAME: Coding Horror
DATE: 02/11/2008 01:50:24 AM
 The web is quite mouse-centric. Ever tried navigating a typical website without your mouse? I'm not saying it can't be done-- if you're sufficiently motivated, you can indeed navigate the web using nothing but your keyboard-- but it's painful....
-----
PING:
TITLE: Show Mercy to Keyboard Users
URL: http://www.dotnetkicks.com/other/Show_Mercy_to_Keyboard_Users
IP: 209.200.85.7
BLOG NAME: DotNetKicks.com
DATE: 10/10/2007 07:06:44 AM
You've been kicked (a good thing) - Trackback from DotNetKicks.com
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Bill Buxton's "Sketching User Experiences"
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: bill-buxtons-sk

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2007/09/bill-buxtons-sk.html 
DATE: 09/05/2007 10:30:00 PM
-----
BODY:
<p><a href="http://www.amazon.com/gp/product/0123740371?ie=UTF8&amp;tag=httpmiksovskb-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0123740371"><img border="0" src="http://g-ec2.images-amazon.com/images/I/21zLhxeLRYL._AA_SL160_.jpg" /></a><img width="1" height="1" border="0" src="http://www.assoc-amazon.com/e/ir?t=httpmiksovskb-20&amp;l=as2&amp;o=1&amp;a=0123740371" style="border: medium none  ! important; margin: 0px ! important;" />

</p>
<p>I'm reading the book <a href="http://www.amazon.com/gp/product/0123740371?ie=UTF8&amp;tag=httpmiksovskb-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0123740371">Sketching User Experiences</a><img width="1" height="1" border="0" src="http://www.assoc-amazon.com/e/ir?t=httpmiksovskb-20&amp;l=as2&amp;o=1&amp;a=0123740371" style="border: medium none  ! important; margin: 0px ! important;" /> by <a href="http://www.billbuxton.com/">Bill Buxton</a>. The author's attention to the presentation of examples make for an engaging book, and he covers some interesting ground. I came across an interesting list he presents (pp. 111-2) of attributes that characterize design sketches, in which he asserts that sketches are (or have):</p>

<ol><li><em><strong>Quick:</strong> A sketch is quick to make, or at least gives that impression.</em></li>

<li><em><strong>Timely:</strong> A sketch can be provided when needed.</em></li>

<li><em><strong>Inexpensive:</strong> A sketch is cheap. Cost must not inhibit the ability to explore a concept, especially early in the design process.</em></li>

<li><em><strong>Disposable:</strong> If you can't afford to throw it away when done, it is probably not a sketch. The investment with a sketch is in the concept, not the execution. By the way, this doesn't mean that they have no value, or that you always dispose of them. Rather, their value largely depends on their disposability.</em></li>

<li><em><strong>Plentiful:</strong> Sketches tend not to exist in isolation. Their meaning or relevance is generally in the context of a collection or series, not as an isolated rendering.</em></li>

<li><em><strong>Clear vocabulary:</strong> The style in which a sketch is rendered follows certain conventions that distinguish it from other types of renderings. The style, or form, signals that it is a sketch. The way that lines extend through endpoints is an example of such a convention, or style.</em></li>

<li><em><strong>Distinct gesture:</strong> There is a fluidity to sketches that gives them a sense of openness and freedom. They are not tight and precise, in the sense that an engineering drawing would be, for example.</em></li>

<li><em><strong>Minimal detail:</strong> Include only what is required to render the intended purpose or concept. Lawson (1997, p. 242) puts it this way, &quot;... it is usually helpful if the drawing does not show or suggest answers to questions which are not being asked at the time.&quot; Superfluous detail is almost always distracting, at best, no matter how attractive or well rendered. Going beyond &quot;good enough&quot; is a negative, not a positive.</em></li>

<li><em><strong>Appropriate degree of refinement:</strong> By its resolution or style, a sketch should not suggest a level of refinement beyond that of the project being depicted. As Lawson expresses it: &quot;... it seems helpful if the drawing suggests only a level of precision which corresponds to the level of certainty in the designer's mind at the time.&quot;</em></li>

<li><em><strong>Suggest and explore rather than confirm:</strong> More on this later, but sketches don't &quot;tell&quot;, they &quot;suggest&quot;. Their value lies not in the artifact of the sketch itself, but in its ability to provide a catalyst to the desired and appropriate behaviours, conversations, and interactions.</em></li>

<li><em><strong>Ambiguity:</strong> Sketches are intentionally ambiguous, and much of their value derives from their being able to be interpreted in different ways, and new relationships seen within them, even by the person who drew them.</em></li></ol>

<p>Point #9 above states that sketches should exhibit an appropriate degree of refinement, a point echoed in a post I made a while back on <a href="http://miksovsky.blogs.com/flowstate/2006/10/using_crude_ske.html">matching design sketches to the desired level of design feedback</a>. I found the other attributes listed here interesting food for thought.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Entry fields that give the user the benefit of the doubt
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: entry-fields-th

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2007/08/entry-fields-th.html 
DATE: 08/26/2007 02:29:05 PM
-----
BODY:
<p>Assume user knows what they’re doing</p>
<p>Give error feedback when they commit a form, or at least</p>
<p></p>
<p>y have valid input</p>

<p></p><p>For text boxes with validation, e.g., against a regular expression</p> <p>Example: Text box that accepts a phone number</p> <p>As user types in data, don&#39;t complain</p> <p>When they leave the field or try to commit the data, validate and display a warning</p> <p>When the user is typing in the warning state, preserve the error until the user gets the field into a valid state, then clear the error immediately (without waiting for loss of focus or a commit)</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: OpenID: Great idea, bewildering consumer experience
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: openid-great-id

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2007/08/openid-great-id.html 
DATE: 08/16/2007 09:40:00 PM
-----
BODY:
<p>A while back I tried signing up for an <a href="http://en.wikipedia.org/wiki/Openid">OpenID</a>, an &quot;open, decentralized, free framework for user-centric digital identity.&quot; The basic idea is that, instead of needing to choose a user name and password for every site you visit, you can identify yourself with an ID that many sites will accept. It sounds great, but in practice I found the whole process bewildering. In my opinion, it’s not ready for consumer use.&nbsp; </p>
<p><a href="http://miksovsky.blogs.com/flowstate/WindowsLiveWriter/image_2.png" atomicselection="true"><img border="0" alt="image" src="https://miksovsky.blogs.com/flowstate/WindowsLiveWriter/image_thumb_2.png" style="border-width: 0px;" /></a>&nbsp; </p>
<p>Beyond security criticisms of the scheme that can be found elsewhere, I think OpenID has some significant user experience issues. Some of the problems can be fixed, others are integral to the way the system works.&nbsp; </p>

<ul> <li>It's way, way too hard to get started. All the sites supporting OpenID point curious users to the home page for the <a href="http://openid.net">OpenID Foundation</a>. From this site, it’s actually stunningly difficult to find a link to a place where you can actually get an OpenID. A link to a site called <a href="http://iwantmyopenid.org/">I want my OpenID!</a> sounds promising, but the destination page doesn't actually deliver on the promise of getting a user an OpenID either.&nbsp; </li>

<li>The content and tone of the OpenID Foundation site is oriented at developers, not end users. The second sentence of the home page boasts, &quot;OpenID starts with the concept that anyone can identify themselves on the Internet the same way websites do—with a URI.&quot; You know what? To most people, that doesn't sound like an advantage; it sounds geeky, dehumanizing, and more than a little bit frightening.&nbsp; </li>

<li>While there are very cool benefits that come from identifying oneself with a URL (URI), pity the poor consumer. They have dutifully learned that a user name is an identity and a URL is a place to go. Now they must wrap their weary brains around the concept that, when asked to identify themselves, they should provide a location. &quot;Why can't I just use my email address?&quot; they'll wonder. </li>

<li>The process of selecting an OpenID provider will stump the average consumer. They’re being asked to pick an ID that they will, in theory, use everywhere and forevermore to gain access to everything they own. They’re supposed to obtain this ID by making an effectively random selection from a group of providers they have never heard of. </li>

<li>Various OpenID sites also promote the notion that users should set up their own OpenID provider. This is fine for a teeny tiny portion of web users, and scary and out of the question for everyone else. </li>

<li>The lists of OpenID providers are presented in a static order. In some cases this will be <a href="http://iwantmyopenid.org/about/openid">alphabetical</a>. The most commonly referenced <a href="http://openid.net/wiki/index.php/OpenIDServers">list of OpenID providers</a> is presented in chronological order of when the service went live, an order that is effectively random. It's not immediately clear in most of these lists why a user would pick one provider over another. None of the lists I've seen are organized around attributes which are relatively easy for a user to base a decision upon, like: Do you have a blog already? Or, Which language do you prefer to speak? </li>

<li>As an aside, when you ask a normal person to choose a provider from a list for a service they don't understand, most people are just going to pick the first or last entry. (If a default value is provided, they'll pick that. The default value will almost always be the first entry.) So, a static list of providers turns out to be a really good way to screw the bulk of providers whose entries sit in the middle of the list. Microsoft learned this lesson the hard way in various places in Windows, addressing such problems by dynamically shuffling provider names so that all providers spend equal time at the top of the list. More usefully, the lists could reflect community-based provider ratings. </li>

<li>The ostensible universality and permanence of an OpenID actually makes the task of picking a provider harder. Even if I happen to currently have a SixApart blog with a <a href="http://www.sixapart.com/typekey/">TypeKey</a>, am I really prepared to use that ID everywhere? Exactly how long can a consumer expect a given OpenID provider to remain in existence? In my playing around on one site, when I remapped a URI from one provider to another, I lost my ID-related preferences. This gives me pause in depending upon any provider that could potentially die before the web service I'm using the ID with. Frankly, many of the OpenID providers seemed like tiny organizations that could disappear overnight. Nowhere could I find anything that would tell me what should theoretically happen to my ID-bound accounts if that were to happen. </li>

<li>Suppose that, at some point, a visitor to an OpenID-enabled site is really intrigued by this OpenID thing they keep coming across, and decides on the spot that they want to get one for themselves. The OpenID community, and the sites that use it, appear to have given little thought to addressing this scenario. Go to the <a href="http://www.livejournal.com/">LiveJournal</a> home page and try figuring out how you’d get an OpenID <em>and come back to use it</em>. I’ll bet analytics on the site will show that, of the tiny percentage of visitors to LiveJournal who go off from there to get an OpenID, only the most determined will make it back. Why would a site operator let anyone leave their site to perform a task from which they will never return?&nbsp; </li>

<li>An OpenID is an identity (like a user name), not an account. A consumer still needs an account to use the site. However, this isn't at all obvious to a consumer. When I tried to sign in to <a href="http://plaxo.net">Plaxo</a> with my OpenID, I got an otherwise blank page displaying the error, “Unable to verify the specified OpenID.” Some sites do a reasonable job of letting a user who has never logged on before create an account on the spot. When I tried to sign in to <a href="http://livejournal.com">LiveJournal</a> with my OpenID, they let me create an account and then start using it. This inconsistency among implementations will confuse a lot of people. </li>

<li>When I actually tried to use my OpenID on a site, I got a confusing message from the OpenID provider requiring me to confirm that I really wanted to let the site access personal information I had associated with my OpenID. The clarity of such messages varies from OpenID provider to provider, ranging from puzzling to incomprehensible. In the case of Verisign, I was instructed to select which “Trust Profile” I wanted to associate with the site—or did I want to create a new Trust Profile? Wha?</li></ul> <blockquote> <p><a href="http://miksovsky.blogs.com/flowstate/WindowsLiveWriter/OpenID%20Trust%20Request.png" atomicselection="true"><img width="320" height="215" border="0" alt="OpenID Trust Request" src="https://miksovsky.blogs.com/flowstate/WindowsLiveWriter/OpenID%20Trust%20Request_thumb.png" style="border-width: 0px;" /></a> <br />Since most users have never encountered the concept of sharing information across sites, a ton of education would be necessary to make these messages meaningful to the average user.</p></blockquote> <ul> <li>Currently, even those sites that do implement OpenID generally treat OpenIDs as a second-class form of identification. They put their own proprietary means of signing in (generally with a user name and password) on their home page, and bury the OpenID sign in facility behind a link. This means that the hip OpenID-using visitor has to make more clicks than the proprietary ID-using masses... which doesn't exactly sound like a reward.</li></ul> <p>And all this is for—what, exactly? To save me from having to pick a user name and password? As annoying as that can be, <strong>it's just not that hard!</strong> Remembering an arbitrary user name does cause real trouble, but simply allowing email addresses to be used as IDs can solve almost all of that problem. As more and more sites allow email addresses as IDs, the need for OpenID becomes less compelling to a consumer.</p> <p>For the time being, I can’t imagine a sane business operator forcing their precious visitors through this gauntlet of user experience issues just for the marginal benefits that accrue to a shared form of ID. I've read numerous claims that all it will take is for someone big like Google to support OpenID to crack this problem open. Unfortunately, there's no business of any size that can afford to direct their traffic down a dead end.</p> <p>Most service operators will, at best, offer users a choice between using a proprietary ID or an OpenID, creating a terrible economic proposition for a consumer. Faced with the proposition of: 1) struggling once for thirty minutes to struggle through a process they can barely understand, or 2) spending two minutes on every new site breezing through a familiar process they've done countless times before, <strong>normal busy people will choose the familiar route time and time again</strong>. I’ll bet anything that most people will keep going for proprietary IDs, further deferring the network effects possible from OpenID adoption.</p> <p>This isn't to say that OpenID isn't worth attempts to fix it. At least some of the above problems can, and should, be addressed head on by the OpenID community. My recommendations:</p> <ol> <li>Redesign the OpenID home page for consumers. The page's main content should contain a brief explanation of OpenID in consumer-friendly terms, along with a giant Get an Open ID button. Move all the developer material behind a Developers button. </li>

<li>Design an end-to-end process for getting an OpenID from a service operator's site. Since most services won't care which provider the user uses, let these services send the user into a real flow for picking a provider, getting an ID, and most importantly <em>coming back to the original service to use the new ID.</em> When they get back to the service, the new OpenID should be prefilled. </li>

<li>Give the above flow a sidebar titled &quot;Do you have a blog?&quot; that explains that, if they have a blog on LiveJournal, TypePad, etc., they can use that for their OpenID. A link in the sidebar should shunt the user into a page that has them pick their blog provider, then tells them what the (blog service dependent) form of their OpenID is. The flow should then return the user to the service they started on (again, with their OpenID prefilled). </li>

<li>Organize the list of providers around factors that can actually influence a user's decision. Consider offering provider ratings based on ease of use, uptime, etc. </li>

<li>Refine reference designs for the complex range of cases that come up in using OpenID with a service. E.g., define the expected behavior and terminology that should be used when a user tries to log in with an OpenID but does not already have an account with that ID. </li>

<li>Define guarantees that services should offer to users in the event their OpenID provider goes out of business. </li>

<li>Build an organization that can do real usability testing on this service with real consumers.</li></ol>

<p><em><strong>UPDATE (October 7, 2007): </strong>This week OpenID.net overhauled their site, and the new site addresses a number of the criticisms listed above.</em></p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Andrew Green
EMAIL: andrew@shedside.com
IP: 81.6.252.42
URL: http://www.buy-our-honeymoon.com/
DATE: 08/17/2007 03:37:48 AM
100% agreed on all counts here.  As a developer at the geekier end of the spectrum, I considered adding support for OpenID to Buy Our Honeymoon, a service resolutely aimed at a non-geeky market.  But we didn't, largely because doing so would have meant having to provide our own, detailed explanation of the service, and then supporting it.  I'll bet that most sites that treat OpenID as a second class citizen have a similar motivation -- that by hiding it, only people who already know what it is (and consequently won't need support for it) will be inclined to use it.
-----
COMMENT:
AUTHOR: Asbjørn Ulsberg
EMAIL: asbjorn@ulsberg.no
IP: 213.236.250.82
URL: http://asbjornu.myopenid.com/
DATE: 08/17/2007 05:48:24 AM
I agree to most points. Thankfully, most of them will be irrelevant when OpenID gets implemented in browsers. Then, the identity will be a part of the user's desktop somehow; either as an integrated part of their operating system (like Windows CardSpace) or as a part of the identity a user builds in his or her browser.

My OpenID can, in the case a browser has control of it, be automatically submitted to sites (it can be announced as a part of the HTTP request as a header for example) and approval of sites requesting the OpenID will be done directly in the browser through a button, information bar or similar. It can be a challenge/response system like ordinary HTTP authentication and it will in most cases mean pressing a "confirm" button in the browser.

This of course introduces other problems, like using several computers to authenticate with the same OpenID on the same sites, but that problem is being worked on already by the browser vendors relative to centralized storage of favorites and such. I think most of these problems will be gone in a year or two, at least if Internet Explorer 8 embraces OpenID.
-----
COMMENT:
AUTHOR: Gary Krall
EMAIL: gkrall@verisign.com
IP: 65.205.251.51
URL: http://pip.verisignlabs.com
DATE: 08/17/2007 09:04:21 AM
I am the technical director for the PiP here at VeriSign and we completely agree with you regarding how confusing the Trust Profile selection **was**.  The functionality you describe is about 2 months old as we relaunched our service last month and we removed that entire flow metaphor.

I'd appreciate it if you could take a look at the new service and give me some of your comments.  We have spent a fair bit of time attempting from a UI perspective to address some of the legitimate concerns you raise as an OP while at the same time adding in additional functionality.

With that said, I think you make some really excellent points in your post especially as it relates to Relying Parties.  And I think your point #4 in your recommendations would also be very meaningful in choosing providers and we'd welcome such an approach.

Excellent post and commentary.
-----
COMMENT:
AUTHOR: Observer
EMAIL: observer@mailinator.com
IP: 91.192.31.234
URL: 
DATE: 08/17/2007 09:29:30 AM
Hi, Gary.  Just signed up for your service.  Looked really good.  A couple of nits/notes:

You might want to make the standard "My Information" table an ordinary form, instead of having all those [edit] links there.  Filling in more than one or two fields will drive people crazy.

Also make it clear on that screen that the user should only fill in the information that they might want to share with others, and that they will be given full control over what to share when they use the OpenID to sign in on other sites.

The "Sign In" form is really slick, but it wasn't obvious to me what "associated field" meant.  I somehow assumed that if I clicked on the button for the email, it would put my email in the email field, but it ended up in the field that had focus instead.  Either make this smarter, or replace "associated" with something more obvious.

The expiration radiobuttons are flexible, but a "Allow just this request" button would probably be a nice shortcut.
-----
COMMENT:
AUTHOR: Joseph Smarr
EMAIL: joseph@plaxo.com
IP: 64.160.187.202
URL: http://josephsmarr.com
DATE: 08/17/2007 10:13:50 AM
We had some technical issues when we first rolled out OpenID at Plaxo, but I think everything's fixed now, so if you get a chance, try it again and let me know if it doesn't work. We go through the account creation flow if it's a new OpenID as you mention above. Thanks! js
-----
COMMENT:
AUTHOR: Gary Krall
EMAIL: gkrall@verisign.com
IP: 65.205.251.51
URL: http://pip.verisignlabs.com
DATE: 08/17/2007 11:48:37 AM
Excellent suggestions and the My Information one we discussed alot internally for as you point out this metaphor differs from the way we handle My OpenIDs in which a user can elect to either pull values from their My Information or enter new values which in this case is a form edit.

In terms of the associated fields that's a good catch.  You'll be pleased to know that the metaphor you suggested was exactly what our internal usability group proposed (we actually have the mockups from them to do this).  In this case we had to balance the need to ship something versus the functionality but know that it is in our queue in a subsequent update.

Thanks again.
-----
COMMENT:
AUTHOR: David Recordon
EMAIL: recordond@gmail.com
IP: 65.205.251.51
URL: http://www.davidrecordon.com
DATE: 08/17/2007 12:03:20 PM
As others have said, these are all great points.  I've started updating some text on http://openid.net and would definitely appreciate any other feedback as well!
-----
COMMENT:
AUTHOR: Eric Norman
EMAIL: ejnorman@doit.wisc.edu
IP: 128.104.16.156
URL: http://ejnorman.blogspot.com
DATE: 08/17/2007 12:56:58 PM
Here's a short, albeit cynical, but accurate, summary.  OpenID was designed by geeks for geeks.  Please note that this is a very common phenomenon; it's not just OpenID.

Anyway, I do think you missed what could be w very useful suggestion.

Involve people that actually know something about usability, human engineering, and so forth in the design process.  Suggestion 7 is that they be involved after design and coding.  That's too late.  They need to be involved and make contributions from the very beginning.

Let me try to be clear who I'm talking about here.  I'm talking about people who can actually speak the language and have their brains wrapped around the concepts of human engineering.  I'm talking about non-geeks.  They're out there.  FInd them and form an alliance with them.
-----
COMMENT:
AUTHOR: Joseph Holsten
EMAIL: joseph@josephholsten.com
IP: 216.253.0.103
URL: http://josephholsten.com
DATE: 08/17/2007 02:04:21 PM
Well, one improvement might be to get the community's opinion on the open openid provider. Care to share your opinion?
http://jyte.com/site/search?q=best+openid+provider

-----
COMMENT:
AUTHOR: Jonas
EMAIL: x@x.com
IP: 213.112.89.52
URL: 
DATE: 08/17/2007 03:12:25 PM
Well, openid is a pretty lousy idea. We already have https which could facilitate a much simpler to operate single sign on system than openid ever can, given just a little bit of usability work from the web browser developers.

In those few cases I actually WOULD like an identity shared between different services, that is. Also, there is absolutely nothing "proprietary" with username/password authentication. I don't know what word you may be looking for but that can't be it.
-----
COMMENT:
AUTHOR: Jack S.
EMAIL: nospamferme@hotmail.com
IP: 67.99.63.186
URL: 
DATE: 08/17/2007 04:14:41 PM
I admit to not knowing much about this idea - because I dismissed it the first time I read about it.  The main problem, as stated above, is that there is no motivation to participate in yet another flaky, undertested beta web annoyance/signup/service, to avoid entering in a username at each site.  Then add on the obvious security problems and the additional unnecessary points of failure.  

It's a solution without a problem, from the POV of the user.

A better explanation may be that the whole thing is corporate marketing-motivated, in the relentless effort to consolidate and sell customer data, and to track individual activity across independent sites and retailers.  At least that makes sense.


-----
COMMENT:
AUTHOR: Forsooth
EMAIL: fnustle@gmail.com
IP: 72.173.56.144
URL: 
DATE: 08/17/2007 07:13:38 PM
Agreed on all points. However as a consumer I would streamline further. Instead of having a openid-less user pick a provider I would simply send them to a pre-selected, high quality, possibly co-branded provider. 

I would also never have two types of logins if I was authoring a new site. Either use openid for all accounts or not at all. With the streamlining you can get away with this. For an old site you probably would not want to go through the trouble of migrating existing accounts and retraining users.

As a provider not only should I send new openid users back to the site they came from but send them back logged in. (This may require an extension to the standard.)

To ease the fears of the provider going out of business I would allow the user to choose their own domain, ideally with a standard extension like .oid or somesuch. The extension should then be optional on sign-in to save keystrokes (e.g. johnsmith instead of johnsmith.oid) and make it look more like a username than a url. Of course this costs bucks so allow the user to later migrate (e.g. from johnsmith.provider.com to johnsmith.oid).
-----
COMMENT:
AUTHOR: Eric RIce
EMAIL: ericrice@gmail.com
IP: 70.7.191.174
URL: http://ericrice.com
DATE: 08/17/2007 07:24:04 PM
It always seems to me like 'open' is a conceptual word important to the developers and techs, not to the consumer. 

Would a consumer want something like their ID be "open" instead of 'secure' 'locked' 'protected' etc? Those words mean different things to both camps.

Who owns it? Who is accountable? Microsoft? Apple? Or uh, you know, some people. <-- those are customer questions, not mine. :)
-----
COMMENT:
AUTHOR: Bryan
EMAIL: bryanlockwood@gmail.com
IP: 216.231.47.65
URL: http://adminfoo.net
DATE: 08/17/2007 07:58:36 PM
Agree with the comments.

OpenID providers: you need to provide some info up front, available *before* someone signs up to use your OpenID services. Here are just a few of the things I need at least some reassurance about before signing blindly up for service:

* Is if free? Will it always be?
* What's your privacy policy?
* How do I know you'll still be in business a year from now? or 10 years from now? What will happen to my OpenID if you are not?
* Will I be able to create multiple OpenID identities? And manage them easily?

-----
COMMENT:
AUTHOR: Jordan
EMAIL: jordan@pandemicsoul.com
IP: 76.171.183.181
URL: http://www.pandemicsoul.com/blog
DATE: 08/17/2007 11:20:06 PM
I couldn't agree more on all accounts. As a moderately geeky person, I have to say that I am continually frustrated by the absolutely impenetrable explanations on OpenID provider sites. Nonetheless, I remain a steadfast fan of the system and always recommend to websites that I sign up with that they implement the OpenID system. I sign up sometimes 1-2 new sites a day, and I can't underestimate how much easier this would make my life. 

I think that as more people are willing to take a few minutes and understand it, you're going to see it begin to move to a lowest common denominator situation. Wikipedia was the same way when it launched - people called it flaky, unsecured, untested. When I was hired at a new company a few months ago, where there aren't a lot of people I would consider technologically oriented in any way (but who do sit in front of a computer all day), they reference Wikipedia almost on a daily basis. 

There does need to be a concerted effort by the OpenID community to completely divorce "consumer"/"corporate"/"developer" documentation, though. I see that the OpenID.net site has been updated a little, but for it to be effective at all for consumers or corporations, their information should be completely delineated. Either separated by clear formatting or different pages -- not just different paragraphs. 

Moreover, I think as more and more people get into the idea of having an "identity" on the internet (like MySpace or Facebook pages), we're going to see ideas like catch on quicker.
-----
COMMENT:
AUTHOR: jason
EMAIL: jasonwhat@gmail.com
IP: 162.84.189.17
URL: 
DATE: 08/18/2007 07:17:24 AM
There is a simple way to make this easy for users: all major providers should enable openId (as aol has done) and then make it clear that they can login to many new sites with that one ID (something aol has not done)  From here, the technology should be smart enough to recognize the @gmail.com for example portion and create the correct uri.  Almost everyone has an ID from a major service like Yahoo or Google, and those who don't are usually the geekier ones who have the ability to understand OpenID as it is now, or will refuse such a service all together over security concerns.

The other simple, though less desirable solution, is to use a per provider api like Yahoo!'s BBauth.
-----
COMMENT:
AUTHOR: Ben
EMAIL: bnolan@gmail.com
IP: 80.226.0.1
URL: 
DATE: 08/18/2007 12:33:50 PM
Stop whinging. OpenID is great - it's not ready for the myspace generation and you just wasted 20 minutes writing a whingy post when you could have written to the maintainers and asked if you could update help make their website more end-user friendly.

(But then I just wasted 3 minutes writing this - woah - so meta) 
-----
COMMENT:
AUTHOR: Dennis Martinez
EMAIL: dennis@dennmart.com
IP: 64.237.245.193
URL: http://www.dennmart.com
DATE: 08/18/2007 06:47:47 PM
I think like with all newer technology, there are going to be some bumps in the road. Your experience has differed greatly from my own, although it seems you've used this system way more than I have. In my experience, I haven't had most of those problems you mentioned, like confusing messages when trying to create an account at a site or actually getting an OpenID. But maybe for the regular, non-tech-oriented person, this may seem a little bit daunting at first.

However, there are strides being made every day with OpenID support. I've been seeing more and more sites and applications adding OpenID funcionality to their sites. Some apps, like Beast (http://beast.caboo.se - a forum app running on Rails), are adding it in their main login screens instead of relegating it to obscurity.

You're right in that it seems OpenID is developer-centric, but that's because it's still in an adoption phase. Once OpenID usage is more widespread, the end user should see more improvements. I think OpenID has a chance while these shortcomings - all valid, in my opinion - become fixed. It probably won't end the Username / Password logins we're all used to, but it should gain increased popularity down the road.
-----
COMMENT:
AUTHOR: TRS-80
EMAIL: 
IP: 124.168.67.223
URL: http://profile.typekey.com/trs80/
DATE: 08/19/2007 03:54:51 AM
http://intertwingly.net/blog/2007/01/03/OpenID-for-non-SuperUsers says most of what should be on the OpenID front page. In particular, delegation allows you to use any provider while keeping your own URI.
-----
COMMENT:
AUTHOR: Yakov [Mixed In Key]
EMAIL: yakov@mixedinkey.com
IP: 69.143.170.93
URL: http://www.mixedinkey.com
DATE: 08/20/2007 09:27:17 AM
Hi,

I read your blog through RSS, so I never post here.  But I agree with this post 100% -- we avoided OpenID on our custom Community website precisely because of these reasons.  OpenID is an idea not ready for primetime.  The damage to the user experience is way too high at the moment.


-Yakov
Mixed In Key
-----
COMMENT:
AUTHOR: Jon
EMAIL: oftelim@yahoo.com
IP: 129.33.49.251
URL: 
DATE: 08/20/2007 01:47:39 PM
I'm a web programmer/designer and have been using the web for years. Yet for the life of me, I could not figure out how to sign up for an account, and REALLY wanted to try it out. I can only imagine what joe sixpack is going through
-----
COMMENT:
AUTHOR: Doctor Memory
EMAIL: jkdlfjsadlfkj@memory.blank.org
IP: 65.57.245.11
URL: http://blahg.blank.org/
DATE: 08/21/2007 12:08:49 PM
I have a better idea: Don't use OpenID, and for the love of god don't encourage naive users to use it.  Problem solved.

(Hm, apparently this blog filters out html links?  Very well, click here for context: http://www.emergentchaos.com/archives/2007/08/welcome_iouhgijudgviujs_p.html )
-----
COMMENT:
AUTHOR: Will Hartung
EMAIL: willh@msoft.com
IP: 66.161.50.252
URL: 
DATE: 08/22/2007 08:32:45 AM
There's no reason that OpenID can not be implemented transparently.

Take your generic, everyday, Login/Password page. Add an OpenID logo. Implement OpenID.

When the user logs in, did they provide a password? If they did, authenticate like normal.

Is the pasword blank? Does it look like the login id might be a URL?  (i.e. if Frank accidently types in 'frakn', no obvious domain, no slashes, probably not a URL then) Then throw it down Open IDs rabbit hole and see what happens. Does it work? They're in. You're done.

All you need to do is allow empty passwords (on top of implementing OpenID of course).

So, now, when Joe User shows up, they enter "joe" and "password". Boom, they're in.

When Joe Geek shows up, they enter "joe.geek.openid.org" (or whatever). Login fails, fall back tries OpenID, boom, they're in.

Silent, transparent, no trauma on the user interface. Most catastrophic issue being that Joe Geek doesn't get "free fill in" from their browser for their Open ID because the fieldname isn't the suggested Open ID form field. Boo Hoo.

-----
COMMENT:
AUTHOR: Paul Tanner
EMAIL: paul@virtual-techno.com
IP: 81.110.166.45
URL: http://www.e-ssociation.net/blog
DATE: 08/24/2007 12:21:49 AM
I agree with all your points but I want to focus a comment on:

>> Organize the list of providers around factors that can actually influence a user's decision. Consider offering provider ratings based on ease of use, uptime, etc.

This is fundamental because the OpenID concept depends on trusting a OP.  How can an average user do that?  So the (essential) resource that describes OpenID to users needs to provide material to allow judgements to be made about OPs.

I note that the Foundation has indicated that it does not want to get involved in this.  This seems strange because this is key to OpenID as a potentially viable brand.  So another player is needed to provide independent assessments.

In the absense of such assessments an RP that is not also an OP would be obliged to partner with one or more OPs and put contractual obligations in place.  If not which OP would they advise users to choose?
-----
COMMENT:
AUTHOR: judy
EMAIL: sfoydepunjab@gmail.com
IP: 200.112.64.52
URL: http://www.iseig.info
DATE: 08/30/2008 07:19:23 AM
I have always wanted a compendium of novena prayers. Thank you for sharing all these prayers with us. It brings joy and happiness to everyone. I know, I do feel that way.i
-----
COMMENT:
AUTHOR: Dan
EMAIL: mmz0a6es@yahoo.co.uk
IP: 201.68.123.139
URL: http://www.ecenf.info
DATE: 10/14/2008 10:52:08 AM
Hi, everybodyu
-----
COMMENT:
AUTHOR: naella
EMAIL: marol@yahoo.com
IP: 78.37.44.95
URL: 
DATE: 11/03/2008 01:01:53 PM

I found this from the link at  http://newfileengine.com/


-----
COMMENT:
AUTHOR: Ron
EMAIL: petekion@gmail.com
IP: 218.229.93.225
URL: http://www.fecep.org
DATE: 12/04/2008 08:43:06 AM
I like it and the background and colors make it easy to readi
-----
COMMENT:
AUTHOR: wejfx iesjyxuo
EMAIL: ljxtdypwk@gmail.com
IP: 59.4.124.7
URL: http://www.xvhekdt.vkjzodhb.com
DATE: 03/09/2009 03:32:15 AM
bahcz idckr rimovzapt meoul ykmvi aehrqg lpskixw
-----
PING:
TITLE: OpenID: Does The World Really Need Yet Another Username and Password?
URL: http://www.codinghorror.com/blog/archives/001121.html
IP: 208.106.251.207
BLOG NAME: Coding Horror
DATE: 05/23/2008 01:18:13 AM
 As we continue to work on the code that will eventually become stackoverflow, we belatedly realized that we'd be contributing to the glut of username and passwords on the web. I have fifty online logins, and I can't remember...
-----
PING:
TITLE: Anothr feed track -Ma.gnolia: Recent Bookmarks Tagged With
URL: http://www.anothr.com/feeds/track/101990
IP: 203.80.70.170
BLOG NAME: anothr user
DATE: 08/22/2007 07:23:05 AM
One new subscriber from Anothr Alerts
-----
PING:
TITLE: OpenID and the art of solving problems users want solved
URL: http://geeks.ms/blogs/roller/archive/2007/08/19/openid-and-the-art-of-solving-problems-users-want-solved.aspx
IP: 209.200.117.100
BLOG NAME: Noticias externas
DATE: 08/19/2007 02:15:51 PM
Not too long ago, Jan Miksovsky wrote about how confusing OpenID is to users due to the way sites expose
-----
PING:
TITLE: OpenID and the art of solving problems users want solved
URL: http://blogs.msdn.com/justsean/archive/2007/08/19/openid-and-the-art-of-solving-problems-users-want-solved.aspx
IP: 209.34.241.64
BLOG NAME: Bit-cycling
DATE: 08/19/2007 02:06:59 PM
Not too long ago, Jan Miksovsky wrote about how confusing OpenID is to users due to the way sites expose
-----
PING:
TITLE: Being an Open ID(iot)
URL: http://broadstuff.com/archives/380-Being-an-Open-IDiot.html
IP: 69.89.21.89
BLOG NAME: broadstuff
DATE: 08/18/2007 12:33:59 PM
As i know so many people whom I both like and respect but who are very also keen on Open ID I've been relectant to carp (and it could just have been me), so I'm glad  someone else has come out the closet on this.. Jan miskovsky logs most of the issues I c
-----
PING:
TITLE: OpenID - When programmers are in-charge of the asylum
URL: http://elroyjetson.org/2007/08/18/openid-when-programmers-are-in-charge-of-the-asylum/
IP: 69.39.86.10
BLOG NAME: Elroy Jetson
DATE: 08/18/2007 05:55:37 AM
 I firmly believe that  a service like OpenID is necessary and going to take off like wild fire in the next couple of years.  I also believe microformats are going to save us from ourselves and Digital Life Aggregators are going to rise up and social n...
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Busy users don't take detours
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
BASENAME: busy-users-dont

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2007/07/busy-users-dont.html 
DATE: 07/28/2007 09:46:06 PM
-----
BODY:
<p>I witnessed these economics first hand when helping some designers working on Microsoft's ill-fated Hailstorm project, which attempted to get web sites to adopt a Microsoft Passport (now a <a href="http://en.wikipedia.org/wiki/Microsoft_Passport">Windows Live ID</a>) as a standard means of identification. Hailstorm was pushed over and over again as something that would save consumers time. Never pick another password! Never enter your home address again! Hailstorm died horribly because no one trusted Microsoft as the world's ID holder, but the fact is that, from a usability standpoint, the project was doomed anyway. It would have taken <strong>ages</strong> for a user to navigate a complex sequence of pages to use a Passport at a non-Microsoft web site. In contrast, <strong>users didn't actually have any trouble typing in their name or home address</strong>. Yes, it was tedious to do at every site, but users understood what to do, and it took them all of a few seconds to do it.</p> <p>Similarly, picking a user name or password just isn't an insurmountable problem for users. Yes, it's tedious, but they've gotten used to it. This equation has only gotten more skewed as sites like <a href="http://www.geni.com">Geni</a> have figured out <a href="http://miksovsky.blogs.com/flowstate/2007/06/geni_slickest_t.html">how to make signup trivial</a>.</p> <p>The only people who will get an OpenID are people who can make a careful cost-benefit analysis and determine that spending half an hour to understand OpenID and signup for one will be worth the time they save in the long run. In other words: engineers.</p> <p>&nbsp;</p> <p>economic decision that needs to weigh the potential benefit against the opportunity cost of completing whatever task they're in the middle of</p> <p>there's only one time I've ever seen users mess around with the configuration of anything: when they're procrastinating. When they're supposed to be starting that important term paper or new presentation, they suddenly decide that now's the time to check out all the fonts that are installed on their system, or maybe reconfigure their toolbar.</p> <p>&nbsp;</p> <p><a title="http://www.useit.com/alertbox/activeuserparadox.html" href="http://www.useit.com/alertbox/activeuserparadox.html">http://www.useit.com/alertbox/activeuserparadox.html</a></p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Using sounds for positive feedback
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
BASENAME: using-sounds-fo

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2007/06/using-sounds-fo.html 
DATE: 06/27/2007 10:59:32 PM
-----
BODY:
<p>Cozi sounds</p> <p>positive feedback. Car door CLICK -- if you are walking away and *don't* hear it, you instantly miss it and go back to close the door again more firmly</p> <p>accomplished musician and sound guru Steve</p> <p>not Robert Fripp, he has *played* with Robert Fripp. Cozi is lucky, but there are plenty of repositories of royalty-free sounds</p> <p>Welcome - a "splash" or "jingle" three notes to match the three clover leaves on the Cozi logo. simple, calm but alert to fit with Cozi brand</p> <p>Extended Welcome - sense of possibilities</p> <p>Message Sent - positive, two notes ending up to suggest movement up and away. Probably my favorite sound of the four.</p> <p>Got It - positive, two notes ending down for confirmation. In retrospect, this sounds a bit woody</p> <p>Asterisk</p> <p>used in Windows, web client, mobile phone IVR -- unify all three clients with sound</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Clean tabs
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
BASENAME: clean-tabs

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2007/06/clean-tabs.html 
DATE: 06/24/2007 08:54:48 PM
-----
BODY:
<p>Tabs in Windows Media Center's Movie area</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Don't bury the lede: What's the real story behind a UI interaction?
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: dont-bury-the-l

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2007/06/dont-bury-the-l.html 
DATE: 06/20/2007 10:20:00 PM
-----
BODY:
<p>A user interface designer, like a journalist, should avoid <em><a href="http://en.wikipedia.org/wiki/Bury_the_lead">burying the lede</a></em>: engaging the user with an opening question or statement that omits the most critical point of interest. The <a href="http://en.wikipedia.org/wiki/News_style#Terms_and_structure">lede</a> is the all-important opening sentence of a news story, and journalists labor over them. User interface interactions have ledes too, and they should be crafted with as much care.</p> <p>The Move File dialog in Windows Vista offers a convenient example. (Although a dialog is used here, this principle applies equally well to web pages or other UI modalities.) The Move File dialog appears when a user attempts to move a file into a folder that already contains a file of the same name:</p> <p><a href="http://miksovsky.blogs.com/flowstate/WindowsLiveWriter/image_1.png" atomicselection="true"><img width="581" height="618" border="0" alt="image" src="https://miksovsky.blogs.com/flowstate/WindowsLiveWriter/image_thumb_1.png" style="border: 0px none ;" /></a> </p> <p>Can you see the disaster in progress? Most users can't either.</p> <p>This dialog has buried the lede. It focuses the user's attention on the fact that there is another file with the same name in the destination folder. It fails to point out a much, much more interesting condition: <strong>The user is about to overwrite a newer file with an older file.</strong></p> <p>To its credit, this Move File dialog does improve upon the older File Replace dialog in previous versions of Windows: it offers more details that can help the user make a decision, and offers a new option to keep both files. (The latter is particularly helpful when dealing with files like auto-named digital photos, because a user can easily take different photos that end up with the same name.)</p> <p>Overwriting a file is not, by itself, an uncommon or bad thing. It is a daily occurrence for users to overwrite an older file with a newer version of that same file. The user may be posting an updated copy of a document to a backup location, or to a server for use by others, or to removable media for transportation elsewhere, etc. This is business as usual.</p> <p>Going the other way—overwriting a newer file with an older files—is a much rarer event. The user might be giving up on work they've done and throwing it away. Alternatively, they could be restoring a backup file to replace one that has become corrupted. Either event is unusual, a point which should be emphasized in the dialog.</p> <p>The above dialog's text fails at this, as does its layout and typography. There are numerous pieces of text competing for attention, but among the most prominent are the bolded file names. That's a bit odd, since the entire premise of the dialog is that <em>these two file names will be the same</em>. The dialog has carefully drawn the user's attention to information which is guaranteed to be redundant. (If the user is moving multiple files, only some of which have conflicts, the file names are relevant—but that case can and should be handled specially.)</p> <p>As just a very first cut at revising the above dialog to restore the lede, some text could change. The typography could be tweaked to focus on the salient time stamps. A different sound is probably also in order, to distinguish the invocation of this dialog variant from the more normal one above, and emphasize that something unusual is going on.</p> <p><a href="http://miksovsky.blogs.com/flowstate/WindowsLiveWriter/File%20Replace%20Dialog%20Revised.png" atomicselection="true"><img width="581" height="618" border="0" alt="File Replace Dialog Revised" src="https://miksovsky.blogs.com/flowstate/WindowsLiveWriter/File%20Replace%20Dialog%20Revised_thumb.png" style="border: 0px none ;" /></a> </p> <p>(It should be pointed out that the designers of Vista's Win32-based UI can't actually set a run of text in bold, as shown in the dialog's introductory statement, because Win32 is <a href="http://miksovsky.blogs.com/flowstate/2006/05/what_the_font.html">font impoverished</a>.)</p> <p>This revision would clearly needs a ton more work, but is a start in the right direction. At least the dialog now opens with the lede.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Sam
EMAIL: notify2007@radeldudel.de
IP: 83.189.10.237
URL: http://www.radeldudel.de/blog
DATE: 06/20/2007 10:53:01 PM
Funny, it seems both Microsoft and you missed an error in this dialog:

In the option 'Dont't Move' it says 'leave this file in the *destination* folder'.
But it is the source file, so we will leave it in the *source* folder, obviously.
-----
COMMENT:
AUTHOR: Graham Glass
EMAIL: graham.glass@gmail.com
IP: 71.204.188.186
URL: http://grahamglass.blogs.com
DATE: 06/20/2007 10:53:16 PM
Wouldn't it also be clearer to say "what you would like to do?" at the top instead of "click the file you want to keep?"

Cheers,
Graham
-----
COMMENT:
AUTHOR: Alex
EMAIL: alex-flow@plooy.net
IP: 124.148.1.125
URL: http://www.plooy.net/
DATE: 06/21/2007 02:54:52 AM
Just for comparison, I reckon the XP dialog was even clearer - effectively "Replace this file (details) with this one (details)?" And then there's Mac OS X - "A newer (or An older) file with this name already exists in this location. Do you want to replace it with the one you're moving?" Simple and clean.
-----
COMMENT:
AUTHOR: nstlgc
EMAIL: flowstate@nostalg1c.org
IP: 69.60.122.94
URL: 
DATE: 06/21/2007 03:16:34 AM
Sam, I think they mean "leave the file in the destination folder" as in "don't overwrite it". The file listed is the one in the destination folder (the one that's about to be overwritten), not the one in the source folder.
-----
COMMENT:
AUTHOR: Tom Clancy
EMAIL: tclancy@gmail.com
IP: 208.133.219.2
URL: 
DATE: 06/21/2007 04:05:47 AM
"Overwrite the newer file" sounds like the opposite of what you mean, unless I misunderstood. Either way, it could be clearer.
-----
COMMENT:
AUTHOR: Geof Harries
EMAIL: no@spam.com
IP: 198.235.198.4
URL: http://subvert.ca/
DATE: 06/21/2007 10:22:21 PM
I would consider the original term "replace" to be much simpler and easier to understand than "overwrite". Also, in both instances, "destination folder" seems awfully geeky. Why not again use more plain language, such as Apple's "location"?
-----
COMMENT:
AUTHOR: David
EMAIL: david@marshy.com
IP: 202.7.166.166
URL: 
DATE: 06/22/2007 08:55:37 PM
Can I point out the biggest usability issue with this dialog? Without moving your mouse over the text I couldn't work out how to action this window. There is a Cancel button and nothing else. I read the text a few times before I realised that the whole text block was a clickable area. It still throws me off when I get this window sometimes as I get a huge amount of text to read and my natural reaction to the window like every other window is to look at the bottom for the possible buttons to action the window. It is just a few more seconds where I am forced to stop and read the text and then remember to click the text. Some simple buttons would of been better at the bottom of this window with most of the text still being made available.
-----
COMMENT:
AUTHOR: Stephen Mok
EMAIL: stephen@stephenmok.net
IP: 121.210.152.195
URL: http://www.stephenmok.net/blog
DATE: 06/24/2007 07:26:22 AM
David, I guess you missed the "Click the file you want to keep" instruction.
-----
COMMENT:
AUTHOR: Ram Yoga
EMAIL: ram@ramyoga.com
IP: 195.204.41.11
URL: http://ramyoga.com
DATE: 06/25/2007 07:26:57 AM
Actually, I agree with David. Normally you wouldn't take the time to read the entire text. And the "Click the file you want to keep" is pretty discrete. The "cancel" button has a higher click affordance, so your natural instinct is to click that button.

I'm sure, though, that this problem will lessen as users get used to Vista. But I'm equally sure that some people will hit cancel by mistake. BTW: What DOES happen when you click "Cancel"?
-----
COMMENT:
AUTHOR: Adam
EMAIL: adam.sampson@gmail.com
IP: 70.160.30.32
URL: 
DATE: 06/27/2007 12:33:47 PM
Do users really reason about file newness through file times though? What if I've been working on a file and get 'the newest version' of it from an email which happens to have an earlier file time on it? Woudldn't it then be confusing to see Windows refer to it as a newer file?

Or do users even reason about the newness of files at all? I've seen plenty of examples of users appending letters or numbers to the end of files instead of looking at the file's Last Modified Time.
-----
COMMENT:
AUTHOR: Sandeep Mohan
EMAIL: sjmohan@gmail.com
IP: 72.83.253.167
URL: 
DATE: 06/28/2007 08:25:20 AM
Good points and post. This has been possibly dealt with in the comments but I would suggest that the options be reversed for an user interaction with less "anxiety". For example, the dialog ought to offer the option to save both, not move or finally overwrite the 'newer' file in that order.



-----
COMMENT:
AUTHOR: lucmars
EMAIL: lucmars@orange.fr
IP: 80.9.22.129
URL: http://lucmars.wordpress.com
DATE: 08/21/2007 10:10:23 AM
Yes, the best is to not confuse the user with "newer"/"older". Just warns that this file already exists in this location, replace it ? replace/cancel.
Either the user knows what he/she is doing and then overwrites, either the user goes in doubt and then cancel.

-----
COMMENT:
AUTHOR: kate
EMAIL: kcatanese@yahoo.com
IP: 76.241.116.150
URL: 
DATE: 02/22/2008 02:54:32 PM
actually, this feature is REALLY annoying me. daily, i bring at least ten files from work to my home computer to update. in XP the dialog box would tell me which file was newest. now, every single time i copy a file, i have to wonder if i am accidentally overwriting my updated file with a file that may be older. is there any fix for this??? 
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Times Reader finally delivers long-promised digital newspaper reading experience
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: times_reader_fi

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2007/06/times_reader_fi.html 
DATE: 06/14/2007 10:15:00 PM
-----
BODY:
<p>For the past month I've been playing with <a href="http://select.nytimes.com/gst/timesreader.html">Times Reader</a>, a Windows client application for browsing the New York Times. I think the computing industry has been promising this sort of digital newspaper for, oh, 30 years or so, so it's nice to see it finally happened.</p> <p>I remember reading about early prototypes of digital newspapers in coverage of work at the <a href="http://www.amazon.com/Media-Lab-Inventing-Future-M/dp/0140097015/ref=pd_bbs_sr_1/103-5341647-4876649?ie=UTF8&amp;s=books&amp;qid=1180930122&amp;sr=8-1">MIT Media Lab</a> in the 1980s. The basic idea is that the computer would download news articles, then use principles of layout and typography to create a result that was optimal for browsing and reading on the user's display. Since then we've seen the advent of newspaper web sites, but in my opinion, none of them offer anything close to the pleasure of reading a paper newspaper.</p> <p>In general, Times Reader effectively realizes the original digital newspaper vision. It makes intelligent layout decisions that maximize legibility, achieve a reasonable aesthetic appearance, keep articles on one page if possible (to avoid scrolling), and allow for advertisements. It also renders type exceedingly well by using ClearType.</p> <p>The results are particularly interesting on a large monitor. Compare a <a href="http://www.nytimes.com/2007/06/13/dining/13oven.html">typical New York Times article</a> in a web browser:</p> <p><a href="http://miksovsky.blogs.com/flowstate/images/2007/06/14/new_york_times.png"><img width="500" height="305" border="0" src="https://miksovsky.blogs.com/flowstate/images/2007/06/14/new_york_times_2.png" title="nytimes.com" alt="nytimes.com" /></a>


</p> <p>The browser version is quite static, and makes poor use of the display space. Times Reader, in contrast, takes full advantage of the available screen real estate, all the while following time-honored rules for column widths, leading, margins, and so on:</p> <p><a href="http://miksovsky.blogs.com/flowstate/images/2007/06/14/times_reader.png"><img width="500" height="305" border="0" src="https://miksovsky.blogs.com/flowstate/images/2007/06/14/times_reader_2.png" title="Times Reader" alt="Times Reader" /></a>


 </p> <p>At a modest window size, Times Reader still does its best to create an effective presentation of the same article:</p> <p><a href="http://miksovsky.blogs.com/flowstate/images/2007/06/14/times_reader_medium.png"><img width="256" height="204" border="0" src="https://miksovsky.blogs.com/flowstate/images/2007/06/14/times_reader_medium_3.png" title="Times Reader (medium)" alt="Times Reader (medium)" /></a>


</p> <p>I find Times Reader actually does deliver a more newspaper-like reading experience. When I don't have a chance to read the paper edition of the Times, I enjoy catching up in Times Reader over reading the basic nytimes.com site.</p> <p>That said, I'm not sure many people will find the experience so much better that it's worth a download and the additional hassle of using a separate application. According a <a href="http://www.microsoft.com/presspass/press/2006/apr06/04-28TimesReaderPR.mspx">Microsoft press release about Times Reader</a>, the application is developed in Windows Presentation Foundation (Avalon), which in turn requires the Microsoft .NET framework. (Interestingly, the ads appear to be implemented in WPF as well, so the marketing verbiage can also be rendered in gorgeous ClearType.) If you've got Vista, the install isn't a big deal, but Windows XP users will probably struggle.</p> <p>I've found some practical issues with Times Reader as well. In theory Times Reader has a component that downloads and caches content when you're not running the app itself, but this doesn't seem to always work. At least, in my experience, I've found that I sometimes boot the app only to discover that the content is stale. A progress indicator in the corner spins for several minutes to let me know it's working, but as new content begins to appear (over many minutes), I have no way of knowing which content is stale and which is fresh.</p> <p>Moreover, Times Reader uses a newspaper-style columnar layout for the section summary pages. These look great, but their minimalist appearance unfortunately leaves the reader wondering which articles are the most recent: is the article in the upper left the most recent, or the most important, or some combination?</p> <p>Finally, while Times Reader does a better job than a browser at rendering a page of content, the actual browser frame of the application is unremarkable, and it's tiresome to use a separate browser just to read one site. I'm looking forward to seeing Times Reader rewritten in Silverlight so the entire thing can just run in the browser.</p> <p>I think it's interesting to note that Times Reader omits a feature always stressed in early digital newspaper prototypes. Those demos invariably showed off a user's ability to selectively express interest in certain types of news. (&quot;In the future, we engineers won't have to even <em>see</em> the Sports pages!&quot;) By now, most news sites don't make a big deal of this sort of personalization. If someone's really interested in a particular topic, they can either set up a news filter for it or, more likely, just visit a specialized news site focused solely on that topic. If someone's uninterested in a topic, they can just ignore it.</p>
<p>I first saw early demos of Times Reader several years ago and it's frankly stunning that the product actually broke through to see the light of day. It's exactly the sort of technology collaboration that sounds so great in principle, but in practice is hardly ever pulled off. Kudos to the Times Reader teams at both Microsoft and the New York Times for their success in bringing this to fruition.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Jonathan
EMAIL: joe_bn@hotmail.com
IP: 212.179.127.22
URL: 
DATE: 06/15/2007 01:41:39 AM
To know whether ads (or anything) is implemented in WPF, use the Magnifier - non-WPF apps will show big pixels, WPF apps will actually scale.

Ref: http://arstechnica.com/reviews/os/pretty-vista.ars/3
-----
COMMENT:
AUTHOR: Markus
EMAIL: megger@eps-software.com
IP: 66.253.86.210
URL: 
DATE: 06/15/2007 07:08:34 AM
Good point about needing different readers for different pubs. This has been a big issue in my opinion. Silverlight is an interesting idea, but it doesn't support document rendering at all, so the only Silverlight attempts at doing what the NYT reader does have been cludgy hacks at best. Hopefully that will improve in the future. 

A lot of these issues are what made us attempt a different route that would not require multiple readers. The result is Xiine (www.Xiine.com), a product we currently use for CoDe Magazine (www.code-magazine.com) and in the future will be used by other publishers as well. Check it out if you are interested. The reader is free and there is a bunch of free content available as well. (CoDe Magazine itself requires a subscription).

Markus
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Geni: Slickest trial-to-signup path yet
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
BASENAME: geni_slickest_t

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2007/06/geni_slickest_t.html 
DATE: 06/03/2007 07:48:24 PM
-----
BODY:
<p>A few months ago I came across <a href="http://www.geni.com">Geni</a>, a genealogy site that offers the slickest trial-to-signup path I've seen yet. I wanted to post on Geni, but to appreciate how good a job they do, I thought it was useful to look at old school sites, where&nbsp;signup is one of many <a href="http://miksovsky.blogs.com/flowstate/2007/05/hurdles_in_the_.html">hurdles to site usage</a>, and new school sites that avoid some of these hurdles through the use of <a href="http://miksovsky.blogs.com/flowstate/2007/05/easing_visitors.html">anonymous accounts</a>. Geni goes beyond all the rest in creating what, in my opinion, is&nbsp;the most inviting initial user experience for a site to date.</p> <p>Right off the bat, you're cleverly dropped into a family tree that's already partially started: there's a place for you, and obvious points to add your parents. No fanfare is needed to introduce the site or explain what it's for. The very nature of the task's UI makes it obvious that you're building a family tree:</p> <p><img alt="" src="https://miksovsky.blogs.com/flowstate/042307_0436_Genishowsho1.png"> </p> <p>You're asked for an email address, and in the most compact text imaginable, they define the key points of their privacy policy ("never spammed, never shared").</p> <p>It's not advertised to the user at this point that the email address they enter for themselves will become their user ID on the site. This is revealed the first time the user tries to return to the site. At that point—the <em>second </em>visit—the user is asked to sign in with their email address and a temporary password that was emailed separately to that address.</p> <p>The second visit also includes a minor but noteworthy detail: the user is asked to agree to the service's "Terms of Use". This strikes an elegant balance between the ease of use and legal risk. Terms of use generally come in two flavors:</p> <ol> <li>Browse-wrap. The act of browsing the site implicitly signals agreement. Because a user could argue that they didn't notice or were unaware of the site's terms of use, this form of consent is considered comparatively weak. This is generally used for sites that don't require the user to sign up at all. </li> <li><a href="http://en.wikipedia.org/wiki/Click_wrap">Click-wrap</a>. You must explicitly check a box or comparable control to indicate that you agree to the terms. This presumably confers stronger legal protection for the site, because it would be harder for a user to claim that they were unaware of the terms.</li></ol> <p><em>DISCLAIMER:&nbsp;I'm not a lawyer, and you would have to be a complete idiot to base a legal strategy on the content of this blog without consulting an attorney.</em></p> <p>Most services that require accounts go for&nbsp;click-wrap terms, hence the ubiquitous "I agree to the terms and conditions" check box found on service signup pages. The site feels obligated to obtain explicit agreement because the user and site are forging an ongoing relationship, and each future interaction could increase the likelihood a legal issue might arise. The downside is the "I agree" check box becomes just another hurdle in the way of the user trying out the service, and creates another opportunity for the user to decide they'd rather just walk away.</p> <p>Geni's approach to terms of use strikes a nice balance. You can try out the site once under a browse-wrap agreement, but for future visits you must accept the click-wrap agreement. By that second visit, of course, you've clearly indicated your interest in what the site has to offer, and you're motivated to regain access to the family tree you've already begun to create. So, agreeing to terms of use at that point seems like a trivial matter. In their approach to terms of use, Geni has managed to move one more hurdle from the entrance of the site to somewhere deep within. This incredibly careful attention to detail pervades the Geni user experience.</p> <p>The Geni site is worth checking out for their signup experience alone. The other thing to marvel at their intensely viral proposition. Genealogy lends itself to reaching out to people you know, and they make it drop-dead simple to enter a relative's email address and invite them with a single click. The beauty of this is that you get to offload all the data entry tedium to the one or two relatives in the family that actually enjoy that sort of thing. Everyone in the family receives the benefit of their work—as does Geni.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Kal_Torak
EMAIL: kaltorak2@gmail.com
IP: 69.21.249.222
URL: 
DATE: 06/04/2007 04:55:48 AM
A couple minor ideas.

What if, for those who don't allow anonymous usage of their services, you have the user sign up with email and name, and then they have a grace period in during which they can use their account without confirming it, and just confirm when they next happen to check the their email.  That could ease the process a little more.
There are problems with that of course.  Giving spammers the grace period defeats the purpose of a confirmation in those cases where confirmation is a preventive measure.


In the Geni example, what if they combined the Add and Agree to Terms into the same button?  That would necessitate puting a link to the terms, but I don't think that would be a problem
-----
COMMENT:
AUTHOR: Box Spanner
EMAIL: example@example.com
IP: 125.238.120.24
URL: 
DATE: 06/14/2007 12:45:06 AM
In compensation for the easy signup, they've created a site that's totally unusable without Javascript and Flash - you can't even view the home page.  So this site combines a "best of" and "worst of" on the same page.
-----
PING:
TITLE: A Better Online Experience
URL: http://if.psfk.com/if/2007/06/a_better_online.php
IP: 72.34.56.145
BLOG NAME: IF!
DATE: 06/18/2007 12:56:26 PM
TheFlow/State blog have been posting recently on how to improve the user experience online. The series subscribes to the “less is more” philosophy and encourages websites to embrace a simpler approach to approaching their users. The first posts in the ...
-----
PING:
TITLE: Removing The Login Barrier
URL: http://www.feedslice.com/feeds/programming/archive/2007/06/04/removing-the-login-barrier.aspx
IP: 209.67.188.6
BLOG NAME: Programming
DATE: 06/15/2007 12:39:15 AM
Dare Obasanjos May 26th thoughts on the facebook platform contained a number of links to the Facebook
-----
PING:
TITLE: Removing The Login Barrier
URL: http://www.codinghorror.com/blog/archives/000881.html
IP: 66.7.247.194
BLOG NAME: Coding Horror
DATE: 06/04/2007 07:14:10 AM
 Dare Obasanjo's May 26th thoughts on the facebook platform contained a number of links to the Facebook API documentation. At the time, clicking through to any of the Facebook API links resulted in a login dialog: It struck me...
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Easing visitors into a site with anonymous accounts
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: easing_visitors

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2007/05/easing_visitors.html 
DATE: 05/23/2007 10:12:00 PM
-----
BODY:
<p>For while now I've been trying <a href="http://www.netvibes.com">Netvibes</a> and <a href="http://www.pageflakes.com">Pageflakes</a>, two members of a new school of sites that invert the traditional service signup experience. As discussed in the last post, old school sites put up numerous marketing, signup, and technology-related <a href="http://miksovsky.blogs.com/flowstate/2007/05/hurdles_in_the_.html">hurdles at the entrance to their service</a>. New school sites like Netvibes and Pageflakes turn this experience on its head: <strong>first the visitor tries the product</strong> using something tantamount to an anonymous account. Once the visitor is convinced they like the service and want to get more out of the service—only then do they complete the steps to form a relationship with the service.
</p>
<p>Both Netvibes and Pageflakes let users build and edit a highly customizable home page. Such home pages have existed for years, but in the past customizations were generally available only to users with established accounts. These two sites, in contrast, take a new visitor straight to their very own customizable home page. In Netvibes, for example, a small portion of the page explains what the service does, but most of the page is given over to functional widgets that demonstrate the service with real examples:</p>
<p><a href="http://miksovsky.blogs.com/photos/uncategorized/2007/05/23/netvibes.png"><img width="500" height="382" border="0" alt="Netvibes" title="Netvibes" src="https://miksovsky.blogs.com/flowstate/images/2007/05/23/netvibes.png" /></a>


<br />
</p>



<p>The general idea is that <strong>the user will figure out what the product is by using the product itself</strong>—not by reading marketing verbiage or sitting through a demo. The page reveals customization capabilities through a combination of self-explanatory elements (&quot;Type your page title here&quot;) and additional options revealed on hover.
</p>
<p>PageFlakes is very similar to Netvibes. Pageflakes does almost as good a job as Netvibes in welcoming visitors
to their product, although for some reason they feel compelled to
display a welcome page first. In using both sites, PageFlakes seems to be slightly more polished than Netvibes (though I personally wouldn't have attempted to build a brand around the word &quot;flake&quot;).</p>
<p><a href="http://miksovsky.blogs.com/photos/uncategorized/2007/05/23/pageflakes.png"><img width="500" height="371" border="0" alt="Pageflakes" title="Pageflakes" src="https://miksovsky.blogs.com/flowstate/images/2007/05/23/pageflakes.png" /></a>


<br />
</p>



<p>These sites both use cookies to establish a tentative, anonymous relationship between you and the site. You can even enter personal data to customize the various widgets, but until you've established an account, you're generally using the service anonymously. (Of course, even without a user ID, each additional piece of data you enter to customize the site can be used to more precisely identify you.)
</p>
<p>You can use your anonymous account for as long as you want to, provided you use the same browser on the same machine to do so. Whenever you reach that point—maybe even months after starting to use the service—you can sign up for an account. The basis of your relationship with the site transfers from your anonymous browser cookie to a real account secured with a user ID and a password. (Both these sites use your email address as a user ID, to eliminate the signup hurdle of picking a user ID.)</p>
<p></p>
<p>p></p>
<p>I've been searching for a compelling real-world analogy to this kind of anonymous trial-before-signup experience. The best I've come up with so far: a public library. Anyone can walk in off the street and participate in a highly useful basic level of service—just pick a book off the shelves and start reading. You can do this for as long as they want, and you don't need to supply identification to do so. However, when you eventually want to take a book home, you must &quot;upgrade&quot; to a higher level of service. You must establish an account with the library, and this step requires that you identify yourself (with, for example, a document showing your address).
</p>

<p>I still have yet to establish a full account with either Netvibes or Pageflakes, but have continued to try both out anonymously. I might never elect to sign up with either service. Yet, even if I eventually abandon them, I will have used each far longer than I ever would have if it had made me sign up first.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Jeroen Mulder
EMAIL: me@jeroenmulder.com
IP: 193.67.17.122
URL: http://www.jeroenmulder.com/
DATE: 05/24/2007 12:25:59 AM
I absolutely love offering functionality for anonymous accounts. Many times it is completely unnecessary to complete a daunting sign-up process.

However, I've found it's not always a good idea. Over the last couple of months I've build an application where the user can store their search query. It's a small piece of information that shouldn't need to require sign-up. 

After a day of usability testing I've found that is exactly the question some people asked themselves. Where is this information stored? How does it know who I am? Do I need to register to use it? Especially the latter question was quite a barrier for people to immediately use the functionality.

It all depends on the situation of course, but sometimes taking away the barrier of sign-up results in a barrier on its own. 
-----
COMMENT:
AUTHOR: Bryan Bedard
EMAIL: bbedard@terraclues.com
IP: 216.8.139.6
URL: http://www.terraclues.com
DATE: 05/28/2007 01:31:50 PM
This concept was actually a major (and important) design decision for us when we built TerraClues. The game we created is not something people really understand until they give it a try. We wanted them to be able to jump in and start playing without having to create an account. However, this presented the problem that we needed to be able to track their progress. It's really easy to make use of "anonymous ID" in ASP.NET so if you are not logged in we just record your progress against your anonymous ID. If you want your progress to be permanent, just create an account. No one has ever complained about losing progress from hunts they played anonymously and I think there are a lot of people that never would have given it a try if they had to start by creating an account. 

There are still some features we hide until you create an account, such as the ability to create a hunt for others to play. This is because you are creating content that others will see so we thought it was important that you always have a way to get back to it even if you switch browsers or delete your cookies.
-----
COMMENT:
AUTHOR: HeadlessCow
EMAIL: headlesscow@gmail.com
IP: 75.69.184.179
URL: 
DATE: 06/07/2007 03:09:58 PM
This is exactly the kind of thinking that 2ch and its english language clones embrace. They've also got the flexibility to allow usernames for those who desire and a way (without registration) to allow people to prove their identity by entering in a passphrase when they post.

http://wakaba.c3.cx/shii/
-----
PING:
TITLE: A Better Online Experience
URL: http://if.psfk.com/if/2007/06/a_better_online.php
IP: 72.34.56.145
BLOG NAME: IF!
DATE: 06/18/2007 12:53:20 PM
TheFlow/State blog have been posting recently on how to improve the user experience online. The series subscribes to the “less is more” philosophy and encourages websites to embrace a simpler approach to approaching their users. The first posts in the ...
-----
PING:
TITLE: Removing The Login Barrier
URL: http://www.codinghorror.com/blog/archives/000881.html
IP: 66.7.247.194
BLOG NAME: Coding Horror
DATE: 06/03/2007 10:05:37 PM
 Dare Obasanjo's May 26th thoughts on the facebook platform contained a number of links to the Facebook API documentation. At the time, clicking through to any of the Facebook API links resulted in a login dialog: It struck me...
-----
PING:
TITLE: Overcoming Hurdles to Web App Signup
URL: http://www.cantoni.org/2007/05/25/webapphurdles
IP: 209.68.1.87
BLOG NAME: Cantoni.org
DATE: 05/25/2007 05:47:59 PM
flow|state has a great pair of articles that summarize well the problems a web application will face with too many obstacles for new users. First, in Hurdles at the entrance to a site: Its not unusual for a site to...
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Hurdles at the entrance to a site
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: hurdles_in_the_

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2007/05/hurdles_in_the_.html 
DATE: 05/17/2007 09:28:05 PM
-----
BODY:
<p>It's not unusual for a site to position a long sequence of hurdles just inside their entrance. Someone walking in the door might have to clear some or all of these hurdles before they can even try out the site:
</p>

<ol><li><strong>Figure out what the service does</strong>, and whether it meets their needs. This can be a lot harder than it sounds. The site might describe itself in text, images, or Flash demos. Even assuming the user has Flash installed, sitting through a demo can be tedious. The worst case: the site already assumes visitors know what it does. 
</li>

<li><strong>Find the entry point for signing up</strong>. You'd think this would always be obvious, but on some sites it's not. 
</li>

<li><strong>Pick a user ID</strong>. Often the first thing the service wants a new customer to do is pick an identifier such as a user name with which to identify themselves to the site later. If the site doesn't use email addresses as IDs, the user generally picks some variation on their own name. If they have a common name, they might have to guess several times before they find a variation of their name that hasn't already been picked as an ID. 
</li>

<li><strong>Enter their email address</strong>. If the user ID isn't an email address, the user almost always has to enter their email address separately. Even if the service can be used without an email address, the site is eager to obtain this critical piece of marketing data from the user. 
</li>

<li><strong>Pick a password</strong>. 
</li>

<li><strong>Enter the password again</strong> to confirm it. 
</li>

<li><strong>Pick the password several more times</strong> to comply with arbitrary security requirements. 
</li>

<li><strong>Write down their password</strong> somewhere before they forget the new variation of their usual password that finally made it past the arbitrary security requirements. 
</li>

<li><strong>Enter personal data</strong> used to configure the service to their needs. 
</li>

<li><strong>Comply with (or carefully turn down) requests for demographic data</strong> for marketing purposes. This may include opting out of requests to be added to email newsletters. 
</li>

<li><strong>Agree to terms of use</strong> and other legal agreements. 
</li>

<li><strong>Activate their account.</strong> The user might need to switch to a completely different application—their email client—and look for a message from the service. They might have to wait for a period of time for this message to arrive. The length of this time period is unknown: it could be a few seconds, or a few days. When the user finally receives the message, they have to find a link somewhere in it that they need to click on in order to verify that they are, in fact, the proper owner of the email address. 
</li>

<li><strong>Download software.</strong> If the service entails client software or browser plug-ins, the user has an additional dozen hurdles to jump through: the browser's save dialog, progress dialog, &quot;Are you sure you want to run this?&quot; dialog, an elevate-to-administrator security dialog, and probably a firewall dialog—not to mention the software's own overly long sequence of setup questions. 
</li></ol>

<p>And <em>finally</em>, after all this, the person gets to try the actual service—and decide whether it's worth using. 
</p>
<p>With all these hurdles, it's a small miracle some web-based services end up with any users at all. Each hurdle constitutes an opportunity for the user to leave. The site is effectively asking the user, &quot;Are you sure you want to use us? Are you really sure? How about now? Are you sure you're sure? Hmm?&quot; Some users are going to take one of these opportunities and leave. People are growing increasingly leery of starting down the hurdle-strewn path of a new site. They've been down similar paths so many times that they've concluded the experience won't be worth their time unless they're already confident the site will provide substantial value. </p>
<p></p>
<p>>

<p><em>Next time: <a href="http://miksovsky.blogs.com/flowstate/2007/05/easing_visitors.html">A new school of sites that eases users in with anonymous accounts</a> </em></p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Kevin Dente
EMAIL: kevind@denteworld.com
IP: 63.206.72.126
URL: http://weblogs.asp.net/kdente
DATE: 05/18/2007 09:56:29 AM
What kills me is sites that ask you to "confirm" your email address by entering it twice. Even though it's clear text and unobscured (unlike passwords). Mystifying. 
-----
COMMENT:
AUTHOR: Olga Howard
EMAIL: olga@olgahow.com
IP: 75.75.31.118
URL: http://olgahow.com
DATE: 05/18/2007 12:58:32 PM
I was directed to your blog today. You gave me a great idea: See my post - http://olgahow.com/?p=57
-----
COMMENT:
AUTHOR: Jacob Wyke
EMAIL: jacob@redvodkajelly.com
IP: 84.9.83.75
URL: http://www.tweeto.com
DATE: 05/18/2007 02:33:37 PM
Yeah I also hate the double entry of email addresses...but the one thing that really annoys me is two separate fields for the first and last name - just take my whole name and split it if you want to display my first name!
-----
COMMENT:
AUTHOR: Jason
EMAIL: jfleshman@dontspammeatyahoo.com
IP: 68.227.214.173
URL: 
DATE: 05/19/2007 06:11:26 AM
Jacob: There's actually a good reason for that, it's just not the one most programmers fall back on (laziness). In some cultures it's common to use what we'd consider the first and middle names as the first name. To use only the first word can be somewhere between overly-familiar and offensive.

You could always have your regex look for the final space instead of the first (and hope westerners don't use their middle initials/names) but that's also a minor risk. The alternative I've seen on some sites is a space for your displayed name. I tend to prefer first/last boxes because they give me all the information I need unambiguously and involves (almost) the least amount of typing for the user.

Same deal with addresses. It's easy for a form to work for the US and Canada, but for everyone else you basically just need to put up five lines and say "tell me what to put on the envelope". And phone numbers, etc. Too often us programmers can forget about the "world wide" part of the World Wide Web.
-----
COMMENT:
AUTHOR: Daelin the Cruel
EMAIL: me@mytrashmail.com
IP: 98.31.14.215
URL: 
DATE: 07/31/2008 09:30:10 AM
I absolutely hate sites that require authentication for stupid things like the ability to post in forums (a very common reason to need yet another username and password). Practically everybody does it, and as a result, I have a password list for 73 different sites that didn't have open accounts available on bugmenot.com. At least one of them sold my address to those Viagra spammers. Those are just for the sites I thought I might come back to. Sometimes, when I come back to a site, I end up creating a brand new username and password, cluttering the site's password database, denying them critical marketing information, and wasting my time simultaneously.

If a service doesn't require that "you really are who you say you are"-ness that occurs when money is involved, it shouldn't even have authentication.
It was one thing back in the days of the bulletin board systems. It's simply out of hand today.
-----
COMMENT:
AUTHOR: Mike
EMAIL: makarovfan@yahoo.com
IP: 71.247.185.84
URL: 
DATE: 07/31/2008 09:52:56 AM
Then there are the times you go through all this and it doesn't work.

I was trying to register with CSAA (an automobile club), but the emailed link to confirm my email resulted in an error.  Cutting and pasting resulted in the same error as clicking the link.

Although customer support got back to me, their solution didn't fix the problem. I finally gave up. I couldn't waste any more time on something I had expected to take 5 minutes.

The reason you confirm your email address is that people make typos all the time.  With double entry, the system has a chance to catch the typo some of the time.  Doesn't work if you cut and paste the typo, however. 
-----
COMMENT:
AUTHOR: Mike
EMAIL: makarovfan@yahoo.com
IP: 71.247.185.84
URL: 
DATE: 07/31/2008 09:55:18 AM
Daelin,

How funny that they make you register, supposedly to prevent spam comments, then you end up with spam email.  Not good.
-----
COMMENT:
AUTHOR: Kylene
EMAIL: kylene156@yahoo.com
IP: 24.185.130.194
URL: http://leicesterinsurance.blogspot.com
DATE: 10/21/2008 01:32:34 PM
Thanks for writing this.
-----
PING:
TITLE: Reducing User Interface Friction
URL: http://www.codinghorror.com/blog/archives/000866.html
IP: 66.7.247.194
BLOG NAME: Coding Horror
DATE: 05/18/2007 12:45:17 PM
 Tantek Çelik recently wrote a great entry on cognitive load in user interface, comparing instant messaging and email: To instant message (IM) someone, you merely: switch to your IM client double click their name type your message press return...
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Paying down design debt
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: paying_down_des

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2007/04/paying_down_des.html 
DATE: 04/09/2007 08:55:24 PM
-----
BODY:
<p>Developers use the term <em>technical debt</em> to refer to the backlog of inevitable future work produced when things are implemented in a quick and dirty way. An application can accrue design debt as well—user interface issues created by design hacks that must be resolved eventually. Like financial debt, you may find you don't have control when the next payment needs to be made.
</p><p>I was recently forced to make a minimum payment on some of Cozi's design debt. In our case, our flagship PC application <a href="http://www.cozi.com/products/default.aspx">Cozi Central</a> had a setup experience that omitted an important step. Cozi Central includes a photo collage screen saver that we think is pretty darn cool. Until this month, however, when you first ran Cozi Central on a Windows PC, <em>the application took over your screen saver, and it didn't even ask you</em>.
</p><p>Terrible, no? The story starts way back when we first created the product. The screen saver happened to be the first part of Cozi Central we wrote. We started giving families our very first pilot release, and Cozi Central did at that point was act as a screen saver. There didn't seem to be any point in asking them if they wanted to use the screen saver—why else would they install it?
</p><p>Fast forward a year, and Cozi Central now did a bunch more: it had a family calendar, a shopping list you can call up with your mobile phone from the grocery store, and a way to leave messages for family members. In fact, the product did enough that there were some adopters who wanted to use everything in it <em>but</em> the screen saver. Those people didn't want the setup experience to silently take over their screen saver. We knew we needed to take care of that, but month after month we kept pushing off this work in favor of fighting bigger fires. We were carrying design debt.
</p><p>The vast majority of users love the screen saver. One even wrote us specifically to relate how delighted they'd been by the photo screen saver they didn't even have to ask for. We did hear complaints from a small number of families, though, and a few weeks ago we finally heard from one user who was irate. Let's just say that business professionals may have photos on their PCs that they don't want suddenly displayed during a presentation.
</p><p>It was finally time to pay down our design debt, so we recently added new page to our setup experience that describes the screen saver and asks the user whether they want it:
</p><p><img src="https://miksovsky.blogs.com/flowstate/041007_0355_Payingdownd1.png" alt=""/>
	</p><p>This isn't a great solution—throwing a question into the setup experience is a clear hallmark of a design hack. This approach could easily cause issues later if we ever really do need to ask the user another question during setup, and discover that two questions in setup is one too many. We've made the minimum payment, but we've still got more design debt going forward.
</p><p>I'm happy that at least one Cozi user <a href="http://thanksgivingfeast.blogspot.com/2007/04/my-life-in-pictures.html">found the new UI acceptable</a>. (Their post is, hands down, the funniest commentary I've read about Cozi Central yet.) On we go.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Marcus Stade
EMAIL: marcus@stade.se
IP: 83.226.104.251
URL: http://www.grafisktforum.org
DATE: 04/13/2007 05:21:22 AM
Just one question: What is that font you're using?

It's extremely nice.
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 71.212.101.3
URL: http://profile.typekey.com/Jan_Miksovsky/
DATE: 04/15/2007 10:51:45 AM
Marcus: We use Futura. We license the font from Bitstream--we found their policies and fees to be better than their competitors.

http://www.myfonts.com/fonts/bitstream/futura/
http://www.bitstream.com
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Wall Street Journal: "Cozi just works."
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: wall_street_jou

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2007/04/wall_street_jou.html 
DATE: 04/04/2007 10:22:50 AM
-----
BODY:
<p>I normally avoid any overt plugs for Cozi Central here, but everyone here in my office is <strong>very</strong> excited by a favorable review of Cozi Central in today's Wall Street Journal: <a href="http://ptech.wsj.com/archive/solution-20070404.html">Getting Families Synced Up</a>.</p>

<div class="entry-content"><div class="entry-body">

<p><em>&quot;Cozi just works. It looks clean, organized and uncluttered, regardless
of hectic schedules. It's also easy enough for anyone to use, and Cozi
Group Inc. is constantly working to improve the program, which is a
good sign.&quot;</em></p>
<p>The Journal's research into our product was extremely thorough. I've fielded dozens and dozens of fact-checking questions in the past two days alone. Katie rightfully dinged the product for a few minor issues that had
been missed by others, and in each case we're looking forward to fixing
the issue as soon as possible.</p>
<p>As a designer, it's always gratifying to see an objective evaluation like this confirm that you're on the right track. Ultimately, users decide for themselves whether a product meets their needs, but the press obviously plays a vital role in getting the word out to them.</p></div></div>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Kam
EMAIL: kamvedbrat@hotmail.com
IP: 131.107.0.74
URL: http://blogs.msdn.com/kamvedbrat
DATE: 04/04/2007 02:34:43 PM
nice review! congratulations.
-----
COMMENT:
AUTHOR: Craig Stuntz
EMAIL: craig_stuntz@acm.org
IP: 24.106.104.205
URL: http://blogs.teamb.com/craigstuntz/
DATE: 08/24/2007 09:12:53 AM
Here's a usability bug: The "tour" flash movie displays in a non-resizeable, no-scrollbar, popup window, but it's not big enough to show the whole movie, depending upon your display DPI. 

Having the window non-resizeable is saying, "I know better than you which size is appropriate for the content." So you'd better get it right if you do this! :)
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Collecting data efficiently with text box micro-grammars
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: collecting_data

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2007/03/collecting_data.html 
DATE: 03/18/2007 09:14:55 PM
-----
BODY:
<p>A tiny bit of language support can turn a simple text box into a compact and powerful way to let a user quickly supply complex data. An application can constrain the allowable text to adhere to a small and computer-friendly grammar that mirrors somewhat a natural human language. Even a highly constrained grammar can still produce a user experience that feels natural. This works best when the domain of text a user might enter is small, when the user can easily imagine what they can type, and when the designer and developer can collaborate on thoughtful construction of the grammar.
</p>
<p>A simple example of a micro-grammar at work is a UI combining a scalar quantity and a unit into a single field, such as the measurement fields in Microsoft Word 2007. These fields throughout Word accept a variety of units, such as inches, metric centimeters, points, or lines. As in natural (here, English) language, the units directly follow the numeric value: </p>
<p></p>
<p>p></p>
<p>The fields on the left in the image above happen to be showing measurements in inches (&quot;) while those o</p>
<p></p>
<p>></p>
<p><img src="https://miksovsky.blogs.com/flowstate/102106_1833_Microgramma2.png" />
	</p>

<p>Here the user must enter units separately, requiring that they move the focus with the mouse or keyboard. The UI also looks significantly more cluttered. Word's text-parsing micro-grammar let one control in Word do the job of two in Photoshop. The trade-off is one of cleanliness versus discoverability. This efficiency is critical in cases like Word's Ribbon, in which a large number of controls are packed into a small space. On the other hand, using two controls makes clearer what units are supported. A UI with separate controls is also significantly easier to implement.
</p>

<p>One distinct advantage of text boxes that support micro-grammars is that they can offer shortcuts to power users without compromising the simplicity of the typical user's experience. The date fields in Microsoft Outlook, for example, not only accept dates in local form, but also accept shortcut phrases such as &quot;tomorrow&quot; or &quot;next Tuesday&quot;. Some supported shortcuts don't seem to add much value. The U.S. version of Outlook lets the user type the names of a number of common American
holidays like &quot;Christmas&quot; (but not Easter, the date of which involves non-trivial astronomy, and even an overeager Microsoft
Office developer has to stop somewhere).</p>
<p>It's dubious that the ability to type in &quot;New Year's Day&quot; as an appointment date has ever actually helped anyone—who schedules appointments on New Year's Day, anyway? Still, even these dubious shortcuts don't clutter anything up. Another advantage is that such text boxes allow the pasting of complete text from other sources directly into the UI in one step, letting the application do the work of breaking apart relevant information instead of forcing the user to do this by hand.</p>
<p></p>
<p>></p>
<p>Any attempt to optimize a micro-grammar for the nuances of one natural language will, of course, complicate matters if and when the need arises to localize the UI for other languages. Suppose some culture normally puts the units <em>before</em> the numeric value. Users in this culture might reasonably expect to be able to enter data that way. If the parser has been generated with a tool, it should be relatively straightforward for the developer to create a new grammar definition that swaps the position of those elements. The rest of the application logic should remain virtually unchanged.
</p>

<p>I'm not sure how many software companies would actually go through the trouble to adapt a micro-grammar for a specific market. Then again, companies rarely go through much trouble to change the layout of a dialog like the one from PhotoShop above, in which the layout of the controls is heavily biased in support of the designer's natural language. The work required to update a well-factored grammar definition is likely less than that required to reposition a significant number of controls across a large number of pages or dialogs.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Jonathan
EMAIL: joe_bn@hotmail.com
IP: 199.203.230.146
URL: 
DATE: 03/19/2007 02:44:34 AM
This is my favorite Outlook feature. I also like their selection of reminder time, where the drop-down clearly marks what you can type for durations ("15 minutes", "4 hours", etc.)

Micro-grammars - and free-style text searches, like the Vista Start Search -  are probably less convenient in languages like Chinese, where typing is more difficult in general.
-----
COMMENT:
AUTHOR: Alexander Groß
EMAIL: AlexanderGross@gmx.de
IP: 88.74.143.3
URL: http://www.therightstuff.de/
DATE: 03/25/2007 07:40:22 AM
Actually Photoshop has a little inconsistent UI: When you add a guide you can enter data like "50%", "10px" and "10cm" into the textbox, actually there's not even a combobox letting you specify the unit.
-----
COMMENT:
AUTHOR: John
EMAIL: comment@jfnixon.cotse.net
IP: 68.19.100.240
URL: 
DATE: 03/27/2007 08:58:00 AM
Who schedules appts on Jan 1?  Musicians, entertainers, party venue staff, just off the top of my head.  It isn't a lot, but some industries do work holidays to entertain the rest of us.
-----
COMMENT:
AUTHOR: Thomas Tallyce
EMAIL: null@example.com
IP: 86.6.8.35
URL: 
DATE: 09/24/2007 04:30:12 PM
> Any attempt to optimize a micro-grammar for the nuances of one natural language will, of course, complicate matters if and when the need arises to localize the UI for other languages.

Isn't that an argument for getting some of that stuff into the core OS? Is a spacing control such an uncommon thing, or could one not imagine Windows supporting this generically?
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Natural language for a calendar application
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: __default__
ALLOW PINGS: 1
BASENAME: post

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2007/03/post.html 
DATE: 03/11/2007 09:35:45 PM
-----
BODY:
<p>As a more detailed example of the sort of natural language explored in the post on micro-grammars, I thought it would be illuminating to look at how this concept can be applied to a domain like calendaring.
</p><p>The most complex aspect of a calendar application UI is usually that method for creating and editing a recurrence pattern for a recurring appointment. Microsoft Outlook uses this:
</p><p><img src="https://miksovsky.blogs.com/flowstate/031207_0435_Naturallang1.png" alt=""/>
	</p><p>Apple iCal is considerably simpler.
</p><p>Cozi Central. Grammar used to render recurrence in canonical form, can be edited. 
</p><p>Occurs field not only accepts natural language, but renders appointment data in canonical text form </p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Vista Start menu: a nice command prompt for normal users
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: command_lines_s

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2007/03/command_lines_s.html 
DATE: 03/04/2007 10:25:00 PM
-----
BODY:
<p>I've been using Windows Vista on my production machines for two months now, and I've noticed my habits have already shifted to take advantage of some of the new features. You can always tell a new feature is actually worthwhile if you suddenly find yourself cursing its absence on an older machine. One such feature in Vista that's quickly becoming a must-have for me is the search box in the overhauled Windows Start menu. This search box serves as a useful text-based command prompt, even for mainstream users.
</p>
<p><img src="https://miksovsky.blogs.com/flowstate/030207_1724_VistaStartm1_1.png" /></p>
<p></p>
<p>></p>
<p>Because the search box uses prefix matching, you can type just the beginning of the word(s) you're looking for. This lets you launch Windows Media Player for example, by typing &quot;play&quot; or &quot;m p&quot;, and son. This leads to a shorthand mode of using the operating system that feels curiously like a finely-tuned command shell and its collection of obscure abbreviations.</p>
<p>
<p>There are a number of other places in which command prompt-style interactions have seen a resurgence of mainstream use. The best example is probably Google and its multifaceted search box, which now offers a <a href="http://www.google.com/intl/en/help/features.html">long list of search features</a> such as dictionary lookup and phone number lookup. These search features also have a quasi-command shell feel to them. Google's command structure isn't as rigid as that of a typical command shell—indeed, many search forms don't require a command at all, just search terms—which gives the search experience a natural feel. The nice thing about these text-based command prompts is that they can translate well to a number of environments, even plain text <a href="http://www.google.com/intl/en_us/mobile/sms/">mobile phone text messages</a>.
</p>

<p>During the past 20 years, most user interface designers worked as hard as they could to get away from text-based commands. In the mid 1990s, Don Gentner and Jakob Nielsen wrote a paper called <a href="http://acm.org/cacm/AUG96/antimac.htm">The Anti-Mac Interface</a> that anticipated an evolution beyond pure pointer-based UIs and to environments that reincorporated language: 
</p>

<blockquote><p>Mouse buttons and modifier keys give us a vocabulary equivalent to a few different grunts… Computer interfaces must evolve to let us utilize more of the power of language. Adding language to the interface allows us to use a rich vocabulary and gives us basic linguistic structures such as conditionals. Language lets us refer to objects that are not immediately visible. For example, we could say something like &quot;Notify me if there is a new message from Emily.&quot; Note we are not advocating an interface is based solely on language. Neither does the interface have to understand full natural language. Real expressive power comes from the combination of language, examples, and pointing.</p></blockquote>

<p>While the Vista start menu or Google's search features aren't exactly natural language, they do form a grammar of sorts. These UIs marry the speed and expressiveness of text with highly responsive processing engines to create command prompts even mortals can use. Pure graphical UIs in other applications may similarly benefit from the introduction of a well designed text-based command area.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Landa
EMAIL: sir_landa@yahoo.com
IP: 85.124.41.247
URL: 
DATE: 03/05/2007 04:21:20 AM
This seems to be very similar to what is already possible through the Spotlight search bar on Mac OS X.

People with OS X might be interested in Quicksilver.
( http://quicksilver.blacktree.com/ )
-----
COMMENT:
AUTHOR: David
EMAIL: david@marshy.com
IP: 202.7.166.168
URL: 
DATE: 03/13/2007 04:00:02 AM
You might be very interested in a program written by a Microsoft employee called Start++ that extends the functionality of the Vista Start search box. See his web site for more details. http://brandonlive.com/2007/02/22/new-tool-i-made-for-vista-start/
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Matching design sketches to the desired level of design feedback
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: using_crude_ske

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2006/10/using_crude_ske.html 
DATE: 10/26/2006 09:39:00 PM
-----
BODY:
<p>When you ask people for feedback on a design that has not yet been implemented, take care how much polish you put on the design's representation. A counter-intuitive principle of soliciting early design feedback is that <em>people reviewing a highly polished design may </em><em>concentrate on superficial details and </em><em>overlook fundamental issues</em>. In the early stages of the process, you may be able to elicit deeper feedback by striving for an unfinished look in your design representations.
</p>
<p>Even novice designers can employ production tools like Adobe Photoshop or Flash to quickly work up beautiful conceptual screen shots or prototypes. They can lavish attention on the presentation of early design concepts, even those that might be thrown away. However, when such a design is shown for review, reviewers may fixate on such details as the color on a button—and fail to question why the button, or indeed the entire screen, needs to exist at all.</p>
<p></p>
<p>></p>
<p>As an antidote to this phenomenon, in my own design process I usually ke</p>
<p>
<p>Here's a scan of an early sketch for Cozi Central's Shopping Lists area:</p>

<p><a href="http://miksovsky.blogs.com/photos/uncategorized/shopping_list_sketch.jpg"><img width="500" height="405" border="0" src="https://miksovsky.blogs.com/flowstate/images/shopping_list_sketch.jpg" title="Shopping_list_sketch" alt="Shopping_list_sketch" /></a>


<br />
</p>



<p>No one has any trouble giving feedback at this stage, any may indeed call for something completely different. Reviewers figure, &quot;How hard could it have been to crank that out? I could have done that!&quot;</p>
<p> After I've had a chance to iterate at this hand-drawn level, I may create a prototype in Microsoft PowerPoint to explore some interactive elements. Again, I resist the temptation to apply visual polish. It's still too early.</p>
<p>I'll eventually create a skeleton UI directly in a development environment's visual designer, leading to a design like this:</p>



<p> <a href="http://miksovsky.blogs.com/photos/uncategorized/shopping_lists.png"><img width="500" height="375" border="0" alt="Shopping_lists" title="Shopping_lists" src="https://miksovsky.blogs.com/flowstate/images/shopping_lists.png" /></a>


</p>
<p>At this stage, things are being to feel more solid and less mutable. Design feedback may begin to focus on smaller details, but people still recognize substantial room for change. Following further iteration, the design stabilizes enough to warrant a full treatment from visual design specialist:</p>
<p>
<p><a href="http://miksovsky.blogs.com/photos/uncategorized/cozi_shopping_lists.png"><img width="500" height="375" border="0" alt="Cozi_shopping_lists" title="Cozi_shopping_lists" src="https://miksovsky.blogs.com/flowstate/images/cozi_shopping_lists.png" /></a>


</p>
<p>The design is now polished to the point that many people may find it difficult to look past the surface. Luckily, by now significant portions of the design are often functional enough that people can interact directly with the user interface. This opportunity can counteract the tendency to notice only superficial issues. People who have a chance to actually use a design will generally notice when it suddenly does something they didn't want. A thoughtful user will step back and realize the problem lies with the software (and not with them), and deliver this feedback to you.</p>
<p></p>
<p>>

<p><a href="http://miksovsky.blogs.com/photos/uncategorized/cozi_shopping_lists_1.png"><img width="500" height="375" border="0" alt="Cozi_shopping_lists_1" title="Cozi_shopping_lists_1" src="https://miksovsky.blogs.com/flowstate/images/cozi_shopping_lists_1.png" /></a>


</p>
<p>If you're intrigued by the idea of presenting rough sketches early in the development cycle, but appalled by the idea of manually drafting paper sketches, you might consider modifications to your own design process. This past week I conducted design reviews of a PowerPoint prototype that used a free handwriting font (at a suitably legible point size) for the UI text. The feedback collected during the reviews was at the right level for this stage of the process, and it was easy to refine the design between reviews, so I'm likely to use this approach again in the future.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Jade Ohlhauser
EMAIL: jade@rpmsoftware.com
IP: 207.54.100.153
URL: 
DATE: 10/27/2006 08:06:57 AM
Good article and thanks for the example pictures.

Along this line have you ever noticed you can fudge the impression of how much work has been done using demo polish? We know that with any app what you see and how much has been done aren't always related, but to the executive watching the demo they are. Just be careful, twice now I've been asked why we can't just sell the prototype.
-----
COMMENT:
AUTHOR: Mihai
EMAIL: mnita_2000@yahoo.com
IP: 192.150.10.200
URL: 
DATE: 10/27/2006 10:13:01 AM
Here is a nice project, kind of related :-)
http://napkinlaf.sourceforge.net/

-----
COMMENT:
AUTHOR: Jason
EMAIL: j@q.com
IP: 65.212.186.186
URL: 
DATE: 10/27/2006 03:13:03 PM
Check out Luke Hohmann's article describing a process which he calls 'lo-fi design'.
http://www.lukehohmann.com/paper-improvingusability.php


-----
COMMENT:
AUTHOR: Levent Gurses
EMAIL: gursesl@yahoo.com
IP: 72.66.33.86
URL: http://www.jacoozi.com
DATE: 12/25/2006 07:56:53 AM
Very informative and insightful. The pictures really helped me better visualize the content. Thank you for sharing.
-----
COMMENT:
AUTHOR: Igor Jese
EMAIL: igor@jeseonline.com
IP: 83.131.111.38
URL: 
DATE: 12/31/2006 12:07:48 AM
Great article!

Check the MockupScreens tool which does exactly that:
http://MockupScreens.com

Also, check the "Napkin Look & Feel" skin for Java Swing applications. 
-----
PING:
TITLE: Setting Client Expectations through Mock-Up Design
URL: http://blog.centresource.com/2007/02/05/setting-client-expectations-through-mock-up-design/
IP: 70.84.100.10
BLOG NAME: CentreSource: Blog
DATE: 02/05/2007 11:12:47 AM
One of CentreSources strongest areas is custom application development.  Weve worked with a number of fantastic clients who have asked us to create a variety of applications including ones to handle franchise management, online book tradi...
-----
PING:
TITLE: Unexpected value in paper prototyping
URL: http://www.brethorsting.com/uidesign/2006/10/unexpected_value_in_paper_prot.html
IP: 66.33.213.21
BLOG NAME: Aaron's UI Design Blog
DATE: 10/28/2006 07:01:50 AM
Jan Miksovsky talks about unexpected value found in 'crude' prototyping: A counter-intuitive principle of soliciting early design feedback is that people reviewing a highly polished design may concentrate on superficial details and overlook fundamental...
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Asking for first names with an example
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: asking_for_firs

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2006/10/asking_for_firs.html 
DATE: 10/01/2006 07:50:00 PM
-----
BODY:
<p>To keep things friendly and approachable, applications often ask a new user to supply their first name. In designing the sign up procedure for Cozi Central, I applied my favorite trick for asking for first names: provide an example of what kind of name you want.</p>
<p>To ask a user their first name, you'd think you could just create a text box labeled &quot;First name:&quot;. The problem is that many people don't <em>want</em> to use their first name. A user might prefer to go by a nickname, for example. However, at sign up time, the user has no idea how your product is going to use the name they enter, so they may hesitate to enter a nickname instead of their real first name. Your application may end up addressing the user by a name they dislike.</p>
<p>You could just ask the user for &quot;Name:&quot;, and figure that they can enter whatever they want. Now you've got a new problem: tons and tons of people will enter their full name, or their last name, or something else. Your program might then address them cheerfully but stiffly: &quot;Good morning, John Anthony Smith!&quot;</p>
<p>To elicit a first name but leave the door open for something else, ask the user for &quot;Name:&quot;, <em>but provide an example that shows a first name</em>:</p>
<p><img border="0" alt="Cozi_central_signup_page_section" title="Cozi_central_signup_page_section" src="https://miksovsky.blogs.com/photos/uncategorized/cozi_central_signup_page_section.png" />


</p>
<p>This seems to work quite well in practice. (I give credit for this trick to software designer and all-around nice guy David Sloo.)</p>
<p>Caution: There's a limit to how far you can push this idea, as Cozi learned this past week. Since our sign up page used an example for Name, we went ahead and put examples next to most of the fields, including the email address fields. The sample email addresses were at cozi.com, so that we could avoid collisions with a real domain name. Bad idea: many users thought we were giving them a new email address, so they entered their own name @cozi.com instead of entering their existing email address. We promptly cut the email address examples from the sign up page. By now, most people
should know what an email address looks like.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Matt Hamilton
EMAIL: mabster@madprops.org
IP: 220.253.68.126
URL: http://www.madprops.org/cs/blogs/mabster
DATE: 10/01/2006 09:07:33 PM
I think "example.com" is a good domain to use for email addresses, although users could easily make the same mistake - assuming that you're asking for an "example.com" email address.
-----
COMMENT:
AUTHOR: Ross
EMAIL: ross@burtonini.com
IP: 84.12.135.175
URL: 
DATE: 10/02/2006 12:47:50 AM
There is an RFC about example domain names, email addresses and so on.  I can't recall the number but example.com is a reserved domain name by IANA for this purpose.
-----
COMMENT:
AUTHOR: Chris
EMAIL: c45207@zoomtown.com
IP: 128.42.155.27
URL: 
DATE: 10/02/2006 06:27:48 AM
Thank you for bringing this very important issue up. There is a large segment of the population for whom the first name/last name distinction doesn't really work. A great many of us prefer to go by our middle names (the H. Albert Smith's). A subtle hint like this lets us know that we can use our middle names without some authority figure (police officer, bank teller, customs official, &c.) totally freaking out because document A says Harold A., while document B says H. Albert.

It has been my experience that when I need to collect someone's full name, including fields for first name, middle name (not simply middle initial), last name, and preferred name (pre-filled with first last), works well, at least when it comes to traditional American names.
-----
COMMENT:
AUTHOR: lucmars
EMAIL: lucmars@infonie.fr
IP: 193.249.57.95
URL: http://lucmars.wordpress.com/
DATE: 10/02/2006 12:23:32 PM
It's always a good thing to give an example. For this purpose, one better has to provide a link or a button labeled "see an example"and then one get something more clear, explaining that the user can write  his real name or a nickname and his e-mail address is required.
Of course the user can miss the example, but an user can do a lot of unexpected things.
-----
COMMENT:
AUTHOR: Arbitrary feedback poster
EMAIL: user@example.com
IP: 219.88.78.67
URL: 
DATE: 10/19/2006 02:39:19 AM
Useless info: This example-name use is how UK soldiers came to be known as "Tommies", the enlistment paperwork in WWI told them to enter their names, "for example Thomas Atkins" (although various sources claim this usage goes back to at least the Napoleonic era).
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Designing for families
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: designing_for_f_1

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2006/09/designing_for_f_1.html 
DATE: 09/27/2006 10:00:00 PM
-----
BODY:
<p>This week my company Cozi launched <a href="http://www.cozi.com/products/default.aspx">Cozi Central</a>, a product that lets busy families communicate with each other and juggle the many elements of their lives at home. Among other things, our public launch means I can now cover my own user interface designs in this blog. I thought a good place to start this coverage was a quick look at what it means to design software for families.</p>
<p>Most software products and services for the home market oddly do not, in fact, recognize the family dynamics that dominate home life. Consider any service with which the entire household has a single account, then see how many family members are allowed to administer that account. In most consumer products, the single person who signs up for a household account becomes the account’s sole administrator. They can add other family members to the account, but those other users are invariably treated as second class participants in the account.</p>
<p>Many households have not one, but <strong>two</strong> people running the household. In these cases, the user model doesn’t match the household’s actual organization. If Mom ends up as the family’s account administrator, how does Dad feel asking her to reset his password? Or if Dad ends up as the account administrator, how does Mom feel asking him to give her access to a new feature? A poor design decision in the virtual world provokes awkward interactions between family members.</p>
<p>Products like this are presumably made by organizations that unintentionally mirror their business paradigm in a home product—since groups in the business world tend to be organized with a single leader, they fail to question whether a similar hierarchy will actually work in the home. As it turns out, a strict hierarchical approach is also easier for a developer to code: if you’re going to have two classes of users, the data schema and accompanying UI is easier to manage if you can simply designate exactly one of the users as an administrator than if you can designate one or at most two. If a company does decide to support more than one administrator, the design usually makes administrative privileges an option that can be enabled for any account. So instead of letting two people run the account, they allow N people to run the account, which often needlessly complicates the product’s interface. (A good example of <a href="http://miksovsky.blogs.com/flowstate/2005/08/the_tyranny_of_.html">The Tyranny of 1 or N</a>.)</p>
<p>We designed Cozi Central from the ground up for the dynamics of families, not small businesses. Either one OR two people can be identified as the adults running the household.</p>
<p><a href="http://miksovsky.blogs.com/photos/uncategorized/cozi_central_household_settings.png"><img width="500" height="375" border="0" src="https://miksovsky.blogs.com/flowstate/images/cozi_central_household_settings.png" title="Cozi_central_household_settings" alt="Cozi_central_household_settings" /></a>

<br /> </p>
<p>There are, of course, numerous households with multiple adults, but in most of them, one or two people can be identified as running the household. For our v1.0, those edge cases weren't worth pursuing if they would cause the 90% case to suffer.</p>
<p>Designing things this way does require a bit more design and development work. On the whole, however, the product’s model of family organization now more closely represents that of actual households, so it enables unique features that capitalize on family dynamics.</p>
<p>A good example is the “Hand Off” feature in Cozi Central’s family calendar. Couples, especially parents in homes with children, are constantly trading errands and other responsibilities. It might be the case that Dad usually drives his daughter to soccer practice, but if he suddenly needs to take his son to the doctor, he may hand the driving duty off to Mom. This happens so often that Cozi Central has an explicit “Hand Off” menu command on appointments just for this purpose:</p>
<p><img border="0" src="https://miksovsky.blogs.com/flowstate/Cozi_20Central_20Appointment_20Menu.png" alt="Cozi Central Appointment Menu" /></p>
<p>This user interface shortcut would be far more cumbersome to offer in a product that assumes families are organized in a hierarchy with a single person at the top. (By the way, Cozi Central's appointment menu comes up on left click as well as right click, a trick I think could be useful in other UIs.)</p>
<p>You can see more examples of family-ready design in Cozi Central itself. The product, which includes features to track family calendars, messages, and shopping lists, is available for free at <a href="http://www.cozi.com/">http://www.cozi.com</a>.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: dermot
EMAIL: dermotbalson@hotmail.com
IP: 210.80.168.7
URL: 
DATE: 09/28/2006 04:06:16 AM
You've missed something REALLY important.

Cozi asks me to DOWNLOAD something but nowhere does it tell me what it is or how it actually works. The site only has a very dumbed-down explanation. 

You don't run anything on my PC unless I know what it is. You need a technical FAQ!
-----
COMMENT:
AUTHOR: Carl Manaster
EMAIL: manaster@pobox.com
IP: 71.136.234.174
URL: http://undisclosed-recipients.blogspot.com
DATE: 09/28/2006 06:32:55 AM
I like the thought you are putting into this; thank you for sharing your decision process.
-----
COMMENT:
AUTHOR: Josh Yeager
EMAIL: j.yeager@umbc.edu
IP: 65.222.168.2
URL: 
DATE: 09/28/2006 07:54:52 AM
This is a good point, and the product looks nice. I've got an off-topic question, though: how do you plan to make money? This seems like a product that people would be willing to pay for, but you're giving it away.
-----
COMMENT:
AUTHOR: Dennis Doughty
EMAIL: miksovsky@miksovsky.blogs.com
IP: 64.119.129.74
URL: 
DATE: 09/28/2006 09:54:40 AM
In addition to a technical FAQ, how about some machine requirements?  And about that FAQ, here are some questions:
Do I need to keep this app running all the time?  On a machine connected to the internet?  Can I *add* content from my mobile phone or only see it?  Etc.
-----
COMMENT:
AUTHOR: Brian
EMAIL: bromanko@inns.com
IP: 66.179.210.36
URL: 
DATE: 09/28/2006 11:48:21 AM
I don't mean to grumble about a v1 product too but I've got serious issues with the setup process. First off, you didn't give me any choice where to install the product. While it made the install simpler, I don't install programs to the program files directory. Don't force your app in there. Second, you took over my screen saver without even telling me! That was just plain rude. I really can't think of any excuse why you would do this. It reeked of RealPlayer...
-----
COMMENT:
AUTHOR: Chaz
EMAIL: chazkim@gmail.com
IP: 222.153.93.169
URL: 
DATE: 09/28/2006 07:12:09 PM
Cozi looks useful. I couldn't install (probably a firewall thing), then I read the comment above about the screensaver, and suddenly I didn't want to install anyway...

Not telling me the date format to use when entering my DoB was a bit irritating (I'm not from the US). 

All the above is said in the spirit of trying to make your product non-irritating and hence successful.
-----
COMMENT:
AUTHOR: Erik
EMAIL: erikma1@hotmail.com
IP: 131.107.0.74
URL: 
DATE: 10/02/2006 12:03:53 PM
My wife and I looked at this this past weekend - existing feature set is interesting, but the biggest missing feature that would entice us to give it a real workout would be maintaining schedule items in an external store (we both use Outlook on our home machines and track our appointments there). Example: I add a Cozi schedule item for the family. Cozi's back-end generates a standard Outlook-compatible schedule item and sends to each email address we configure for schedule synchronization. Example 2: One of us changes the time or other information for a scheduled item that has already has a sync message sent. Cozi's back-end generates an update email and sends to the list of email addresses configured for schedule sync. Example 3: One of us deletes the schedule item on Cozi. Cozi generates cancel schedule messages and sends to sync email addresses.
-----
COMMENT:
AUTHOR: Maksim
EMAIL: maksim.libenson@gmail.com
IP: 89.1.87.133
URL: http://ceeplusplus.com
DATE: 10/14/2006 03:52:07 AM
That thing looks really interesting, however I have some notes on the demo tour that you provide:
1. I would like to be able to regulate speed of the demo, for not native English speaker it moves too fast.
2. Clicking next button between sections is a bit annoying
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Improving the EULA user experience with Bullet Summaries
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: improving_the_u

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2006/09/improving_the_u.html 
DATE: 09/14/2006 09:35:00 PM
-----
BODY:
<p>Publicly available software applications and web sites contain myriad end user license agreements, terms of use, and other legalese, but the user experience of actually reviewing and accepting these legal agreements is universally poor. Software users click through license agreements almost every time they install or upgrade software, but even vendors that care deeply about user interfaces leave untouched the fundamentally bad user experience of their legally binding dialogs and pages. I've been looking for a way to improve this experience in the products I work on.</p>
<p>The canonical End User License Agreement (EULA) dialog looks like this:</p>
<p><a href="http://miksovsky.blogs.com/photos/uncategorized/windows_xp_sp_2_eula.png"><img border="0" alt="Windows_xp_sp_2_eula" title="Windows_xp_sp_2_eula" src="https://miksovsky.blogs.com/photos/uncategorized/windows_xp_sp_2_eula.png" /></a>


</p>





<p>The dialog is a smallish window that contains a very long scrolling text box. Below the text box sit controls with which the user must accept or decline the agreement. This may take the form of an &quot;I agree&quot; check box, or a set of push buttons (shown above). </p>
<p>The user experience of reviewing a EULA in such a dialog is, of course, terrible. The text of the EULA itself is dense legal language fully of text INEXPLICABLY IN CAPITALS warning you that you hereby AGREE to ALL SORTS OF STUFF YOU DON&quot;T UNDERSTAND. The text is not generally organized in any interesting way (e.g., important stuff first). The text is usually plain text or simply formatted and—profligate use of capitals to the contrary—does not actually highlight the most interesting bits in the text. The text goes on for pages and pages.</p>
<p>In most cases, the application does not offer a default option. If it does, the default is nearly always to decline the agreement. Since the user is almost always going to accept the agreement anyway, the default option (if there is one) is essentially never the option the user wants.</p>



<p>It's commonly held wisdom that most users blow through such dialogs as quickly as they can. Having paid for software, or at least having gone through the trouble to download it, are they really going to read the agreement carefully and Decline it?</p>
<p>The effect of this is that users often end up agreeing to all sorts of things they'd probably not be comfortable with if they were aware of them. Here's the <a href="http://www.gripewiki.com/index.php/Microsoft_Windows_XP_Service_Pack_2_%28Supplemental_EULA%29">complete text of the EULA</a> above, with highlighting around some ominous clause related to digital rights management. This EULA is even more daunting than it first appears: it's a <em>supplemental</em> EULA, amending another, probably equally lengthy EULA.</p>
<p>In some cases, glossing over concerning details is exactly what the vendor had in mind. Still, there are many cases when the vendor probably would prefer that you really did know a fact that's unfortunately buried in the EULA. The EULA for many software products indicate that the license entitles the user to install the software on one computer. While there are many users who willingly ignore (or do their best to circumvent) such a restriction, there are surely others who would abide by this restriction—if only they were aware of it.</p>



<p>Despite the obvious shortcomings with such a user interface, there are many, many very good reasons why vendors offer an interface just like this. One very good reason is that few vendors even give the UI a second thought. It's a standard part of most application Setup frameworks, so it's essentially free to use a framework-supplied EULA UI and it's not free to write something better. The company lawyers fill it in once and the dialog is forgotten forever.</p>
<p>Another very good reason for using this interface is that everyone else uses it. Even if you tried to do something differently, your lawyers would probably tell you to cut it out. If a lawyer didn't stop you, there's always the small but nagging chance you could goof something up, and someone will have a good opportunity to successfully sue you. Most people don't think this is worth the trouble.</p>
<p>I sat in on a number of early design reviews of the Microsoft Windows Vista Setup user experience, and asked whether we could do better than the dialog above. The Setup team loudly shouted, &quot;NO!&quot;, for essentially the reasons given above. A company like Microsoft is sued on a daily basis, and has probably paid for every word of its EULAs with bloody court battles they don't care to repeat. They would prefer not to expose themselves to new legal risk. Accordingly, the <a href="http://miksovsky.blogs.com/flowstate/2006/09/Windows_Vista_Beta_1_EULA.jpg">Windows Vista EULA </a>experience can dress up the dialog with glassy effects, but the experience remains essentially unchanged.</p>
<p>I've spent the last few months at my startup, <a href="http://www.cozi.com">Cozi</a>, preparing for the not-too-distant launch of our first product. I wanted to make another go at coming up with a better EULA user experience. We're fortunate enough to work with some forward-thinking lawyers who would at least entertain the idea of trying something new.</p>
<p>Our final user interface is, for now, that of the canonical EULA dialog above. We rely on a third-party Setup framework, and ultimately decided we didn't have time to rewrite the framework's EULA dialog. However, we were able to introduce what I hope will prove to be an improvement in the user experience of trying to actually understand what the agreement says.</p>
<p>The idea is to summarize the key points of the EULA (or privacy policy, or whatever) in 2-4 bullets at the top of the document. I call this practice the Bullet Summary. The bullets are introduced with the leader, &quot;Here are some key points to know about &lt;the topic covered by the agreement&gt;:&quot; The bullets are followed by a line that says, &quot;Please read the complete agreement that follows:&quot; The goal is to get these bullets and the accompanying lines above the fold; the user should be able to read the Bullet Summary without having to scroll.</p>



<p>You'll also be able to see a Bullet Summary in the EULA of Cozi's
first product when we announce it someday soon. In the meantime, you
can see two examples of Bullet Summaries on the Cozi web site in our <a href="http://www.cozi.com/about/terms.aspx">Terms of Use</a> and our <a href="http://www.cozi.com/about/privacy.aspx">Privacy Policy</a>. Offering a summary of a legal document is not new, but perhaps this particular convention is, and in any event I haven't seen something like this in software.</p>
<p>NOTE: Those simple lines above and below the bullets are absolutely critical. The Bullet Summary is meant to summarize, <strong>not replace</strong>, the text of the agreement. I'm not a lawyer, but it's my understanding that offering the user a summary of a legal agreement can be acceptable as long as the summary is not misleading, is consistent with the complete agreement that follows, and does not imply that the summary is a complete account of what the user is agreeing to.</p>
<p>The reaction to the use of a Bullet Summary in our EULA has been quite positive. Our lawyers thought it would be helpful. And, indeed, more than one beta tester has offered completely unprompted feedback saying they found the bullets helpful. If users actually notice what's going on in a EULA dialog during Setup, of all things, and then take the trouble to tell you they like it, something must be going right.</p>
<p>In an on-site usability test, I watched one user who came to the EULA page. They reached immediately for the &quot;I Agree&quot; button—and then paused to read the bullets. It was my impression that this user would never have read anything in the EULA if they hadn't stopped to read the bullets.</p>
<p>I, for one, am happier to have people use our products knowing that they are at least slightly better informed about what they've agreed to. And, finally, writing a Bullet Summary is a highly useful design exercise. It prompts a deep, reflective discussion among team members about which points in the agreement are actually the most important for their users to understand.</p>



<p>It bears repeating that <strong>I'm not a lawyer</strong>. I'm offering this information about the products I work on because I think this idea helps make life marginally better for my company's customers. Indepent of whether you agree with the contents of Cozi's legal agreements, you may find the Bullet Summary approach interesting. If you are tempted to apply this idea to your own product, consult an attorney before proceeding. You may find it helpful to point them at this post and Cozi's site. With any luck, a user interface precedent—and a legal precedent— will be established that results in EULAs and other software-related legal agreements that are just a bit easier for the typical user to understand.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Yves
EMAIL: ymassard-nospam@hotmail.com
IP: 24.7.6.59
URL: 
DATE: 09/18/2006 03:10:21 AM
It's a good idea. 
I think I've seen it in Windows Media Player and in the Google Toolbar.
It worked well for highlighting specific things (the data sent back to both Microsoft and Google), but I'm not sure of what would go in there  when there is nothing specific (I guess things like "you can only use the product if you are licensed to do so").
-----
COMMENT:
AUTHOR: Philip Hofstetter
EMAIL: pilif@gnegg.ch
IP: 80.238.140.202
URL: http://www.gnegg.ch
DATE: 09/18/2006 03:51:01 AM
Hi,

the worst EULA experience ever I had in the media center part of windows vista when you start the TV setup wizard.

There's a EULA/Privacy statement there which is meant to be read on the TV.

The problem is that the text itself is presented in a small box of about 5 lines hight and 20 characters width. Beside the box is that information line:

Page 1 of 65: Next | Previous

So they want me to read through 65 pages of 20*5 characters to set up my TV? Yeah! Sure.

Philip
-----
COMMENT:
AUTHOR: Stu
EMAIL: stuartbrockman@hotmail.com
IP: 81.26.117.34
URL: 
DATE: 09/18/2006 07:37:50 AM
Software vendors do not want EULAs to be understood. They want the use to click through them, so they can do whatever they wish and say "you should have read the EULA".

Also, until such time that a court of law in my country says otherwise, I do not consider EULAs legally binding.
-----
COMMENT:
AUTHOR: Máirín Duffy
EMAIL: mairindubh@yahoo.com
IP: 66.187.234.199
URL: http://mairin.wordpress.com/
DATE: 04/27/2010 10:43:54 AM
Michael Terry & his fellow researchers at the University of Waterloo HCI found in some fairly rigorous HCI studies that providing summaries of EULAs means that your users will spend *less* time reading the actual document. See 

<a href="http://www.youtube.com/watch?v=mebqm-sTPXo">http://www.youtube.com/watch?v=mebqm-sTPXo</a> around 35:00
-----
PING:
TITLE: Cozi Central launches, families can breathe a little easier
URL: http://www.brethorsting.com/uidesign/2006/09/cozi_central_launches_families_can_breathe_a_little_easier.html
IP: 66.33.213.21
BLOG NAME: Aaron's UI Design Blog
DATE: 09/26/2006 10:45:09 AM
Cozi just launched their first product, Cozi Central. I've mentioned them before in conjunction with their Chief Product Officer, Jan Miksovsky, who was formerly a UI Architect at Microsoft and is a strong proponent of inductive user interfaces. I was...
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Insert key safely disarmed in Microsoft Word 2007
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: insert_key_safe

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2006/07/insert_key_safe.html 
DATE: 07/11/2006 10:40:00 PM
-----
BODY:
<p>The Office 2007 user interface overhaul has generated justified hoopla that has also overshadowed some minor but welcome improvements. Case in point: Microsoft Word 2007 has finally neutralized the Insert key, preventing the accidental triggering of an utterly bewildering Overtype mode.</p>
<p>I’ve been using <a href="http://www.microsoft.com/office/preview/default.mspx">Office 2007 Beta 2</a> for production work for about a month now, with generally positive results. I use Word intensively, and it’s taken just a bit of time to get used to where all my favorite features ended up, but overall I’m fine with it. In Excel 2007, the new UI has lead me to discover some useful features that have probably been there for years. Excel charting, in particular, is no longer awful. On the down side, while Outlook 2007 adds full-text searching, it continues to perpetrate its abysmally poor IMAP support on the world. They’ve left intact an <a href="http://miksovsky.blogs.com/flowstate/2005/07/outlooks_terrib.html">incredibly irritating dialog</a> that could easily be removed in ten minutes by anyone on the Outlook team if they didn’t live in a warm bubble of intensive Exchange-focused IT support. For shame.</p>
<p>In contrast, the Word 2007 team appears to have taken a moment from a completely massive redesign to fix the Insert key.</p>
<p>Don’t know about the Insert key in Word? Open a document in Word 2003 or earlier, press Insert, then try typing somewhere in the middle of your document. You’ve just discovered Overtype mode. In Overtype mode, each character you type replaces the existing character at the insertion point, instead of pushing that character to the right. Uninitiated users have other names for this mode, such as Word Is Eating My Important Document And I Can’t Get It To Stop mode.</p>
<p>Overtype mode has to be one of the longest-lived terrible design flaws in a continuously upgraded shipping product:</p>

<ol><li>A user can easily engage Overtype mode without realizing it. Depending on the keyboard used, all that's required is a slip of the finger from, say, the commonly pressed Delete key. The user has to press modifier keys like CTRL and ALT to do unusual things like, say, pick a font or print a document, but if it’s the destructive Overtype mode they want, then by golly, no modifier key should stand in their way!</li>

<li>If a user accidentally ends up in Overtype mode, they can easily destroy data for a good long time if they’re not looking very closely at the screen. If the user happens to have left the status bar visible, Word meekly shows the letters “OVR” in a distant edge of the screen—far from where the disaster is taking place.</li>

<li>By the time the user realizes that something is going wrong, a considerable length of time may have passed since they accidentally hit the Insert key. This reduces the chance that the user will connect the terrifying circumstances they are now facing with an accidental keypress they made a while back.</li>

<li>Even once the user realizes that something very, very bad is happening, it’s still hard to pin down exactly what is happening. Stuff is disappearing from the screen, but because the Overtype behavior completely flies in the face of the user’s carefully learned model of word processor behavior, it’s hard to recognize that each new character is overwriting an existing character.</li>

<li>Once an astute user has figured out that they’re in some sort of word processor mode from hell, there’s no obvious way to get out of the mode short of quitting the application and restarting. They're return to editing their document with shaken confidence in Word, in Microsoft products, and in software in general.</li></ol>

<p>I’ve yet to meet a user who understands—or more to the point, wants—Overtype mode, but it’s there anyway. In the eighteen years I’ve been using Word, I haven’t had a single occasion where I felt this mode could save me keystrokes.</p>
<p>With a user base the size of Microsoft’s, it's virtually guaranteed that a large corporate customer has a vocal department that swears they need Overtype mode, so dropping the mode was probably out of the question. Instead, they've left Overtype mode in, but arranged the default keyboard settings so that the Insert key doesn't engage the mode. 




It's always been possible in Word for an advanced user to unmap the
Insert key from Overtype mode. Word 2007 simply does this by default,
then adds an explicit option to turn the old keyboard mapping back on:</p>



<p><img border="0" src="https://miksovsky.blogs.com/photos/uncategorized/microsoft_word_2007_insert_key_option.png" title="Microsoft_word_2007_insert_key_option" alt="Microsoft_word_2007_insert_key_option" /></p>
<p>I conjecture that Overtype mode is a user interface fossil: a piece of behavior leftover from a long bygone era whose entire ecosystem has been so utterly changed that the very rationale for the UI is hard to reconstruct. I have a dim memory of IBM character mode terminals that let a user could freely navigate a cursor with directional arrow keys across data entry forms. These forms to some extent mirrored the behavior of paper forms, letting a user “fill in the blanks” on the screen. Entering text into a field with existing text would overwrite the old text with the new. By some twist of fate, some author of a character mode word processor was compelled—perhaps under duress, we may never know—to include support for this behavior. An age passed, and support for this behavior became a requirement for backward compatibility—leading directly to its carefully preserved (but neutralized) existence years later in Microsoft’s latest word processor.</p>
<p>You can read more about the substantial UI changes in Office 2007 in Jensen Harris' <a href="http://blogs.msdn.com/jensenh/">Office User Interface Blog</a>. </p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Rhomboid
EMAIL: me@privacy.net
IP: 67.180.27.233
URL: http://google.com
DATE: 07/11/2006 11:43:38 PM
To be honest when I read this I thought that this was the standard behavior of all windows apps.  I had to test it in a few, and to my surprise it's not.  I remember this "Overtype" mode so fondly from the ancient MSDOS days that I assumed it still existed everywhere.

It does still exist in my text editor (UltraEdit) which is the only place I can ever conceive of needing it, so I suppose that this explains why I assumed it still existed in Windows.  UltraEdit is nice enough to turn the cursor into a block-shape when you are in Overstrike mode, so that at least you visually have something more than just OVR in a status bar.  And to be honest I do use this every now and then when programming, often in conjunction with the column mode.

However I certainly agree that it's an anachronism in Word and needs to die there, or at least be configured off by default.

-----
COMMENT:
AUTHOR: Fontti-intoilija
EMAIL: juhagman@gmail.com
IP: 130.232.145.161
URL: 
DATE: 07/13/2006 06:30:58 AM
That's great news. I wonder if they would do it to caps lock too. (actually I can't try if they have done it already as I've disabled my caps lock myself)
-----
COMMENT:
AUTHOR: Karl G
EMAIL: grayrest@gr.ayre.st
IP: 209.6.22.242
URL: http://gr.ayre.st
DATE: 07/13/2006 07:15:18 AM
I use replace mode/overtype regularly in vim, mostly for changing numbers, but I've never used it outside programming.
-----
COMMENT:
AUTHOR: dumbfounder
EMAIL: info@dumbfind.com
IP: 38.118.73.250
URL: http://www.dumbfind.com
DATE: 07/13/2006 08:00:12 AM
that is funny. First thing I do with a new keyboard is just remove the insert key altogether! If I ever need to actually use it (which is pretty much never) I just jam a pen in there.
-----
COMMENT:
AUTHOR: Stu
EMAIL: stuartbrockman@hotmail.com
IP: 81.26.117.34
URL: 
DATE: 07/13/2006 01:58:18 PM
Whats wrong with caps lock!?
Is there a preferred way to enter more than a single character in caps?
Holding down shift becomes annoying if you want to type a word or two in caps, especially as it means you have to type one-handed.
And if you think that typing in caps is too rare to need a key, you obviously dont user IM or email very often.
-----
COMMENT:
AUTHOR: Andrei Popov
EMAIL: ceesaxp@gmail.com
IP: 62.141.89.178
URL: http://ceesaxp.org/
DATE: 07/13/2006 08:46:38 PM
I'll have to agree with Rhomboid -- overtype/overstrike mode is not *entirely* useless.  Any programmer would confirm that very now and then it is extremly useful, especially if one needs to deal with console-based programs.  Having an option to turn it off in Word is good, and I'll second the OP that it did not have to take this long.  I'd only guess that it has traveled miles from old DOS-based MS Word...
-----
COMMENT:
AUTHOR: Fontti-intoillija
EMAIL: juhagman@gmail.com
IP: 130.232.120.66
URL: 
DATE: 07/14/2006 02:53:38 AM
Stu: Firstly, as insert key caps lock is usually located to such a place it is very easy to trigger it unintentionally. Secondly, there are actually very very few occasions one needs to write all caps.

Writing a word in all caps once a day (or so) using the shift is less of a burden than having unintentional caps words because of the key placement. If a user has a need for writing all caps (some kind of programming for example) the user should use an editor that eases or perhaps automatizes changing of the letter size, the right solution is not to put a caps lock (at least in that kind of place) on all users' keyboards.

To be fair, after announcing my war to the caps lock key I must remind that the print scrn, break, scroll lock and num lock keys should not feel like they've off the hook. I'm after them next!
-----
COMMENT:
AUTHOR: Lyn
EMAIL: Lyn_Coffin@msn.com
IP: 82.117.130.226
URL: 
DATE: 07/15/2006 10:05:46 AM
I really enjoyed your comments on the Overtype mode. It's a subject I've not thought about in such depth before. (Height?)Please check your email. Thanks.
-----
COMMENT:
AUTHOR: John Man
EMAIL: jman@home.org
IP: 217.169.16.37
URL: 
DATE: 07/15/2006 06:53:14 PM
I just overtype mode occasionally in Word when, for example, converting something pasted from upper case to lower case.  It's quick to just type in the new word and with overtype mode on, quick to spot any mistakes.
-----
COMMENT:
AUTHOR: Centaur
EMAIL: flowstate@centaur.mailshell.com
IP: 217.117.82.122
URL: 
DATE: 07/16/2006 02:07:57 AM
@John Man: converting case in Word is better done via the Format | Change Case command, and even better through the Shift+F3 shortcut (cycles lower/Title/UPPER case). To render originally lower case as capitals, it is better still to add the All Caps setting to the relevant paragraph or character style.
-----
COMMENT:
AUTHOR: John Topley
EMAIL: john@johntopley.com
IP: 84.92.148.146
URL: http://www.johntopley.com/
DATE: 07/16/2006 02:08:06 AM
John,

You can toggle the case of something in Word by selecting it then pressing Shift + F3. It goes from lowercase, to Sentence Case to UPPERCASE.
-----
COMMENT:
AUTHOR: Michael Zuschlag
EMAIL: zuschlag@fast-mail.org
IP: 12.104.27.5
URL: http://www.zuschlogin.com
DATE: 07/17/2006 08:36:17 AM
I just did a quick comparison, and I find I’m 20% faster and 40% more accurate if I replace a 4-character string by highlighting the text with a mouse and typing rather than using Overtype mode. Using the mouse means leaving the home keys once, while toggling in and out of Overtype mode means leaving them twice, contributing to the difference in my performance. Regular users of Overtype mode (I’m not) maybe can match their performance with a mouse, but when you include the time cost from *accidentally* hitting the Insert key, I suspect even those users are better off without it. Rah-hoo for Office 2007.

Caps Lock is more useful. For one thing, sometimes you JUST HAVE TO SHOUT and not all apps have Word’s Shift+F3. The solution for Caps Lock is to make this key a true toggling key, like they were on mechanical typewriters. It should feel different when you press it, and visually remain depressed until you hit it again. On today’ keyboards, the only indication of its mode character is an LED clear on the other side of the keyboard --not much better than Insert key’s lack of any indication.

-----
COMMENT:
AUTHOR: Joe
EMAIL: joe@mailinator.com
IP: 63.115.132.100
URL: 
DATE: 07/20/2006 05:53:54 AM
Ummm... Overtype mode *is* good for filling out forms which are (foolishly) created with underline characters or spaces.  Without overtype mode, the spaces get line-wrapped and the text alignment goes haywire.  

Now, are there better ways to make forms in Word?  Sure.  But even with the new UI they aren't what a novice Word user will create, and therefore not what most of us will see.
-----
COMMENT:
AUTHOR: Rhomboid
EMAIL: me@privacy.net
IP: 67.180.27.233
URL: http://google.com
DATE: 07/30/2006 08:25:23 PM
File me under the category of people that hates Caps-Lock too.  I use one of those .reg files that remaps that key to be ALT so that I will never again have to bother with that useless feature.

If I want to type something in all-caps I just hold down shift with my pinky.  It barely affects typing speed at all.  You must not be a touch typist if you can't easily type holding shift at the same time.  For more than a word or two I just use my editor's case-folding features that can convert any highlighted text.

BTW, I would go insane without the INS key.  I use shift-INS as the Paste shortcut all the time.  Sometimes it just feels quicker than ctrl-v, especially in those cases where my right hand is already leaving the home row to grab the mouse.
-----
COMMENT:
AUTHOR: save
EMAIL: dfgjdfbgkjxb@hotmail.com
IP: 81.215.20.78
URL: 
DATE: 11/22/2008 01:42:45 PM
if you want 1 year rapidshare premium account and earn 60 euro go to this link and press create free account. You will earn them in 1 week. 

http://www.AWSurveys.com/HomeMain.cfm?RefID=mematikuru
-----
COMMENT:
AUTHOR: Antoinette M.
EMAIL: alfm12345@gmail.com
IP: 24.175.144.50
URL: 
DATE: 01/26/2009 11:24:45 PM
I use overtype mode ALL the time, and I opted to turn it back on immediately. Having to remove my hands from the keyboard slows me down, period. With overtype mode, my hands never leave the keyboard. Besides, I am not such a great mouser on my laptop, so overtype is infinitely faster than having to select a passage and retype it.
-----
COMMENT:
AUTHOR: Photoshop Tutorials
EMAIL: snowdevil@gmail.com
IP: 82.11.133.54
URL: http://www.graphicsdistrict.com
DATE: 01/28/2009 05:26:15 AM
@Antoinette M

Try holding down control-left or control right to select stuff without having to use the mouse. control-shift-left/right to select whole words. Much better than overtype.
-----
COMMENT:
AUTHOR: mj
EMAIL: 
IP: 71.194.228.121
URL: http://profile.typepad.com/6p01127901dc9128a4
DATE: 02/21/2009 10:56:13 AM
When I started reading this I thought it was a joke. Just because it doesn't work for you doesn't mean it doesn't work for anyone else. 

My job requires me to constantly be writing over old reports and nothing works better than the insert key/overtype feature. 

I find it very hard to believe the person who said they timed themselves that it is faster to use the mouse over keeping your hands on the keyboard. 
-----
COMMENT:
AUTHOR: stella
EMAIL: chubchub9@gmail.com
IP: 63.138.249.2
URL: 
DATE: 02/26/2009 08:22:31 AM
I use overtype mode everyday (constantly taking old documents and updating them with new information) so it was frustrating when Microsoft made it inaccessible from just the keyboard INS key. It would have been helpful if you had explained where to manually turn it on, instead of just showing the screenshot, but I will go to Help and figure it out.

Thanks!

-----
COMMENT:
AUTHOR: Gar
EMAIL: gareth.m@convex.co.nz
IP: 203.97.200.114
URL: 
DATE: 05/14/2009 03:30:50 PM
Overtype mode is incredibly useful.  I use it daily.
-----
COMMENT:
AUTHOR: Jim
EMAIL: jhworden@comcast.net
IP: 66.41.142.20
URL: 
DATE: 10/07/2009 03:54:17 PM
At least Word 2003 and older indicate when you are in over-type mode, in the status bar, does Word 2007 have any equivalent?
-----
COMMENT:
AUTHOR: linnea
EMAIL: lwren@peralta.edu
IP: 209.129.192.62
URL: 
DATE: 01/11/2010 02:22:50 PM
Count me in as a frequent user of Overtype.
-----
COMMENT:
AUTHOR: Stephen
EMAIL: star000gazer@yahoo.com
IP: 206.47.249.252
URL: 
DATE: 06/09/2010 01:39:32 PM
Overtype (now I know it has a name) is one of the many many useful features which I used to like in previous Word versions and now being taken away by default. 

I know MS wants to improve on UI, but when things that used to work one way is being altered to an unrecognizable one, all it ends up with is user frustrations. I don't recall how many times this is now that I try to google how to turn these features back on, and now landing on this article praising how well Word 2007 is designed. 

I must admit that i'm a programmer and i really rely on Insert key for fast editing on some of the repetitive text when editing technical documentations. 

Anyways, thanks for the info.


-----
PING:
TITLE: No Modes
URL: http://www.jasonlefkowitz.net/blog1archive/2006/07/no_modes.html
IP: 66.33.213.24
BLOG NAME: Just Well Mixed
DATE: 07/12/2006 05:24:22 AM
One small step for Microsoft Office, one giant leap for usability
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Oh app, for crying out loud, go update yourself
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: hey_app_go_upda

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2006/06/hey_app_go_upda.html 
DATE: 06/25/2006 09:40:00 PM
-----
BODY:
<p>When I start my PC these days, I see six or seven different applications in the Windows system tray screaming for attention. “An update is available! Update me!” “No—Update ME!” they cry. Great. Another click, another progress bar, another completely minor upgrade accomplished. One wonders: is there a meaningful role for the user in this process at all?</p>
<p>When it comes to updates, companies making client software have an enormous disadvantage versus web-based competitors. Deploying new server bits is a problem of considerable complexity in its own right, but at least the web software company gets to decide when to deploy and who conducts the upgrade. The user has no choice whether to use the updated site or not. In my own experience, most site updates seem to go rather well (your mileage may vary), so it’s not something I even pay attention to.</p>
<p>The client software manufacturer, meanwhile, has the challenging task of deploying bits to a quantity of machines orders of magnitude greater in size. The target machines could be running in any number of configurations the manufacturer isn’t even aware of, much less have in their test matrix. The update process is under the supervision of a user who generally has no idea what to do if something goes wrong.</p>
<p>Nevertheless, the mere existence of the constantly upgrading web-based competitor puts considerable pressure on the client software manufacturer to make the update process as transparent as possible. To be sure, client software updates are much less of a pain than they used to be. <a href="http://en.wikipedia.org/wiki/DLL_hell">DLL hell</a> is, by and large, no longer a nightmare plaguing every single update. Persistent broadband connections make checking for updates easy, and downloading new bits quick. In the vast majority of cases, the user needs to supply no additional data, the updates fall under EULAs the user has already agreed to, and the software already knows where it should be installed.</p>
<p>So why make the user agree to the update at all? Why not just do the update for them—at least in the cases where the user doesn’t have to do anything else?</p>
<p>Users at the extreme end of the techno-savvy spectrum may demand the ability to control when updates happen. Let’s stipulate that they should have the right to do so. I expect that most users, however, don’t care to exercise this right. I think the average person would only ask the following of any client software manufacturer regarding updates:</p>

<blockquote><p>Rule 1: Don’t screw up my PC. This includes things like surreptitiously switching my home page, spamming my desktop, etc.</p>
<p>Rule 2: Don’t try to upgrade your product when I’m in the middle of using it. In general, don’t distract me from what I’m doing right now. To be honest, you’re really not that important to me.</p>
<p>Rule 3: Don’t reboot my PC. That’s rude. Whatever Adobe Acrobat Reader is doing that requires a reboot isn’t worth it to me.</p></blockquote>

<p>I think that’s about it. Is the typical client software upgrade user experience these days actually supporting these goals?</p>
<p>Following a reboot on my main home PC, MSN Messenger (now called Windows Live Messenger) is the application most likely to be yelling for attention. Its upgrade experience is at the, er, “good” end of the user experience continuum for these sorts of things.</p>
<p><img border="0" alt="Msn_messenger_toast" title="Msn_messenger_toast" src="https://miksovsky.blogs.com/photos/uncategorized/msn_messenger_toast.png" /> </p>
<p>This little window that pops up is called a “toast” by the MSN design team because it pops up like a piece of toast. This particular piece of toast is lying. Clicking it brings up a dialog that does not, in fact, offer any more information.</p>
<p><img border="0" src="https://miksovsky.blogs.com/photos/uncategorized/msn_messenger_upgrade_dialog_1.png" title="Msn_messenger_upgrade_dialog" alt="Msn_messenger_upgrade_dialog" />


</p>
<p>Instead, the toast has actually tricked the user into starting the upgrade process. (For the record, this particular upgrade to MSN Messenger Version 7.5 will require a reboot.) The user can try to leave, but only by being forced to agree to be bothered again later. The user can click yet another button to see a web page that (finally) tells them why they should care about this upgrade:</p>
<p><img border="0" src="https://miksovsky.blogs.com/photos/uncategorized/msn_messenger_upgrade_page.png" title="Msn_messenger_upgrade_page" alt="Msn_messenger_upgrade_page" /></p>
<p>It's interesting to wonder which of the features listed above was the one that required a reboot.</p>
<p>In any event, the list of new features is beside the point. The placement of this information—three clicks away from the user—makes this fact obvious. The user has no choice in this process. It really doesn’t matter whether they like the new features or not. The manufacturer has updated the software, and will at some point stop supporting the old software. The user is going to have to upgrade at some point, or run the risk of being shut out when they really do need the service.</p>
<p>Why can’t the manufacturer simply arrange to have the client software automatically upgrade itself at some convenient time?</p>
<p>First, there’s the matter of preference—the user might not actually prefer the new software to the old software. This is entirely likely, but allowing them to keep running the old version seems like an incredibly inefficient solution to the problem. This creates tribes of users running old versions, complicating maintenance and improvement of both the client and server software. The enormous resources thus wasted could be put to better use finding out why people hate the new software and addressing the core design issues. This is what good web sites do. Or, if the differences are irreconcilable, the manufacturer can resort to leaving in program options that preserve aspects of the old user experience. In any event, making upgrades optional simply delays the inevitable disappointment of a forced upgrade when the manufacturer eventually can no longer support the old version.</p>
<p>Second, there’s the matter of bad upgrades. Sometimes this is because the manufacturer wrote buggy code. Postponing the upgrade isn’t going to fix this problem—the user is going to play upgrade roulette at some point. As noted earlier, the hapless user’s hardware and software stack may operate in a configuration outside of the manufacturer’s testing matrix. If this really is a critical reason to leave upgrades under a user’s control, then the existing user experiences fall far short of actually supporting this goal.</p>
<p>The problem is that no upgrade experience I’ve seen actually helps the user conduct a realistic evaluation of whether they can expect the upgrade to go smoothly in their configuration. As seen above, upgrade announcements for most applications are entirely rosy lists of new features, with no indication of what might go wrong. The little pop-up toast affords no links to resources such as upgrade FAQs, knowledge base articles, or most importantly, current user discussions of issues related to the upgrade. Users who care about upgrades currently must find this information on their own.</p>
<p>Given that the mainstream user can’t invest that kind of time, the only user experience that makes sense for them is automatically upgrading them at a convenient time (e.g., the machine is idle and it’s the middle of the night). If the program is in use, the program should at least download the bits, install as much as it can, and be prepared to cut over to the new version when the user next restarts the application. (Mozilla Firefox does this, although with too many dialogs for my taste.)</p>
<p>To support those users who want to carefully manage the upgrade process, the manufacturer can offer an option for manual upgrades. This option should—quietly—notify users when an upgrade is available. Since the mainstream user can’t be bothered to understand that option, the option should default to automatic upgrades. This scheme is, in fact, the route that Microsoft has finally taken with Microsoft Windows upgrades. Their user experience certainly isn’t ideal, and yet on balance Automatic Updates probably saves far more grief than it inflicts. Given the challenge of the client software upgrade problem, that’s about as good as anyone can expect.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Simon
EMAIL: zeniko@gmail.com
IP: 130.92.151.151
URL: 
DATE: 06/26/2006 09:01:43 AM
And what would you recommend to do in case the current user doesn't have admin rights? Inform the user at some point or leave him/her alone? At best probably default to the later and optionally allow the former...
-----
COMMENT:
AUTHOR: Alexander Groß
EMAIL: AlexanderGross@gmx.de
IP: 88.73.220.214
URL: http://www.it99.org/axl/
DATE: 06/26/2006 10:59:52 AM
What's even more annoying is software that's trying to update but will eventually fail because I'm running as an unprivileged user. One has either to download the updater manually and do a runas or start the application as an administrative user and trigger the update manually.

Unfortunatly, most products don't detect if they're performing the update in a limited environment and offer an runas-dialog accordingly.

My two cents.

Alex
-----
COMMENT:
AUTHOR: dc
EMAIL: devin.chalmers@gmail.com
IP: 206.174.127.73
URL: http://doormouse.org
DATE: 06/26/2006 11:46:06 AM
I disagree. Automatic updates, as you describe them, result in confused and unhappy users. Obviously, it would be ideal if every single user wanted to and did keep up to date with the latest versions of all their software, but in the real world this is just not true--and for good reason.

By and large, computer users (especially non-savvy ones) follow the "If it ain't broke..." rule closely. As you note, updating will possibly cause no new problems, but may cause a dozen. Not updating will not cause any new problems--unless Microsoft gets lazy and decides to not support old versions of Messenger (again). (I've never heard a good explanation why this keeps happening. Is IM protocol really that hard to keep backwards-compatible?)

Updating is,  generally, good. Not updating, however, is not generally bad--unless your software was bad in the first place. Unfortunately, the best compromise, to me, is the current paradigm, which at the least keeps the user informed and in control over what software and new "features" are being installed on their computer. We should work at improving that experience, and not go behind the user's back in the name of helping them.
-----
COMMENT:
AUTHOR: Shaun
EMAIL: shaun.carlson@gmail.com
IP: 128.187.0.165
URL: http://blog.nucleartoiletpaper.com/sigma
DATE: 06/26/2006 12:48:48 PM
One thing I don't like about the automatic updates that programs go through nowadays is the frequency with which they have to be updated.  Windows is notorious for this, but Adobe is bad as well (which was mentioned).  Why are such frequent updates required?  My first conclusion is that the company does shoddy programming.  I also wonder how many of these updates are there to fix something from a previous update that wasn't coded well, etiher.

It seems to me that unless they put out a crappy product that needs to be fixed pretty quickly, there's not a dying need to have a new update out every couple of weeks.  I'm willing to cut Windows some slack due to the people that will go to their graves trying to destroy it, but everything else seems excessive.  Waiting for a couple of months before trying to push out a new update doesn't seem like a bad idea on any level (with the obvious exceptions of accidental bugs that even great programmers make on occasion).  

This greatly reduces the different version problem talked about in that blog because there aren't so many updates to provide different versions.  As for MSN, pushing out an entirely new update over renaming the audio and video components?  Come on!  Save useless junk like that for another version when something important needs to be changed.  

Users don't want the bleeding edge of a program.  They want one that works.  I don't know how they figure the problem is how to get updates to users without bothering them.  I think the real problem is figuring out how to push out as few updates as possible.  If that means we have to wait an extra couple of months for some minor feature, I think I can speak on behalf of the average user when I say that this is quite all right.
-----
COMMENT:
AUTHOR: Tom O'Neill
EMAIL: tgo.2005@gmail.com
IP: 64.142.89.20
URL: 
DATE: 06/27/2006 01:17:35 AM
Great post.  But one advantage of at least telling the user about the upgrade is that it gives them a clue what might be the problem if their computer suddenly stops working.  
-----
COMMENT:
AUTHOR: Centaur
EMAIL: flowstate@centaur.mailshell.com
IP: 80.66.95.221
URL: 
DATE: 06/27/2006 02:05:52 AM
No. Software should not autoupdate itself, for several reasons.

First and foremost, software runs as a limited user, and updating requires write access to the binaries which is only granted to administrators. Thus, an application cannot do anything but ask the user to ask the admin to update.

Second, updating requires Internet connectivity, and sometimes a substantial amount of traffic. Suppose Microsoft releases an Office service pack of 100 megabytes. Also suppose a local area network with 300 users having the same version of Office. If they all start downloading, it will cause almost 30 gigabytes of traffic, rated $55 per G, for a total of 1650 US dollars. On the other hand, if I bring the update from my work place (where it was downloaded and stored on the server) and offer it to my neighbors, it costs us nothing.

Third, if Office decides to update itself, it might (and most probably would) use up my prepaid Internet limit, which will cause me to be disconnected from the Internet. The update will fail, unless the updater supports resume — and it most probably doesn’t. So I lose my traffic limit — and this means money — for nothing. Also, I lose my Internet access, until I manage to go and pay for more, which may (if it was Friday evening) be two days and three nights later. A weekend without Internet access, what?

Fourth, if software can update itself, it can possibly be tricked into updating itself with a malicious update. On the other hand, if I am told that an update is available, I will visit the vendor’s web site and find out that there is no update. Or I will download the fake update, install it on a controlled machine, see the effects, submit it to my antivirus vendor and not install it anywhere else.

Last but not the least, I have the right to know exactly which version of which software I have installed, if for nothing else than bug reporting. If it autoupdates, I lose this knowledge and have to resort to unhelpful claims like “last Sunday it worked and today it doesn’t”.

No, software updates must be done in a controlled way by the system administrators. Even if said administrator is the same person that ordinarily uses that computer.
-----
COMMENT:
AUTHOR: Ilya Birman
EMAIL: plintus@smtp.ru
IP: 83.146.83.66
URL: http://ilyabirman.ru/
DATE: 06/27/2006 07:49:37 AM
When you pay per traffic, you never let any program download anything automatically. You must first decide whether you want to pay money for this upgrade. And believe me, if its "Audio was renamed to Voice", it's not worth ANY money :-) I don't want to download some 5 MB (or what) to throw $.6 away just for that.

The only thing I let autoupdate is my virus scanner database.

So I vote for "Update? yes/no" dialogs, where "no" actually exists and means "no" :-)
-----
COMMENT:
AUTHOR: Michael Zuschlag
EMAIL: zuschlag@fast-mail.org
IP: 12.104.27.5
URL: http://www.zuschlogin.com
DATE: 06/28/2006 05:10:42 AM
Some of comments seem to be comparing auto update with no update or "manual" user-initiated update, but I don't think that's what Jan has in mind. I believe he's talking about comparing auto update with *prompted* update, and here I think auto update makes more sense. What's worse than auto update with a limited user? Prompted update that annoys the user with "Would you like to update?" then after the user clicks OK, says, "Nope. Sorry. Never mind." 
That said, auto updates aren't for every update. They probably should be limited to updates that really everyone *needs* to do (e.g., security issues or major-task-halting bugs). If it is truly important enough to demand a prompted update ("Update *Now!* We *cannot* tolerate users who aren't updated!"), then it's probably important enough for auto update.
But "Audio was renamed to Voice"? That probably doesn't belong in either auto update or prompted update, but user-initiated update (that includes: user has issue, checks knowledge base, see patch available, downloads patch). A compromise is to provide the user with the opportunity to subscribe to an email list that sends details of each update as it becomes available.
There are really two rules: (1) Give the user enough information to make an intelligent decision on whether to perform a task or not, (2) Let the user decide *when* to engage in a task that requires his/her interaction. Prompted updates break both rules. Auto updates breaks only (1), and I believe Jan gives examples of when that's okay.
-----
COMMENT:
AUTHOR: Peter H.
EMAIL: dontspamme@spammenot.com
IP: 67.160.2.23
URL: 
DATE: 07/01/2006 05:50:54 PM
My vote for one of the most annoying instances: the monthly update by Microsoft to install the "Microsoft Genuine Advantage" check.  How many times to I have to approve these updates before Microsoft decides I have the real thing?

Massive disagreement with Centaur.  Optomize for 80/20.  If you're downloading 100 megs, that's a corner case.  Windows has way too many dialogs popping up everywhere.  And to those who pay by the byte ... you're on the wrong side of a tectonic shift in thoughts about bandwidth.  
-----
COMMENT:
AUTHOR: gsl
EMAIL: phear.dude@gmail.com
IP: 85.165.135.23
URL: 
DATE: 07/08/2006 12:26:42 PM
I strongly disagree with you. Although you are certainly addressing a valid issue, I believe you are trying too hard to solve it.

There are several reasons why applications should _never_ auto-update itself.

1. Trust. Although you might trust companies like Microsoft and Adobe (I certainly don't. WGA phoning home is one good example), how would you feel about your file-sharing app auto-updating itself? Or iTunes auto updating itself in order to give you even better DRM? This isn't necessarily about the risk of receiving malicious software, but how the user feels about letting an application change the permanent state of the computer, possibly breaking it because of a minor bug, without having any idea about when it happened and what caused it to happen. What good does system restore do then?

2. Security. How many of the 20 different auto-update implementations, that is installed on your system, do you think have a bug that allows "bad" people to remotely execute their code on your computer without you ever knowing about it. The nature of this functionality is to execute code downloaded from a server without "bothering" the user. Put the word "malicious" in front of code and you've got every hackers wet dream coming true.

3. Technical issues. What if I am connected to the net through my mobile phone? That small update relative to the broadband standard of today might be pretty expensive then.

4. Resources. When should this update happen? Unless you can make the update happen in a flash, there is no way to do this without annoying a significant percentage of your user base.

5. Unexpected behavior. An update would typically do stuff that the application doesn't usually do. This might conflict with the user permissions, firewall settings, antivirus, and other applications that restricts what an application is allowed to do in an effort to prevent the execution of malicious code. Obviously, this might result in the user being hammered with warnings, for no apparent reason, and might even result in a broken application if the updater is poorly coded.

An application should behave in a predictible manner. It should never go off and do stuff that it doesn't usually do, without asking the user. It should also never alter the permanent state of the computer without explicit user consent. These are basic design principles.

So then what? How can we solve the problem?

Well, the problem here isn't really new. It boils down to being a common task that is implemented in 10,000 different ways, because there's no rules that define how it should be done. The solution is simple; create a framework that developers can use to implement the functionality in a consistent way. The user will as a result easily learn how this works, and the entire notification and update process can be made less obtrusive (which means less annoying).

Imagine an update control panel that gives you an overview of the update status of every application in the system. Notifications might be as unobtrusive as a small icon in the notification tray showing the number of updates that are pending. A stronger notification might be issued if updates have been pending for a month.

Sorry about the article-type length of the comment, but it just had to be said :)


-----
PING:
TITLE: The Dirty Business of Software Updates
URL: http://www.brethorsting.com/uidesign/2006/08/the_dirty_business_of_software.html
IP: 66.33.213.21
BLOG NAME: Aaron's UI Design Blog
DATE: 08/21/2006 07:01:55 AM
Jan Miksovsky wrote a while back about the dirty business of software updates. He describes the difficulty rich client software developers have with updating their software once it's in the field (truer words were never spoken...it's a serious pain), a...
-----
PING:
TITLE: Automated Update Behaviour
URL: http://peeved.org/blog/2006/06/27#20060627-001
IP: 66.159.239.140
BLOG NAME: Needlessly Abject
DATE: 06/27/2006 05:46:19 PM
I am continually peeved at software infrastructues being designed for end-users then marketed toward business environments. Almost every time I deploy a new product, I undertake a search to determine how to neuter the "automated update" behaviour in th...
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Windows Media Player 11: Early bit of Aero
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: windows_media_p

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2006/05/windows_media_p.html 
DATE: 05/25/2006 09:00:33 PM
-----
BODY:
<p>For someone who loves to see new user interface ideas, it doesn't get much better than the current season of Microsoft betas. Last week Microsoft released a beta of Windows Media Player 11, followed this week by betas of Office 2007 and Windows Vista. These products are all such significant updates that, regardless of one's opinion of Microsoft and its products, they should all present ample inspiration for user interface designers.</p>
<p>Although I don't think Microsoft has billed it as such, I believe Windows Media Player will end up being considered to be the first product in the Vista wave of UIs to actually ship. (Rumored release dates put it sometime in the next month or so.) Windows Media Player 11 already embodies many of the Vista user interface principles and the Aero visual style.</p>



<p><a href="http://miksovsky.blogs.com/photos/uncategorized/windows_media_player_11.png"><img border="0" class="image-full" alt="Windows_media_player_11" title="Windows_media_player_11" src="https://miksovsky.blogs.com/photos/uncategorized/windows_media_player_11_scaled.png" /></a></p>




<p>Vista and Aero elements that can be seen in the beta include:</p>

<ul><li>Clean, minimalist UI. All parts of the previous XP-era UI have been
thoroughly overhauled to make sense for this app’s needs, while
retaining clear guiding elements for the new user.</li>

<li>Black glass visual style. This includes pervasive use of lighting effects, particularly simulated reflection. (The “R” in the original AERO acronym stood for “reflective”.) Particular design attention has been lavished on the front and center Play button, which sports a very nice hover effect.</li>

<li>Back/Forward buttons in upper left corner. Web-style navigation is applied much more consistently in WMP 11 than in previous versions. WMP 11 follows the general Vista application of navigation to views. For instance, commands that effect the presentation of a view (the sort order, say), but not its contents, do not count as navigation events. Changes that effect the contents (filtering, view changes) are considered navigation events. These events can be undone by going Back. That is, you click Back to return to your previously view. This navigation model has been a long time coming, and feels pretty good to me in practice.</li>

<li>Toolbar across the top spells out the application's value proposition. Aside from offering quick access to the WMP's major features, the toolbar also lets a new user quickly grasp what it is that WMP actually has or does: play music, (organize a) Library, Rip, Burn, Sync, and purchase music from a store. This toolbar element isn't properly speaking a Vista UI guidelines element (i.e., something Microsoft asks other ISVs to follow), but is a hallmark of a number of Microsoft's own applications included in the Vista product itself.</li>

<li>Breadcrumb bar across top of viewing area. As in the Vista shell, clicking a breadcrumb element (&quot;Music&quot;, &quot;Library&quot;, or &quot;Songs&quot;, in the image above) navigates to that point in the virtual search hierarchy. Clicking a breadcrumb element's dropdown arrow (revealed on hover) allows fast navigation to that element's siblings in the hierarchy.</li>

<li>Full text search box in the upper right.</li>

<li>Property tree on left. Of all the Vista element in WMP 11, the property tree seems the most rudimentary. The Vista shell will eventually deliver a much richer experience here for filtering and viewing lists, but it's interesting to see that WMP is already lined up with that future direction.</li>

<li>New views. The default “Songs” view is an instance of an Expanded
Tile that shows song information alongside album art. I find this more
useful and attractive than either a flat track listing or album art
view. This Songs view will probably not be interesting to folks who
acquire individual music tracks (by whatever means).<br />
</li></ul>













<p>I do have one minor nit: The toolbar buttons across the top are split buttons (on hover, a small portion of the button reveals a dropdown menu), but the target area for the dropdown arrow is a incredibly thin horizontal rectangle across the bottom of the button. Common sense (and consequences of Fitts’ Law) suggest that targets are easier to hit if they’re big and square. The decision to use a target area along the bottom of the button was presumably influenced by aesthetic considerations. (Putting the dropdown arrow on the right would spoil the general horizontal symmetry throughout this UI.) I can appreciate the importance of aesthetic concerns, but here it seems they should have been overpowered by the practical need for usability. Or perhaps it’s the case that only young people with hyperfine dexterity are the people that want to quickly rip albums at specific bit rates.</p>
<p>Anyway, after a week of using WMP 11, I’m quite impressed.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Vlado Klimovsky
EMAIL: vknospam@iblsoft.com
IP: 62.168.111.42
URL: 
DATE: 05/26/2006 12:47:53 AM
Regarding the split toolbar buttons, I actually quite often accidentally click the thin bottom half instead of the big main button :-). It may be that when I move the mouse pointer from the center part of the WMP window up to a toolbar button, I click it as soon as I see it's changed its color. Unfortunately at that time the mouse cursor is still on the thin half...
-----
COMMENT:
AUTHOR: mattbg
EMAIL: mattbg@hotmail.com
IP: 142.205.241.145
URL: http://mattbg.blogspot.com
DATE: 05/26/2006 05:19:15 AM
What is your take on the fact that the "full text search" box is fairly unpredictable and will return different things depending on the view that is currently selected?

I find it rather confusing; predicting what you'll get when you type is like working with a box of chocolates.
-----
COMMENT:
AUTHOR: Matt Chaput
EMAIL: mchaput@rogers.com
IP: 72.136.164.218
URL: 
DATE: 05/26/2006 07:21:55 AM
I don't see how you can possibly call this "clean" or "minimalist." They seem to be doing everything they can do to obscure the button icons and label text with 12-stop goofy gradients.

You can argue that you think it looks good, but it sure as pumpkins ain't minimalist.
-----
COMMENT:
AUTHOR: Michael Zuschlag
EMAIL: zuschlag@fast-mail.org
IP: 68.163.194.150
URL: http://www.zuschlogin.com
DATE: 05/26/2006 07:45:02 AM
Slick looking UI, but something puzzles me that I’ve seen in other Aero-type screenshots. How do they visual code selectable versus inert elements? As near as I can tell there is no consistency, with different selectable items appearing radically different, and, worse, some selectable and inert elements appearing the same (e.g., the inert (?) expanded title text and the selectable song list). Am I right? It seems to me the difference between inert and selectable is the most important thing the graphic design needs to communicate for actually using the app.

Another thing: why do they have breadcrumbs and a property tree? Aren’t they at least partially redundant, adding clutter and consuming real estate?

-----
COMMENT:
AUTHOR: Pascal Binggeli
EMAIL: pascal.binggeli@bluewin.ch
IP: 81.62.78.40
URL: http://www.cosmicreactor.com
DATE: 05/26/2006 08:31:52 AM
Right-clicking the toolbar button  opens the drop-down menu, negating, IMO, the small target area of the split button. But I still find the buttons generally difficult to use.
-----
COMMENT:
AUTHOR: Alex
EMAIL: support@bytegems.com
IP: 193.110.112.253
URL: 
DATE: 05/26/2006 08:55:58 AM
Actually, I'm not very happy with new UI. Yeah, it's slick and looks cool, but it's alien in Windows XP environment. Maximize/Minimize/Close buttons rendered awfully when hovered over, if you turn on classic menu -- it will suck. The UI in whole is not XP thing (look at WMP 10 for instance).

Now more: we've got IE7 beta, WMP 11 beta and Office2007 beta. ALL THREE LOOK DIFFERENT and do not follow Windows' visual theme. This is not good.
-----
COMMENT:
AUTHOR: James
EMAIL: yasuda_hunter@msn.com
IP: 146.151.105.71
URL: 
DATE: 05/26/2006 10:34:01 AM
Alex has a good point--this is not good at all. 
IE6, WMP 10, and Office 2003 all look the same--and all three follow Windows' visual theme. It seems Microsoft is taking a step backward.
-----
COMMENT:
AUTHOR: Stu
EMAIL: test@example.com
IP: 87.74.42.17
URL: 
DATE: 05/27/2006 02:03:25 PM
That's sarcasm right? The only one of those 3 that follows the visual theme is IE6.
I can't see why Microsoft can't use a single look for everything, ala GNOME, KDE, or Mac OS X. You can have variations, ala OS X's Aqua vs Brushed Metal vs Plastic, but to have several completely different look 'n feels in one OS seems like madness to me.
-----
COMMENT:
AUTHOR: Mat Hall
EMAIL: elbiggus@gmail.com
IP: 84.9.151.148
URL: 
DATE: 06/08/2006 07:20:41 AM
The new UI is OK (bar the aforementioned "ignores completely any adjustments to the display the user may have made" and other problems already listed), but I *REALLY* miss the artist/album expandable trees.  I pretty much used those as my only methods of navigating in 10, and now I have to go to the album view and fiddle with the sort order to attempt to replicate the functionality, but it's less compact, slower, and doesn't quite achieve the same result.  (I also can't for the life of me work out how to get the list pane back in the visualisation view now I've hidden it.)

I'm looking forward to a post on the Office 2007 UI -- I have a list of complaints about it that's as long as my arm, and I've got quite long arms! :)
-----
PING:
TITLE: UI Standards ... Endangered Species?
URL: http://www.madprops.org/cs/blogs/mabster/archive/2006/06/08/5207.aspx
IP: 202.173.189.75
BLOG NAME: Mabsterama
DATE: 06/07/2006 09:56:00 PM
There's a (kind of old, now) post over on the excellent Flow|State blog about Windows Media Player 11...
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Designers and developers
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: designers_and_d

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2006/05/designers_and_d.html 
DATE: 05/16/2006 06:50:48 PM
-----
BODY:
<p>pixels vs code</p>
<p>Designers<br />inconsistency in folder structure, HTML style naming and application, etc.<br />pixels</p>
<p>Devs<br />code<br />
functional decomposition is hallmark of analytic mind<br />ask for square, get a rectangle</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Google command line
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: google_command_

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2006/05/google_command_.html 
DATE: 05/14/2006 09:48:02 AM
-----
BODY:
<p>http://www.google.com/coop/docs/guide_subscribed_links.html</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Font impoverished
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: what_the_font

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2006/05/what_the_font.html 
DATE: 05/09/2006 09:30:00 PM
-----
BODY:
<p>Over the past few months I've found myself confronted by an unexpected problem: the lack of a functioning platform and ecosystem for using custom fonts in applications. I'd assumed this problem had been solved long ago, but practical experience suggests otherwise, as does the the world of extant UI out there. Something like 99% of the client UIs seem to use a stock system font, and 95% of all the real text in web pages seems to be set in a standard sans serif font (Arial or Helvetica). I've come to view this as one of the tightest practical constraints on UI expression today. </p>
<p>User experiences suffer from this bland uniformity, as does an organization's ability to reinforce its identity. Type is such an important part of establishing brand. No one designs printed material without careful consideration of typography, yet we put up with only tiny amounts of custom type on web pages and in applications—and this text is inevitably hardcoded as images where it can't do as much good. To me this is akin to the color limitations of yesteryear.</p>



<p><img border="0" src="https://miksovsky.blogs.com/photos/uncategorized/16_color_palette.png" title="16_color_palette" alt="16_color_palette" /><br />16 colors: Limited, boring, lame</p>



<p><img border="0" src="https://miksovsky.blogs.com/photos/uncategorized/helvetica_sample.png" title="Helvetica_sample" alt="Helvetica_sample" />


</p>
<p>Stock sans serif font: Limited, boring, lame</p>
<p>Here are just some highlights from the catalogue of pain accompanying attempts to use a custom font in a user interface:</p>
<p><strong>Lack of decent development support for rich text.</strong> On most client UI platforms, if you want to display static text, you use a simple label control. This label control can generally display a block of text in a single typeface, point size, weight, and style. There's generally no support for simple inline changes <strong>like this</strong> that apply to a span within the text; text properties always affect the entire text block. This leads to a general apathy towards typography that pervades the entire development experience: since doing anything interesting is hard, why bother? There's generally no support for styling, so evolving a user interface that uses anything but the system font becomes a tedious exercise in tracking down font references and making sure that every obscure dialog is using your fonts the right way. Most platforms include a rich text control, but these are meant for run-time editing, not design-time editing, and their performance is usually terrible. Alternatively, you could host your text in a browser control, which has an even worse design-time experience, even worse performance, and complicates your development substantially as you have to factor text into tiny fragments of HTML.</p>
<p><strong>Licensing minefield.</strong> Oh, you thought you could just give away that font with your app, huh? That font file is intellectual property that you need to pay for, and licensing anything can be a legal nightmare. Designers at large software companies can call in airstrikes from their legal department to have licensing agreements negotiated on their behalf. Startup folk have to do this on their own, and what a royal pain it is.</p>
<p>Font foundries are focused on graphic designers. A graphic designer usually needs one copy of a font for their own use. They create something in Photoshop or whatever with the font, then create the desired physical (print) or electronic rasterized output (PDF, etc.). Approaching a company like this with a request to include their font in your application or site will get you the email equivalent of a blank stare. I spent an entire morning on the phone with one of the largest font vendors on the planet trying to find someone who could license one of the company's fonts to me. I was transferred <em>seven times</em> to different people, none of whom had the faintest idea was I wasking for. One person asked me whether my application would be used by more than 5 people. The company's web site was no help—in fact, it was misleading and therefore worse than useless. Whever a company has this much trouble accepting money from someone desperate to do the right thing and pay them, something is seriously wrong.</p>
<p><strong>Installation hassles.</strong> For Microsoft Windows, at least, support for custom fonts remains the same as it has for years: you can only reference fonts that installed in system's Fonts folder. This means that your Setup program has to physically copy the required font files to the user's PC. The copied fonts are loose font files <em>that the user can then use themselves</em>. This is Lame with a capital &quot;L&quot;, particularly because it compounds your licensing nightmares (above). Why on earth should you have to pay to give all your customers the ability to use a font in their own documents just because you want to use it in your app's UI? You don't have to give your customers loose copies of your audio files, or image files, or videos, or any other type of resource. Recent experience has convinced me that installing fonts on Windows is a fragile and buggy proposition. Even with the substantial assistance of a widely-used setup framework, it's absurdly difficult to ensure that the fonts you want get registered in such a way that they can be used immediately (without requiring a reboot) under all conditions. Other OSes may fare better here, but given the problems I've witnessed in Windows, it's no big surprise that most Windows ISVs punt and stick with Tahoma.</p>
<p><strong>Web limitations.</strong> Web sites that want to use custom fonts can resort to what can only be described as hacks. You can use Microsoft's <a href="http://www.microsoft.com/typography/web/embedding/default.htm">WEFT</a> (Web Embedding Fonts Tool) if you want to limit yourself to Internet Explorer and sign up for a bunch of deployment hassle. You could also look at tricks like <a href="http://www.mikeindustries.com/sifr/">sIFR</a> that (amazingly) work but involve gyrations with scripting and Flash. Isn't it odd that it's easier to make text blink than it is to format that same text in a font that is part of your organization's visual identity? One can infer that the small number of sites using any of these hacks is a reasonable indiciator that the problem remains unsolved.</p>
<p>Flash is a bright spot here, giving designers the choice of
embedding fonts or referencing installed fonts. Unfortunately, for a
variety of reasons, I don't find Flash a viable option for mainstream
application development. If you're someone who gets to use Flash, I
envy you your freedom of typographic expression. </p>
<p>Given the pace of change, I'm sure this problem will eventually be fixed. In a few years we'll look back at screen shots of client apps or web pages from this time and instantly recognize them as dating from an earlier era—because most of the text will be formatted in the same stupid sans serif fonts.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Sam
EMAIL: miksovskyblog@radeldudel.de
IP: 87.122.79.218
URL: http://www.radeldudel.de
DATE: 05/09/2006 11:30:28 PM
I wonder if this will get better in Microsofts next dev platform WPF/Avalon.
-----
COMMENT:
AUTHOR: Ian Griffiths
EMAIL: ian@interact-sw.co.uk
IP: 212.135.178.91
URL: http://www.interact-sw.co.uk/iangblog/
DATE: 05/10/2006 12:40:00 AM
Actually Windows has supported 'private' (process-local) fonts since Windows 2000. See the AddFontResourceEx API.

PowerPoint seems to exploit this. It's possible to bundle a font into a PPT file so that you can view the presentation with the fonts the designer intended without having to have those fonts installed on your system.

To reply to 'Sam' above, yes WPF improves matters - it provides decent support for rich text just as Jan describes. Also, the XPS packaging format (a WPF technology) is designed to allow fonts to be embedded. Just as with PowerPoint (and PDF for that matter) this embedding is designed to let you view the document with the proper fonts without having to install those fonts.
-----
COMMENT:
AUTHOR: David Dunham
EMAIL: dunham@pensee.com
IP: 66.107.33.196
URL: http://www.a-sharp.com
DATE: 05/10/2006 09:03:40 AM
We included a font with King of Dragon Pass, which ran under Windows 95 (and Mac OS). IIRC, we would have been able to license something from Bitstream, but we ended up creating our own font so we could get the same bits on the screen for both Mac and Windows.
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 68.178.29.166
URL: http://profile.typekey.com/Jan_Miksovsky/
DATE: 05/10/2006 09:59:47 AM
Ian: Thanks for the pointer to AddFontResourceEx.
-----
COMMENT:
AUTHOR: Ruben
EMAIL: ruben_prins@hotmail.com
IP: 62.131.204.227
URL: 
DATE: 05/10/2006 12:48:03 PM
Add to this Microsoft's refusal to properly support Postscript-based fonts (Type 1 or OpenType/CFF). You know: the dominant font formats used by professionals.

GDI-based apps are in the clear, but Cleartype is definately a big no-no for Type 1 and OpenType/CFF. And no Opentype features, you'll need to do that by yourself.

WPF is has more fancy rendering and actual Opentype support. But no Type 1. I mean, seriously?

GDI+/.NET apps (Visio anyone?) are left in the cold completely: no Type 1 or OpenType support at all. Buggy. And horrific letterspacing, cramming letters together when your line becomes longer than five words until they even start to overlap. And no typography support at all (kerning, letterspacing, ligatures, complex scripts, you know: the basics). Oh, did I mention that it's buggy?

With all this crappy font support, why even try?
-----
COMMENT:
AUTHOR: Ed
EMAIL: foo@bar.com
IP: 216.198.86.18
URL: http://google.com
DATE: 05/10/2006 02:39:42 PM
"User experiences suffer from this bland uniformity."

No. Wrong, wrong, wrong. Users don't complain about "bland uniformity", not at all, not ever. Never. Am I clear? They. Don't. Care. 

They want to make the program do what they want it to. That is what they want. They want to accomplish the task at hand as painlessly as possible. 

User experiences suffer from unreadable text. Normal users don't care if the UI is "bland" (have you taken a look at Mac sales figures lately?). The novelty of "exciting" UIs wears off in two minutes and then they have to USE it. 

Text is readable if it is in a dark color on a light background, with adequate contrast between the two and very little saturation in either. The font must also be LARGE ENOUGH TO READ, hear me? And the font shouldn't be overly busy or decorative, and the letter-spacing should be sufficient. As long as sans-serif fonts have existed (a couple of centuries IIRC), they been understood to be unsuitable for "body text" (old-school typographers have been usability-oriented since the 15th century). At screen resolution serif fonts aren't so fantastic either, to be fair, but they're still better than sans-serif

None of this is news. Nor is it controversial. 

But it's news to this knucklehead with a blog here. Lectures on "UI design craft" from somebody who can't even design a readable web page. Hey, why not get one of those animated rotating-pencil gifs? And some of those rainbow-hbars? Maybe a twinkling-star background gif, how's that sound?

Graphic designers should stay away from UI design. With very few exceptions, they're incredibly bad at it. They don't GET it, and damned few of them ever will: A UI is not art. It's a tool. It is not an end in itself. It is a means to some *other* end. I repeat: IT'S NOT ART. IT'S A TOOL. Usability is indispensible. A strikingly original, gorgeously slick-looking design that can't be used has exactly zero value. A "bland" interface that helps you get things done is worth a lot. 

In fact, that strikingly original, gorgeously slick-looking design is aggressively subtracting value, becausue it is distracting. All those positive-sounding adjectives mean it calls attention to itself -- when you'd rather be dealing with whatever you're working on. It's all about itself, not about getting YOUR work done. It is designed with a purpose that is, in practice, at best indifferent to the user and more often actively hostile. No, thanks.

What user ever sat there gazing adoringly at a GUI? Nobody. It'll never happen. You're not Modiglifuckingani here.

So take your snazzy fonts and go to hell. First, computers empowered ordinary users to create their own documents: The result is howling nightmare of ransom-note typography and general loathsomeness. And *&^#(*#^^ POWERPOINT for God's sake. Now you want to inflict the same garbage on us in UIs? GO AWAY. JUST GO AWAY. LEAVE US IN PEACE. WE HAVE WORK TO DO.
-----
COMMENT:
AUTHOR: Scott
EMAIL: tringali@yahoo.com
IP: 71.124.136.23
URL: http://www.tringali.org
DATE: 05/10/2006 03:59:56 PM
I have to agree with Ed.  I always disable "allow web pages to change fonts" because there are too many designers who think that 4pt Comic Sans is a great body text font.  Then you go to a different website where they think 26 point Zapf Chancery is the right thing.

I'm happy to never, ever, EVER have anyone choose a font for me and use a boring, readable font until the day I die.

Exceptions?  1. Games;  2. Headlines.  Fine; use PNGs there.

-----
COMMENT:
AUTHOR: James Schend
EMAIL: junk@mail.com
IP: 67.134.32.67
URL: 
DATE: 05/11/2006 12:36:17 PM
Mac OS Classic (1.0-9.2.2) had a way to embed fonts in an application without allowing any other applications to use them using the resource fork.  Unfortunately, I'm pretty sure this is no longer supported in OS X.
-----
COMMENT:
AUTHOR: Mat Hall
EMAIL: elbiggus@gmail.com
IP: 195.173.213.114
URL: http://www.dashslot.co.uk
DATE: 05/12/2006 04:36:44 AM
I'm also with Ed on this -- fancy fonts and stuff in a UI is only a hair's breadth away from skinned apps: confusing, distracting, could cause problems for the visually impaired, may not work well with the user's screen settings (DPI, "large fonts", high-contrast mode, mono displays, etc.), and so forth.  I shall sum up with my favourite quote:

"Whenever a programmer thinks 'Oooh, skins, what a cool idea!' his speakers should a cock-shaped soundwave and plunge it repeatedly into his skull."
-----
COMMENT:
AUTHOR: Lars
EMAIL: glonq@hotmail.com
IP: 24.86.64.247
URL: 
DATE: 05/12/2006 02:27:08 PM
Add one more supporter to hostile-yet-insightful Ed.  I want to run apps that more or less respect my system's font/color/skinning preferences.  I don't want developers foisting their bizarre style whims on me.

Being able to set per-application settings might be neat, though (for power users and weirdos).
-----
COMMENT:
AUTHOR: Brian
EMAIL: brianlsmith@gmail.com
IP: 129.255.40.227
URL: 
DATE: 05/12/2006 10:39:38 PM
I am inclined to agree with Ed and the others, but I am going to try to stay open-minded. You argue that better typography via custom fonts will improve applications. But, you don't give any evidence of this. Could you please cite an example of an application that improves users' experience by using non-standard typograph?
-----
COMMENT:
AUTHOR: Mike Hearn
EMAIL: mike@plan99.net
IP: 129.234.217.118
URL: 
DATE: 05/14/2006 03:36:51 AM
The GTK+ toolkit (dominant on Linux but runs on Windows too) allows you to do rich formatting and containment based layout (which you need for any serious work using formatted text) - your example of making words bold can be done by using a subset of html markup. More complex formatting can be done using the Pango text layout API.
-----
COMMENT:
AUTHOR: davidicus
EMAIL: blog@davidicus.com
IP: 69.224.164.215
URL: http://www.davidicus.com/blog
DATE: 05/15/2006 09:53:37 PM
try this on for size: video games. the industry is growing at twice the rate of film, computer hardware, even the U.S. economy, yet i get to work with font strips. type all the characters you want to use (without going over memory budget) in a line about 16 pixels high, and export it. then software slices it into characters the game engine can butt up against one another. no kerning, no styles, you should see what T and A look like together. you can scale it, color it, and define a rectangle it can fill. true, i have a little more control. i can put almost-transparent pixels in by hand to add letterspace.

everything shouts to be heard above the music, sound effects, dozens of UI elements and the gratuitous onscreen action, so the word elegant is used when type is the textual equivalent of a Marshall stack on 9. (the elegant bits will be removed or reamplified before the game ships.)

i try to avoid 4pt Comic Sans but you might be surprised how many people in charge like "character." 

4pt Comic huh? makes me wonder what kind of sites you frequent, Scott! :-P
-----
COMMENT:
AUTHOR: davidicus
EMAIL: blog@davidicus.com
IP: 69.224.164.215
URL: http://www.davidicus.com/blog
DATE: 05/15/2006 10:16:16 PM
try this on for size: video games. the industry is growing at twice the rate of film, computer hardware, even the U.S. economy, yet i get to work with font strips. type all the characters you want to use (without going over memory budget) in a line about 16 pixels high, and export it. then software slices it into characters the game engine can butt up against one another. no kerning, no styles, you should see what T and A look like together. you can scale it, color it, and define a rectangle it can fill. true, i have a little more control. i can put almost-transparent pixels in by hand to add letterspace.

everything shouts to be heard above the music, sound effects, dozens of UI elements and the gratuitous onscreen action, so the word elegant is used when type is the textual equivalent of a Marshall stack on 9. (the elegant bits will be removed or reamplified before the game ships.)

i try to avoid 4pt Comic Sans but you might be surprised how many people in charge like "character." 

4pt Comic huh? makes me wonder what kind of sites you frequent, Scott! :-P
-----
COMMENT:
AUTHOR: Sean Gerety
EMAIL: sean.gerety@gmail.com
IP: 65.194.244.137
URL: http://dotnetjunkies.com/weblog/metablog/
DATE: 05/18/2006 07:55:34 AM
Yes I agree with you about the blank stare.  I tried to get a company to use Gill Sans for a data dense report, and the hoops that Adobe had you jumping through to get it and trying to explain why you would need another font for an application can drive you crazy.  I'm digging WPF app's because you can imbed your fonts with the app.  
Check out Fil Fortes blog for great font related info in WPF.

Sean
-----
PING:
TITLE: Channel9: Behind The Code
URL: http://cs.askcts.com/blogs/rmukkai/archive/2006/05/17/558.aspx
IP: 209.60.26.2
BLOG NAME: Code Monkey
DATE: 05/17/2006 06:35:42 PM
The Channel9 site runs a show called, "Behind The Code" where they interview the uber geeks at Microsoft....
-----
PING:
TITLE: The fundamental problem with UI
URL: http://community.devexpress.com/blogs/ctodx/archive/2006/05/11/99.aspx
IP: 206.51.229.102
BLOG NAME: ctodx
DATE: 05/11/2006 03:24:54 PM
When we write a document that's going to be printed we have a plethora of design choices, the most important...
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Blogging through the product cycle
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: blogging_throug

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2006/05/blogging_throug.html 
DATE: 05/09/2006 09:29:00 PM
-----
BODY:
<p>One of the realities of startup life is that there's not much time left for side pursuits like blogging. Every project ebbs and flows between periods that are busy and periods that are completely, insanely busy. The last two months have qualified as insanely busy, forcing an unplanned hiatus from blogging here on flow|state.</p>
<p>Many thanks to those of you who shared their support and quietly expressed interest in when the next post was coming. As my company's first product trundles along towards its initial launch, there will be more insanely busy periods, but I'm hoping to find a posting schedule that lets me keep contributing even through those periods.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Dustin Long
EMAIL: dlong@stevens.edu
IP: 68.193.238.62
URL: 
DATE: 05/10/2006 01:29:35 AM
Oh, good to know! I thought it was just plain old blog neglect. Am patiently waiting for new posts to arrive.
-----
COMMENT:
AUTHOR: Chaz
EMAIL: chazkim@hotmail.com
IP: 222.153.77.131
URL: 
DATE: 05/12/2006 11:49:43 PM
I echo Dustin here. I'd missed your insightful and informed blog entries. Looking forward to the "new product" as well.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Windows Live image search makes strides beyond Google
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: windows_live_im

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2006/03/windows_live_im.html 
DATE: 03/12/2006 07:42:00 PM
-----
BODY:
 <p>It's a relief to finally see Ajax-based search pages moving beyond the limitations of vanilla HTML pages. A good example is the recent update to Windows Live <a href="http://www.live.com/#q=cherry%20blossoms&amp;scope=images&amp;page=results">Image Search</a>, which allows you to browse an entire set of search results in a single scrolling region.</p>
<p><a href="http://miksovsky.blogs.com/photos/uncategorized/windows_live_image_search.Png"><img width="400" height="300" border="0" alt="Windows_live_image_search" title="Windows_live_image_search" src="https://miksovsky.blogs.com/flowstate/images/windows_live_image_search.Png" /></a>


</p>
<p>I use Google's <a href="http://images.google.com/images?q=cherry+blossoms&amp;btnG=Search+Images">image search</a> a lot. The most time-consuming part of posting to this blog is often getting a decent screenshot, and while a <a href="http://miksovsky.blogs.com/flowstate/2005/12/elegant_cropper.html">good screen capture tool</a> is invaluable, it's often faster to google for a screenshot. For certain types of UIs, such as cell phone UIs, this is sometimes the only reasonable way to get a good screenshot at all.</p>
<p>Google's image search tool is good but doesn't seem to have changed significantly in a year or so, whereas Microsoft's image search tool makes a number of important advances. Live's single scrolling region is much faster to navigate than Google's multiple pages, especially since Google insists on putting the Next button only at the bottom of the page (where it often ends up below the fold). Live also lets you scale the size of the thumbnails so you can either quickly scan lots of images or linger over more detail. Live makes good use of large ToolTip pop-ups that give you a decent preview of the image before you navigate. Finally, after you click a thumbnail, Live provides a filmstrip view of your search context down the left side of the page, allowing you to continue navigating without having to return to the main results page.</p>
<p>It must said that even though Live's virtualized image list box is faster in practice to navigate than browsing multiple pages, the scroll bar feels just slow enough to make the overall user experience seem unresponsive. Hopefully they haven't hit the upper bound of what's possible in Ajax yet, and we'll see some improvement in performance in Live—and in Google as they play catch-up.<br /> </p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Factory
EMAIL: t@t.com
IP: 58.104.72.190
URL: 
DATE: 03/12/2006 08:03:38 PM
Hmm the image search is quite nice, although I have to say the other services are not quite so nice.
  The web search in particular has a quite non-standard scrollbar, and issues with mousewheel scrolling, at least on Firefox. Google methinks still has some breathing time to get their house in order.
-----
COMMENT:
AUTHOR: Chris
EMAIL: cvandyk@canoemail.com
IP: 205.250.200.233
URL: 
DATE: 03/12/2006 10:17:19 PM
Normally, the height of the scrolling button gives some indication as to the length of the list: a nice visual cue.  With this page however, the scrolling button is always the same height regardless of how many images there are.

Our company has toyed with doing a similar ajaxy type of loading of a list of items but since we couldn't get around the scrollbar height problem, we nixed it.  What do you think?  Is the loss of this mnemonic a big deal?
-----
COMMENT:
AUTHOR: David
EMAIL: david@dragonnet.com.au
IP: 220.238.30.16
URL: 
DATE: 03/13/2006 12:14:35 AM
It seems to me the only reason for the non-standard scrollbar is MS's Live.com team insisting on reinventing the UI rule at every step: why use the browser's standard scrollbar control when you could invent your own graphical version, which doesn't work quite as well, using Javascript?

If the server-returned search results were simply placed in a div with overflow:scroll, there would be no problems with mouse wheels or anything else that standard scrollbars have no problems with.

It's always disappointing when any company (but especially one that actually builds the OS with the widgets developers and users are supposed to be familiar with) feels that it's time to re-invent certain UI widgets just because the standard ones have become too boring. It's even more disappointing when they fail to replicate all of the functionality of the standard widget!
-----
COMMENT:
AUTHOR: Dylan Bennett
EMAIL: me@mboffin.com
IP: 209.190.16.90
URL: http://mboffin.com
DATE: 03/13/2006 01:46:36 AM
I don't know about anyone else, but the image search results page is ungodly slow at rendering for me. The whole experience feels like I'm moving through putty. Mind you, this is on a P4 3Ghz with 1GB RAM and a GeForce FX video card with 128MB.

Oh, and not to mention that middle-click anchored scrolling totally doesn't work with this ajax interface.

Oh, and no immediately visible meta data at /all/ about the images found? You have to mouseover the image to get see any meta data, even the name of the image?

Big thumbs down on this one. Ugly as Google's image search pages are, I think they're still ahead on this front.
-----
COMMENT:
AUTHOR: Mat Hall
EMAIL: elbiggus@gmail.com
IP: 195.173.213.114
URL: http://www.dashslot.co.uk
DATE: 03/13/2006 03:25:08 AM
The image search seems to be US-only -- when I follow that link I only get web results, and there's no "Images" button anywhere.  I also don't like the way that on following that link Live first displays its front page and then switches to the search results -- it just wastes time and looks daft...
-----
COMMENT:
AUTHOR: Andrew
EMAIL: andy@shoptivate.com
IP: 69.10.104.169
URL: http://shoptivate.com
DATE: 03/14/2006 04:44:56 PM
I've been implementing an AJAX virtual list box at http://finditfast.scrapbook.com so this is an interesting discussion for me.

The only reason I can't use the built-in scrollbar is because I don't want the user to be able to scroll down past the results that have been downloaded so far.  (This was a conscious UI decision, I thought it would be less confusing.)  It looks like this site uses a virtual one for the same reason.

It seems like I've made mine faster than this one, but I'm obviously partial.  And it's a different application so there may be different issues involved.  If anyone wants to try it and give me feedback on the UI issues, I would be most grateful.
-----
COMMENT:
AUTHOR: qqq
EMAIL: www@eee.rt
IP: 80.56.13.127
URL: 
DATE: 03/17/2006 04:16:40 PM
I wonder why they need a scrollbar in AJAx when there is a perfectly good scrollbar in any browser. Engineers with too much time.
-----
COMMENT:
AUTHOR: nstlgc
EMAIL: flowstate@nostalg1c.org
IP: 212.71.18.138
URL: 
DATE: 03/30/2006 04:38:55 AM
Does nobody here realise they need the "special" scrollbar because with a standard toolbar they couldn't dynamically load the results that should come into view? It has nothing to do with "the old scrollbar is boring" or "engineers with too much time"...
-----
COMMENT:
AUTHOR: Capt. Dirk Dandruff, Astronaut
EMAIL: a@b.com
IP: 216.198.86.18
URL: 
DATE: 04/03/2006 06:23:25 AM
Andrew: Your scrollbar is much more responsive than MS's, but as you say, it's not necessarily a fair comparison. Yours looks better, too. 

Why can't it be proportional, if you know up front how many results there are? Your "button" will stretch vertically without any distortion, except for the top and bottom borders, which you could do with CSS or a separate image or whatever. 

But I'm also not clear on why you wouldn't use the standard scroll bar: You've got an onscroll event; when the user scrolls, you could (or so I imagine) just calculate what's now visible and start loading it, if it isn't loaded already. 

I don't want to sound like I'm arguing; these are real questions. I haven't done AJAX.

(But at least I know better than to put tiny gray text on a black background.)

-----
COMMENT:
AUTHOR: Capt. Dirk Dandruff, Astronaut
EMAIL: a@b.com
IP: 216.198.86.18
URL: 
DATE: 04/03/2006 06:35:31 AM
Hey, another good thing about Andrew's scroll bar: You can drag it faster than the contents can refresh. If you try to drag the Windows Live thing from the top to halfway down, it crawls through every image along the way. Andrew's just swoops right to where you want it and starts loading what's there (just as I was muttering about above). It's way betterer. 

Another problem with the Windows Live one is that in Mozilla, the image-zoom/link popups stop working if you right click anywhere on the page. Once you've right-clicked, you get an "element.focus is not a function" error in the JS console every time you mouse over anything -- unless a different top-level window has focus. While that's true, it still works. When you focus the WL window again, it goes back to failing. In that failure mode the small thumbnail links don't work either. 
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Scroll bar behavior on smartphone
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: scroll_bar_beha

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2006/03/scroll_bar_beha.html 
DATE: 03/05/2006 04:35:49 PM
-----
BODY:
<p>Windows Mobile 5.0</p>
<p>Scroll bar starts out a little below top<br />Scroll up for From<br />When composing, scroll up for Cc, scroll up further for Bcc</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Approachable UI package in Garmin Nuvi GPS
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: approachable_ui

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2006/02/approachable_ui.html 
DATE: 02/26/2006 10:59:00 PM
-----
BODY:
<p>The new <a href="http://www.garmin.com/products/nuvi/">Garmin Nuvi</a> GPS presents a well thought-out UI, cleanly knitting together three modes of interaction: display, touch, and audio.</p>
<p><img border="0" src="https://miksovsky.blogs.com/photos/uncategorized/garmin_nuvi.png" title="Garmin_nuvi" alt="Garmin_nuvi" />


</p>
<p>Garmin and other manufacturers have been making GPS units since the late 1980s, and during that time have continually made incremental improvements in size, form factor, performance, and UI. From time to time I've looked at the category, but beyond the flat-out magic of finding your way using satellites, I found little captivating about the products themselves. GPS units have suffered from a wide range of UI problems, such as the heavy use of jargon, awkward use of a few buttons to accomplish complex tasks (such as entering an address), and cumbersome systems for transferring maps to a device with limited memory.</p>
<p>Sometimes you encounter a product and get the strong feeling its the</p>
<p>
<p>The Garmin Nuvi is the first GPS I've seen that meets my bar for a good user experience. They've given a lot of thought to an overall package of
functionality a traveler might want in a single pocket device. In
addition to the GPS, the Nuvi unit includes an MP3 player, a photo
vault, a currency converter, a world clock, a foreign language
dictionary, and a travel guide. This is a good sign that Garmin's
considering the overall user experience of the device, not just trying
to make a housing for a satellite receiver.
</p>
<p>You can read thorough plenty of reviews of the Nuvi elsewhere, so I'll focus on the nice bits in the user experience:

</p>

<ul><li>Clear screen organization, with careful use of color, shape, contrast, and typography to define a hierarchy of screen elements. Consider that in the above image they've made the &quot;200&quot; in a significantly larger font than the &quot;m&quot; (meters) unit that follows it. Moreover, they've top-aligned the &quot;m&quot; unit to maintain the legibility of the much more important number. In this particular application, it's critical for the user to be able to glance down at the screen and get a sense of how far they have to go until they need to turn. That is, if they see three characters, they know they have hundreds (3 characters) of meters left to go, not thousands (4 characters). Displaying the units as &quot;200m&quot; in the same font and aligned along the text baseline would make it harder for the user to intuitively grasp this.</li>

<li>Responsive touch screen. Unlike some folks (like <a href="http://miksovsky.blogs.com/flowstate/2005/09/prius_lcd.html">Toyota</a>),
Garmin generally makes good use of buttons placed flush against the
corners to improve the chance you'll actually hit what you want. (The
map screen above is an exception.)</li>

<li>Generally solid implementation of a <a href="http://miksovsky.blogs.com/flowstate/2005/10/bbop_the_ubiqui.html">BBOP</a> (Back, Buttons, One Task, Page Based) UI. One small nit: they show a Back button on <em>almost</em> every page, but
not on all pages. In particular, if you click the Menu button in the
main driving map (shown above), you end up a menu page with no clear
way to get back to what you were looking at. It turns out you need to
pick one of the menu options: the one called &quot;View Map&quot;. I found this
counter-intuitive. In general, I think that if you're going to offer a
Back button on the screen, you need to offer this button on every
screen and in the same location.</li>

<li>Judicious use of &quot;transparent&quot; buttons on maps to add UI elements that take up a surprisingly small amount of actual screen pixels. The Zoom In/Out buttons shown above are roughly 46x46 pixels square and the border is two pixels thick. The borders only consume about 350 pixels, and for that price they get a pretty big transparent button. A transparent button like this consumes about the same number of pixels as a 19x19 solid button, which would be incredibly tiny on a touch screen.</li>

<li>Reasonably good voice prompts with text-to-speech. I was impressed with the Nuvi's ability to not only pronounce local street names, but to apply fairly natural phrasing and intonation to an entire instruction. I do think Nuvi and similar products could benefit by tightening up the phrases they're trying to read. No human passenger includes street type or direction markers when giving instructions to a driver, unless such information is currently salient. Instead of saying, &quot;Turn left of East Galer Street&quot; like the Nuvi does, people say, &quot;Turn left on Galer&quot;. People generally add more information like &quot;East&quot; only when that helps discriminate among the current roads the driver can turn down. It would be relatively trivial to add this refinement to a GPS voice UI.</li></ul>

<p>Overall, a nice information appliance.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Stuart Langridge
EMAIL: sil@kryogenix.org
IP: 62.254.221.66
URL: http://www.kryogenix.org/
DATE: 02/27/2006 01:09:30 AM
Just as a data point, the "turn left on Galer" approach would have to be a thing localised for the American market. In Britain, it'd be "turn left onto East Galer Street", as the device says; while this doesn't prevent it being a good idea for sale in America, it's not something you could just trivially apply to all versions of the software. I don't know whether satellite navigation systems are available in "localised" versions; obviously the maps themselves change, but if I, an Englishman, am using my satnav system to drive around America, I'd like the directions still offered in my style rather than the map's style.
It still shouldn't be all that difficult to do, though.

(incidentally, this text box for entering comments is really small!)
-----
COMMENT:
AUTHOR: Jarno Peschier
EMAIL: j.peschier@caesar.nl
IP: 10.31.21.13
URL: http://spaces.msn.com/members/peshir/
DATE: 02/28/2006 12:15:00 AM
Right Stuart, same in the Netherlands. Example: turning left onto the Scheldestraat should really remain "Sla links af, de Scheldestraat in" at all times because just saying "Schelde" would be silly at best. So that kind of "abbreviation" of the full directions would have to be something that is part of the localisation that is done when the user selects/loads another "voice". Map data should always contain as full a street name as possible, not including any localized abbreviations.
-----
COMMENT:
AUTHOR: Mike Hearn
EMAIL: mike@plan99.net
IP: 129.234.217.118
URL: 
DATE: 02/28/2006 05:40:10 AM
+1 to Stuart (hi by the way!) on it being more natural to hear localized directions.

Another thing - surely for a device designed to stop you getting lost it's better to optimize for explicitness over naturalness?
-----
COMMENT:
AUTHOR: Michael Zuschlag
EMAIL: zuschlag@fast-mail.org
IP: 68.163.229.3
URL: http://www.zuschlogin.com
DATE: 03/01/2006 02:06:13 PM
“…includes an MP3 player, a photo vault, a currency converter, a world clock, a foreign language dictionary, and a travel guide. This is a good sign that Garmin's considering the overall user experience of the device….”

Which is a what? General travel resource computer? I don’t know. Given limited display and controls, I think there’s something to be said for focusing a small device on a narrow constellation of related features. Otherwise, the additional features tend to either end up getting in the way of the main feature, or are so hard to get to or use, you don’t use them anyway. It reminds me of a song, which I’d send you, but I can’t remember if it’s on my PDA, MP3 player, cell phone, GPS, flash drive, laptop, desktop, or toaster.

-----
PING:
TITLE: The Mainstreaming of GPS
URL: http://www.codinghorror.com/blog/archives/001111.html
IP: 208.106.251.207
BLOG NAME: Coding Horror
DATE: 05/05/2008 02:09:44 AM
 The Garmin Nuvi GPS first got my attention when it came not just recommended, but insanely recommended by Jason Fried in late 2005. So, back to the 350… Oh wow. The Nuvi 350 is insanely good. Next to the...
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Okay, death *TO* the lame Recycle Bin confirmation dialog in Windows
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: okay_death_to_t

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2006/02/okay_death_to_t.html 
DATE: 02/26/2006 10:58:00 AM
-----
BODY:


<p>Thanks to those of you who pointed out that the first Windows delete confirmation dialog described in the previous post only appears when the user presses the Del key, but not if they use drag and drop. (I'd been trying to reproduce the dialog using drag and drop.)</p>
<p>Both Windows and the Mac offer multi-key keyboard shortcuts (Shift+Del and Command+Backspace, respectively) to delete a file without displaying a confirmation dialog. Since the Mac doesn't offer a single key shortcut for deleting a file, it has no need of a confirmation dialog. Personally, I find this to be an elegant answer, although it's inconceivable that Windows would take its Del shortcut away.</p>
<p>I still argue that the dialog in Windows should fade away. As a comment to the earlier post describes, the dialog would be an appropriate place to educate the user on how the Recycle Bin works, where to find it, and how to get things back out of it. Once the user has figured out how the Recycle Bin works, they should be able to easily get rid of the dialog with an option in the dialog itself (and not in a property dialog far away). Alternatively, Windows could simply track user actions and determine when the user no longer required this education.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Adam Herscher
EMAIL: adamjh@gmail.com
IP: 24.19.58.80
URL: http://adamjh.blogspot.com
DATE: 02/26/2006 11:24:39 PM
Tracking the user's actions and determining when the user no longer requires a dialog sounds nice at first, but has the side effect of providing an inconsistent user experience.

Even you yourself were confused about why you saw the dialog some of the time, and didn't see it some of the time.

Add to the equation that many users use multiple computers (home, work, friends', internet cafe's), and then you really begin to deviate from being able to provide a consistent experience around answering the common question posed in usability studies every day: "what do you expect would happen when you take this action?"

Anyhow, another solution is to provide a "Don't prompt me again" checkbox on the dialog.  This way, the user can deterministically predict the behavior of her own computer based on her previous decision, and she knows when using a different computer that supressing the dialog is a configurable option (similar to how user's aren't surprised when they submit a form in IE and don't get a dialog telling them it may be insecure - they know such warnings exist out of the box, but are often disabled).
-----
COMMENT:
AUTHOR: Pelle
EMAIL: perbergland@hotmail.com
IP: 213.115.250.156
URL: http://www.spatialace.com
DATE: 02/26/2006 11:43:16 PM
For me, Shift+Del permanently deletes a file *with* a confirmation dialog (*without* putting it in the trash).
Another strangeness is that if you disable the warning dialog and delete a file from a network drive with no trash support, the file is permanently deleted with no warning. D-uh!
-----
COMMENT:
AUTHOR: Gaurav
EMAIL: gaurav_sinha@yahoo.com
IP: 24.16.89.169
URL: 
DATE: 02/26/2006 11:47:01 PM
Right-click on recycle bin->Properties->Global. Uncheck 'Display delete confirmation dialog'.
-----
COMMENT:
AUTHOR: Dejan Jelovic
EMAIL: dejan@jelovic.com
IP: 212.200.197.84
URL: http://www.jelovic.com
DATE: 02/27/2006 03:15:24 AM
One thing is missing, though - an easy way to undo the delete.

Sifting through several gigs of trash is a fairly unpleasant experience. At the very least the Recycle Bin folder should by default order its contents by the time of deletion.

Dejan
-----
COMMENT:
AUTHOR: Mike Dunn
EMAIL: mike_dds@yahoo.com
IP: 71.107.61.39
URL: http://www.pimpfish.com
DATE: 02/27/2006 09:09:20 AM
>One thing is missing, though - an easy way to undo the delete.
 
Ctrl+Z will undo move/delete/rename operations in Explorer.
 
I think it's been shown that having the UI change over time is a Bad Idea. See: adaptive menus in 2K and Office.
A simple "don't show me this again" checkbox is way simpler to code and use.
-----
COMMENT:
AUTHOR: Scot B.
EMAIL: scot@scotboyd.net
IP: 198.145.103.10
URL: http://www.scotboyd.net/90percent
DATE: 02/27/2006 09:05:06 PM
The Recycle Bin does sort by date deleted, instead of date modified which is the normal Explorer behavior.

A confirmation dialog for a single-key destructive action seems a good idea to me, because it would be easy to hit the key in error.  A two-keystroke action does not need to be guarded as closely.
-----
COMMENT:
AUTHOR: Greg Raiz
EMAIL: graiz@raizlabs.com
IP: 66.92.66.251
URL: http://raizlabs.com/blog/
DATE: 05/12/2006 05:37:19 AM
You can't really teach people within a dialog box. You'll never know if they actually read the dialog or if they just clicked ok without reading. 

One way to do this is to continue to show the:
"Are you sure you want to delete" screen but at the bottom instead of Yes / No
you also add a checkbox that says. 
"[  ]Always delete the file into the recycle bin."
Most people wouldn't check the box unless they understood the behavior. 
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Death of the lame Recycle Bin confirmation dialog in Windows?
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: completely_lame

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2006/02/completely_lame.html 
DATE: 02/16/2006 10:01:00 PM
-----
BODY:
<p>Before leaving behind the previous topic of deletion patterns, let's briefly look at one of the weakest implementations of the Trash pattern anywhere: the Recycle Bin in Microsoft Windows. On the Mac, when you move something to the Trash, it moves to the Trash. In Windows, when you move something to the Trash, you get this:</p>
<p><img border="0" src="https://miksovsky.blogs.com/photos/uncategorized/windows_delete_confirmation_dialog.png" title="Windows_delete_confirmation_dialog" alt="Windows_delete_confirmation_dialog" /></p>
<p>When Microsoft appropriated the Trash pattern (from Apple and Xerox),
it was apparently helpless to resist the desire to protect the user with a confirmation
dialog—even though <em>the entire point of the Trash pattern is to avoid irritating the user with a confirmation dialog</em>. File this one under, &quot;Unclear on the concept&quot;.</p>





<p>For what it's worth, both Windows and the Mac display an additional confirmation dialog if you manually invoke the Empty Trash command. The Windows dialog says like, &quot;Are you sure you want to delete these <em>&lt;number&gt;</em> items?&quot; The Mac dialog says: &quot;Are you sure you want to remove the items in the Trash permanently? You cannot undo this action.&quot; It's a matter of opinion, but here I give a slight preference to the Windows version, since the Mac dialog is redundant; an action that's permanent is, by definition, an action that can't be undone. (You could also argue that, if you know how to use&nbsp; disk utilities, the delete operation isn't actually permanent. Either way, the dialog is wrong.)</p>
<p>The confirmation dialogs in the Windows means the lucky user has at least <em>three</em> chances to avoid accidental deletion! They can: 1) say No to the first confirmation dialog, 2) Undo the move to the Recycle Bin, or 3) say No to the second confirmation dialog. It's nice to know that, with all this protection, no Windows user anywhere has ever deleted something they didn't want to delete.</p>
<p>It's possible that Microsoft has silently made some progress on this issue. When I tried to reproduce the first delete confirmation dialog to take a screen shot of it, I was unable to get it to appear on any of five different Windows XP PCs. The &quot;Display delete confirmation dialog&quot; check box still exists in the Recycle Bin's Properties dialog, but as far as I can tell, this check box no longer has any effect. Perhaps the dialog was quietly dropped in a service pack update? I can find no confirmation of this on the net. If anyone has an authoritative account on whether this dialog has been dropped, let me know. It'd be nice to say good riddance to an unloved dialog.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Travis
EMAIL: travisfsblog@greeneclipsesoftware.com
IP: 24.16.88.189
URL: 
DATE: 02/16/2006 11:59:57 PM
It still shows up if you select a file and press the Delete key.
-----
COMMENT:
AUTHOR: Simon
EMAIL: ss@untidy.net
IP: 62.173.70.58
URL: http://untidy.net/blog/
DATE: 02/17/2006 12:48:55 AM
Still happens for me with files and folders - not sure what's wrong with your XP installs!
-----
COMMENT:
AUTHOR: Steve
EMAIL: smh@delcam.com
IP: 194.193.183.253
URL: 
DATE: 02/17/2006 01:18:10 AM
I get the confirmation too on XP.
Maybe you're missing the point of the warning? I find it useful as a reminder that I've pressed Del not Shift+Del. Rather than preventing accidental loss, it's warning about impermanent deletion (disk utilities aside).
-----
COMMENT:
AUTHOR: Guido
EMAIL: guidod@gmail.com
IP: 24.232.238.25
URL: 
DATE: 02/17/2006 03:21:54 AM
I don't get the confirmation, but that's because I unchecked it in the Recycle Bin options. 

The confirmation makes sense for most users, by the way.
-----
COMMENT:
AUTHOR: Brian
EMAIL: me@privacy.net
IP: 67.180.156.160
URL: http://www.google.com
DATE: 02/17/2006 04:46:40 AM
At least windows lets you disable this.  Since the first days of Windows 95 I have disabled the Recycle bin entirely and turned off the delete warning.  When I press DEL or click on the red X, the file is permanently deleted with no warning whatsoever, and I like it that way.

-----
COMMENT:
AUTHOR: mxcl
EMAIL: max@evidencetalks.com
IP: 81.139.204.37
URL: 
DATE: 02/17/2006 06:19:36 AM
"The confirmation makes sense for most users by the way"

Yeah, my arse. What should happen is a dialog appears saying "Did you know when you delete things they go in the recycle bin?" and then a link to open the bin and a checkbox that is checked by default that says "Don't tell me this again"

Even better would be if Windows animated the icon for the file showing it fly from where it is and into the bin. That's something they could do for Vista but they probably didn't think of it.

And yes, obviously the animations could be turned off for those who can't stand them, but the point is the visual metaphor would be very helpful for "most users".
-----
COMMENT:
AUTHOR: Greg
EMAIL: graiz@raizlabs.com
IP: 66.92.66.251
URL: http://raizlabs.com/blog/
DATE: 02/17/2006 07:18:57 AM
The recycle bin won't warn you if you drag and drop items into the recycle-bin. The warning only happens if you select a file and press delete or use the menu operation. If you drag-drop it assumes you understand the metaphor.

Without this dialog files would disappear every time the cat walks across the keyboard. 

Could you get rid of the confirmation? Sure. (There's even an option for this)

The extra confirmation is a good safety net for beginners. 

Note: That most beginners will never empty the recycle bin, this happens automatically so most users will never see the extra 'Are you sure you want to empty the recycle bin' dialog.

Yes the dialog is still there even in SP2. You can turn it off if you hate it, but the reason it's there is because it helps more people then it hurts. 
-----
COMMENT:
AUTHOR: Michael Zuschlag
EMAIL: zuschlag@fast-mail.org
IP: 68.163.144.4
URL: http://www.zuschlogin.com
DATE: 02/17/2006 08:05:35 AM
I'm very interested in hearing stories of where  a user working without the benefit of a confirmation message deleted something accidentally and didn't know how to get it back. I'm also interested in stories where the user managed to delete something they didn't want to delete when there *was* a confirmation message because s/he clicked "Yes" anyway.
-----
COMMENT:
AUTHOR: Oleg Zhylin
EMAIL: ovz@yahoo.com
IP: 80.249.228.83
URL: 
DATE: 02/19/2006 10:44:03 AM
It's quite easy to manage to delete something even if there's a ton of confirmation dialogs before deletion. If you interact with computer often, you just get used to click Oks and Yeses subconciously.

Thus I agree with Jan that extra message boxes should be avoided when possible. A cat can accidentally send file to recycle bin, but the probability it will press Shift+Del and then Enter (or click OK) is low enough.
-----
COMMENT:
AUTHOR: Kevin Dente
EMAIL: kevind@denteworld.com
IP: 63.206.72.126
URL: http://weblogs.asp.net/kdente
DATE: 03/17/2006 05:49:39 PM
>even though the entire point 
>of the Trash pattern is to 
>avoid irritating the user 
>with a confirmation dialog

Hmm - is that really true? Isn't the entire point of the trash pattern to allow the user to undo a deletion? The presence or absence of the confirmation dialog seems somewhat orthogonal to that.

Given that the dialog is only displayed when the Del key is hit, and not when something is dragged to the Recycle Bin, the dialog seems more intended to protect people who accidentally hit the delete key.  Which seems more likely than accidentally dragging something across the screen and into the recycle bin - hence no dialog in that case.

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Good UI is not a state of equilibrium
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: good_ui_is_not_

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2006/02/good_ui_is_not_.html 
DATE: 02/16/2006 06:33:49 PM
-----
BODY:
<p>After you've pushed your team through the hard work of making a tough UI decision, at least you can rest knowing that you've helped your product take a small step forward towards perfection. That is, of course, until you turn your attention to other things, and your product slides back a step or two.</p>
<p></p>
<p>When I took over responsibility for the design of Microsoft Money, a Windows personal finance product, the team had recently released Money 3.0. This product was an MDI (Multiple Document Interface) application with all the cool UI gadgetry of the day, including a gray 3-D toolbar with inscrutable icons.</p>
<p>One of the Money 3.0 windows was titled, &quot;Future Transactions&quot;. It was my impression that few users ever figured out what this window was for. As it turns out, this window was used to keep track of regular transactions you hadn't entered yet, but were going to. In another word: bills.</p>
<p>Now, it probably would have been more useful to call this window something like, oh, &quot;Bills&quot;. However, the window could also be used to track future <em>deposits</em>, like paychecks. Cases like this often come up where a single UI element is used 95% of the time for one thing, and 5% of the time for something else. In such cases, the inclination of your average engineering team is to be accurate, and insist on a term that covers all the cases. This usually forces a writer to use general terminology that is accurate—and also confusing.</p>
<p>In Money 95, we decided to rename this Future Transactions window to something friendlier. We had changed the window to a web-style page, and had added a calendar, so we chose to name the entire page the &quot;Payment Calendar&quot;. We thought we were being clever, since a &quot;payment&quot; could refer to either a bill you paid someone, or a check someone paid you.</p>
<p>Clever, but still confusing. No one got it. By Money 98, we had renamed this page to, &quot;Bills &amp; Deposits&quot;. For the first time, the name of the page was actually clear. It still put too much emphasis on the deposits side of things. It was also unclear exactly what the page was for. Bills and deposits, sure, but what <em>about </em>bills and deposits? A friend of mine actually called me at one point up to ask what the page was for, and I said, &quot;That's where you to pay your bills.&quot; The friend said, &quot;Ah, okay, I see.&quot;</p>
<p>This led me to wonder: why did that person have to ask the product designer what a page in the product was for? They hadn't need a long explanation. Why couldn't the page itself present that explanation?</p>
<p>In Money 2000, we revised most of our page titles to explicitly indicate the task behind each page. This particular page was given the new title: &quot;Click the bill you'd like to pay&quot;. This title was, to say the least, much more successful in getting across the point of the page.</p>
<p>Bills Summary</p>
<p>??? from Money 2006</p>
<p>All design decisions involve compromises among an enormous set of
ever-shifting forces, and there's simply no way to make a design
decision stick for eternity.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Some basic UI patterns for preventing accidental deletion
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: some_basic_ui_p

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2006/02/some_basic_ui_p.html 
DATE: 02/12/2006 09:55:00 PM
-----
BODY:
<p>Many client applications and web sites let the user enter and manipulate data, and these manipulations often include the ability to delete data. Designers of UIs that include deletion of data generally feel the need to protect the user from unintentionally destroying data. For such a UI, it's important to consider the context surrounding the Delete command (or whatever action triggers deletion) before settling on a solution.</p>



<p>It's worth asking: exactly what is the concern with the user clicking a Delete button? I've often heard people express fear that the user's mouse might slip and click a Delete button, or that the user might not be paying much attention to what they are doing and might stab at the Delete button without understanding what it will do. I suspect that, in many cases, designers now habitually second guess the user's intention behind a deletion without considering alternatives.</p>
<p><img border="0" src="https://miksovsky.blogs.com/photos/uncategorized/mac_trash.png" title="Mac_trash" alt="Mac_trash" />


</p>
<p>Designers actually have more choices at their disposal than a delete confirmation dialog. Here's a quick survey of some UI patterns for a Delete command, in rough order of what I perceive to be the most frequently encountered to least frequently encountered:

</p>



<ol><li>Delete with Confirmation Dialog. The user selects a Delete command (or press the Del key, etc.) and the application displays an &quot;Are you sure?&quot; dialog; the application only deletes the data if the user responds affirmatively. Such dialogs are ubiquitous. The goal is to provide the user with a second chance to consider their action. In my experience, such dialogs provide slender protection—users can blow past the confirmation dialog before their brain has even registered what it is asking them.<br /> </li>

<li>Delete Immediately. The user selects Delete, and the application deletes the data immediately. This is generally used if the amount of accidental loss is very small, or if it's quite easy to reconstruct any accidentally deleted data. A good example here is the Delete button next to items in today's typical web shopping cart. In my opinion, this plain &quot;Delete Immediately&quot; pattern is woefully underused. As shopping carts show, it's perfectly fine to blow away data immediately if the user can just quickly add back something they didn't mean to delete. (This is probably another case where the difficulty of producing a dialog in vanilla HTML inadvertently leads to a better UI.)</li>

<li>Delete + Undo (single or multi-level). The application deletes the data immediately, but allows the user to undo the deletion by selecting separate Undo command. The application may allow the user to Undo only the most recent operation, or any arbitrarily long history of operations. The classic example here is a text editor. Most decent file system browsers support an Undo stack as well. This model is actually quite nice: it provides the benefits of Delete Immediately, and moves the complexity of restoring data to those users actually facing the need to get their data back. Even a single level of Undo can be helpful, as described in this <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=97581">post about Gmail's Undo Deletion command</a>.</li>

<li>Trash (with manual or automatic cleanup). The application moves deleted data to a temporary Trash bin (or Recycle Bin, if you're afraid of being sued by Apple). The user can recover deleted data from the Trash. The data is permanently deleted at some later point in time: when a time interval elapses, when some space threshold is exceeded, or when the user manually empties the Trash. The classic example here is the Mac Trash can, but most email clients follow this model as well. Perhaps because of these strong precedents, the Trash pattern is used almost exclusively in icon-based object-oriented UIs, and rarely anywhere else.</li>

<li>Mark for Deletion. The user invokes Delete, and the selected data is marked in some way (e.g., grayed out, or with <del>strikethrough</del>) to indicate that the data is still there, but will no longer be treated as active (included in calculations, etc.). As with the Trash pattern, the data is permanently deleted at a later point. Example: IMAP email clients such as Mozilla Thunderbird. I consider this to be another under-utilized pattern.<br /> </li>

<li>Delete with Context-Sensitive Confirmation Dialog. The user selects Delete, and the application determines from the data to be deleted or other contextual information whether the user is likely to be unaware of consequences of the operation. In other words, the delete confirmation dialog <em>only comes up with when it's important</em>. A tepid example of this pattern comes up in text editors that only give you a &quot;Save changes?&quot; dialog if you're trying to close a non-empty document, but that close an empty document silently. This is another pattern that could benefit from much wider use. The basic idea is that, if the dialog only came up in the 10% of the time the user was really about to shoot themselves in the foot, the user would have a higher chance of stopping to read what it said. &quot;Are you sure you want to delete this file you've been working on for <strong>the last eight hours</strong>?&quot;</li></ol>

<p>Any time an &quot;Are you sure?&quot; dialog is about to be added to a UI should force you to at least briefly consider whether an alternative pattern might better suit the context.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Dick Boogaers
EMAIL: d.boogaers@css-solutions.nl
IP: 212.29.191.5
URL: http://www.css-solutions.nl
DATE: 02/13/2006 02:35:11 AM
Here's another one:
If the deletion will result in some other user interaction, defer it until all chances the user has to cancel further actions have passed.

Case in point: if a user deletes a reservation in a reservation system and this has financial consequences (some money has to be paid back) simply go on with that, but provide cancel buttons along the way, to cancel the whole string of actions that took place since and including the delete action.
-----
COMMENT:
AUTHOR: Michael Zuschlag
EMAIL: zuschlag@fast-mail.org
IP: 68.163.182.228
URL: http://www.zuschlogin.com
DATE: 02/13/2006 04:58:01 PM
Right on! I think knee-jerk use of confirmation message boxes is one the design habits contributing to epidemic message-box-blindness (for example, see http://napps.networkworld.com/compendium/archive/003362.html). IMHO, a message box should appear only for exceptional circumstances (e.g., your Pattern #6). One should never design a message box to appear *every time* the user clicks a particular menu item or button. That said, there *is* a need for a GUI equivalent of a guarded switch to prevent slips of the mouse (or accelerator key) from activating an undoable command. A message box just isn’t the way to do it.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Crack in the Memory Stick facade
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: crack_in_the_me

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2006/01/crack_in_the_me.html 
DATE: 01/23/2006 10:11:53 PM
-----
BODY:
<p>Earlier this month I attended the massive CES 2006 show in Las Vegas. When you meet someone during or after the show, the stock question you get is: &quot;What was the coolest thing you've seen at the show?&quot; My answer: the new <a href="http://products.sel.sony.com/pa/PRS/reader_features.html">Sony Reader</a>.</p>
<p>What was impressive about this device was not the electronic ink technology, nor the range of improvements this version 2.0 device shows over its predecessor. No, the most amazing this about this device is that <em>this is a Sony device that accepts SD media cards</em>.</p>
<p>In early 1988 I had the chance in Japan to see a Sony representative demonstrate the Mavica, their first production digital camera. For the past 18 years I've watched Sony's relentless efforts to foist this memory format on a rather uninterested public. In all those years I have experienced exactly one occasion where I found myself needing to transfer files between two devices that turned out to both be Sony devices and where I was hence able to use a Memory Stick to directly transfer the files.</p>
<p>It's gratifying to see Sony finally concede the inevitable and recognize the standard media formats that consumers actually want to use.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Damien B
EMAIL: kame@cinemasie.com
IP: 127.0.0.1
URL: http://www.jroller.com/page/kame/
DATE: 01/24/2006 05:05:28 AM
It's not that new. For years we have had some devices accepting MS and CF. And don't forget one of the leading markets for Sony, Japan, where the trend is on MS-Duo and mini-SD. So, right now, it's not obvious that people want to use SD all over the world.
-----
COMMENT:
AUTHOR: bob
EMAIL: bob@lamecode.com
IP: 66.208.27.13
URL: http://www.lamecode.com
DATE: 01/24/2006 01:28:03 PM
The issues for me:
* Way too expensive when compared to the alternatives.

* Did Sony license the readers early on? Either they didn't, or no one stuck a reader into their devices other than Sony.

* Memory Stick, Memory Stick Duo, Memory Stick Pro, Memory Stick Pro Duo? How many do we have, and apparently, some aren't backwards compatible with others?

* Lately- wouldn't it be nicer if my TV just had a wireless connection and a small amt of built-in memory so that I could put pictures, etc, to it? Or wifi and it could read things off my share?
-----
COMMENT:
AUTHOR: Damien B
EMAIL: kame@cinemasie.com
IP: 218.81.115.7
URL: http://www.jroller.com/page/kame/
DATE: 01/24/2006 06:43:30 PM
Bob, everything was licensed. They tried to put a non-Sony organization behind the Memory Stick, but it was a failure. But if you look the devices today like photo-printers and PCs, all of them that have an integrated flash-memory reader are able to read the 3 major formats (CF, SD/MMC, MS). Right now the most painful format is xD, not MS.
-----
COMMENT:
AUTHOR: Lyn Coffin
EMAIL: Lyn_Coffin@msn.com
IP: 213.246.94.58
URL: 
DATE: 06/29/2006 04:29:59 AM
Hi Please write an email when you can Also why do I have to sign in to yahoo to contact cosi It used to be much easier with kasayka I enjoy your blog
-----
PING:
TITLE: Geek Notes 2006-01-27
URL: http://www.peterprovost.org/archive/2006/01/27/11128.aspx
IP: 209.132.213.81
BLOG NAME: Geek Noise
DATE: 01/27/2006 09:47:34 PM

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Streamline dialog tasks with careful setting of the default button
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: speed_tasks_wit

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2006/01/speed_tasks_wit.html 
DATE: 01/11/2006 09:00:00 PM
-----
BODY:
<p>Most UI platforms allow a designer to indicate which button in a dialog should be the <em>default button</em>: the button that will be pressed if the user types the Enter key. The default button is generally the button the user is most likely to press next, often a button like OK that closes the dialog. In very high-traffic dialogs, you may want to consider dynamically changing the default button to save keystrokes and help speed the user's task.<br /> </p>
<p>The best example I can think of is the &quot;Select Names&quot; dialog in Microsoft Outlook for picking recipients for an email message. When the dialog opens, the focus starts out the &quot;Type Name&quot; field, and the default button is the &quot;To -&gt;&quot; button: </p>
<p><img width="394" border="0" alt="Outlook_address_book_2" title="Outlook_address_book_2" src="https://miksovsky.blogs.com/photos/uncategorized/outlook_address_book_2.png" /></p>
<p>The user can start typing a name immediately, and when they've finished typing the name (or have selected a name in the list), they can press Enter to do the most likely thing: add the name to the message's To line.</p>
<p>Here's where things get interesting. Watch what happens after the user presses Enter:</p>
<p><img width="394" border="0" src="https://miksovsky.blogs.com/photos/uncategorized/outlook_address_book_3.png" title="Outlook_address_book_3" alt="Outlook_address_book_3" />


</p>
<p></p>
<p>The OK button is now the default button! Having added someone to the To line, the user's most likely next action has changed: they're now most likely to want to click the OK button and close the dialog. So, the OK button becomes the default button. (Leaving the To button as the default would be a bit of a waste here, because there's essentially no chance that the user wants to add the same recipient to the message twice.)</p>
<p>The keyboard focus stays in the &quot;Type Name&quot; field. (The previous name is left selected in case the user wants to edit it, but typing will replace the selection.) The user can type any key but Enter (or Escape, etc.) to start entering a new name, in which case the &quot;To -&gt;&quot; button becomes the default button again. That is, the user is returned to the state shown in the first image.</p>
<p>The overall result is that a user can open the dialog, type a name, then press Enter twice to add the name and close the dialog. This behavior is natural enough that most users zip through the dialog without even noticing what's going on.</p>
<p>Since this technique is somewhat unusual, it should be used judiciously. The above dialog was arrived at after many, many iterations, and capitalizes on a very predictable sequence of user actions to shave time off a very common task. Without careful attention to detail, it would be easy to end up moving the default button to the wrong place and cause users to accidentally press the wrong button. The larger point here is that it's worth exploring the limits of standard user interface behavior to streamline a UI that will receive a high volume of traffic.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Marvin
EMAIL: are@you.nuts.com
IP: 216.254.24.225
URL: 
DATE: 01/11/2006 09:57:27 PM
Funnily I only open this  dialog to select multiple recipients.  Which makes the behavior you describe irritating (Enter works for the first one but not for others). In general, things like this are geared toward very frequent users of an application.  While Outlook may have such users, most other software is used *occasionally*. Which means that people don't have time to learn the details of what Enter does on any particular dialog. So they assume that it is equivalent to Ok and would completely miss this feature or decide that Enter behaves erratically. 
-----
COMMENT:
AUTHOR: Konstantin
EMAIL: coder_1888@mail.ru
IP: 195.131.144.252
URL: 
DATE: 01/12/2006 02:25:32 AM
I think, that in this dialog window it would be quite good to add buttons on which will be written most often chosen e-mail addresses. Than once again to search the same persons under the list, simply enough to press the button.
-----
COMMENT:
AUTHOR: Konstantin
EMAIL: coder_1888@mail.ru
IP: 195.131.144.252
URL: 
DATE: 01/12/2006 02:35:48 AM
I think, that in this dialog window it would be quite good to add buttons on which will be written most often chosen e-mail addresses. Than once again to search the same persons under the list, simply enough to press the button.
-----
COMMENT:
AUTHOR: Hilton
EMAIL: not@telling.com
IP: 172.23.220.19
URL: 
DATE: 01/12/2006 08:20:03 AM
Marvin, did you finish reading the post?  And I quote, "The user can type any key but Enter (or Escape, etc.) to start entering a new name, in which case the 'To ->' button becomes the default button again."  All you have to do is begin typing another name and the To button is default again.  It works ideally for both situations.
-----
COMMENT:
AUTHOR: Max Howell
EMAIL: max@evidencetalks.com
IP: 82.12.251.6
URL: 
DATE: 01/13/2006 03:52:26 PM
This blog is now my current favourite. Great observations and tips for those of us who do ui-development.
-----
COMMENT:
AUTHOR: Gavin
EMAIL: gavin@terrill.com
IP: 24.235.102.44
URL: http://fishdujour.typepad.com
DATE: 06/13/2006 06:28:50 AM
Personally, I find this behaviour inconsistent and confusing. I now have to mentally keep track of, or look at, the default button before I can press Enter, instead of focussing on the task at hand.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Front-loading user interaction before long operations
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: frontloading_us

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/12/frontloading_us.html 
DATE: 12/13/2005 11:04:00 PM
-----
BODY:
<p>Apps often need to ask users questions during long operations like installation or file copying. Whenever possible, it's good to front-load these questions whenever possible. It's irritating to walk away from a process that the app says will take an hour, then come back an hour to discover the app's only 5% done because it's waiting for you to answer a simple Yes or No question.</p>
<p>I was reminded of this again during a hunt for a better file synchronization utility for Windows. For years I've used <a href="http://www.secondcopy.com">Second Copy</a> by Centered Systems, which has been as a straightforward workhorse, but I thought I'd see what else is out there now.</p>
<p>As a rule, file synchronization tools have atrocious user interfaces. The people who really care about the fine points of synchronization or backup tend to focus on the technical challenges and ignore the greater challenge of presenting a simple user experience. These products typically have tabbed dialogs or wizards chock full of options that cover an enormous range of scenarios. Figuring out how to configure these options to get the product to do something basic often requires far more time than I'm willing to spend.</p>



<p>I've recently tried out a number of products, including <a href="http://www.tgrmn.com/web/file_synchronization.htm">ViceVersa</a> by TGRMN Software. The UI in ViceVersa is only about average in terms of simplicity (in other words, not very simple), but they do offer an obvious and helpful mode that compares the contents of two file systems locations that are about to be synchronized. This lets you make sure you'll get the results you want. I thought the comparison mode was a nice touch, and after reviewing the results of such a comparison, went ahead and initiated a sync.</p>
<p>The sync ran for many hours, and <a href="http://miksovsky.blogs.com/flowstate/2005/07/progress_bars_t.html">restarted so many progress bars</a> that I lost count. Each phase of the sync process provided an estimate of how long that phase would take, but as far as I could determine, that estimate was meaningless because I had no idea how many other phases were yet to come or long those phases would take. Because the file sync was tying up two machines, I effectively had no idea when I would regain use of either of them.</p>
<p>This is all par for the course in utility program UIs, but what was particularly irritating was coming back to the PC the next morning to find a dialog asking me to confirm that a given file should be overridden. This was quite disappointing. The application had earlier performed an exhaustive comparison of the files to be synchronized—<em>for the very purpose of letting me confirm that I wanted to copy or delete the files as indicated</em>.</p>
<p>If the application wanted to draw my attention to some particularly questionable operations, it already had essentially all the information it would need to ask me all of those questions up front. As far as I could tell, there was virtually nothing that the product would find out later during the file sync process that it didn't already know before the sync began. There could perhaps exist some cases where this wouldn't be the case (e.g., arising from files that changed while the operation is in place), but even then the product should have been able to take some reasonable default course of action—confirmed in advance if necessary.</p>
<p>The general point here is: when designing UI to support a long operation, consider whether any questions could potentially arise during the operation, and strive to move those questions to the point before the operation begins in earnest. Specifically, let the user know when they should be able to walk away and come back to find the process complete.</p>
<p>I recall one UI like this that came up a long time ago in Microsoft's first email product, Microsoft Mail. (Microsoft Mail, interestingly, was written for Macintosh computers and ran on AppleTalk networks.) During a certain operation, the product needed to have the user insert and remove a sequence of floppy disks. To its credit, the team took incredible pains to: a) order the disk insertions so as to minimize the number of times during the process that the user needed to remove one disk and insert another, and b) ensure that the longest disk operation took place last.</p>
<p>It's likely that no user ever perceived these refinements to the process, but I'm sure that some significant number of users were nevertheless saved the irritation of returning to their desk to discover that their computer was stuck halfway through, awaiting their return.</p>

-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Stuart Langridge
EMAIL: sil@kryogenix.org
IP: 62.254.221.66
URL: http://www.kryogenix.org/
DATE: 12/14/2005 01:09:29 AM
Ooh, yes, that'd be lovely. Matthew Thomas once put together an algorithm description for this sort of thing for Gnome's Nautilus file browser (http://mail.gnome.org/archives/usability/2005-June/msg00017.html), although that was just for moving and copying rather than synchronisation.
-----
COMMENT:
AUTHOR: One Off Man Mental
EMAIL: 
IP: 10.3.1.250
URL: http://profile.typekey.com/oneoffmanmental/
DATE: 12/14/2005 03:21:03 AM
Microsoft SyncToy ( http://www.microsoft.com/windowsxp/using/digitalphotography/prophoto/synctoy.mspx ) and Novell iFolder ( http://www.ifolder.com )seem to both improve on the synchronization tools of old.

iFolder takes exactly the kind of action you suggest - perform a default operation on conflicts (do not copy), then flag these items for review by the user after synchronization is complete.
-----
COMMENT:
AUTHOR: RichB
EMAIL: rbirkby@gmail.com
IP: 213.208.111.244
URL: 
DATE: 12/14/2005 02:20:13 PM
SyncBack by 2brightsparks is wonderful
-----
COMMENT:
AUTHOR: Whoever
EMAIL: Whoever@Whatever.com
IP: 163.156.240.1
URL: 
DATE: 12/15/2005 03:07:16 AM
They should at the least have copied all of the files they could, and put the "difficult" files to the back of the list to await your feedback.
-----
COMMENT:
AUTHOR: Ross Burton
EMAIL: ross@burtonini.com
IP: 84.12.135.175
URL: http://www.burtonini.com
DATE: 12/20/2005 07:01:43 AM
You might like Unison (http://www.cis.upenn.edu/~bcpierce/unison/) for file syncing.  Pretty sane UI really, although it's a bit ugly.  Importantly once you hit Go, it won't stop until it's finished.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Elegant Cropper utility for capturing screen shots
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: elegant_cropper

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/12/elegant_cropper.html 
DATE: 12/06/2005 11:30:00 PM
-----
BODY:
<p>A helpful reader recently pointed me at the handy <a href="http://blogs.geekdojo.net/brian/articles/Cropper.aspx">Cropper screen capture utility</a> for Microsoft Windows.</p>
<p> One of the most time-consuming tasks in creating a post for this blog is capturing small images of UI examples. For certain jobs, Cropper lets me perform this task more quickly than other tools I've used. (<a href="http://www.techsmith.com/products/snagit/default.asp">SnagIt</a>, for example, has grown somewhat ponderous for my needs.) Cropper's alpha-blended overlay technique for marking the crop boundaries is elegant, and its keyboard support allows you to tweak the position and size of the captured image.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: schuimpie
EMAIL: ckorper@gmail.com
IP: 82.94.15.141
URL: 
DATE: 12/07/2005 12:35:31 AM
You can use photoshop, (alt) printscreen adobe->file->new->ok->paste->select part of image->crop->save for web (4x4) 70%

probably overkill to use photoshop, but it's 20sec of work.
-----
COMMENT:
AUTHOR: Andris
EMAIL: axl@inbox.lv
IP: 10.10.5.3
URL: 
DATE: 12/07/2005 02:42:18 AM
Have you seen MWSnap? http://www.mirekw.com/winfreeware/mwsnap.html

Haven't needed anything more in 3 years i'm using it.
-----
COMMENT:
AUTHOR: Factory
EMAIL: t@t.com
IP: 147.10.46.249
URL: 
DATE: 12/07/2005 03:19:12 AM
Hmm I prefer GIMP for taking screen shots, mostly because as soon as I take the shot, the next thing I'll be doing is labelling it so the user will know what bits I'm referring to in the commentry that follows.
-----
COMMENT:
AUTHOR: Oliver
EMAIL: oliver.regelmann@gmx.de
IP: 172.29.1.128
URL: http://regelmann.ch
DATE: 12/07/2005 04:08:49 AM
Also have a look at Gadwin Printscreen:
http://gadwin.com/printscreen/
-----
COMMENT:
AUTHOR: Max Howell
EMAIL: max@methylblue.com
IP: 83.146.10.162
URL: 
DATE: 12/08/2005 03:57:21 AM
Great utility, thanks for the link. I notice however it's yet-another application that uses the notification-area instead of the taskbar for no good reason I can discern. Otherwise it's the perfect way to take shots of particular screen regions. Smart.
-----
COMMENT:
AUTHOR: Brian Scott
EMAIL: brian@thegridnaster.com
IP: 10.53.96.160
URL: http://blogs.geekdojo.net/brian
DATE: 12/08/2005 08:44:49 AM
Thanks for the link. I've actually been reading your blog for 3 or 4 months now. It was nice to see someone on my start.com page mention Cropper.

Max, I will look at adding an option of taskbar or notification icon in a future, hopefully next, release. 

Cropper is still pretty much the app I wrote for my personal use out of need. The current version I am working on includes a lot of the feedback and requests I have recieved over the last few months.
-----
PING:
TITLE: Elegant Cropper utility for capturing screen shots
URL: http://www.headblender.com/joe/links/archives/2005/12/08/elegant_cropper/index.html
IP: 209.68.2.8
BLOG NAME: The Crooked Links
DATE: 12/08/2005 12:02:05 AM
Cropper is a screen capture utility written in C# on the Microsoft .Net platform. It makes it fast and easy to grab parts of your screen. [via]...
-----
PING:
TITLE: The myth of XCOPY deployment
URL: http://www.gnegg.ch/archives/the_myth_of_xcopy_deployment.html
IP: 195.134.144.87
BLOG NAME: gnegg
DATE: 12/07/2005 05:03:31 AM
Since the advent of .NET, everyone is talking about XCOPY deployment. XCOPY deployment means that the applications are distributabe without a setup routine. Just copy the file(s) where you want them and that's it. We are being told that this is much ea...
-----
PING:
TITLE: The myth of XCOPY deployment
URL: http://www.gnegg.ch/archives/the_myth_of_xcopy_deployment.html
IP: 195.134.144.87
BLOG NAME: gnegg
DATE: 12/07/2005 03:29:20 AM
Since the advent of .NET, everyone is talking about XCOPY deployment. XCOPY deployment means that the applications are distributabe without a setup routine. Just copy the file(s) where you want them and that's it. We are being told that this is much ea...
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Lightweight in situ editing of page content
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: editing_setting

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/12/editing_setting.html 
DATE: 12/05/2005 09:25:00 PM
-----
BODY:
<p>Sites adopting AJAX and other interactive techniques are increasingly giving users the ability to express preferences or change settings <em>in situ</em>, without having to navigate to a separate page just to change the way things work. This direction seems promising, but until standards emerge it's also fraught with the potential to confuse users or simply get in the way.</p>
<p>The wiki vendor JotSpot, for example, allows a user to rename a page by hovering over the page title:</p>
<p><img border="0" alt="Jotspot_page_title" title="Jotspot_page_title" src="https://miksovsky.blogs.com/photos/uncategorized/jotspot_page_title.png" />&nbsp; &nbsp;<img border="0" alt="Jotspot_page_title_hover" title="Jotspot_page_title_hover" src="https://miksovsky.blogs.com/photos/uncategorized/jotspot_page_title_hover.png" />


</p>
<p>An earlier generation of web sites required the user to travel to another page to make such an edit in the text box of a web form, then submit their changes. Here the interactivity is lightweight and allows for quicker changes.</p>
<p>In a similar vein, various web portals let the user personalize the look and content of their home page by directly interacting with page content. The <a href="http://www.google.com/ig">customziable Google home page</a> puts links in the corner of each blurb to customize the blurb's size or remove the blurb entirely:</p>
<p><img border="0" alt="Google_home_page_blurb" title="Google_home_page_blurb" src="https://miksovsky.blogs.com/photos/uncategorized/google_home_page_blurb.Png" />


</p>
<p></p>
<p>To my recollection, MSN was one of the first portals (if not the first) to offer lightweight editing on its own <a href="http://my.msn.com">customizable home page</a>. This interactivity is still there today, albeit with some heavy visuals and advertising:</p>
<p><a href="http://miksovsky.blogs.com/photos/uncategorized/msn_home_page_customization.Png"><img border="0" src="https://miksovsky.blogs.com/photos/uncategorized/msn_home_page_customization.Png" title="Msn_home_page_customization" alt="Msn_home_page_customization" /></a> </p>
<p>The main issue with all such lightweight editing facilities is the possibility of interfering with the average user's use of the product. If the user is just trying to read something, the editing controls can be distracting. At worse, they can throw the user into a mode that they didn't want to be in—or into a mode they're not even aware they're in. The situation will improve as more conventions emerge for lightweight editing of page content, but until then it's worth incorporating such interactivity cautiously.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Chris
EMAIL: c45207@zoomtown.com
IP: 128.42.158.114
URL: 
DATE: 12/05/2005 11:40:51 PM
Do these sites still work with accessibility devices/programs like screen readers?
-----
COMMENT:
AUTHOR: pb
EMAIL: peter.karsai@gmail.com
IP: 195.228.227.99
URL: http://pb.meselia.net
DATE: 12/06/2005 12:20:58 AM
This uber-customizable and editable web reminds me the dockable and movable toolbars in Windows: I make little use of them, but I dragged them accidentally many times. After long years, I realized that it's better to lock the toolbars in every application where it is supported.
-----
COMMENT:
AUTHOR: Eduardo
EMAIL: eduardo@areconet.com.ar
IP: 24.232.6.250
URL: http://www.areconet.com.ar
DATE: 12/06/2005 04:54:11 AM
My fav: www.netvibes.com style to edit the page title
-----
COMMENT:
AUTHOR: John Schroedl
EMAIL: 
IP: 71.70.172.59
URL: http://profile.typekey.com/jschroedl/
DATE: 03/17/2006 07:29:16 PM
Though its all client script I'd be interested in your opinions on the approach TiddlyWiki.com uses.  Quick clever and intuitive if you ask me.

John
-----
PING:
TITLE: The AJAX-Haunted World: Pragmatism as a Candle in the Dark
URL: http://mcfunley.com/cs/blogs/dan/archive/2005/12/06/665.aspx
IP: 64.79.161.37
BLOG NAME: Dan McKinley
DATE: 12/06/2005 04:49:25 AM
It's good to see that at least a few usability  design gadflies agree with my conclusion that AJAX...
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Why not allow the user to rename an open file?
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: why_not_allow_t

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/11/why_not_allow_t.html 
DATE: 11/30/2005 09:48:00 PM
-----
BODY:
<p>It's odd that virtually all document editors still prevent the user from changing the name of the file they're working on. This is a shame, because it's a common user task.</p>
<p>A user may start writing a new document, save it under one name, and then as the document evolves come to realize that another name would be more appropriate. There's usually no good way to do this inside the application, so they struggle through workarounds like saving the file under a new</p>
<p>
<p><a href="http://miksovsky.blogs.com/photos/uncategorized/error_renaming_file_1.Png"><img border="0" alt="Error_renaming_file_1" title="Error_renaming_file_1" src="https://miksovsky.blogs.com/photos/uncategorized/error_renaming_file_1.Png" /></a><br />

</p>



<p>The main reason most applications don't support this is because most
platforms don't make it easy—and the main reason platforms
don't make this easy is because most applications don't think they need to support
the feature. Alan Cooper vented about this problem in <a href="http://www.cooper.com/content/insights/cooper_books.asp">About Face</a>, and it's still a widespread problem today.</p>
<p>There are a few applications enlightened enough to let you rename an open file. Microsoft Visual Studio, for example, handles this without complaint. Interestingly, Microsoft Word used to support this—but only in the Macintosh version years ago, before its user interface was realigned for consistency with the Windows version.</p>
<p>It's almost impossible to get problems like this fixed in an application, let alone the operating system. Unless customers complain about this, no one wants to tackle the problem—and by now most people have grown too used to working around the problem.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: peterchen
EMAIL: hauptmannp@yahoo.com
IP: 84.179.174.55
URL: 
DATE: 11/30/2005 10:25:29 PM
How would one implement that?

I think (1) open-read-close (i.e. don't hold a handle to the file, or map it), and (2) some monitoring to detect the change (FindFirstChangeNotification?) 
-----
COMMENT:
AUTHOR: Factory
EMAIL: t@t.com
IP: 147.10.46.249
URL: 
DATE: 12/01/2005 12:11:04 AM
Is the dialog from Vista? In previous versions of windows they wouldn't even tell you which program was locking the file.


-----
COMMENT:
AUTHOR: Brian
EMAIL: me@privacy.net
IP: 67.180.156.160
URL: http://www.google.com
DATE: 12/01/2005 04:02:47 AM
UltraEdit-32 (a very nice text editor) has this feature to rename an open file.  It's incredibly handy, and I wish more programs had this.  Technically it's very simple to code into an app -- just a simple dequence of save-as and delete.  Since the program itself is performing the action there is no file-in-use mess to worry about.

-----
COMMENT:
AUTHOR: Jeff
EMAIL: lemondjeff@hotmail.com
IP: 64.142.92.200
URL: 
DATE: 12/01/2005 06:04:38 AM
I'm not making excuses for application developers, but the fact that Windows doesn't support this makes their job harder.  Mac OS X allows you to not only rename, but to move open files, without invalidating any open file handle.
-----
COMMENT:
AUTHOR: Michael Zuschlag
EMAIL: wontpost@myemail.com
IP: 12.104.27.5
URL: 
DATE: 12/01/2005 06:17:15 AM
I hate to get off topic, but why was it important for the Mac UI to be "realigned for consistency with the Windows version"? I can't see how that form of consistency benefits the users. In the rare cases that Windows users use a Mac, some may not discover the rename feature, and are thus no better or worse off than not having the feature at all. In cases of Mac users using Windows, they'll see the rename feature isn't supported and utter a curse on Microsoft, but they do that by habit anyway. Why penalize all Mac users when they're using Macs because of edge conditions that have mild consequences?
-----
COMMENT:
AUTHOR: Adrian
EMAIL: ui@aidtopia.com
IP: 205.248.102.83
URL: 
DATE: 12/01/2005 08:26:19 AM
Doing a Save As/Delete behind the scenes may, in some cases, be too simplistic.  Save As will create a new file.  As a developer, you'd have to be careful to copy the file attributes, creation date, and ACLs of the original file.

Most of the document editors I use allow renaming the file.  Then again, I stay pretty far away from Office.
-----
COMMENT:
AUTHOR: kbiel
EMAIL: blogcomments@biel.us
IP: 10.0.2.190
URL: 
DATE: 12/01/2005 09:53:55 AM
I believe this is one of the problems that will be solved by WinFS.  The problem is that MS has treated the file name/path as an immutable part of the file itself rather than a nice UI attribute.  The Mac was able to support renaming and moving of open files, because the file name/path is only a metadata attribute of the actual file which is identified by a unique key.

The reason that developers don't support file renaming usually is because it is a lot of work in Windows.  You have to close the open file handle, rename/move the file, open a file handle on the new file/path.
-----
COMMENT:
AUTHOR: Dustin Long
EMAIL: dustmop@gmail.com
IP: 68.193.238.62
URL: 
DATE: 12/01/2005 11:34:34 AM
Adrian said, "Doing a Save As/Delete behind the scenes may, in some cases, be too simplistic. Save As will create a new file. As a developer, you'd have to be careful to copy the file attributes, creation date, and ACLs of the original file."

Actually, that's not true
http://blogs.msdn.com/oldnewthing/archive/2005/07/15/439261.aspx

With regards to the post, I find it amazing that we're still stuck with the archaic DOS hierarchical file system in this day and age. It's the root cause of so many usability problems it's not even funny.
-----
COMMENT:
AUTHOR: Jamie Anderson
EMAIL: jamie@nzgeek.net
IP: 219.88.103.155
URL: http://www.example.com
DATE: 12/01/2005 05:30:27 PM
Actually, you can rename a file that's in use. It just depends on how that file's been opened.

If you pass FILE_SHARE_DELETE when you call CreateFile(...), users are allowed to rename the file while it's being used. However, they can also delete it, which isn't a good thing.

The boffins at Microsoft should implement a FILE_SHARE_RENAME flag, which allows the file to be renamed while in use. This would allows renames, but would prevent deletions.
-----
COMMENT:
AUTHOR: Moz
EMAIL: hahaha@bite.me
IP: 211.30.178.186
URL: 
DATE: 12/01/2005 11:46:13 PM
The oldnewthing like applies to something different - if you delete the file then rename a new file to the old name, tunnelling will help you. Creating a file with a new name and the same content has no effect.

FWIW TextPad has had this for a long time (and I use it a lot).
-----
COMMENT:
AUTHOR: bryan
EMAIL: bry@itnisk.com
IP: 80.162.101.231
URL: 
DATE: 12/02/2005 02:16:55 AM
Well, I would not like to see this changed now. it would confuse people used to the old way of working. so basically you would want to add the functionality via another save entry on the menu. That however  becomes problematic, how to phrase the menu item so it does not in turn confuse the user. 
-----
COMMENT:
AUTHOR: RogerC
EMAIL: RogerC@yahoo.com
IP: 71.107.2.191
URL: 
DATE: 02/27/2006 11:25:23 PM
It works again on the mac. You can also move the file around the filesystem.

I wouldn't worry about any changes confusing the user. Menus change to personalize to the user, and filesystem functionality is all too variable. A change for the better might be shocking to some, but the user would get over it. If my filesystem suddenly let me do this, I'm not sure I'd even notice that one more annoyance had gotten out of my way.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Google Local for Mobile: bellwether Java cell phone applet
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: google_local_ni

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/11/google_local_ni.html 
DATE: 11/08/2005 09:51:00 PM
-----
BODY:
<p>The new <a href="http://google.com/glm">Google Local for Mobile</a> is a compelling little demonstration of what a Java cell phone applet can do. It's carefully tuned to the constraints of cell phone hardware, uses the network well, and makes good use of the graphic display and local caching.</p>
<p><img border="0" alt="Google_local_for_mobile" title="Google_local_for_mobile" src="https://miksovsky.blogs.com/photos/uncategorized/google_local_for_mobile.Png" /><br /><span style="font-size: 0.8em;">Google Local for Mobile</span></p>
<p>The installation process was much easier than I’d expected. Google’s site does a good job helping you figure out whether your phone will actually run their applet, which is nice and presumably reduces customer disappointment. The site directs you to a web page to open on your phone, and offers to SMS you the URL to save you the trouble of typing it in. The resulting web page sniffs your browser to determine which download you need, so you only have to make a few clicks to download and install the applet.</p>
<p>In my case, I had to put up with some very clunky Java applet management UI produced by the local cell phone OS (controlled by my phone manufacturer, not Google). For example, the phone asked me to confirm that I wanted to install a “MIDlet”, whatever the heck that is. I expect most cell phone manufacturers outsource the utility UI like this to the cheapest bidder, with predictably poor results.</p>
<p>The Google Local applet itself is simple but quite polished for a phone app. It feels a lot like Google Maps. The keyboard UI for zooming in and out took some getting used to. You can read a complete description in the <a href="http://google.com/glm/tour.html">Google Local tour</a>. The UI suffers from the fact that the key to zoom in (the OK button, or the center of the directional pad) is otherwise unrelated to the key you press to zoom out (a mappable button that labeled here as &quot;Zoom -&quot;). This is a reasonable trade-off given the small keyset available on a phone, but nonetheless the lack of conceptual connection between the buttons makes it hard to learn their relationship. It's also confusing to see the zoom out command clearly labeled, when what every user will need to do first is zoom in. The applet does offer a quick tip on how to zoom.</p>
<p>The zoom UI also has the unusual behavior that setting the zoom level doesn't take effect immediately—you can zoom in or out multiple levels, then wait a second for the new zoom level to kick in. Again, this is a reasonable trade-off given the bandwidth on a phone, but again this is confusing for the new user. Now that I know how zooming works, I think it’s elegant, but I expect a significant number of users will be completely confused and give up on the applet after a few minutes of failing to successfully zoom around.</p>
<p>Other small points: I was disappointed that Google’s address lookup couldn’t find my house. I was also disappointed that Google Local couldn’t show me my approximate location on the map based on info from the cell towers. Finally, at one point when I switched away from Google Local and then launched it again, Google Local lost track of the previous map view. It reset the map back to a high-level country view, forcing me to laboriously re-zoom down to my local area.</p>
<p>The weakest part of the whole experience in my opinion is that it’s hard to get back into to the Google Local applet once you've left it. This isn't really Google's fault. On my phone (and probably most other phones), Java applets don't get their own top-level entry point in the main menu, nor is there an option to create such an entry point. I have to navigate to a special Java area first, then launch the Google Local app from there. For me, the entire navigation sequence in six clicks long, and requires two clicks that are essentially random (i.e., the UI element doesn't suggest that clicking it will lead you closer to a mapping application). The top-level Java area eventually did show up as a shortcut on a top-level MRU (Most Recently
Used) list, which cut out a few clicks, but that shortcut will age
off the MRU list if I don’t keep using it.</p>
<p>I’ll bet that a big chunk of people who download Google Local won’t be able to find the applet after the first time they run it, so this single issue of finding the app’s entry point could be a critical weakness. Convincing cell phone OS designers to make it easier to launch Java applets is a chicken-and-egg problem: OS designers won't do this until there are more interesting applets like Google Local for Mobile, and app ISVs won't create a significant body of interesting cell phone applets unless they can be sure users can quickly and easily run them.</p>
<p>Nevertheless, my overall reaction to this applet is quite positive. Google Local for Mobile may become a bellwether entry in the mobile app space, in much the same way Google Maps broke ground for highly interactive AJAX apps. This is the first non-game Java app I’ve seen that’s worth downloading. If you have a Java-capable phone, it's worth checking out.
</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: kalleboo
EMAIL: flowstate@kalleboo.com
IP: 130.235.189.34
URL: 
DATE: 11/29/2005 09:02:52 AM
I'm just curious - what brand of cell phone do you have? (just so I can keep far far away) My Sony Ericsson has a just fine UI for Java apps (it asks if you want to install "the application", and then asks if you want to save it in the "Applications" or the "Games" folder, which are easy to find - the Games is in the top level icon, Applications is in the File manager where you access your photos music and video, and you can also map either of the folders to a shortcut key)
-----
COMMENT:
AUTHOR: Mike Hearn
EMAIL: mike@plan99.net
IP: 129.234.217.118
URL: http://plan99.net/
DATE: 11/30/2005 11:45:27 AM
Yes, Sony Ericsson phones have a generally excellent UI (not just for app installation). They seem to pay great attention to their GUI and hardware UI in general. I've been very impressed with mine - too bad they have such low market share worldwide (in the UK they're everywhere though).

MIDlet is a stupid unpronouncable term meaning "mobile information device-let". Yep. Sun doesn't call them cellphones. Oh no. That might exclude some wacko device that has exactly the capabilities of a phone but isn't.

As to why it doesn't take info from cell tower locations, well, J2ME doesn't let you access that information. So they don't have any way to program such a thing.

-mike (who has done J2ME development before)
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Letting a user specify a preference using an example
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: letting_a_user_

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/11/letting_a_user_.html 
DATE: 11/07/2005 10:10:00 PM
-----
BODY:
<p>I recently came across an elegant demonstration for getting the user to specify a preference by offering examples to choose from. This technique is often done with visual settings (e.g., letting a user select a template for a document by clicking on sample template thumbnails), but in this case, the technique was applied in letting a user specify a simple textual setting for a date format.</p>
<p>I've been looking at some web sites that help manage To Do lists, including <a href="http://tadalists.com">tadalists.com</a>, <a href="http://rememberthemilk.com">rememberthemilk.com</a>, and <a href="http://mypimp.com">mypimp.com</a>. (Where do they get these names? The latter could adopt the slogan, &quot;We think having a borderline offensive name is so funny it's worth giving up market share!&quot;) All these sites strive to be as interactive as possible, and to some extent they each struggle with the absence of conventions for entering data on highly interactive web pages. This has produced some interesting and creative UI experiments, some of which succeed. </p>
<p>One bit of creativity (albeit in a non-interactive area) shows up in the account setup page for rememberthemilk.com:</p>
<p><img border="0" src="https://miksovsky.blogs.com/photos/uncategorized/remember_the_milk.Png" title="Remember_the_milk" alt="Remember_the_milk" /></p>
<p>It's the last line that caught my attention. The label for the radio buttons doesn't even say what you're picking (preferred date format), but it's obvious what you're supposed to do: pick the sample that shows the date the way you like it. What's particularly interesting is that this trick capitalizes on a person's ability to recognize patterns at a subconscious level. I live in a country where the month comes before the date, so the first option (&quot;14/02/05&quot;) looks like a jumble of numbers to me, while the second option (&quot;02/14/05&quot;) leaps off the page as a valid date. Presumably people who live in date-first countries have the opposite reaction.</p>
<p>It may turn out that this trick only works in narrowly constrained circumstances; perhaps it would stop working, for example, if they needed to support a broader range of date formats. Nevertheless, it's impressive that rememberthemilk is able to ask for something as mundane as a date format in a manner consistent with the site's overall casual visual and textual tone.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Christian Heindel
EMAIL: info@christian-heindel.de
IP: 217.110.172.154
URL: http://www.christian-heindel.de/
DATE: 11/08/2005 01:22:42 AM
I doesn't work for international users. I come from Germany and would have needed sth. like "14.02.2005" to quickly recognize the right format. (I think the dots are the important thing here...)

But one could detect the preferred browser language and use it to be much smarter at this point.

Nonetheless it is nice that they ask for the format. They show they care about you.
-----
COMMENT:
AUTHOR: Phil Wilson
EMAIL: 
IP: 138.38.52.53
URL: http://profile.typekey.com/pipthepixie/
DATE: 11/08/2005 02:29:30 AM
Well, presumably the fact that it's not in German in the first place is a giveaway that they're mainly differentiating for English-speaking countries (presumably the US and the UK), but the slashes are common across western Europe.

I really love this way of selecting the date.
-----
COMMENT:
AUTHOR: Tyler Klein
EMAIL: tyler@tinymonkey.net
IP: 4.2.170.194
URL: http://www.fuzzypenguin.net/tyler
DATE: 11/29/2005 07:33:48 AM
Here is a slick one for you. I saw a demo given by the MSFT User Experience Designers on Halo. One of the problems they had was determining what direction is "up". It turns out that about half of users expect pushing down on the control pad to look up and half expect pushing up to look up. So at the outset of the game, they allow the user to "test out" their weapon by shooting a target just above their cross-hairs. If the user naturally presses down, then down becomes look-up. If they naturally press up then up becomes look-up. Either way, the user never knows that they set a preference, and the system responds as they expected it to.
-----
COMMENT:
AUTHOR: Jan Hoek
EMAIL: jhoek@uncommonsense.nl
IP: 213.199.128.152
URL: http://www.uncommonsense.nl
DATE: 11/29/2005 09:23:57 AM
Even though the most common date separator in Holland, where I live, is a dash, I instantly recognized the dd/mm/yy format. It seems the Germans are more attached to their dots than the Dutch are to their dashes... ;-)
-----
COMMENT:
AUTHOR: Steveo
EMAIL: sas@fuse.net
IP: 138.12.206.191
URL: 
DATE: 11/29/2005 10:32:30 AM
OK, It's a cool idea.  But where's the question mark.  

-----
COMMENT:
AUTHOR: Jonathan
EMAIL: a@hotmail.com
IP: 199.203.230.142
URL: 
DATE: 11/30/2005 03:46:35 AM
East-Asian people use 2005.02.14. And let's not forget the various lunar calendars...
-----
COMMENT:
AUTHOR: Chris
EMAIL: c45207@zoomtown.com
IP: 128.42.159.11
URL: 
DATE: 11/30/2005 09:51:25 AM
And then there are the weird Americans (like me) who use 2005-Nov-30 or 2005-11-30.
-----
COMMENT:
AUTHOR: Richard
EMAIL: null@spam.la
IP: 207.195.100.189
URL: 
DATE: 11/30/2005 12:51:42 PM
It looks like "mypimp" goes to a different address... that's too bad, because it's only "borderline offensive" if you're looking for things to be offended by.
-----
COMMENT:
AUTHOR: J.M
EMAIL: marschj@comcast.net
IP: 66.6.114.140
URL: 
DATE: 12/01/2005 09:11:29 AM
This looks like an interesting blog, however I am unable to subscribe to the RSS feed.  The error (from newsgator -- complete): "Invalid URI: a port was expected because there is a colon present but the port could not be parsed."


-----
PING:
TITLE: Funny Ditty
URL: http://www.chetos.net/blog.asp?what=dispPost&postUID=22564
IP: 209.26.172.10
BLOG NAME: ChetOS.net
DATE: 12/06/2005 01:17:17 PM
Also, I found a new great blog called flow|state.  It is a UI theory and design site and it is very interesting.  There is a good article called Letting a user specify a preference using an example which talks about a excellent way of having users natu...
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Defining a single search path for commands
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: defining_a_sing

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/11/defining_a_sing.html 
DATE: 11/05/2005 10:41:16 PM
-----
BODY:
<p>Jensen Harris: Don't give people another rock to turn over<br />Good example: MSN/Hotmail toolbar with overflow</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Avoiding unnecessary questions in command UI
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: ui_as_a_pesky_w

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/10/ui_as_a_pesky_w.html 
DATE: 10/30/2005 08:36:00 PM
-----
BODY:
<p>A European acquaintance once remarked that when they go to an American restaurant, they feel like they're &quot;under assault&quot; by the waitstaff: placing an order requires answering a long series of questions—&quot;Soup or salad? Italian dressing or Ranch? Lite Italian or Regular Italian?&quot;—and the waitstaff continues to interrupt them every ten minutes to ask yet more questions. Some user interfaces can feel like this.</p>
<p>In particular, some applications have commands with UIs that ask too many questions before the application will actually carry out the command. If you try to insert a new page into a Microsoft Visio document, you get a form to fill out:</p>
<p><img border="0" class="image-full" alt="Microsoft_visio_new_page" title="Microsoft_visio_new_page" src="https://miksovsky.blogs.com/photos/uncategorized/microsoft_visio_new_page.png" />

</p>



<p>What you really wanted was a new page, not a form to fill out. The difference between ordering a salad and inserting a new page is that the restaurant has to get things right the first time. Once you get the salad, you can't change your mind and have them turn the salad into a soup (or, at least, not a very good soup).</p>



<p>An application, in contrast, can adjust its output after the fact. Good UIs often eliminate unnecessary up-front questions by doing <em>something</em> in response to a command and letting you tweak the results if they're not what you wanted.</p>
<p>A common example: when you create a new folder in virtually all modern operating systems, you get a new folder right away. The new folder is called something like &quot;New Folder&quot;. You don't get a question asking you what kind of folder you want, what sort of name you'd like to give it, etc. For this UI to be effective, the OS simply needs to make it easy for you to rename the new folder once it's been created.</p>
<p>Another example comes from Microsoft Office. In old versions of Office, if you wanted to paste something from the clipboard that could be pasted in multiple ways, you had to use an ugly and confusing Paste Special dialog:</p>
<p><img border="0" class="image-full" alt="Microsoft_office_paste_special" title="Microsoft_office_paste_special" src="https://miksovsky.blogs.com/photos/uncategorized/microsoft_office_paste_special.png" />

</p>
<p>Recent releases of Microsoft Office have deprecated this dialog in favor of a contextual pop-up menu that appears after commands like Paste. If you don't like the result of the command, you simply select another result from the pop-up menu:</p>
<p><img border="0" alt="Microsoft_office_paste_popup" title="Microsoft_office_paste_popup" src="https://miksovsky.blogs.com/photos/uncategorized/microsoft_office_paste_popup.png" />

</p>



<p>Advances like these obviate the need for an application to bug the user with lots of questions. Other suggestions for streamlining command UI:</p>



<ul><li>If a single command is really providing two features that are only loosely related, refactor the command UI into two proper commands with their own entry points.</li>

<li>If you have to ask a question, at least propose a default response and/or give examples of typical responses.</li>

<li>If you have to present a dialog or wizard, consider employing some form of elision (an &quot;Advanced...&quot; button, an expando that reveals advanced options, etc.) to hide the unusual stuff.</li>

<li>Instead of presenting a long sequence of questions, consider presenting a quick summary of what's going to happen, and let the user edit just those parts they want to change.</li>

<li>If you really, really need to display a dialog (e.g., for legal reasons) but are confident most users won't actually need to see it each time, offer an option to skip past the dialog in the future.</li>

<li>Have the basic form of the command do the thing that 95% of your users want, then let the remaining 5% tune the behavior of that command through an application option.</li>

<li>If only a tiny number of users would ever answer a question a particular way, have guts and cut the question altogether. In general, you're better off addressing the common needs of a broad set of users than building special-purpose UI that only ever be used by a few people (especially if those few people work down the hall from you).</li></ul>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Kevin Dente
EMAIL: kevind@denteworld.com
IP: 63.206.72.126
URL: http://weblogs.asp.net/kdente
DATE: 11/29/2005 10:53:21 AM
Just discovered your blog. Great stuff!

However, in my opinion your example of creating a new folder in the OS is a bad one (at least the way Explorer does it). Why? For two reasons:

1) What are the odds that you actually want a folder called New Folder (or New Folder (27))? Practically zero. So the user is going to have to type the new name anyway. And in fact it's quite easy to accidentally quit out of Explorer's rename mode, which makes the whole process more hassle.

2) Depending on how network permissions are set up, it's possible that the user will be able to create a folder but not be able to rename it. I've actually had this happen to me - it's incredibly annoying (especially when you can't delete the new folder either).

Apparently the Office 2003 thought so too. When you create a new folder in the File dialogs there, it pops up a prompt for the folder name.
-----
COMMENT:
AUTHOR: Brooks Moses
EMAIL: bmoses@stanford.edu
IP: 171.66.164.36
URL: http://lj.dpdx.net
DATE: 11/29/2005 01:10:51 PM
I'm going to have to disagree with your point 1, Kevin.  A fair fraction of the time, when I'm creating a folder, I'm creating it for a temporary purpose, and really don't care what the name is.  "New Folder" does just fine -- and, usually, if I do decide my temporary directory needs a name, I make that decision well after creating the folder.

I also contend that having a dialog box is little help.  For a properly-done dialog box, the name field is highlighted, and I can immediately type in a name, and then I have to either hit "enter" or click "ok".  If I click somewhere else, I then have to re-click in the dialog box's edit field, and usually reselect the default text to replace it.

The process of using the rename field to name a new folder strikes me as different from this in only three ways: (1) it's slightly easier to accidentally quit out of it, as you say; (2) it doesn't require hitting "enter" or "ok" after editing; just going to do something else is sufficient, and (3) it doesn't require my attention at any given point.  Other than that, the interaction process is exactly the same.

Thus, aside from the very minor issue of the rename mode being slightly easier to accidentally quit out of, I can't see how having a dialog box will possibly save me mouse-clicks or keystrokes.

-----
COMMENT:
AUTHOR: Peeyush Singh
EMAIL: psingh@peeyushsingh.com
IP: 66.42.249.146
URL: http://www.peeyushsingh.com/
DATE: 11/29/2005 02:41:11 PM
I'm no expert, so please take the following with a grain of salt :).

From my perspective, a lot of UI flaws can be largely attributed to an incorrect approximation of the target audience.  To put it more simply, it seems that a lot of designers/developers (or whoever it is that has the biggest hand in crafting UIs for a given application), seem to forget WHO they are desiging for.

Consider the delicate balance between having your application present you with many options at once and letting the user tweak them, or using a wizard or simple dialog interface and giving the user the option for more options.  It's a balance between a user that knows what he or she is doing right away and has probably used the application many times, versus the user that has little familiarity with the application to begin with.

The main problem, in my case anyway, is how to both efficiently and elegantly arrange the information on both the spatial and temporal planes.  I always end up asking myself, "Ok, would it be better if I broke down the follow dialog into multiple dialogs?  Tabs maybe?  Drop down & Command maybe?  Wizard?"

I have to ask myself what is going to make the most efficient use of time against the most effective outcome.

Sorry for that long-winded comment, I was just pouring out my thoughts as an amature developer, heh.  I appericiate your blog :).
-----
COMMENT:
AUTHOR: Robert Moir
EMAIL: bofh@mvps.org
IP: 194.82.157.150
URL: 
DATE: 11/30/2005 04:46:58 AM
"1) What are the odds that you actually want a folder called New Folder (or New Folder (27))? Practically zero. "

The user might want to rename the folder but the question is when do they want to rename the folder.

I very frequently find myself creating a new folde because I want to store some files into it right away and it would be an awful interuption to the flow of my work to have to stop and think of folder names while I'm actually concentrating on putting a bunch of files somewhere "safe".

Now I don't assume that my needs are those of the whole world, which is why I'd argue for choice, an ability to create a file and either use it right away or rename it right away depending on what you're doing.
-----
COMMENT:
AUTHOR: Chris
EMAIL: c45207@zoomtown.com
IP: 128.42.159.11
URL: 
DATE: 11/30/2005 09:59:24 AM
Personally, I'm most annoyed that when I go to rename a file with an extension, the extension is automatically highlighted. So, renaming "Note.txt" and typing "Note to Mom" results in that annoying "Are you sure you want to change the extension?" dialog. How about only selecting the name and not the extension by default? 
-----
COMMENT:
AUTHOR: Warren
EMAIL: warren.stevens@u_toronto.ca
IP: 64.229.216.23
URL: 
DATE: 11/30/2005 12:04:16 PM
That:

So, renaming "Note.txt" and typing "Note to Mom" results in that annoying "Are you sure you want to change the extension?" dialog. How about only selecting the name and not the extension by default?

is a brilliant comment. I've thought the same thing a million times myself.

Warren
-----
COMMENT:
AUTHOR: Robert Moir
EMAIL: bofh@mvps.org
IP: 213.107.178.242
URL: 
DATE: 11/30/2005 01:43:36 PM
Oh yeah. The extension thing. I'd buy Chris' idea for a dollar! I always like to see extensions but I only occasionally want to change them!
-----
COMMENT:
AUTHOR: Dileepa P
EMAIL: pdileepa@hotmail.com
IP: 61.246.61.103
URL: http://spaces.msn.com/members/volatilechar
DATE: 12/02/2005 07:37:19 PM
Warren: I think Windows Vista selects only the file name by default, when one tries to rename a file.
-----
COMMENT:
AUTHOR: tjeerdh
EMAIL: tjeerdh@msn.com
IP: 71.112.102.115
URL: http://spaces.msn.com/members/tjeerdh/
DATE: 12/29/2005 11:05:22 PM
Agree. Less questions, more action. And dialogs suck! ;)  Hey btw that's my on-object UI in office! Glad you like it. Some people who know it love it, most never even see it though, which is too bad. Maybe a bit too subtle. Oh btw, we fixed that problem of extensions getting blown when renaming a file and you have extensions showing in Windows Vista... it nicely only highlights the name part before the period when renaming. 
Sometimes these things are relatively simple and you think 'duh, of course!', but often it is just so hard to know what users want to do. Most UI folks  make the wrong call and decide in the end to just ask EVERYTHING. It also often requires more detailed knowledge of the user goals and behavior patterns than 
most people are prepared or even able to obtain.  
-----
PING:
TITLE: Überflüssige Fragen in Oberflächendialogen
URL: http://www.glorf.it/blog/2006/07/13/allgemein/uberflussige-fragen-in-oberflachendialogen/
IP: 85.13.135.167
BLOG NAME: Glorf.It
DATE: 07/13/2006 11:02:48 AM
Bei flow|state fand ich kürzlich einen sehr guten, kurzen Artikel (schon vom letzten Jahr) über Oberflächendialoge: Avoiding unnecessary questions in command UI. 
Ich finde er bringt es einfach gut rüber: viele Nachfrage...
-----
PING:
TITLE: The craft of UI design: flow|state
URL: http://blogs.msdn.com/oldnewthing/archive/2005/11/29/497865.aspx
IP: 209.34.241.64
BLOG NAME: The Old New Thing
DATE: 11/29/2005 07:11:20 AM
Jan Miksovsky's flow|state.
-----
PING:
TITLE: The craft of UI design: flow|state
URL: http://blogs.msdn.com/oldnewthing/archive/2005/11/29/497865.aspx
IP: 209.34.241.64
BLOG NAME: The Old New Thing
DATE: 11/29/2005 07:10:30 AM
Jan Miksovsky's flow|state.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Common sense
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: common_sense

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/10/common_sense.html 
DATE: 10/30/2005 11:07:27 AM
-----
BODY:
<p>Can't rely on system or component UI to do everything for you<br />Money Backup example: Money used File Save As dialog, which includes &quot;Are you sure you want to replace this file&quot; confirmation dialog -&gt; this makes no sense in the context of a backup, so we removed it</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Remember to set AutoMessWithYourHead to false
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: remember_to_set

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/10/remember_to_set.html 
DATE: 10/24/2005 08:45:00 PM
-----
BODY:
<p>There's nothing quite like the frustration of trying to keep an application from helping you. I spent a good chunk of the past weekend trying to figure out why a UI package was displaying controls at random sizes.</p>
<p>I'm working a Windows client application that's built on the .NET platform, with the UI built in Windows Forms. We recently moved from .NET 1.1 to .NET 2.0, and I've generally been impressed by the wealth of new UI facilities. In particular, most controls can now auto-size to a reasonable size (finally!), and the new TableLayoutPanel and FlowLayoutPanel go a long way towards building scalable UI in a structured way through the visual designer without having to hand-code a bunch of layout logic.</p>
<p>The new platform is not without its faults, however, as I discovered when some custom controls mysteriously changed sizes. I'd create a control with a bunch of auto-sized elements and nested layout panels, and in the designer everything would look perfect. I'd build the project, drop the control on to a form, and the control would look <em>almost</em> right—but the size would be off by some small, random amount. No amount of inspection could determine why this was happening, nor could any amount of groveling through the docs.</p>
<p>It turns out that Microsoft Visual Studio 2005 offers yet another attempt to help ISVs build UIs that scale with respect to the user's preferred system font. Scaling UI to assist users who, for example, prefer large fonts is in principle a great thing. Changing the development paradigm for coping with this problem in a new product release is not so great.</p>
<p>VS 2005 does so through a new form property called <a href="http://msdn2.microsoft.com/en-us/library/syyzc2zw">AutoScaleMode</a>, although perhaps a more appropriate name for this property might be AutoMessWithYourHead. Its default value is true. The true value means that Windows Forms will try to scale your UI with regard to the system font—although it won't tell you it's doing this.</p>
<p>Now that I know what the $#*@% is going on, I can understand why Microsoft changed this behavior, and it's at least nice to see them trying to fix this. The underlying problem is that a modern, complex UI layout package is essentially a pretty face on top of a recalc engine. As the Microsoft Excel team learned years ago, in a complex spreadsheet it can be near impossible to track down why a particular cell value is ending up with the value it does. To address this very problem, Excel offers a tool that let you visually trace the origins of any calc.</p>
<p>In the same light, it would be enormously valuable for WYSIWYG HTML editors or a client UI designers to offer some way to point to a visible element and ask, &quot;Why is this thing ending up with the position and size that it has?&quot;</p>
<p></p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Robert W. Anderson
EMAIL: robert@cairene.net
IP: 63.195.121.126
URL: http://rwandering.geekswithblogs.net
DATE: 10/25/2005 09:44:12 AM
Is this behavior new?

AutoScaleMode (plus some other features) replace the old AutoScale which defaulted to true. AutoScale has been deprecated.  The new property, AutoScaleMode, is an enumeration.  For Forms, it defaults to "Font".

It appears to me that this default behavior should be the same as what was in .NET 1.1.

One of the problems with auto-scaling is that the developer tends to assume that if it looks good on their machine, it will look good everywhere.  In this modern day, we all expect VS2003/5 to handle this for us. But I am surprised still at how many times I try out new software only to find that I can add see the bottom of a dialog box (or a splash screen is larger than the bitmap inside of it).  My main computer is a laptop with 1920 by 1200 LCD that I run at 120DPI resolution.

Perhaps if the programmer was forced to pay more attention to this, they would get it right.  We all know that good UI (just like good anything) doesn't come free.
-----
COMMENT:
AUTHOR: Aaron Brethorst
EMAIL: abreth@microsoft.com
IP: 131.107.0.77
URL: http://blogs.msdn.com/aaronbrethorst
DATE: 10/25/2005 12:25:50 PM
Jan - I've opened a suggestion on the MSDN Product Feedback Center, which is our public bug tracking system for Visual Studio, WinFX, and the .NET FX (which includes Winforms) for consideration in Orcas.

http://lab.msdn.microsoft.com/ProductFeedback/viewFeedback.aspx?feedbackId=FDBK39230


Thanks for the suggestion!
Aaron Brethorst
Ux Program Manager
Visual Studio Core
-----
COMMENT:
AUTHOR: Ben Karel
EMAIL: web@eschew.org
IP: 128.175.71.194
URL: http://eschew.org/
DATE: 10/26/2005 08:46:00 PM
///////////////
In the same light, it would be enormously valuable for WYSIWYG HTML editors or a   client UI designers to offer some way to point to a visible element and ask, "Why is this thing ending up with the position and size that it has?"
/////////////////


It's more geared towards web developers, but for the past five or so years, Mozilla browsers have been able to do that for web pages. The DOM Inspector (under the Tools menu) lets you select arbitrary elements in a page and see all the CSS selectors and associated rules that are being applied to the element. (Plus other nice things, like all the attributes set on that node. Quite useful.)
-----
COMMENT:
AUTHOR: Fraxas
EMAIL: fraxas@hotmail.com
IP: 70.49.89.214
URL: http://fraxas.blogspot.com
DATE: 11/29/2005 04:10:41 PM
...and even better than that, the Web Developer toolabr for Firefox and Mozilla lets you edit that kinda stuff on the fly (I think it does a page reflow when you hit newline), so you can *immediately* see the consequences of any particular change.
-----
COMMENT:
AUTHOR: Peter Centgraf
EMAIL: peter@centgraf.net
IP: 207.250.187.98
URL: http://www.centgraf.net
DATE: 02/06/2006 04:10:39 PM
Andy Ko at the Carnegie Mellon HCI Institute has done this for visual 3D programming.  He calls it the "Whyline".

http://www.cs.cmu.edu/~marmalade/whyline.html
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: BBOP: the ubiquitous yet under-examined UI model
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: bbop_the_ubiqui

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/10/bbop_the_ubiqui.html 
DATE: 10/14/2005 09:30:00 PM
-----
BODY:
<p>Modern software includes a large and growing class of UIs that in my opinion has received insufficient formal recognition. UIs in this class share many traits and are distinctly different from the WIMP UIs of the 1980s and 90s. The WIMP acronym summarizes the hallmarks of that UI paradigm: WIndows, Icons, Menus, and a Pointer (usually a mouse pointer). I've noticed that I now spend more and more of my time on UIs that have neither windows, nor icons, nor a menu bar, nor a pointer. These clearly aren't WIMP interfaces, so what are they?</p>
<p>Consider the following:</p>
<p><a href="http://miksovsky.blogs.com/photos/uncategorized/media_center_widescreen.jpg"><img border="0" src="https://miksovsky.blogs.com/photos/uncategorized/media_center_television_scaled.jpg" title="Media_center_television_scaled" alt="Media_center_television_scaled" class="image-full" /></a><br />Microsoft Windows Media Center Edition<br />

</p>
<p><a href="http://miksovsky.blogs.com/photos/uncategorized/jetblue_kiosk_1.jpg"><img width="300" height="225" border="0" src="https://miksovsky.blogs.com/flowstate/images/jetblue_kiosk_1.jpg" title="Jetblue_kiosk_1" alt="Jetblue_kiosk_1" /></a><br />JetBlue check-in kiosk (designed by <a href="http://www.antennadesign.com/">Antenna Design)</a></p>
<p><img border="0" src="https://miksovsky.blogs.com/photos/uncategorized/cell_phone_app.png" title="Cell_phone_app" alt="Cell_phone_app" /><br />Typical cell phone screen<br />

</p>
<p>These UIs cross a diverse range of devices and environments. The first UI is for a media hub that is designed to be displayed on a widescreen TV, viewed from across a room, and navigated with an IR remote control. The second is for a kiosk for checking in at airports. Here the display is of average size, but the UI is negotiated with a touch screen. The third screen comes from a cell phone. This UI
is optimized for a small display size, and is navigated with a
directional pad.</p>
<p>Despite their different origins and contexts, such UIs nevertheless share many traits. Instead of multiple overlapping windows, the UIs show a single page at a time that consumes the entire display surface. The user navigates between pages in the style of a web browser, and can usually navigate backwards via a Back button. A page almost always presents a single task at a time for the user to focus on. Often (but not always) the task is stated directly on the page. Text, not icons, is generally used to guide the user. (If they're present at all, the icons play mostly a decorative role.) There are menus, but not the dropdown sort of menu found in a WIMP UI. Instead, these menus are lists of buttons that sit directly on the page at all times. In fact, buttons are by far the most common control found in such UIs.</p>
<p>Finally, there is no free-form pointer, or at least no dependency on one. You could argue that your fingertip is the pointer in a touch screen UI, but in practice a well-done touch UI feels completely different to me than a mouse-driven one. (E.g., in a touch UI, your finger clicks big fat buttons, with none of the dragging, double-clicking, or right-clicking that pervade WIMP UIs.) Many of these UIs dispense with a free-form pointer entirely. Instead, the user drives a keyboard focus around the screen (usually with a directional pad of arrow buttons) and presses a commit button like OK to invoke the targeted action.</p>
<p>The commonalities between such UIs are driven by a higher-level fact: they are meant to help users accomplish very specific tasks immediately, without any training or up-front learning whatsoever. People generally use them in a transient way—they get in, do what they need to do (pick a TV show, check in for a flight, make a call), then get out. Users generally don't spend more than a few minutes at a time interacting with the UI proper. Even an SMS-crazy teen doesn't live all day inside the phone's UI the way some people live inside WIMP environments like Microsoft Excel or Adobe After Effects.</p>
<p>UIs like the ones above form an important class of UI, yet this class seems to have received little or no formal recognition. I don't think there's even a commonly-accepted term for this paradigm. To facilitate discussions with my colleagues, I coined the acronym BBOP (&quot;bebop&quot;) to refer to such user interfaces. In the spirit of WIMP, the term BBOP summarizes the paradigm's hallmarks:</p>

<blockquote><p><strong>B</strong>uttons (as the predominant control type)<br /><strong>B</strong>ack stack (as a organizing principle for navigation)<br /><strong>O</strong>ne Task (one task at a time, often explicitly stated)<br /><strong>P</strong>age-based (a single page consumes the entire visible screen area)</p></blockquote><p>Once we had a term for this, we began recognizing BBOP UIs in more and more places: DVD players, in-car navigation systems, iPods, and so on. I'm personally hoping to see more discussion and analysis of BBOP UIs (or whatever they end up being called) in the future. Even more, I'm hoping to see better support in UI platforms for creating them.<br /> </p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: andr3
EMAIL: me@andr3.net
IP: 81.84.138.45
URL: http://andr3.net
DATE: 10/15/2005 10:15:12 PM
Great article.

It's a fact that some recent UIs are shifting from the "organize information in sub-menus" idea to the "show the user what he can do, pronto" one. After reading this article, it's so obvious. ;) BBOP is everywhere. ATM machines, 

It makes the UI much easier to learn and use, but can't be accomplished in environments with lots of tasks (such as MS Excel, like you mentioned)

And even though WIMP is probably the best approach for those applications, we can already see a shift in the same direction in Office 12. (Not that they're the ones making the rules, but it's a tendency.)
-----
COMMENT:
AUTHOR: Cj
EMAIL: cjpeters@mykohh.com
IP: 64.236.240.190
URL: http://www.mykohh.com
DATE: 11/03/2005 07:27:15 AM
Great article!  I aurthor DVD's and I refer to BBOP as the DVD menu approach. And you are correct when you say these UI's are for those that want to complete a task and get on with what they have to do. I can't tell you how many times my wife only uses the play all button on a dvd. She never watches the extras, so she never navigates it. But I think BBOP is the way to go . Why over complicate something at first use. Also, I think that BBOP could be a good starting interface for many apps. Once the user is comfortable with the app, they should have the option to skip the BBOP interface and get to the meat.
-----
COMMENT:
AUTHOR: Craig Stuntz
EMAIL: craig_stuntz@acm.org
IP: 24.106.104.204
URL: http://blogs.teamb.com/craigstuntz/
DATE: 11/29/2005 08:42:34 AM
ISTR that back in the DOS days we called apps which looked like these "menu-driven."

Of course, that was before windows and top menus really existed.

I'm thinking of apps like PrintShop and early versions of PCTools.
-----
COMMENT:
AUTHOR: kbiel
EMAIL: blogcomments@biel.us
IP: 10.0.2.190
URL: 
DATE: 11/29/2005 10:53:29 AM
I believe that Microsoft already gave these interfaces a name: wizards.
-----
COMMENT:
AUTHOR: Stu
EMAIL: stuartbrockmanNOSPAM@hotmail.com
IP: 87.74.42.17
URL: 
DATE: 11/29/2005 07:59:01 PM
Like Cj said, these are menu-driven UIs. 
They are nothing new, they've been around since at least the days of 8-bit micros.
No point in coining a new acronym, no point in examining  UIs based on principles well established in the 1980s.
-----
COMMENT:
AUTHOR: Dr Herbie
EMAIL: herbie.smith@ntlworld.com
IP: 217.46.168.169
URL: 
DATE: 12/02/2005 04:29:55 AM
This concept is called an 'inductive' UI by Microsoft, and they show MS Money as an example.

I think it's a great idea for rarely-used UI tasks (like tasks performed one a month or year) there the users may forget how to perform the task between uses.

(Good blog, by the way).

Herbie

-----
COMMENT:
AUTHOR: Dr Herbie
EMAIL: herbie.smith@ntlworld.com
IP: 217.46.168.169
URL: 
DATE: 12/02/2005 04:41:42 AM
OOps!  You put the inductive UI into MS Money, didn't you?

I should really pay more attention ...

Herbie
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: The fractal nature of UI design problems
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: the_fractal_nat

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/10/the_fractal_nat.html 
DATE: 10/03/2005 10:35:00 PM
-----
BODY:
<p>Getting UI right requires obsessive attention to detail, particularly if you're building on a platform that doesn't provide substantial help for common UI patterns. I've recently been designing and implementing a minor feature in a Windows client application, and can't believe how long it's taking to get this feature right. The feature? Remembering the position of an application window across sessions.</p>
<p>Users like applications that remember the state and position of windows across application sessions. They can pick a window arrangement they like, close the app whenever they want, and next time have everything just the way they like it. In the case of the Microsoft Windows APIs (both Win32 and .NET), the platform doesn't provide any built-in support for remembering window position. The platform documentation blithely tells you to do this work yourself, and sort of implies it won't be very hard. Hah.</p>
<p>Here's what the learning curve looks like during a sequence of design/implement/test iterations:</p>

<ol><li>Designer: This feature is easy to deliver: when the user closes the window, we'll save the window's current state (on Windows, this is either maximized, minimized, or normal) and the window's current position.<br /><br /><em>User: Huh. This kind of works, but if I close the application while the window is minimized (sometimes this happens if I log off while I've got a bunch of apps minimized), the next time I start the application, the app comes up minimized. That's dumb.</em><br /><br /> </li>

<li>Designer: Okay, we'll only save the window state and position if the window's maximized or normal.<br /><br /><em>User: That's better, but sometimes it still doesn't do the right thing. If I position the window, then minimize it, then close it, the app doesn't remember my window position.</em><br /><br /> </li>

<li>Designer: That's easy to fix: we'll always save the window position, but we'll only save the window state if the window is normal or maximized.<br /><br /><em>User: This doesn't work.</em><br /><br /> </li>

<li>Designer: Ugh. It appears that, if a window is minimized, it's &quot;window position&quot; data is essentially junk, and not the window's last meaningful position like we'd expected. To fix this, whenever the user positions the window in its normal state, we'll remember that position as the user's preferred position for the window. Then, when the user closes the window, we save this preferred position (not the current position, which could be junk). Additionally, if the window is maximized or normal, we save the window state too.<br /><br /><em>User: Not bad! This seems to work most of the time. How about this, though: I position the window where I want it, then maximize it, then minimize it, then close it. The next time I open the app, the window is in the normal state—not the maximized state the I last saw it in. That's odd.</em><br /><br /> </li>

<li>Designer: You are one tough customer. Fine: whenever the user puts the window into the normal or maximized state, we'll remember this as the preferred state. Then, when the user closes the window, we save this preferred state (regardless of what state the window is currently in). Satisifed?<br /><br /><em>User: Not by a long shot. You see, I have a laptop. I've also got this external monitor on my desk—a monitor whose dimensions are different than those of the laptop's built-in screen. If I close the application when the laptop is docked, then reopen the application when the laptop is undocked, the application tries to come up in a position that no longer makes sense. Sometimes I can't even get to the window with the mouse because the window comes up off-screen.</em><br /><br /> </li>

<li>Designer: Crap. Okay, whenever we're recording the user's preferred position for the window, we'll also save the current dimensions of the monitor itself. Then, if the app is opening and the monitor's dimensions have changed, we'll do our best to interpolate a meaningful position for the window in the new monitor dimensions.<br /><br /><em>User: This helps a bit, but it's not perfect. Each time I move between the docked and undocked state, the window position shifts a bit. I really want the window to be one size when I'm undocked, and a different size when I'm docked.</em><br /><br /> </li>

<li>Designer: Urg. To do this right, we'll have to save a window's position in a list that stores a monitor's size and the user's preferred size for the window whenever the window is opened on a monitor of that size. Over time, this list will grow to encompass all monitor sizes the user likes to use, and their preferred window size for each of these monitor sizes. Satisfied now?<br /><br /><em>User: Mostly. Did I mention I recently bought a high DPI monitor? I was thinking that your window size interpolation routine should take into account physical screen inches instead of assuming a fixed pixel size...<br /><br /></em> </li>

<li>Designer: Please, please go away.</li></ol>





<p>And so it goes.&nbsp; Since the OS doesn't provide any help, every ISV rolls their own
solution for this, with the unsurprising result that they all stumble in different ways at some point along this path. Most seem get to step three or so. (Internet Explorer 7.x, for example, has the bug described by the user after step four.) If someone were willing to bake support for saving window state into Windows, the work would be leveraged across enough apps that it'd be worth the time to implement a deep solution. Even then, there'd still be room for improvement.</p>
<p>There is no magical point where perfection is reached. Good design is a fractally hard problem: the more closely you focus on any given feature, the more rough edges you find to polish. The only sane approach is to iterate in an area until you've produced a solid user experience for a substantial portion of the cases you care about, then move on.</p>
<p></p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Mike Weller
EMAIL: mike@we11er.co.uk
IP: 137.205.114.158
URL: http://www.we11er.co.uk
DATE: 10/04/2005 10:17:46 AM
Heh, I never thought of the laptop/multimonitor one... damn, now I have to go fix my app :P
-----
COMMENT:
AUTHOR: Ed
EMAIL: fast@socal.rr.com
IP: 128.125.133.112
URL: 
DATE: 10/04/2005 03:43:02 PM
I love it when I play a game at 640x480 and then after I quit, all of my windows are resized, my IM app is moved into the center of the screen, etc, etc.  Add that to the list of things you have to keep track of...
-----
COMMENT:
AUTHOR: ChiaFong Choo
EMAIL: chiafong6799@yahoo.com
IP: 210.193.53.1
URL: 
DATE: 10/05/2005 03:07:27 AM
Interesting... 

For IE6, whenever you max it, quit and comeback, it will become a "full screen" size and not a max state. As in the app occupy the whole screen minus the taskbar but still can be drag around unlike the max state.

For me, I wasn't that detail in getting to step 6, my app just detect whether any part of its window is out of the current monitor resolution, if yes, the app will be centered to the current resolution.  I skip step 7 and go direct to step 8. Ha!!!
-----
COMMENT:
AUTHOR: Justin Magaram
EMAIL: justin@magaram.com
IP: 209.20.186.7
URL: 
DATE: 10/05/2005 08:03:12 PM
Why not always maximize? This would seem to be the 90% solution since most people do 1 thing at a time, it maximizes visible information for the primary task at hand, and the taskbar makes it easy to switch to another window when you want to do something else. There are times I have multiple windows visible, like copying from Excel to Word, or using the Calculator, but these are not the common case. I don't use IM but I could see why this type of app would be good to run in a small window somewhere while you're doing something else.
-----
COMMENT:
AUTHOR: chris hollander
EMAIL: chrisca208@msn.com
IP: 165.155.112.1
URL: http://spaces.msn.com/members/objective
DATE: 10/06/2005 01:31:48 PM
you forgot one; i loose windows all the time due to tablet orientation issues. :) add docking into the mix, and its game over.

Most frequently, the outlook logon screen ends up lost in some non existant, off screen rotated out region of my desktop... killing outlook (the hard way) and possibly logging out of windows are my only options. 


-----
COMMENT:
AUTHOR: Ben Hollis
EMAIL: brh@numbera.com
IP: 66.235.49.69
URL: http://brh.numbera.com/
DATE: 11/07/2005 08:35:51 PM
I've finally gotten around to posting my answer to this: a C# class that, as far as I can tell, handles everything but the high-DPI monitor issue. Check it out at http://brh.numbera.com/components/winforms/windowstatemanager/ .
-----
COMMENT:
AUTHOR: Richard Gadsden
EMAIL: richard@gadsden.name
IP: 213.146.128.194
URL: 
DATE: 11/29/2005 08:32:12 AM
Why not always maximize?

I used to think that until I got a 22" monitor.  Run at 1600x1200 on a 22" monitor and you quickly find that you'd rather change apps by clicking in their windows.  Also MDI=bad.
-----
COMMENT:
AUTHOR: Ben
EMAIL: ben.karas@gmail.com
IP: 131.107.0.73
URL: 
DATE: 11/29/2005 11:37:55 AM
You forgot step 2a:

Well, I launched the app twice in a row but it looks like the app only opened once.  I discovered a week later that the second window opened directly on top of the first one.  Can you make them shift a little?
-----
COMMENT:
AUTHOR: peterchen
EMAIL: hauptmannp@yahoo.com
IP: 217.246.49.119
URL: 
DATE: 11/30/2005 09:17:51 AM
Heh - I always thought window positioning was a "personal obsession", now I know I'm not alone :)

I followed up to step 6, then flanked the whole resolution / DPI issue by storing a *relative* position.


-----
COMMENT:
AUTHOR: Chris Radke
EMAIL: cradke@hotmail.com
IP: 64.207.54.70
URL: 
DATE: 12/01/2005 05:09:04 PM
You also need to take in account the location and size of the TaskBar.  I've seen several programs position themselves underneath the TaskBar if I move it to the top of my screen or increase it's size.  My positioning routine converts from Screen to Workspace coordinates and will move the Window down and right and shrink it if necessary to ensure the entire window is on the visible part of the screen.  This was such a widespread problem that, according to Raymond's blog http://blogs.msdn.com/oldnewthing/archive/2003/09/12/54896.aspx, it is why the TaskBar is at the bottom of the screen and not the top.
-----
COMMENT:
AUTHOR: greg
EMAIL: greg@greg.greg
IP: 69.129.197.97
URL: 
DATE: 04/03/2006 07:50:09 AM
The UI problem is a difficult one, but I can't help but think that most of the problems you describe are an intrinsic problem in the Windows development model as a whole. Since Windows needs to maintain backwards compatability, there's no chance that it's going to completely revamp itself to clear out the things that create problems.

So what do we get in the end, kids? A 10-year old operating system, inundated in nasty little hacks that make it look new and shiny.
-----
COMMENT:
AUTHOR: Richard Harlos
EMAIL: merwyck@gmail.com
IP: 65.222.181.131
URL: http://richardharlos.com
DATE: 04/05/2006 08:30:59 AM
What about saving the window position and size as a percentage of the current monitor's dimensions?  That way, assuming we're not minimized or maximized, re-opening the application on a different display will always be _proportional_ to the current display rather than explicitly dictated?

Just a thought :)
-----
COMMENT:
AUTHOR: peterchen
EMAIL: hauptmannp@yahoo.com
IP: 84.179.155.186
URL: 
DATE: 03/29/2009 06:21:21 AM
Richard, that's waht I did :) It works well if you have scalable information (such a view port, charts, etc.). I'm even usign t for MDI childs. If you have fixed-size forms, it wouldn't work so well obviously. 

greg - I don't think that's a Windows history problem, but illustrates a more fundamental aspect of user interfaces, and the complex interactions between presumably unrelated features. 
-----
PING:
TITLE: 差点被dojo搞死
URL: http://blog.csdn.net/g9yuayon/archive/2007/03/02/1518916.aspx
IP: 211.100.21.184
BLOG NAME: g9
DATE: 03/01/2007 07:03:24 PM
  
做WEB界面编程很痛苦。菜鸟做WEB界面编程比黄连还苦。
 
Dojo 提供了一个Tooltip Widget。当我们的鼠标移到指定的地方时，一个提示框就弹出来了。

 
再把Tooltip稍稍扩展一下，就可以在弹出来的Tooltip里放任意HTML代码。加上一点AJAX调用，一个内容丰富的提示框就做出来了：

 
鼠标可以在tooltip里自由移动。鼠标移出tooltip，该tooltip自动消失。够简单吧？可惜接着我就被dojo玩儿死了。
 
展开任何一个的下拉框，把...
-----
PING:
TITLE: Simple things, fractal scenarios
URL: http://blogs.msdn.com/alexbarn/archive/2005/10/07/478493.aspx
IP: 209.34.241.64
BLOG NAME: Alex Barnett blog
DATE: 10/07/2005 10:10:41 PM
Jan hMiksovky as written a wonderful little post on the challenges of the user experience (UX) design...
-----
PING:
TITLE: Fractal frustration
URL: http://www.aminus.org/blogs/index.php/fumanchu/2005/10/04/fractal_frustration
IP: 66.126.82.98
BLOG NAME: The Hand of FuManChu
DATE: 10/04/2005 08:32:04 AM
Okay, coworkers, now you know: when I put my hands over my eyes and sigh heavily, it's because I'm on step 8. Actually, the more I learn about IT, the better I get at seeing step 8 coming when you're still on step 2. So please bear with me whenever I s...
-----
PING:
TITLE: Software Design and Fractals
URL: http://www.madprops.org/cs/blogs/mabster/archive/2005/10/04/2719.aspx
IP: 202.173.189.75
BLOG NAME: Mabsterama
DATE: 10/04/2005 12:55:13 AM
From flow|state:
Good design is a fractally hard problem: the more closely you focus on any given feature,...
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: My complication had a complication
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: my_complication

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/10/my_complication.html 
DATE: 10/02/2005 10:01:20 AM
-----
BODY:
<p><img border="0" class="image-full" alt="Microsoft_application_error_reporting" title="Microsoft_application_error_reporting" src="https://miksovsky.blogs.com/photos/uncategorized/microsoft_application_error_reporting.png" /></p>
<p>Ironic, isn't it? Microsoft Outlook hung this morning, and when Microsoft Application Error Reporting tried to report the error, that hung too. I suppose I should be grateful that the above dialog didn't hang as well. 

</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Stephen Mok
EMAIL: stephen@stephenmok.net
IP: 203.45.90.172
URL: http://www.stephenmok.net/blog
DATE: 10/04/2005 07:14:12 AM
Ah yes... funnily enough, this happened to me for this first time yesterday too, although it was Synchronization Manager that was responsible in the first place, not Outlook.

Makes you wonder tho, huh? When Dr Watson crashes, something's gone wrong!
-----
COMMENT:
AUTHOR: peterchen
EMAIL: hauptmannp@yahoo.com
IP: 80.243.55.242
URL: 
DATE: 11/27/2008 02:54:37 AM
"My complication had a complication"
 - thanks for that reference. We are all in it together. :D
-----
PING:
TITLE: Doble cuelgue
URL: http://www.edrevo.com/blog/?p=276
IP: 62.149.130.176
BLOG NAME: edrevo.com - un moc.overde en tu pantalla
DATE: 10/02/2005 11:41:19 AM
	Sé que este post es un poco geek, pero al chico de flow|state se le colgó el Outlook, y al salir el cuadro de Este programa se ha cerrado incorrectamente. ¿Desea enviar un informa de esta incidencia a Microsoft?, ese mismo aviso se le...
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: LCDs recreating old physical controls (whether or not that makes sense)
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: prius_lcd

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/09/prius_lcd.html 
DATE: 09/22/2005 10:20:00 PM
-----
BODY:
<p>As LCD prices comes down, we can look forward to seeing small LCDs appear on every device or appliance we own. During this transition, manufacturers are likely to replace physical device controls with an on-screen UI that exactly duplicates the old physical controls, sparing them the real labor of thinking.</p>
<p>Consider the LCDs showing up in cars. My Toyota Prius is a great little car, but its LCD is the weak point of the car's design. Most of the time, the LCD displays a power transmission diagram that lets you know when you're using the battery in some way. During a test drive, this diagram serves the useful function of giving the salesperson something to point at, because otherwise it's hard for them to prove to you that you're in a hybrid car. After the first week of actually owning the car, the power transmission diagram is mostly pointless.</p>
<p>The Prius designers did come up with some other uses for this LCD, using it to replace a random subset of controls that used to take the form of physical hardware buttons and knobs. For example, the LCD controls most—but not all!—of the radio functions. The Prius designers have carefully preserved many of the limitations of the old controls, particularly the hardware radio preset buttons (the original &quot;radio buttons&quot; in user interfaces):</p>
<p><img border="0" class="image-full" alt="Toyota_prius_radio" title="Toyota_prius_radio" src="https://miksovsky.blogs.com/photos/uncategorized/toyota_prius_radio.jpg" /></p>
<p></p>
<p></p>
<p></p>
<p>
<p>Years ago I saw a demonstration of a bank ATM UI that had been completely redesigned from the ground up to meet the needs of the bank's blind customers. (If I recall, it was designed by Chase in New York City.) The bank's design team recognized that the easiest regions to find by feel alone are the four corners of the screen. They created a UI in which every page had four huge buttons that each took up a full quadrant of the screen. The buttons ran all the way to the edge, because that made it easier for the user to be sure they were pressing something. (The Prius designers studiously keep all their buttons away from the edge of the screen. It probably looks better that way in a graphics editor on a computer screen in the design team's office.)</p>



<p>Perhaps this bank ATM UI could inspire better on-screen UI for car LCDs, making it easier to change stations without risking death. There are surely many other factors at play here (I'm no car designer), but the point remains that there are many ways to take better advantage of a graphical interface than simply duplicating the old way things were done before in hardware.</p>
<p>As LCD prices drop to the point where they approach the cost of physical hardware buttons, LCDs will crop up absolutely everywhere. Some manufacturers will get this transition right, but most probably won't, at least the first time. It's a virtual certainty someone will end up making a toaster with a tiny touch screen showing a picture of knob from &quot;Light&quot; to &quot;Dark&quot;.<br /> </p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Carl Manaster
EMAIL: manaster@pobox.com
IP: 66.75.243.20
URL: http://undisclosed-recipients.blogspot.com
DATE: 09/23/2005 06:56:46 AM
> Most of the time, the LCD displays a power transmission diagram...

On my Prius, most of the time, the LCD is off.  To me, that's been the best part of the car's UI - you can use it fine without any attention to the technology.  It works, as it were, "just like a car."  And the fancy power flow diagram provides entertainment for passengers - so far everyone has wanted to see it.
-----
COMMENT:
AUTHOR: angchenm
EMAIL: angchenm@yahoo.com
IP: 67.40.199.230
URL: 
DATE: 09/29/2005 10:52:27 PM
I have a prius too and keep the screen on so I can use my radio/audio too. The thing that gets me is that to access the audio screen, you have to push the stupid round button labeled "audio"! So the 1 step process becomes 2 with the addition of the LCD screen. Hope future LCD encorporations will be more thoughtful.
-----
COMMENT:
AUTHOR: Factory
EMAIL: t@t.com
IP: 147.10.46.249
URL: 
DATE: 11/30/2005 12:04:45 AM
 Also note that the buttons are not the actual names of the stations themselves, but the numbers beside them. Apparantly one has to keep the numbers from the old design too. :)

"As LCD prices drop to the point where they approach the cost of physical hardware buttons, LCDs will crop up absolutely everywhere."
  I work for a scientific equipment manufacturer, the current fad is to replace front panels with an interface to a PDA, which basically runs a small scale version of the full control software than normally runs on PCs. So LCDs may not be the next step.
-----
COMMENT:
AUTHOR: laloca
EMAIL: laloca@nospam.org
IP: 69.143.178.190
URL: http://laloca.org
DATE: 12/02/2005 12:38:21 PM
i, too, have a prius, and i also keep the LCD screen off most of the time.  as far as the question of preset radio stations go, i just use the steering wheel controls to go through them, rather than taking my eyes off the road to change channels.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Vista UX details starting to arrive
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: windows_vista_u

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/09/windows_vista_u.html 
DATE: 09/15/2005 09:30:00 PM
-----
BODY:
<p>As part of Microsoft's Professional Developers Conference 2005, the company has released more information on how to design user experiences for Windows Vista. I was the UX architect on Vista for a number of years, so it's good to see this information finally starting to coming into the light of day.</p>
<p>(As it turns out, Microsoft has created a remarkably poor user experience for reading their guidelines on user experience. You have to go to a section on Microsoft's MSDN developers site for the <a href="http://msdn.microsoft.com/windowsvista/uxguide/">Windows Vista UX Guidelines</a>. You need to go through some Windows verification foolishness, although I'm baffled why it matters what platform you're using</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p>></p>
<p>This wizard style is, in fact, an operating system feature designed specifically to <a href="http://miksovsky.blogs.com/flowstate/2005/08/make_every_piec.html">make every piece of text count</a>. Gone are the big pointless graphics that took up a third of the page, and a single piece of instruction text replaces the old stack of redundant headings. Hallelujah. It's gratifying to see the evolution of direct OS support for the <a href="http://msdn.microsoft.com/library/en-us/dnwui/html/iuiguidelines.asp">inductive UI style</a> I developed way back in the late 90s for Microsoft Money.</p>

<p>Some Vista UX guidelines are specific to Vista development, but many of them make just as much sense for products that ship on Windows XP, OS/X, or Linux. Worth a look.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: chucker
EMAIL: 
IP: 70.52.15.219
URL: http://profile.typekey.com/chucker/
DATE: 09/15/2005 10:28:18 PM
Unfortunately, they still don't use verb-based buttons. The first screenshot ("Do you want to save [..]") shows that even with these "improved UX guidelines", the user is needlessly slowed down. Renaming the buttons to "Save", "Don't Save" and "Cancel", as two certain other major GUI systems (Aqua and GNOME) have done, would speed up the user's process, as reading the question becomes optional.

Users don't like reading dialogs, especially when they include a lot of text. I can only hope that Microsoft will reduce the amount of text ( http://album.wincustomize.com/image.axd?path=R43M9TfjxvHojPHKRls8at1CA94cTWSWe558f3hJlSblUD2IKPPfkA== , however, leads me to believe that that is *not* the case), at least.
-----
COMMENT:
AUTHOR: Jônatas Gardin
EMAIL: jonatas_gardin@uol.com.br
IP: 10.1.64.146
URL: 
DATE: 09/16/2005 10:39:11 AM
So you're the guy who developed the Inductive User Interface.

Glad to meet you.

I've found this Guideline way back and using it as a through reference.

Keep the good things coming.
-----
COMMENT:
AUTHOR: Tjeerd Hoek
EMAIL: tjeerdh@msn.com
IP: 71.112.102.149
URL: http://spaces.msn.com/members/tjeerdh/
DATE: 09/22/2005 07:40:26 PM
Hi Jan, Thanks for bringing this to the attention of folks. Send us feedback or keep commenting in this blog. It seems you have some knowledge about these things, hahaha  ;). Seriously, we appreciate the feedback hugely. Our goal is to make guidelines that are actually useful in explaining how to build great UX rather than just 'spec' it, but different audiences ask for different type of content and granularity. It will be a work in progress for a while. So let us know. The previous poster e.g. is 100% correct, that Save dialog is not to design/goal of explicit buttons (something we specifcally point out). And that dialog in the games experience is also something we need to fix still. Inappropriate use of command links and explanatory text (the reason why that team did this is relatively obscure but there is one). 
In general this stuff is still in massive draft state. Especially artwork. We're still closing down on a lot of things. Oh and on the poor UX for reading them: this was for now the fastest and most efficient way; and also more of a barrier to reflect the DRAFT state. We will eventually have the full site on MSDN. 
-----
COMMENT:
AUTHOR: Peter Gut,mann
EMAIL: pgut001@cs.auckland.ac.nz
IP: 219.88.92.227
URL: 
DATE: 11/30/2005 06:09:04 AM
I mentioned the problem of obtaining the guidelines to an Apple-using friend of mine who commented:

>The same thing at Apple was - well - a one minute search.

I tried it myself, googling "apple user interface guidelines" takes you straight to the web page.  Apple never asks you to prove you're a Mac OS X user, they just give you all the docs as printable PDFs (as well as HTML), not just a pile of crappy web pages.  I'm now reading the Mac UI docs in place of the Microsoft ones...
-----
COMMENT:
AUTHOR: Jeff Paul Internet Business
EMAIL: blogs@internetapprenticemillionaire.com
IP: 116.71.36.247
URL: http://www.internetapprenticemillionaire.com
DATE: 03/02/2009 09:36:16 PM
I find internet marketing the same as marketing a product in the real world. In real marketing one really has to go through different means to promote a brand and product. Same tasks are applied in internet marketing but this can also be done at the comfort of one’s bedroom.

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Media Center nicely blends data sources to create album list
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: media_center_ni

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/09/media_center_ni.html 
DATE: 09/12/2005 10:00:00 PM
-----
BODY:
<p>Microsoft Windows Media Center Edition contains a UI nugget worth a close look: the My Music area's list of albums includes any CD that happens to be in the drive:</p>


<p><a href="http://miksovsky.blogs.com/photos/uncategorized/media_center_my_music_showing_inserted_c.png"><img border="0" alt="Media_center_my_music_showing_inserted_c" title="Media_center_my_music_showing_inserted_c" src="https://miksovsky.blogs.com/photos/uncategorized/media_center_my_music_showing_inserted_c_1.png" class="image-full" /></a></p>
<p>This sort of thing looks obvious after the fact, but consider the fact that the list is blending data from two completely different sources: 1) Media Player's local music database, and 2) whatever CD happens to be inserted in the drive. All actions in the UI work essentially the same regardless of what kind of item is selected (with the difference that a CD can be ripped).</p>
<p>Faced with this design problem, most teams would have created a UI that directly reflected the underlying data model. This would force the user to deal with two distinct UI elements: one area for the the albums already in the database, and a separate area for the local CD drives. (This is, in fact, what Windows Media Player does.)</p>
<p>The Media Center team did a bunch of work to let the user work at the right level of abstraction: everything in the list is an album, regardless of whether it's ripped yet or not. This sort of thing doesn't come up every day, but it's worth thinking about whether your own application could benefit by adopting this nice trick.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: gr33n
EMAIL: plusminus@inbox.lv
IP: 80.233.165.191
URL: 
DATE: 09/13/2005 10:08:49 AM
a bit off topic, but i noticed "My Music" in the picture and remembered - why everything has to be named MY? My Music, My Pictures, My Movies, etc ... what's wrong with just "Pictures", "Music", etc?
-----
COMMENT:
AUTHOR: Cameron
EMAIL: kamrantu@hotmail.com
IP: 128.125.36.74
URL: 
DATE: 09/15/2005 08:44:56 AM
Ya I dislike the 'My' in everything as well
-----
COMMENT:
AUTHOR: john jefferson
EMAIL: johnnjefferson@hotmail.com
IP: 70.225.128.89
URL: 
DATE: 09/18/2005 07:09:32 AM
I have mce 2004 and just learned about the 2005 release and also learned that HP is no longer providing it and of course, neither does Microsoft.  Anybody know where I can get an upgrade?
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Google Earth: Drop-dead gorgeous satellite photo rendering with clunky visuals
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: google_earth_dr

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/09/google_earth_dr.html 
DATE: 09/07/2005 10:35:00 PM
-----
BODY:
<p>My favorite app of the past year has been the satellite imaging client <a href="http://earth.google.com">Google Earth</a>. Much of this product's design is absolutely state of the art, but the fact that they've done such a good job in the core UI makes some really clunky parts stand out.</p>
<p> If you haven't tried Google Earth yet, you owe it to yourself to stop what you're</p>
<p></p>
<p></p>
<p>hole. The core user experience remains the same: a set of navigation controls let you manipulate the virtual globe and camera. Given the complexity of doing anything in 3D, I think they've done a reasonable job. Most of the magic in the user experience comes from what happens under the covers: the high performance incremental downloading and caching of huge images that all happens in the background, with exactly the right degree of progress feedback in the UI.</p></p>
<p>Since Google acquired Keyhole and rebranded it as Google Earth, they've tweaked the UI a bit. Most</p>
<p>
<p>What's really striking are the parts of the UI that have remained completely untouched. Just before the product shows you a magnificent, full-motion, high resolution magic 3D globe of the whole darn planet, you see... a gray dialog box:</p>

<p><a href="http://miksovsky.blogs.com/photos/uncategorized/google_earth_initialization.PNG"><img border="0" alt="Google_earth_initialization" title="Google_earth_initialization" src="https://miksovsky.blogs.com/photos/uncategorized/google_earth_initialization.PNG" /></a></p>

I'm a believer in trying to establish </a><a href="http://miksovsky.blogs.com/flowstate/2005/07/positive_emotio.html">positive emotion from the point of first contact</a>, and dialogs like this don't help. This would be a lame dialog in any product, but it's particularly odd to see something like this—something that clearly no one has spent any time on since the day the dev first coded it—followed immediately by one of the coolest visual experiences available in any product on any platform. What's even odder is that the above status dialog appears in the startup sequence <em>after</em> a rather attractive splash screen. To cap it off, the dialog is pointless: the status text doesn't communicate any information that's meaningful to the user beyond the fact that the app is starting up—precisely the fact communicated by the splash screen that precedes this dialog.</p>
<p>Anyway, the fact remains that Google Earth is such a draw-droppingly cool product that the clunky parts don't spoil an amazing user experience. Now that Google Earth has finished downloading, go take the next two hours off from work looking at every place you've ever lived.



</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Michael
EMAIL: michael@sys-adm.dk
IP: 80.160.130.230
URL: 
DATE: 09/11/2005 03:51:31 AM
You could make a comparison with NASA's program that does the same thing :)

http://worldwind.arc.nasa.gov/
-----
COMMENT:
AUTHOR: ömer
EMAIL: atmaca14@mynet.com
IP: 85.101.6.190
URL: http://atmaca14.sitemynet.com
DATE: 09/28/2005 11:00:22 AM
slm siten süper

-----
COMMENT:
AUTHOR: ömer
EMAIL: atmaca14@mynet.com
IP: 85.101.6.190
URL: http://atmaca14.sitemynet.com
DATE: 09/28/2005 11:01:26 AM
slm siten süper

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: How big is a big download these days?
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: how_big_is_a_bi

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/09/how_big_is_a_bi.html 
DATE: 09/05/2005 09:00:00 PM
-----
BODY:
<p>I've noticed that a previously answered question has recently become open again: where does a typical user place their threshold for a download that's too big?</p>
<p>Companies that distribute client software via a web download used to agonize over how to reduce their download size in order to encourage adoption. Browser developers in particular used to crow about how their download was smaller than their competitors. This was a big deal in the days of dialup. If I recall, a rule of thumb in the mid 90s held that each 1MB of download would take 10 minutes over a typical dialup connection of that period. Worse, dialup connections could easily fail, forcing the user to sit through the long download again. A user who had to devote an hour of their life to babysit your 6MB download was quite cautious about clicking the &quot;Download Now&quot; button. The user was also concerned about how much disk space your product would ultimately eat up was everything was installed.</p>
<p>The relevant factors have changed significantly: many users have broadband connections, download managers exist to cope with flaky connections, and hard drive space is easy enough to come by. Many companies now seem to pay scant attention to their download size, so I can only assume many users don't care either. Download Adobe's Reader product (a business requirement these days) and you'll see a lightning quick 500K download... of Adobe's Download Manager, which then brings down another 80MB or so of software—including some other Adobe products slipped in for good measure.</p>
<p>One reason this question is interesting to client software designers is that there are some pretty interesting client runtimes coming down the pike that open up some great UI possibilities at the expense of download and install size. The forthcoming .NET Framework version 2.0 package is 22MB. The Windows Presentation Foundation (&quot;Avalon&quot;) or Windows Communcation Foundation (&quot;Indigo&quot;) add more on top of that. If you're building a product that itself already depends on broadband use, does the download size of your client even matter at all? If anyone has actual, recent data (not anecdotal experiences) on how todays user's react to download size, I'm interested in hearing it.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: RichB
EMAIL: rbirkby@gmail.com
IP: 213.208.111.244
URL: http://blogs.aspadvice.com/rbirkby
DATE: 09/06/2005 04:15:24 AM
Solution: Use Thinstall
-----
COMMENT:
AUTHOR: Ben
EMAIL: dalangalma@numbera.com
IP: 66.235.49.69
URL: http://brh.numbera.com/
DATE: 09/10/2005 06:56:35 PM
I'd say it depends. 10MB for Google Earth seems surprisingly small, whereas Quicktime 7 (even without iTunes) is a mind-blowing 35MB, and as you mentioned, Acrobat is far larger than you'd imagine. I'd say the file size should be in line with what people expect the app to do. A "simple" app that views PDF files should be no more than a couple megabytes at most. See the tiny Flash Player for a good example. On the other hand, a fully-featured piece of software like Picasa might be able to get away with much more.
-----
COMMENT:
AUTHOR: Dan S
EMAIL: nospam@nospam.com
IP: 24.16.90.226
URL: 
DATE: 11/05/2005 01:52:07 PM
I work for a large consumer software company that has several million copies of our client software installed.  We still find that there is a direct relationship between download size and aborted install; you see significant losses above 5 MB.  

I asked a friend on the CLR team what MS's best development solution was for an app that needed to have a small footprint and widespread compatability while maintaining ease of development.  After thinking about it for a minute he said, "We don't have one."
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: The tyranny of 1 or N
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: the_tyranny_of_

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/08/the_tyranny_of_.html 
DATE: 08/18/2005 09:20:00 PM
-----
BODY:

<p>UIs support working with one thing at a time, or with a potentially infinite list of N things, but rarely for dealing with a small fixed number of things. This is too bad—there are some cases where supporting a small fixed set leads to a simpler user experience.</p>
<p>Consider the typical example of a list in this Windows XP Control Panel:</p>
<p><img border="0" src="https://miksovsky.blogs.com/photos/uncategorized/phone_and_modem_options.png" title="Phone_and_modem_options" alt="Phone_and_modem_options" />

</p>
<p>Let's see... How many modems do you think the typical PC has? I have no idea, but I'm guessing the numbers are something like: 70% of PCs have no modem, 29% have 1 modem, and 1% have a number of modems between 2 and 4.</p>
<p>You couldn't guess this from the UI above, though. The UI makes it look like it's common for a PC to have dozens of modems. The list box alone is tall enough to show about 13 modems comfortably before it needs to scroll. Who has 13 modems?</p>
<p>The product development process that produces a UI like the one usually goes like this. A designer builds a UI to edit settings for one modem, since that's the common case. This UI includes a collection of edit controls like dropdown lists for things like modem speed, duplex handing, etc. A tester on the team complains because they've got a machine that has two modems, so the designer is told they need to support two modems. The designer discusses this with the developer, who says that they don't want to have duplicate the whole set of edit controls to support settings for two modems: copying the controls is a pain, and besides, the code gets ugly. To a developer, the only numbers that make sense for UIs are 1 and N. If you don't want a UI to edit one thing, then put in a list box that lets you edit an essentially infinite number of things. You've not only solved the problem of the person with two modems, you've covered every conceivable configuration ever. Problem solved.</p>
<p>This is weak thinking. The team may discover a significant new problem on their hands: the vast majority of users who come to this UI to set up their one and only modem must now first go through an extra, non-obvious step. The user comes into the dialog to find a big empty white rectangle, with most of the controls disabled, and it's not clear at all that the thing they need to do is click the &quot;Add...&quot; button.</p>
<p>It takes guts to hardcode a UI to deal with a fixed number of things that covers 99% of your scenarios. One group of designers who consistently do this right are people who design cellphones. List management on a cellphone is a pain, so whenever they can, the designers give you a fixed list of things. My cellphone lets me switch between different &quot;profiles&quot; by selecting from a fixed list of exactly eight items: normal, silent, meeting, outdoor, automatic, headset, car, speakerphone. I can't add another profile, but that's fine—I can't imagine what else I'd need to create another profile for, and in any event I could always repurpose an existing profiles that I don't use.</p>
<p>There are certainly many cases when a list box is appropriate, but if virtually all of your users will only need to work with a small handful of things, consider optimizing the UI for a small fixed set.</p>
<p></p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Joe Hughes
EMAIL: joe@retrovirus.com
IP: 65.78.24.76
URL: http://retrovirus.com
DATE: 09/05/2005 01:48:59 PM
Great observation, Jan--you've nailed the problem and the engineering mindset that leads to it.
-----
COMMENT:
AUTHOR: Tom Z.
EMAIL: 
IP: 64.105.217.154
URL: 
DATE: 09/05/2005 03:06:38 PM
I don't agree.  Why lock out even 1% of users from being able to use your software by creating a 99% UI?  Workarounds are very ugly at best; not possible in many cases.

How do you explain the decision to customers who call to say this is a problem for them?  That they can't do what they want because the UI is optimized for the 99% of cases, and therefore, that customer's case is not possible?

Having guts is one thing, but this would not be a smart decision, IMHO.

At a minimum, there would need to be an additional "Advanced" UI to handle the 'n' case, but I don't think the additional complexity is justified.
-----
COMMENT:
AUTHOR: AIM48
EMAIL: madler@aim48.com
IP: 38.117.234.127
URL: http://AIM48.blogspot.com
DATE: 09/05/2005 06:52:18 PM
I have seen Telephony Servers with up to 20 "Virtual" modems that all show up as indivual listings in this box. While a system like that has better modem admin tools - You still require this space in the listbox. 
-----
COMMENT:
AUTHOR: David
EMAIL: nospam@nospam.com
IP: 136.172.210.30
URL: 
DATE: 09/06/2005 03:12:14 AM
I think a good way to handle such a situation is to have a list that can host N items, but instead of using the Listbox with one line per item, use much more vertical space per item and put controls for the main properties on there right away. Every item can also have a button "Advanced..." that opens up another dialog for the obscure situations where you need to change one of the rare settings (which most users probably never use anyways).
-----
COMMENT:
AUTHOR: Bleh
EMAIL: none@none.com
IP: 67.80.102.67
URL: 
DATE: 09/10/2005 08:28:34 PM
Thank god you're not in charge of anything important... It's people like you who made Windows XP the piece of junk that it is. Please Microsoft, go back to the mentality that brought us Windows 2000.
-----
COMMENT:
AUTHOR: Steve Ball
EMAIL: steveball@steveball.com
IP: 66.235.14.158
URL: http://steveball.typepad.com
DATE: 09/11/2005 04:04:28 AM
Bleh: pretty lame anonymous comment.  It's useless feedback like yours that is an ironic example of that which you criticize: you offer nothing actionable or insightful.  I can't even disagree with what you say because it is a meaningless (negative) opinion, but I can certainly disagree with your rude hostility.  
-----
COMMENT:
AUTHOR: Steve Ball
EMAIL: steveball@steveball.com
IP: 66.235.14.158
URL: http://steveball.typepad.com
DATE: 09/11/2005 04:11:10 AM
Which reminds, me; I did come to these comments for a reason.  The idea that it is possible to design UI/UX in a way that simultaneously anticipates the needs of and serves all possible users in a world where you may easily have 10, 1000, or 1M customers over a 1, 5, or 10 year period, is unrealistic.  I really love this site in that it gently expresses the non-trivial challenges that exist in UX design with real examples rather than simply spouting subjective theories about design.  Great job, Jan. 
-----
COMMENT:
AUTHOR: Peter Arrenbrecht
EMAIL: peter.arrenbrecht@gmail.guesswhat
IP: 213.200.237.2
URL: http://www.pages.ch/peo/
DATE: 09/12/2005 05:45:36 AM
I agree with Dave. HTML makes this easy, Win32 and WinForms et al do not. Avalon might be the thing that is going to help a great deal here. (We wrote our own UI layout and replication framework for just this reason.)
-----
PING:
TITLE: Jan Miksovsky's UI Blog
URL: http://dotnetjunkies.com/WebLog/thomasswilliams/archive/2005/09/05/132360.aspx
IP: 66.77.24.121
BLOG NAME: Thomas Williams
DATE: 09/04/2005 07:37:50 PM
simplegeek points out Jan Miksovsky's "flow/state" blog which has some good observations on user interface;...
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Make every piece of text count
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: make_every_piec

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/08/make_every_piec.html 
DATE: 08/01/2005 09:15:00 PM
-----
BODY:
<p>Avoid the trap of letting a design template make you write redundant text. Consider the instructions in this wizard page from Windows XP:</p>
<p><a href="http://miksovsky.blogs.com/photos/uncategorized/order_prints_online_2.png"><img width="500" height="413" border="0" alt="Order_prints_online_2" title="Order_prints_online_2" src="https://miksovsky.blogs.com/flowstate/images/order_prints_online_2.png" /></a></p>
<p>Wow! Depending on how you count, this page tells the user the same thing at least twice, maybe even three or four times. (If you just had the label &quot;Companies&quot; above a list box, the user could probably guess that they were supposed to select a company from the list.)

</p>
<p>Why does a UI end up with so much redundant text? Part of the problem can lie with the template used to create the UI. The Windows wizard template used for the above dialog includes the ability to easily add a subheading below the main heading. The person writing text for the page ends up feeling compelled to fill this out, even if the subheading adds no information of value to the user. (The user could probably assume that the photo companies print high-quality photos -- although that didn't stop Shutterfly from adding its <em>own</em> redundant text on that point.)</p>
<p>One problem with this template is that it puts the headings on a separate visual surface than the main page content (the list box). Suppose we decided to drop all the unnecessary text and stick with a single instruction. The template forces a result like this:</p>
<p><a href="http://miksovsky.blogs.com/photos/uncategorized/order_prints_online_take_2_1.png"><img width="500" height="413" border="0" src="https://miksovsky.blogs.com/flowstate/images/order_prints_online_take_2_1.png" title="Order_prints_online_take_2_1" alt="Order_prints_online_take_2_1" /></a></p>



<p>The top of the dialog now feels somewhat unbalanced. Worse, the instruction feels separated from the list box that the instructions refer to. Looking at this, you might see why someone felt compelled to add a subheading for balance, and then some more text to the main content area where it could sit directly next to the list box.</p>
<p>Fixing this requires jettisoning the template altogether. If we put the instruction on the same visual surface as the list box (and lose the rather unhelpful icon in the upper right), we end up with:</p>
<p><a href="http://miksovsky.blogs.com/photos/uncategorized/order_prints_online_take_3_1.png"><img width="500" height="413" border="0" src="https://miksovsky.blogs.com/flowstate/images/order_prints_online_take_3_1.png" title="Order_prints_online_take_3_1" alt="Order_prints_online_take_3_1" /></a></p>



<p>There's more visual design work that could be done here, but this is a big step in the right direction.

</p>
<p>We see so much redundant text in UIs that we can become inured to the clutter. Pare back your text to what is essential. If you find yourself writing text that adds no value, step back and consider whether your template is part of the problem.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Shaun Bedingfield
EMAIL: shaunbed@houston.rr.com
IP: 67.10.227.52
URL: 
DATE: 09/05/2005 02:28:50 PM
How about.. making the icons bigger and jetisoning everything but the names of the companies.  The descriptions could just come up on mouse hover events.

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Situation normal, all fouled up
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: outlooks_terrib

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/07/outlooks_terrib.html 
DATE: 07/29/2005 09:45:00 PM
-----
BODY:
<p>Sometimes an application treats a situation as an error when the situation is, in fact, completely normal.</p>
<p>For a good example of a poor user experience, consider Microsoft Outlook’s support for the IMAP mail protocol. The vast majority of consumers use the POP protocol to get email at home, which generally forces them to keep all their mail on one machine at home. IMAP, in contrast, lets you keep all your email on the server, where you can get to it from work, home and on the road. Most email clients -- including those found on cell phones -- support IMAP. Upon hearing of these wonders, most people will ask why IMAP isn't used more often.</p>



<p>While large portions of Microsoft Outlook are very well designed, there’s no escaping the fact that the Office team cares first and foremost about the enterprise market. Large enterprises have more money than you do. They use Exchange, and Outlook's support for Exchange is fantastic.</p>
<p>People who use Outlook outside of an enterprise struggle along with support for POP mail that hasn't improved appreciably in years. While POP isn’t great, at least Outlook's POP driver is reasonably solid. Outlook's IMAP driver, on the other hand, appears to have been left for dead in the jungle, where it was raised by apes.</p>
<p>Among its many deficiencies, the driver can’t properly cope if you use two different machines (say, at home and at the office) to check your email. This scenario is one of the reasons for IMAP’s existence, and most IMAP clients handle this situation gracefully: if they see another client is checking the mailbox, they wait for a while then try again. If you try to use Outlook this way, however, the IMAP driver throws up the following error:</p> <blockquote><p>Your IMAP server has closed the connection. This may occur if you have left the connection idle for too long.</p></blockquote><p>Not only is this message a poor indication of what's actually going on, Outlook displays this message <em>every few minutes</em> until you shut down one of the two Outlook clients trying to reach the mailbox. Outlook even displays this dialog even if Outlook is already displaying <em>another instance of the same dialog</em>. This is insane. I can come home from a day of work and see, literally, a hundred of such errors sitting on the screen.</p>
<p>Somewhere, deep down in the IMAP driver, there's probably a core function that checks for new mail. It's a sure bet that if this function is unable to check for new mail -- if, say, another email client is already checking the same mailbox -- this function returns an error. The function does this not because there’s anything really wrong, but because the function doesn’t have any other way of communicating what’s going on. The developer who wrote the calling function assumed that any error result is a real error, so they wrote the calling function to punt things off to a general purpose error handler that displays a generic error message. The limited forms of expression in code have completely warped the top-level user experience.</p>
<p>That explains why the error dialog got into the product, but why did it stay? Clearly the simplest reason is that none of Outlook’s developers use the product’s IMAP driver themselves. The above error is exactly the kind of thing a developer will kill in five minutes if it's in the way of them doing their own work. It's reasonable to assume that the reason no Outlook developers use IMAP is because they rely primarily on Microsoft-supplied Exchange accounts for email at work. The rest of the world suffers at home because of this.</p>
<p>I use so many of Outlook’s PIM features that I could never go back to a pure email client, but if all you need is mail, I’d encourage you to try <a href="http://www.mozilla.org/products/thunderbird/">Mozilla Thunderbird</a>, which has excellent IMAP support.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Ben Elowitz
EMAIL: elowitz@elowitz.com
IP: 216.160.73.149
URL: 
DATE: 08/25/2005 05:27:42 PM
So true...  I use IMAP for exactly this scenario (work laptop, home desktop) and Outlook's support for it is spotty at best.  The IMAP driver hangs more than all other Microsoft products combined on my machine.
-----
COMMENT:
AUTHOR: Pete Holiday
EMAIL: cheerful.cynic@gmail.com
IP: 12.223.245.245
URL: http://www.peteholiday.com
DATE: 09/10/2005 05:40:34 PM
Unless things have changed since the last version of Thunderbird I used, the IMAP support there is far worse than Outlook's.

Yes, that pop-up is extremely annoying, but far less annoying (to me) than the fact that Thunderbird only checked one IMAP folder at a time for new mail -- the one you were presently looking at.

Which doesn't work very well if you have multiple accounts.
-----
COMMENT:
AUTHOR: Fernando
EMAIL: frr@easyjob.net
IP: 83.97.160.35
URL: http://www.fernando-rodriguez.com
DATE: 09/11/2005 02:48:46 AM
Is it possible to write a new Outlook driver for IMAP?

I'm planning to use IMAP, but as the author, I'm "trapped" into Outlook because of the many PIM features I use...
-----
COMMENT:
AUTHOR: Nik Kalyani
EMAIL: cniknet@speerio.net
IP: 216.15.33.38
URL: http://blogs.speerio.net/PeerIO
DATE: 09/11/2005 08:50:20 PM
I would love to use Outlook for email, but can't for the very reasons you cited. It is just insane. I have been using Thunderbird for about eight different IMAP accounts simultaneously, and it's a dream. Not sure what another commenter was implying, but Thunderbird does check all the accounts. Another feature that any grown-up email client must have is a dropdown for From: addresses. Outlook's implementation of this is crappy. 

I think if Microsoft's engineers spent a couple of days with any startup and monitored how email is used, they would see just how poor their U.I. is. In a startup, one or two people might monitor multiple mail aliases. Without arobust IMAP implementation and the "personality" feature, you're out of luck in this situation. 
-----
COMMENT:
AUTHOR: Dan Kohn
EMAIL: dan@dankohn.com
IP: 24.6.66.153
URL: http://profile.typekey.com/dankohn/
DATE: 09/16/2005 05:00:01 PM
Thanks to Joe Bork <http://headblender.com/ook/>, there is at least a hack to partially avoid this horrendous bug.  I encounter it because my Treo fetches my IMAP email every 15 minutes, which immediatel causes the Outlook error message on my laptop.  Multiple client access to IMAP servers works fine with Thunderbird and every other IMAP client; only Outlook sucks.  This is a pathetic indictment of Microsoft's lack of interest in serving their customers.

As for Thunderbird, Pete Holiday can fix his problem of checking multiple mailboxes by right-clicking each folder he wants to monitor and selecting "Check this folder for new mail".  (What Thunderbird then does wrong is to make a new mail sound and system tray icon across all of those folders, as opposed to Outlook, which monitors multiple folders but only makes alerts for the Inbox.)

Thunderbird, with Mozilla Calendar, Contacts Sidebar, and other extensions, will probably be a credible Outlook-competitor within the next 12 months.  Right now, though, it lacks some critical abilities like supporting integrated Outlook-compatible meeting invites, non-modal contact pages, and other smaller UI bugs.  But at least they appear to care about their end-users.
-----
COMMENT:
AUTHOR: Aaron
EMAIL: coder@wiredprairie.us
IP: 216.180.211.142
URL: http://www.wiredprairie.us/journal/
DATE: 09/24/2005 12:22:32 PM
It's too bad that Outlook 2003 has so many good features, yet it contains so many "slap the customer in the face" problems that no one seems to be able to leapfrog the application and produce something measurably better across the board. Here's my fun "unknown" error of the day in outlook: 
http://www.wiredprairie.us/journal/2005/09/another_useless_error_dialog.html
-----
COMMENT:
AUTHOR: Peter H.
EMAIL: phoradan@hotmail.com
IP: 67.168.57.51
URL: http://www.hardwareworld.com
DATE: 10/21/2005 12:56:59 AM
The joy of picking on Outlook is the highs are so high and the lows are so low.

The schedule+ team was one of the first teams to really get nonmodal feedback right with their "You have conflicting appointmeents at this time" hint helpfully but nonmodally sitting near the 'accept' button.

And then the email side pulls clever tricks like getting messed up so it can't send/receive email, and then when you restart it to fix this, it modally asks "There are messages in your outbox, do you want to quit?"  As Jan is fond of saying, have some guts.

And let's not even get started on the desire to see multiple email accounts.  Rarely has the ratio of users who need a feature (who among us does not have more than one account?) compared to the tininess of the effort put to understanding user needs been so out of whack.

But then again, we all keep using it.
-----
PING:
TITLE: Where's the Dog Bowl?
URL: http://ricksegal.typepad.com/pmv/2005/09/wheres_the_dog_.html
IP: 127.0.0.1
BLOG NAME: The Post Money Value
DATE: 09/11/2005 09:05:17 AM
There is a pretty standard phrase in the development world called eating your own dog food. For those that dont know, it simply means you use it and make sure you actually can/like using it before foisting it on an unsuspecting customer (free or not).
-----
PING:
TITLE: The hunter lies in wait for the rare North American dialog box
URL: http://www.headblender.com/joe/blog/archives/2005/09/06/the_hunter_lies/index.html
IP: 209.68.2.8
BLOG NAME: The Crooked and the Straight
DATE: 09/06/2005 04:29:19 PM
I've been reading "flow | state", a fascinating UI design weblog by ex-microsoftie Jan Miksovsky. His recent entry, "Situation normal, all fouled up" had me laughing, particularly because of this part: People who use Outlook outside of an enterprise st...
-----
PING:
TITLE: Why Outlook support for IMAP is so poor
URL: http://MichaelTeper.com/archive/2005/09/05/3138.aspx
IP: 67.174.204.125
BLOG NAME: Michael Teper
DATE: 09/05/2005 08:05:39 PM

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Outlook's clever modeless delivery of useful info
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: outlooks_clever

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/07/outlooks_clever.html 
DATE: 07/26/2005 08:15:00 PM
-----
BODY:


<p>Microsoft Outlook, a dyed-in-the-wool client app, makes very effective use of a certain UI technique that comes up more often on web sites: whenever Outlook has additional information to communicate to the user, it does so in a modeless way by making room for the information in the window the user is working in.</p>
<p>For example, if you're scheduling an appointment over a time interval that contains other appointments, Outlook lets you know in a status area near the top of the main appointment window:</p>
<p><a href="http://miksovsky.blogs.com/photos/uncategorized/outlook_appointment_status_1.png"><img border="0" src="https://miksovsky.blogs.com/photos/uncategorized/outlook_appointment_status_1.png" title="Outlook_appointment_status_1" alt="Outlook_appointment_status_1" /></a></p>
<p>The &quot;Conflicts with another appointment&quot; message works so well because the information, which is clearly salient to the current situation, is delivered in a modeless way. A less thoughtfully designed client app would pop up a modal dialog to communicate the same information, getting in the way of the user and forcing them to dismiss the dialog before they could fix the problem.</p>
<p>That web sites handle feedback modelessly is taken for granted. Virtually all feedback regarding field validation in a web form is dealt with this way, typically as red text adjacent to the fields that require re-entry. A Win32 application like Outlook has to do more work than a web site to achieve the same effect, because Win32's facilities for layout are so primitive that the designers and developers have to handle all the layout themselves. Nevertheless, this isn't rocket science, and the technique is so useful that more app designers should consider adopting it.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Error message o' the week
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: error_message_o

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/07/error_message_o.html 
DATE: 07/25/2005 09:09:24 PM
-----
BODY:
<p>I've been using <a href="http://del.icio.us">del.icio.us</a> for a while to search for things, and finally got around to registering so I could tag things myself. I tried to create an account with an &quot;@&quot; sign in the user name, and the site produced the following message:</p><blockquote><p>you can't use silly characters in your username</p></blockquote>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Positive emotion from the point of first contact
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: positive_emotio

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/07/positive_emotio.html 
DATE: 07/25/2005 09:40:00 AM
-----
BODY:
<p>An application can engender positive or negative emotions in its users at the very earliest point of contact. When interacting with an operating system, the earliest point of contact is often the logon UI. The way an OS treats logon UI can easily establish a good or bad impression in the user's mind.</p>
<p>A long time ago, if you typed an incorrect password into a Windows logon dialog, you'd get something like this:</p>
<p><img border="0" src="https://miksovsky.blogs.com/photos/uncategorized/incorrect_password.gif" title="Incorrect_password" alt="Incorrect_password" /></p>
<p>Windows is clearly treating the situation as an error and, moreover, it clearly thinks the error is the<em> user's</em> fault. Later iterations of the OS soften this message somewhat. By Windows 2000, the message changes to:</p><blockquote><p>The system could not log you on. Make sure your User name and pasword
are correct, then type your password again. Letters in passwords must
be typed using the correct case.</p></blockquote><p>This is a big improvement (not sure why User is capitalized, though), but the tone is still stiff and a tad patronizing. By Windows XP's Home edition, things become much more conversational:</p><blockquote><p><strong>Did you forget your password?</strong><br />Please type your password again.<br />Be sure to use the right uppercase and lowercase letters.</p></blockquote>

<p>This is pretty good, and it's hard to think of how to make this message much friendlier. Apple manages to, though, in its OS/X logon dialog. Apple's solution deftly finesses the situation by <em>avoiding the error message altogether</em>.</p>
<p><img border="0" alt="Mac_osx_logon" title="Mac_osx_logon" src="https://miksovsky.blogs.com/photos/uncategorized/mac_osx_logon.png" /></p>
<p>If you don't enter the right password, the dialog literally <em>shakes back and forth</em> and the password field is cleared. A couple of years ago when a colleague showed this to me, I laughed out loud. The dialog is clearly shaking its head to say, &quot;Nope!&quot;, and just as clearly letting the user know they have to try again. It does this all in a humorous way that engenders a positive emotion in the user and without having to play verbal games to avoid assigning blame.</p>
<p></p>
<p></p>
<p></p>


-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Jonah Burke
EMAIL: other@jonahb.com
IP: 209.162.138.226
URL: http://jonahb.com
DATE: 09/04/2005 01:52:34 PM
How does Apple make the dialog accessible to non-sighted users?
-----
COMMENT:
AUTHOR: Chris Hollander
EMAIL: chrisca208@msn.com
IP: 24.193.21.233
URL: http://spaces.msn.com/members/objective
DATE: 09/05/2005 02:21:01 PM
I guess it's nice to be apple.  I help design software for city one of the largest city government agencies in the world.  

not everyone understands that shaking left and right means, "your typed the wrong password.  or maybe your password changed. or maybe the caps lock key is on.  or maybe you got the wrong username. or maybe you've been fired for doing inappropriate things.  or maybe the network is down, because of a terorist attack".  

Not everyone can see the screen.  Shaking your head side to side doesn't mean "no" in every culture.

It's always fun to design cute systems that just "make sense" to cool people like us.  It may not be as fun and sexy to design real usable infrastructure, which just happens to have an interface sitting on top of it.  Yes, your Moen faucets are a marvel of modern industrial design, but without all those ugly PVC pipes running in the walls, they're pretty useless...

btw, sorry this turned into such a rant...
-----
COMMENT:
AUTHOR: Eric Gunnerson
EMAIL: Eric.Gunnerson@microsoft.com
IP: 131.107.0.77
URL: 
DATE: 09/09/2005 09:45:27 AM
Ditto on what Jonah said.

Cool <> Good design. I might like a system that works the way you describe, but many people may have no idea what's wrong. 

Also, how does this work for people who are blind?
-----
COMMENT:
AUTHOR: Dave Murdock
EMAIL: dave.murdock@mac.com
IP: 24.225.199.68
URL: http://innerexception.blogspot.com
DATE: 09/11/2005 04:59:42 AM
To Chris H., you know the caps lock key is on when a graphic is in the password textfield.

As for accesibility, don't make the mistake of assuming Apple doesn't have a string somewhere that can be read back to users. They have a built-in utility called VoiceOver for accesibility. You can read a bit on that here: http://www.apple.com/macosx/features/voiceover/. Just because none here have tested it doesn't mean Apple hasn't.

To EricG, the point I think of the original post is that most users don't know whats wrong when they get the Windows error message, they just dismiss it to try again. To suggest that many people don't know what's wrong when the dialog shakes its head, I don't know my son is 1 year, 5 months, and he sure knows what shaking his head back and forth means, and he can't speak.

And for future reference, the first time I saw the OS X behavior, it just brought a smile to my face, because it is cute and I wasn't getting yelled at by the system for an operation we all know is highly error prone.
-----
COMMENT:
AUTHOR: Aaron
EMAIL: coder@wiredprairie.us
IP: 66.127.145.10
URL: http://www.wiredprairie.us/journal
DATE: 09/13/2005 09:07:39 PM
It's not that Apple always gets it though ... I recently tried to install ITunes5 and it didn't complete... as I was greeted by a completely useless dialog.

http://www.wiredprairie.us/journal/2005/09/useless_error_dialog.html
-----
COMMENT:
AUTHOR: Ben
EMAIL: seraph_ben@hotmail.com
IP: 67.53.14.80
URL: http://spaces.msn.com/members/spacectaz
DATE: 09/18/2005 04:36:21 PM
I just picked up a new smartphone running Windows Mobile 5.0 edition. I noticed that the password screen does the "apple style" head shaking when I've entered the wrong password.
I'm not sure if this UI is part of Windows Mobile, or just part of the I-mate vendor software.

Anyway, I like it.
-----
COMMENT:
AUTHOR: Giuseppe M.
EMAIL: giuseppem@gmail.com
IP: 82.51.112.224
URL: http://www.jokerband.it/
DATE: 09/20/2005 06:06:17 AM
Ubuntu linux does the same too and also appears a message.. in my opinion it's a funny way to start working with your system :)
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: The inscrutable purpose of Mac controls
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: the_impenetrabl

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/07/the_impenetrabl.html 
DATE: 07/22/2005 01:40:00 PM
-----
BODY:
<p>I just got a new Mac for the first time in ages. I was a complete Mac fanatic at the dawn of the Macintosh age, but eventually moved over to Windows since that's where the action was. I've taken a look at OS/X numerous times, but playing around with a product for a short while isn't the same thing as sitting down and really trying to use it to get something done.</p>
<p>I'm constantly struck by how little effort OS/X Tiger expends in bothering to explain the purpose of controls. Most of the bundled apps include their own collection of beautifully rendered little widgets whose purpose is often difficult to discern. My favorite example is the little glass bead found in the upper right corner of numerous windows for expanding and collapsing the toolbar and sidebar:</p>
<p><img border="0" src="https://miksovsky.blogs.com/photos/uncategorized/mac_osx_glass_bead.png" title="Mac_osx_glass_bead" alt="Mac_osx_glass_bead" /></p>
<p>The glass bead in the upper right corner surely represents some sort of high water mark for obscurity. No text or icon to detract from the purity of the lovingly rendered glass! Maybe hovering the mouse over it produces a little tip window? Nope. (Why the heck not?) The search box, at least, uses a magnifying glass icon to suggest its purpose, even if the icon is highly abstract in both visual representation and concept. It's hard to think of a control that communicates less about its purpose than this little glass bead. (But not impossible -- perhaps we should be grateful the bead is at least adjacent to the region of the window it affects.)</p>
<p>The new user looks at the control and wonders, &quot;What the hell do <em>you</em> do?&quot;<br />The control gives its stony reply: &quot;If you must ask, you are unworthy.&quot;<br /> </p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Dave Murdock
EMAIL: dave.murdock@mac.com
IP: 24.225.199.68
URL: http://innerexception.blogspot.com
DATE: 09/11/2005 04:46:42 AM
I have a different interpretation of why these controls are "unmarked". There is very little benefit of placing descriptive text around these things, because you only need to know it once, the first time you try it. This is the key part, in OS X you don't get punished for trying things, I can't really think of doing something in the OS right now that results in a cascade of changes that aren't undoable.

When I first started using OS X I too wondered what the title bar button did, but then I just tried it and now I now exactly what it does. Here is another one, if you hold down the Command key (the Apple key) and click the button, it changes how the toolbar looks. This is all doable for newbiews through the menus, which I think is the intent, the button is for non-newbs to get a shortcut.
-----
COMMENT:
AUTHOR: Paul Farnell
EMAIL: paul@salted.com
IP: 62.3.64.113
URL: http://www.salted.com/
DATE: 09/11/2005 06:26:37 AM
Dave, I'd disagree with you there. Sure you can click it to find out what it does, but a tooltip wouldn't go amiss. That wouldn't complicate/clutter the interface either.

Jan - just wanted to say, this is a fantastic blog. I just came across it today and have already read every post. I've subscribed and I think this will become one of my favourite sites to read - please keep up the great work!
-----
COMMENT:
AUTHOR: Sean M
EMAIL: sadfkashdfjkh@arcturus.com.au
IP: 203.24.135.153
URL: 
DATE: 09/14/2005 08:58:48 PM
I have to agree: Great content. Thank you!
-----
COMMENT:
AUTHOR: Yrian
EMAIL: yrianmietek@hotmail.com
IP: 201.50.66.137
URL: 
DATE: 12/04/2005 02:24:21 PM
I always thought the magnifying glass was a stylized letter Q standing for, say, "Quick search".

Well, not really, but someone could.
-----
COMMENT:
AUTHOR: Max Howell
EMAIL: max@methylblue.com
IP: 83.146.10.162
URL: 
DATE: 12/07/2005 01:41:12 PM
I have to agree with the first poster. Click it once and you know what it does. But I agree a tooltip is lacking, and yes it's absent because Apple products place form and factor very close to polish and usability in their priority lists.

And I also agree that, despite their uncluttered interfaces, Apple products have a good deal of widgets and controls that don't have immediately obvious functions.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Leaving dependent controls enabled
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: leaving_depende

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/07/leaving_depende.html 
DATE: 07/20/2005 08:45:00 AM
-----
BODY:
<p>In certain types of UI such as wizards and forms, it's common to see UI like this:</p>
<p><img border="0" src="https://miksovsky.blogs.com/photos/uncategorized/dependent_control_1.png" title="Dependent_control_1" alt="Dependent_control_1" />

<br />

</p>
<p>Here the text box is said to be a &quot;dependent control&quot;, because its enabled state depends upon the current selected state of the radio buttons.</p>
<p>In situations like the one above, I personally prefer a design that leaves the text box enabled at all times. Instead of using the state of the radio buttons to drive the state of the text box, the design goes the other way: the state of the text box drives the state of the radio buttons.</p>
<p><img border="0" alt="Dependent_control_revised" title="Dependent_control_revised" src="https://miksovsky.blogs.com/photos/uncategorized/dependent_control_revised.png" />

</p>
<p></p>

<ul><li>The text box is always enabled but is empty by default.</li>

<li>If the user clicks in the text box and enters any text, the second radio button becomes selected to let the user know that they have now implicitly chosen the second option.</li>

<li>Clearing the text box implicitly selects the first radio button (but leaves the focus in the text box so the user can enter something new).</li>

<li>If the user types something in the text box and then changes their mind to explictly select the first radio button, the (non-empty) contents of the text box are left as is. If the user goes back and changes the contents of the text box, the second radio button is again implicitly selected (as long as the text box is non-empty).</li></ul>

<p>This lets the user who wants to enter something in the text box do so directly, without having to first select the second radio button. In my experience, this technique makes the UI feel faster, avoids frustration (&quot;Why can't I type in the box?&quot;), and doesn't suffer any practical downside.</p>
<p></p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Gareth Jones
EMAIL: garethj@microsoft.com
IP: 213.199.128.148
URL: http://blogs.msdn.com/garethj
DATE: 09/06/2005 03:08:20 PM
I'm in agreement with this.
One supplementary question: What if this was part of a flow-ui - Would you expect that the text was preserved if "Back" was used even if the answer was "No"?
-----
COMMENT:
AUTHOR: Paul Farnell
EMAIL: paul@salted.com
IP: 62.3.64.113
URL: http://www.salted.com/
DATE: 09/11/2005 06:30:01 AM
I completely agree. Amazon get this completely wrong on their sign in page. It would improve every visitor's experience if they selected the "Yes" radio button when you start typing in your password. It frustrates me every time!
-----
COMMENT:
AUTHOR: Corey Peterson
EMAIL: cflake@gmail.com
IP: 24.7.122.215
URL: http://cflake.blogspot.com
DATE: 09/11/2005 06:26:32 PM
I do see a downside, but it's (hopefully) not a common case: If the user enters something in the field and then selects the other radio button, at that point there's information on the page that isn't getting submitted to the form. At a quick glance it looks like they are submitting that information, since the text field is much bigger than the radio button. This could be a problem if they accidentally clicked the other radio button, or if they did it on purpose but later come back to edit the information, expecting it to be submitted.
-----
COMMENT:
AUTHOR: Ishmaeel
EMAIL: ishmaeel@gmail.com
IP: 85.96.199.40
URL: http://profile.typekey.com/Ishmaeel/
DATE: 12/21/2005 08:42:12 AM
I think the proposed mechanism is the best possible solution for *this* UI design, but I would prefer a complete refactoring of the presentation. When I see a design like this, angry female warriors with bows (wink wink, Paul) flash across my mind for a second and I click the radio button *first*, shuddering with the fear that I might forget afterwards. (I really do forget - must be connected to the perception of text flow direction.)

In the cases I do not see the radio buttons and type away, I would be pleasantly surprised to see that the radio buttons automagically do my work for you - but if I saw the first one activated when I cleared the box, I would be disconcerted for a moment - yes it did anticipate what I would do the first time, but can/will it really do it again? Silly I know.

I would much prefer a single text box with a submit button and a hyperlink below them that says "I don't have a username".

I hope waking up an age-old post with a lengthy comment is not a major no-no here. Sorry if it is.
-----
COMMENT:
AUTHOR: Alan71
EMAIL: antoine.gassot.public@gmail.com
IP: 86.210.82.6
URL: http://alan71.is-needed.com/
DATE: 11/02/2006 03:17:41 PM
The last case (when I thought I had already signed up, but it appears I have not) keeps bugging me.

If I say 'no', it's 'NO', not 'No, but Yes if I click on [Previous]'. This kind of behavior makes me click [Previous] [Next], [Previous] [Next], [Previous] [Next], ... until the dialog also says that 'no, I don't have a user name (maybe I have a user name but no account)' or until I can see angry female warriors with bows.

Maybe a semi-disabled state can do the job... (gray text,... )
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Picasa Hello vs MSN Photo Swap
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: picasa_hello_vs

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/07/picasa_hello_vs.html 
DATE: 07/18/2005 03:00:00 PM
-----
BODY:
<p>I recently played with two photo slideshow sharing products: <a href="http://www.hello.com">Picasa Hello</a> and MSN Photo Swap (part of <a href="http://messenger.msn.com/">MSN Messenger</a> version 7). These two products both give people a way to show someone else photos over the net, but their UIs reveal subtle distinctions between their user models for this task.</p>
<p>The most interesting distinction for me comes up in the UI for determining who's showing photos and who's watching photos. Hello's model allows for free-form interaction between the participants. If you want to look at a specific photo, you can. If you want to let your buddy drive the action, you click a command called &quot;Follow Friend&quot;:</p>
<p><img border="0" src="https://miksovsky.blogs.com/photos/uncategorized/picasa_hello.jpg" title="Picasa_hello" alt="Picasa_hello" />

</p>
<p>You can see which photo your friend is looking at and -- if they want to follow your lead -- they can elect to follow along with you. In practice, this model and the resulting UI feels natural.</p>
<p>MSN Photo Swap, meanwhile, feels like what you'd get if you shared photos according to Robert's Rules of Order. One user has the floor, so to speak, and gets to hold on to it for as long as they want. When they see fit to cede control to someone else, they click a &quot;Pass Control&quot; command:</p>
<p><img border="0" src="https://miksovsky.blogs.com/photos/uncategorized/msn_photo_swap.png" title="Msn_photo_swap" alt="Msn_photo_swap" /></p>
<p>In practice, this model makes what should be a pleasant experience between friends feel dull. If I don't want to look at the photo my buddy is showing, I'm stuck. (Where is the &quot;Filibuster&quot; command?)</p>
<p>The rest of Picasa Hello's UI is likewise friendlier than that in MSN Photo Swap -- but the UI is moot. Hello is probably doomed as a standalone application.</p>
<p>Photo slideshow sharing is a feature, not a product. It only makes sense in the context of a larger framework for interaction over the net such as an IM client like MSN Messenger. I can't imagine telling someone that I want to show them some photos I took, but first they should download and install a client app that they'll never use for any other purpose.</p>
<p>Here's hoping Picasa Hello gets incorporated into something bigger, or that Photo Swap loosens up.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Converting users
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: converting_user

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/07/converting_user.html 
DATE: 07/17/2005 10:04:50 AM
-----
BODY:
<p>Mac's Switch campaign is marketing with, as far as I can tell, little actual help given to the poor Windows user trying to move to a Mac</p>
<p>Tutorial<br />Mapping terms<br />Keyboard shortcuts<br />Keyboard stickers<br />Control panel mapping<br />Two button mouse and right-click<br />ToolTips<br />Exchange support<br />Moving files<br />Moving settings<br />Support for UNC pathnames, etc.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: How many apps are there in that app, anyway?
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: how_many_apps_a

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/07/how_many_apps_a.html 
DATE: 07/15/2005 08:45:00 PM
-----
BODY:
<p>Software product teams working on large products need to give names to individual application components just so they can communicate effectively -- but that's not a good reason to force a user to learn names for different parts of something that, to them, is a single entity.</p>
<p>A common example: a Setup app is a little application that helps install a bigger application. The software team needs to keep straight which application they're talking about (in specs, bug reports, etc.), so they give the Setup app its own name. The user ends up having to bear the burden of figuring out who does what. The following is a particularly egregious (and unfortunately very common) example:</p>
<p><img border="0" alt="Java_runtime_environment_setup" title="Java_runtime_environment_setup" src="https://miksovsky.blogs.com/photos/uncategorized/java_runtime_environment_setup.PNG" />

</p>
<p>So here we've got one named thing (Java Runtime Environment Setup) that's preparing another named thing (an InstallShield Wizard) that will help the user install a third named thing (Java). The user could care less about these other pieces that are involved, so
there's no reason to confuse them by introducing these other components
by name at all. All the user cares about here is getting Java onto their machine (and they may not really care about that either -- maybe what they're <em>really</em> trying to do is get a Java app to run).</p>
<p>The dialog could easily have said, &quot;Please wait while Java is installed&quot;, or even just, &quot;Please wait.&quot;</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Richard Gadsden
EMAIL: richard@gadsden.name
IP: 213.146.128.194
URL: 
DATE: 11/29/2005 09:03:03 AM
Don't agree.  This is a progress indicator and it disappears when it has finished.   That says "please wait" quite well.  But when it fails, it's really useful to know that the InstallShield Wizard configuration failed, because that gives you a chance of fixing it.
-----
COMMENT:
AUTHOR: Rich Ellis
EMAIL: rellis@nc.rr.com
IP: 10.17.15.72
URL: 
DATE: 12/14/2005 07:58:23 AM
Speaking from years of sysadmin and help desk experience... the number of users who 

(1) understand the relationships between the setup program, the thing it's trying to install, and the thing they're really trying to do 

(2) care

and

(3) are not advanced enough to be able to tell these things without reading a dialog box that's worded like a final exam in Grammar 501

...is negligible.

I used to be in favor of providing as much information to the user as humanly possible.  I've learned the hard way that it's better to make the information available to those who *want* to look for it (e.g. a log file) while leaving the face of the program simple.

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Error messages
STATUS: Draft
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: error_messages

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/07/error_messages.html 
DATE: 07/13/2005 09:06:16 PM
-----
BODY:
<p>When it comes to mocking a UI, it's hard to beat making fun of the
error messages. There are a lot of reasons why error messages are so
bad: developers write a lot of them as notes to themselves or their own
team members with no expectation that the messages will actually be
seen by users; it's often programmatically difficult to establish the
real reason an error occurred; and</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: A UI sketch whose controls perfectly fill the window is probably too good to be true
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: if_a_ui_sketch_

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/07/if_a_ui_sketch_.html 
DATE: 07/13/2005 08:20:00 PM
-----
BODY:
<p>If you're ever shown a UI design for a new top-level application window, be sure to notice whether the controls on the window happen to perfectly fill up on the available space. This is often a sign of trouble.</p>
<p>Many application windows are resizable. (If a top-level modeless window isn't resizable, it's a reasonable question to ask: why not?) A common mistake when designing resizable windows is to focus too much on some perfect window size that happens to show off the window's controls to best advantage -- a window size that few people other than the designer is ever likely to see. It's important to question how the window is going to respond when the user resizes it. For example, many users commonly maximize the application window they're working in. A surprising number of applications actually look awful when they're maximized on a typical large display: the additional space the designer didn't design for is either wasted or allocated to some control (often a text box or list box) that didn't really need it.</p><cd:preserve whitespace="CL"></cd:preserve>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Mark Bramley
EMAIL: mark@kasayka.com
IP: 64.65.181.21
URL: 
DATE: 07/21/2005 01:41:22 PM
There are a few more gotchas to consider as well:
1. When UI text is translated from English into a non-English language, all the controls that previously fit perfectly are now clipping the text or overflowing into one another. Existing attempts to address this problem either leave a lot of whitespace in the English version making it look daft, or rely on localization vendors to layout the controls themselves and since they tend not to deeply understand the program flow it often ends up as a diabolical mess. Try running a French or German version of an originally US product and look at the dialogs :-(.  The UIs that don't have this problem are ones with a flow-based layout (e.g. HTML, but not tables) rather than absolute positioning.
2. Large Fonts. With the wonders of high resolution displays text can get really tiny. Turning on large fonts (in MS Windows at least) really messes up a lot of app's UI. 
On a related topic, this is one place where Firefox did a great job, because the text resize feature always works no matter what styles are used in the HTML.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Progress bars that start over are almost useless
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: progress_bars_t

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/07/progress_bars_t.html 
DATE: 07/12/2005 09:30:00 AM
-----
BODY:
<p>An app should never show the user a
progress bar, fill it up, only to reset it and make them watch it
fill up again.</p>
<p><img width="459" height="76" border="0" alt="Progress_bar_1" title="Progress_bar_1" src="https://miksovsky.blogs.com/photos/uncategorized/progress_bar_1.PNG" />

<br /><em>Two-thirds done—or is it?</em></p>
<p>An app with a progress bar that resets will fail
to deliver on the promise it has made. The app is saying, &quot;Almost done! Almost done! Just
a second more!&quot;, then saying, &quot;Just kidding! There's still more.&quot; The user loses faith the
process is anywhere near completion. For all they know, the progress
bar is going to reset again, and again, and again. If a progress bar can start
all over, there’s practically no value in having a progress bar in the first
place. It's more honest in such a case to use a progress animation instead of a progress bar; at least that doesn't make any promises about when an operation will finish.</p>
<p>When an app has
back-to-back operations that can take a long time, incorporate the progress for
those operations into a combined progress bar. This can be done, for example,
by assigning arbitrary percentages based on expected results. If the first
operation usually takes about three times as long as the second, then the first
operation can be defined to fill up 75% of the progress bar and the second
operation to fill up the remaining 25%. This can result in a change in progress
bar speed, but this still allows the user to derive more value from the progress
bar, and maintains a sense a progress.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Mark Bramley
EMAIL: mark@kasayka.com
IP: 64.65.181.21
URL: 
DATE: 07/12/2005 10:04:19 AM
The point of having a progress bar is twofold:
1) to know something is still happening and that the machine hasn't hung.
2) to have an idea when a lengthy operation will finish, so I know when I can continue the task which requires the operation to finish.

An "estimated time to completion" countdown serves these purposes much better than a progress bar offering an uncalibrated "percentage complete" number.

Just for fun, it could include variable length suggestions like wait a minute, make a cup of coffee, take a nap, go to bed...

-----
COMMENT:
AUTHOR: Chaz Haws
EMAIL: from_typepad@charleshaws.com
IP: 12.202.111.41
URL: 
DATE: 09/05/2005 08:42:30 AM
First off, let me say that I love this blog.  These are all good solid suggestions, and very clearly written.  Thank you!

On this particular point, I've always felt that the best progress bar I've ever seen was the spinning globe in Internet Explorer.  It doesn't communicate any idea of length, because it doesn't know any.  But it never lies to you!  And it's actually quite easy to duplicate with a more thematically appropriate animation.

I like the other suggestions, though!  "Go get lunch, this one's gonna take a while!"
-----
COMMENT:
AUTHOR: Scott Saad
EMAIL: blogspot@mymaya.net
IP: 70.57.37.119
URL: http://scottsaad.blogspot.com
DATE: 10/03/2005 09:59:56 PM
Thank you for this blog!  Nice work and I'm hoping for others to pop up in the near future. 

Progress bars definitely have their limitations.  There are times, however, when an operation could take a very long time. For example, if the user is requesting tons of data from a database.  Currently, there is no progress information given back from the database (it could take forever if it wanted to).  How do you recommend communicating this to the user, without completely freezing the UI?
-----
COMMENT:
AUTHOR: Max Howell
EMAIL: max@methylblue.com
IP: 83.146.10.162
URL: 
DATE: 12/07/2005 01:50:01 PM
With my interfaces I either show one progress bar per operation (rather than start the progress again for each operation), or say "Step 1 of 3" or whatever above the bar. For really fast operations I prefer the second, because 1 progress bar refilling 3 times in under 5 seconds makes the whole operation feel really fast.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Can't sleep...
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: 0
ALLOW PINGS: 1
BASENAME: cant_sleep

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2005/07/cant_sleep.html 
DATE: 07/11/2005 11:47:28 PM
-----
BODY:
<p>... so I think I'll get around to starting that UI design blog I've been meaning to start. I'd prefer to just read someone else's insightful commentary on user interface design, but haven't found much yet on the topic. There are sites like <a href="http://www.useit.com">Jakob Nielsen's useit.com</a>, but that's primarily about usability and user research, not user interface design. There are a few other sites on web UI design, but they generally ignore the design of client software UI. To me that's odd, since today the UI of the average client application is still far richer and interactive than the UI of the average web site. Focusing on web design exclusively is like studying architecture and only looking at the design of houses. There should be more discussion of the craft of UI, and that discussion should include traditional PC client UI as well as web UI, cell phones, etc.</p>
<p>Hence, this blog.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------