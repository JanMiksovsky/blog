AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Delegate brain-melting date math and localization to general-purpose calendar web components
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: general-purpose-calendar-web-components

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2014/08/general-purpose-calendar-web-components.html 
DATE: 08/04/2014 08:00:00 AM
-----
BODY:
<p dir="ltr">Which of these month calendars looks correct to you?</p>
<p dir="ltr"><a class="asset-img-link" href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201a511ed85ac970c-pi" style="display: inline;"><img alt="Calendar (English UK)" border="0" class="asset  asset-image at-xid-6a00d83451fb6769e201a511ed85ac970c img-responsive" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201a511ed85ac970c-800wi" title="Calendar (English UK)" /></a>&#0160;</p>
<p dir="ltr"><a href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201a73df8bdf5970d-pi"><img alt="Calendar (English US)" border="0" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201a73df8bdf5970d-800wi" title="Calendar (English US)" /></a></p>
<p dir="ltr"><a class="asset-img-link" href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201a73df8be19970d-pi" style="display: inline;"><img alt="Calendar (English, starts on Saturday)" border="0" class="asset  asset-image at-xid-6a00d83451fb6769e201a73df8be19970d img-responsive" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201a73df8be19970d-800wi" title="Calendar (English, starts on Saturday)" /></a></p>
<p dir="ltr">One of the calendars will probably look right. The other two will just look wrong — like they’re mistakes, or maybe not even calendars. Setting aside the basics of which language the words appear in, the simple question of which day column should be first is a pretty key thing to get right in a calendar. Depending on where you live or grew up, you may prefer that the first column of a month calendar be Mondays, Sundays, or Saturdays. (It’s not completely clear to me, but it appears there may be a community of people — speakers of Dari, a dialect of Persian — who prefer that the first column be Fridays.) In some languages, you may want the order of days to go right-to-left as well, in which case you might want the first column to be the rightmost instead of the leftmost.</p>
<p dir="ltr">These are the kinds of detail that are nearly impossible for a small team to get right if they’re writing their own calendar from scratch, and yet the world is filled with proprietary date picker widgets and calendars. Even if we ignore the colossal waste of time represented by all those unnecessary reinventions of the calendar, nearly all of those calendar implementations will fail to localize basic details (such as the day shown as the first day of the week). That is, if your app is using a calendar your team wrote from scratch, there is a very good chance that a substantial number of users outside your country and language view believe your calendar is just wrong. And even if you picked up a calendar widget at some point, and it was pretty good to begin with, if you copied that code, you likely haven&#39;t picked up any of the bug fixes that were made in it since you made your copy.</p>
<p dir="ltr">This is yet another area where a broad web component ecosystem will fundamentally change things. As discussed on this blog many times before, the economics of user experience design and engineering will of course change. But it’s also the case that sharing solid user interface components will finally allow a broad swath of the software industry to finally get UI details right on tricky things like calendars.</p>
<h2 dir="ltr">Open calendar components</h2>
<p dir="ltr">With that goal in mind, I’ve contributed a set of calendar components to the open source Basic Web Components project. Rather than producing a monolithic monthly calendar component, these components follow the <a href="https://github.com/basic-web-components/components-dev/wiki/Ten-Principles-for-Great-General-Purpose-Web-Components" target="_self">guidelines for general-purpose components</a>. Among other things, they are factored into components that each try to do just a single thing well:&#0160;</p>
<ul>
<li>
<p dir="ltr"><a href="http://component.kitchen/components/basic-calendar-day" target="_self">basic-calendar-day</a>. This shows a single day in a week/month/year calendar. It has a date attribute indicating which day to show. By default, it just shows the number of that day in the month. That is, for August 1, 2014, it just shows the text “1”. That’s all it does.</p>
</li>
<li>
<p dir="ltr"><a href="http://component.kitchen/components/basic-calendar-week" target="_self">basic-calendar-week</a>. This represents a single week. It’s just a collection of 7 basic-calendar-day components whose date attributes are synced to always be one day apart. (The component takes special care to deal with things like daylight savings time changes.) Which day of the week is shown first can be changed to suit the user’s preferred location/culture (see localization, below). By default, the days are shown in a horizontal layout. This week is used in the month calendar component described below, but could also also be used in other situations, such as an infinitely-scrollable calendar.</p>
</li>
<li>
<p dir="ltr"><a href="http://component.kitchen/components/basic-calendar-month-days" target="_self">basic-calendar-month-days</a>. This shows the days of a single calendar month. This is constructed as set of 4 to 6 instances of basic-calendar-week. (The number varies based on the length of the month and the day of the week the month starts on.) This component does not include any headings. By default, weeks are shown in a vertical stack. This is done with default styling using a CSS display: table-row-group rule, so that headings for the day columns can easily be added and lined up correctly.</p>
</li>
<li>
<p dir="ltr"><a href="http://component.kitchen/components/basic-days-of-week" target="_self">basic-days-of-week</a>. This just shows the names for the days of the week in a given language (see localization, below). The standard CSS styling for this has display: table-row-group, so it can easily be matched up with a table-row or table-row-group like basic-calendar-month-days. This component (and some of the others here) doesn’t have the word “calendar” in its component name because there might be some situations in which its useful outside the context of a standard monthly calendar. It could serve, say, as a header for a table showing weekly specials in a restaurant, or a chore chart of kids, etc.</p>
</li>
<li>
<p dir="ltr"><a href="http://component.kitchen/components/basic-month-name" target="_self">basic-month-name</a>. This shows the name of the month in a given language (see localization, below).</p>
</li>
<li>
<p dir="ltr"><a href="http://component.kitchen/components/basic-month-and-year" target="_self">basic-month-and-year</a>. This shows the name of the month and the year for a given date. The order of the month name and year will match the direction of the text in a right-to-left language like Arabic or Hebrew.</p>
</li>
<li>
<p dir="ltr"><a href="http://component.kitchen/components/basic-calendar-month" target="_self">basic-calendar-month</a>. This component puts together the above elements in a typical layout for a month calendar. It stacks together headings for basic-month-and-year and basic-days-of-week on top of a table of days provided by basic-calendar-month-days. Setting the desired language/culture for this component updates all the headings as well as the day shown as the first day of the week.</p>
</li>
</ul>
<p>Note that basic-calendar-month just renders a calendar. It doesn’t handle date selection, although that could be added through creation of another component. The month calendar is inline (directly on the page), but could be incorporated into a dropdown for a typical dropdown date picker. Or you could combine twelve instances of basic-calendar-month together to create a year calendar, etc., etc.</p>
<p>Per the guidelines, these components include an absolutely minimal degree of styling required to get something useful. You would undoubtedly want to style these further to meet your own application’s brand. This should not be too difficult, as web components can be styled through CSS.</p>
<h2 dir="ltr">Localization</h2>
<p dir="ltr">To easily and accurately localize these calendar web components, they all make use of the excellent <a href="https://github.com/jquery/globalize" target="_self">Globalize</a> project sponsored by jQuery. Globalize supports about 350 different languages, locations, and cultures around the world. As it turns out, Globalize already defines everything these components need: which day of the week should come first, the names of the days, and the names of the months. So you can simply tell Globalize to load the settings for a particular language/culture, and then hand that pile of settings to the components, and they’ll set themselves up appropriately. Here’s basic-month-calendar in Japanese, French (in France), and Arabic (in Saudi Arabia):</p>
<p dir="ltr"><a class="asset-img-link" href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201a3fd3db373970b-pi" style="display: inline;"><img alt="Calendar (Japanese)" border="0" class="asset  asset-image at-xid-6a00d83451fb6769e201a3fd3db373970b img-responsive" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201a3fd3db373970b-800wi" title="Calendar (Japanese)" /></a></p>
<p dir="ltr"><a class="asset-img-link" href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201a73df8be84970d-pi" style="display: inline;"><img alt="Calendar (French)" border="0" class="asset  asset-image at-xid-6a00d83451fb6769e201a73df8be84970d img-responsive" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201a73df8be84970d-800wi" title="Calendar (French)" /></a></p>
<p dir="ltr"><a class="asset-img-link" href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201a3fd3db388970b-pi" style="display: inline;"><img alt="Calendar (Arabic, Saudi Arabia)" border="0" class="asset  asset-image at-xid-6a00d83451fb6769e201a3fd3db388970b img-responsive" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201a3fd3db388970b-800wi" title="Calendar (Arabic, Saudi Arabia)" /></a>&#0160;</p>
<p dir="ltr">Note that all text strings here (the month names, and the names for the days of the week) are coming from Globalize, not from the application or the calendar component. Globalize also supports different formats for the names of the days of the week, so you can choose between&#0160;full and abbreviated headings.</p>
<p dir="ltr"><em>[Aside: an open question for me is whether a calendar for a right-to-left language should have the order of days go from right-to-left as well. I can find some Arabic calendars, for example, that have the first day of the week go in the rightmost column —&#0160;but I can also find plenty of examples that have the first day of the week in the leftmost column. And all the examples of Hebrew calendars I can find have the first day of the week in the leftmost column. This just goes to show that localization will always surprise you and/or make your head hurt. The Globalize library doesn’t seem to include information on the preferred direction of time, so for now these components assume that left-to-right is generally acceptable.]</em></p>
<p dir="ltr">To simplify the localization of an app using these components, I’ve put together a simple <a href="http://component.kitchen/components/basic-culture-selector" target="_self">basic-culture-selector</a> component that can dynamically load all the necessary settings based on the user’s prefered language/culture. (This component can also be used behind-the-scenes as a language/culture settings loader.) Components such as these calendar components can then obtain the right settings from an instance of basic-culture-selector directly through declarative data binding, with no scripting required.</p>
<p dir="ltr">Reality check: Localization is an incredibly complex topic, and language- and culture-aware components are just a part of a solution. To really do justice to a global audience, an app team would need to take a comprehensive approach to localization. Among other things, an app would need some reasonable way to set a default language/culture (based on domain, geolocation, and/or apparent IP location), a way to store language/culture preferences with a user account, and a UI for switching language/culture. It would also help if browser vendors participated in a good standard solution, so users aren’t forced to indicate their preferred language/country/etc. on a site-by-site basis. Still, having solid, localizable components is a good place to start.</p>
<h2 dir="ltr">A calendar as a meta-component</h2>
<p dir="ltr">Many applications want to render data on a calendar: appointments, availability, and so on. Most calendar widgets are useless in this regard outside a narrowly-envisioned range of scenarios, because they make so many assumptions about what data will be shown. Rather than viewing a week or month calendar as having a particular visual representation, it seems more helpful to consider a calendar as a skeleton or abstract structure capable of holding components for each day whose only requirement is that they can accept a date. How a day component renders that date is entirely up to them.</p>
<p dir="ltr">For this reason, the basic-calendar-month (and -week) components have a dayTag attribute that can be used to provide the name of another component class that will be used to render the individual days of the month/week. The default dayTag value is basic-calendar-day, but this can be changed to any other class. The only requirement on the interface of the indicated class is that it have a property setter called “date” that accepts a JavaScript Date object. This allows one to easily render arbitrary data into the structure of a calendar.</p>
<p dir="ltr">To show this in action, suppose we want to create a month calendar that shows the major phases of the moon (new, first quarter, full, last quarter, or nothing special). To keep things well factored, we start by creating a web component called <a href="https://github.com/basic-web-components/basic-calendar-day/blob/master/demo/moon-phase.html" target="_self">moon-phase</a>&#0160;that just renders the phase of the moon as an icon. It doesn’t shown a day number, or anything else, because we just want it to do one thing really well.</p>
<p>We then create a custom day component, either from scratch or, for simplicity, by extending the existing basic-calendar-day component. We drop an instance of moon-phase into that class and add a day number so we get both the number and the moon icon. Finally, we instantiate a basic-month-calendar and tell it to use that class to render the days. Et voilà, with a teeny tiny bit of work, we get a perpetual moon calendar. In U.S. English, this would look like:</p>
<p dir="ltr"><a class="asset-img-link" href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201a3fd3db566970b-pi" style="display: inline;"><img alt="Calendar (Moon Phase)" border="0" class="asset  asset-image at-xid-6a00d83451fb6769e201a3fd3db566970b img-responsive" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201a3fd3db566970b-800wi" title="Calendar (Moon Phase)" /></a></p>
<p dir="ltr">&#0160;</p>
<p dir="ltr">[See the <a href="http://component.kitchen/components/basic-calendar-day" target="_self">live demo</a>]</p>
<p dir="ltr">By building on top of basic-month-calendar, this moon calendar not only avoids the headaches of date math, it also automatically obtains a high degree of localizability provided by the underlying Globalize library. As improvements are made in the underlying basic-month-calendar, the moon calendar picks up those improvements for free.</p>
<p dir="ltr">Here one web component (basic-month-calendar) allows a portion of its UI (the rendering of days) to be overridden by accepting a second web component class as input (via the dayTag attribute). The calendar is effectively an abstract component or meta-component that defines a structure which is completely or partially filled in by another class. This UI pattern parallels the use of abstract classes in programming languages, and seems generally useful in many other component situations.</p>
<p dir="ltr">Patterns like this may go a long way toward ensuring web components can really be general purpose, and may ultimately be a key part of managing some of the date math and localization complexities I’ve touched upon in this post. As some of the calendar issues raised here suggest, it’s notoriously difficult to do anything with dates and time, especially when one wants to localize a UI across a wide range of languages and cultures. The best strategy for ensuring that someone, somewhere has sufficient motivation to fix tricky issues is to maximize the audience for the component. And one way to increase the size of the audience is to make the component as general-purpose as possible. That is, creating a wide range of scenarios for a general-purpose component like basic-month-calendar seems critical to ensure that the component gets sufficient attention to make it reliable in a wide range of circumstances.</p>
<p>&#0160;</p>
<p dir="ltr"><em>[Speaking of open source contributions, I wanted to take this opportunity to publicly thank a few people who offered early contributions to the relatively new Basic Web Components project. <a href="https://twitter.com/OliverJAsh" target="_self">@OliverJAsh</a>&#0160;filed the first bug report on the project, <a href="https://twitter.com/PascalPrecht" target="_self">@PascalPrecht</a> &#0160;submitted the first pull request, and <a href="https://github.com/daverome" target="_self">Dave Romero</a>&#0160;made the first edits to the wiki. Many thanks to the three of them!]</em></p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Yair
EMAIL: hthr44@gmail.com
IP: 212.116.182.86
URL: 
DATE: 08/06/2014 03:58:22 AM
The Hebrew calenders you saw are probably left to right for practical reasons. I have seen some which are RTL. Usually, the calendars cover a Hebrew year with some slack (so roughly August-October), but each page covers a Gregorian month and the Hebrew dates and holidays are marked, but are smaller than the numbers. This is probably because most people use the Gregorian calender for almost everything, so having the numbers go from left to right also makes sense (although, again, I have seen counter-examples).

Incidentally, you could complicate it even more if you added actual support for alternative calendars, such as the Hebrew or Islamic calendars. You would have different year and month names, different month lengths, supporting dates as letters instead of numbers, etc. In the Hebrew calendar, for instance, each third or fourth year has 13 months (the months are lunar, so you wouldn't need your lunar chart, because the moon is always full in the middle of the month, but that requires adding the month to prevent drift from the solar cycle). And this month is added in the middle of the year (it was the end of the year in one of the alternative ways of looking at the year, but that's not really used any more, so now it's the middle of the year).
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 67.185.162.218
URL: http://profile.typepad.com/jan_miksovsky
DATE: 08/06/2014 08:55:17 AM
Yair: Thanks for the insight into Hebrew calendars! For the initial implementation, I made a deliberate decision to focus on Gregorian calendars. My assumption is that most businesses supporting users in multiple languages/countries would end up standardizing on the Gregorian calendar. It would be fantastic if someone wanted to improve or extend these components to support non-Gregorian calendars. The Globalize library actually seems to have pretty good coverage of most calendar systems, including the Hebrew and Hijri (Islamic) calendars, so that might be a big help in implementing support for those calendars in these components.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Deconstructing the standard photo carousel into general-purpose web components
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 1
BASENAME: deconstructing-the-standard-photo-carousel-into-general-purpose-web-components

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2014/06/deconstructing-the-standard-photo-carousel-into-general-purpose-web-components.html 
DATE: 06/16/2014 08:00:00 AM
-----
BODY:
<p dir="ltr">I recently contributed a small handful of web components to the <a href="https://github.com/basic-web-components/components-dev/wiki" target="_self">Basic Web Components</a>&#0160;project, and wanted to share some observations on how designing and building UI with web components is going to be pretty different from how you’ve created UI in the past.</p>
<h2 dir="ltr">The basic photo carousel as a component</h2>
<p dir="ltr">The web components I was working on are related to the standard sort of photo carousel you see everywhere on the web these days:</p>
<p><a class="asset-img-link" href="http://miksovsky.blogs.com/.a/6a00d83451fb6769e201a3fd1dbad4970b-pi" style="display: inline;"><img alt="Basic-sequence-navigator" class="asset  asset-image at-xid-6a00d83451fb6769e201a3fd1dbad4970b img-responsive" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201a3fd1dbad4970b-500wi" title="Basic-sequence-navigator" /></a><br /><br />There are a zillion widgets out there that will create such a thing for you, but they generally are connected to a specific web platform (WordPress, SquareSpace, etc.) or require the use of JavaScript.&#0160;</p>
<p dir="ltr">A carousel web component, on the other hand, lets you construct such a thing in HTML alone. Here&#39;s a carousel component called basic-sequence-navigator:</p>
<p dir="ltr"><span style="font-family: terminal, monaco;">&lt;basic-sequence-navigator&gt;<br />&#0160; &lt;img src=”image1.jpg”&gt;<br />&#0160; &lt;img src=”image2.jpg”&gt;<br />&#0160; &lt;img src=”image3.jpg”&gt;<br />&#0160; ...<br />&lt;/basic-sequence-navigator&gt;</span></p>
<p dir="ltr">You can see a live demo of this component on the Component Kitchen page for <a href="http://component.kitchen/components/basic-sequence-navigator" target="_self">basic-sequence-navigator</a>.</p>
<p>With a web component like this, you just drop your images (or other elements) inside of the component, and you get a carousel. No styling or JavaScript required. That’s pretty neat all on its own, but the component’s construction is also interesting in its own right.</p>
<h2 dir="ltr">Building up from simple pieces</h2>
<p dir="ltr">Existing carousel widgets suffer from trying to present a final solution. Someone creates a single widget that handles everything: positioning the images, transition effects, Next/Previous buttons, programmatic API, events, and more. If there’s anything about that solution you don’t like, you often have to reject the whole widget, or else spend time fiddling with widget options in hopes of finding a combination of settings that does what you want.</p>
<p dir="ltr">Given that web components lets you build bigger things from smaller things, I wanted to try to factor the carousel as a user experience into simple pieces that you could combine in different ways. Even if you don’t like a specific end result, you may nevertheless find some of the building blocks useful in constructing your own solution.</p>
<p dir="ltr">For starters, consider that the Next/Previous buttons shown above are just a specific answer to the general question: how does a user navigate the sequence of images? Those buttons aren’t the only answer; there are other common answers to this same question. An equally common answer might be putting iOS-style dots along the bottom. So it’s silly to inextricably bundle the general problem of providing navigation through a sequence with the <em>specific</em> solution of Next/Previous buttons.</p>
<p>A better answer is to factor the general behavior into one component, and the specific UI into a separate component. Accordingly, the basic-sequence-navigator component is really based on a more fundamental component called basic-sequence. The basic-sequence component handles transitional effects like sliding or cross-fading, but <em>doesn’t include its own navigation UI</em>.</p>
<p dir="ltr">That means you can wire up buttons of your own (or any UI you want) to drive an instance of the more fundamental basic-sequence component. A crude example of this would be:</p>
<p><span style="font-family: terminal, monaco;">&lt;button onclick=&quot;document.querySelector(&#39;#sequence&#39;).previous()&quot;&gt;Previous&lt;/button&gt;</span><br /><span style="font-family: terminal, monaco;">&lt;button onclick=&quot;document.querySelector(&#39;#sequence&#39;).next()&quot;&gt;Next&lt;/button&gt;</span><br /><span style="font-family: terminal, monaco;">&lt;basic-sequence id=&quot;sequence&quot;&gt;</span><br /><span style="font-family: terminal, monaco;">&#0160; &lt;img src=”image1.jpg”&gt;</span><br /><span style="font-family: terminal, monaco;">&#0160; &lt;img src=”image2.jpg”&gt;</span><br /><span style="font-family: terminal, monaco;">&#0160; &lt;img src=”image3.jpg”&gt;</span><br /><span style="font-family: terminal, monaco;">&#0160; ...</span><br /><span style="font-family: terminal, monaco;">&lt;/basic-sequence&gt;</span></p>
<p>You can see a demo of this solution on the page for <a href="http://component.kitchen/components/basic-sequence" target="_self">basic-sequence</a>. It&#39;s not beautiful, but the point is that&#0160;you can build up your own UI from simple pieces. You don’t have to write all the code —&#0160;you get things like transition effects for free, for example. At the same time, you can create exactly the user experience you want.</p>
<p dir="ltr">Maybe you don’t want <em>any</em> visible UI, you just want to show one image after another on a timed basis. There’s a separate component called <a href="http://component.kitchen/components/basic-slideshow" target="_self">basic-slideshow</a>&#0160;that does just that. It uses basic-sequence under the covers, but adds the notion of a timer and play/stop semantics:</p>
<p dir="ltr"><span style="font-family: terminal, monaco;">&lt;basic-slideshow effect=”reveal”&gt;</span><br /><span style="font-family: terminal, monaco;">&#0160; &lt;img src=”image1.jpg”&gt;</span><br /><span style="font-family: terminal, monaco;">&#0160; &lt;img src=”image2.jpg”&gt;</span><br /><span style="font-family: terminal, monaco;">&#0160; &lt;img src=”image3.jpg”&gt;</span><br /><span style="font-family: terminal, monaco;">&#0160; ...</span><br /><span style="font-family: terminal, monaco;">&lt;/basic-slideshow&gt;</span></p>
<p dir="ltr">What if you don’t care about transition effects? You can build on top of an even simpler component called <a href="http://component.kitchen/components/basic-modes" target="_self">basic-modes</a>. That just shows one child element at a time. And even that component is built from simpler pieces, including <a href="http://polymer.github.io/core-selector/components/core-selector/" target="_self">core-selector</a>, a component that just keeps track of which item in a set is selected (without defining what selecting means or looks like). And <em>that</em> component is built from even simpler one. It’s components, all the way down.</p>
<p dir="ltr">The idea here is that UI shouldn’t be delivered as a huge, final thing with a million knobs on it to cover every conceivable situation. Instead, complex UI should be built up from simpler pieces, each of which do a great job at one thing.</p>
<h2 dir="ltr">Styleability</h2>
<p dir="ltr">Of course, if you do like the general idea of Next and Previous buttons, but want them to look different, you can use basic-sequence-navigator, and then take advantage of the styleability built into web components. Using CSS rules, you can override the default styling to better match your app’s aesthetics and brand.</p>
<h2 dir="ltr">Get your UI for nothing, and accessibility for free</h2>
<p dir="ltr">The basic-sequence-navigator component has a nice feature most carousels lack: keyboard support! If you press the Left or Right key while the component has focus, the carousel advances, respectively, to the previous or next image. To help make that feature more discoverable, the component sports a focus rectangle when it has the focus.</p>
<p dir="ltr">It’s kind of appalling the web is chock full of photo carousels that can’t be navigated with a keyboard. That not only shuts out a big chunk of people for whom a mouse or trackpad is hard to use, it’s also generally inconvenient for everyone else. If you have to page back and forth through a sequence of images, using Left/Right keys is simply much faster than moving a mouse or finger back and forth to hit buttons on either side of the images.</p>
<p dir="ltr">Some web sites, generally big ones with large staff, can afford to spend time getting accessibility details like keyboard navigation right. But I’m willing to bet that the vast majority of photo carousels on the web today aren’t accessible. The problem isn’t just awareness —&#0160;the software industry has been talking about accessibility for a long, long time. The deeper problem is that the economics of implementing accessibility are often terrible. If everyone has to implement something like keyboard support on their own, for any single team, the predicted return on the investment is just too low to pursue.</p>
<p dir="ltr">With web components, the economics could improve radically. Once people can share UI solutions as components, even small improvements can potentially benefit thousands of sites. So someone may find it worth their time to add support for keyboard users, or users with low vision, or screen reader users, and so on. Even if the original author of a component (say, me) knows just a tiny bit about the accessibility implications of ARIA support, perhaps there’s someone else out there (you?) who knows ARIA inside and out and can help get it right.&#0160;</p>
<p dir="ltr">The best part is that, if accessibility can be improved for free, everyone benefits <em>even if most people won’t know they’re making their products more accessible</em>. Most people aren’t going to adopt a component like &lt;basic-sequence-navigator&gt; because it has good accessibility. They’re going to adopt it for selfish reasons — it’s going to save them time.&#0160;</p>
<p dir="ltr">That’s fine! If someone can just drop in a photo carousel component because it saves time implementing a design, they&#39;ll use it, even if they know nothing about accessibility. They don’t even need to know that the carousel&#39;s built-in accessibility features exist for the component to help them support a broader audience of end users.</p>
<h2 dir="ltr">Some principles for general-purpose web components</h2>
<p dir="ltr">If you’re interested in this approach, and want to learn more about creating general-purpose web components, the Basic Web Components site has a page on <a href="https://github.com/basic-web-components/components-dev/wiki/Ten-Principles-for-Great-General-Purpose-Web-Components" target="_self">10 Principles for Great General-Purpose Components</a>. If you’d like to take a shot at contributing to the project, the <a href="https://github.com/basic-web-components/components-dev/wiki" target="_self">home page</a>&#0160;provides a long list of components the world could use.</p>
<p>&#0160;</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
COMMENT:
AUTHOR: Freemen Muaddib
EMAIL: 
IP: 93.45.109.236
URL: http://profile.typepad.com/6p01a73ddd6476970d
DATE: 06/21/2014 03:27:51 AM
THE TROUBLE WITH STYLES IN POLYMER ELEMENTS

About the now-deprecated "applyAuthorStyles" to polymer elements, I see a big problem in the design of the polymer platform itself. 
As anybody who tried to use polymer elements in the real world, the styling is where developers find more troubles when integrating polymer elements (see for example this excellent article by Chris Strom, author of the book "Patterns in Polymer": <a href="http://japhr.blogspot.it/2014/06/a-tag-named-apply-author-styles.html">http://japhr.blogspot.it/2014/06/a-tag-named-apply-author-styles.html</a> ). 
There’s an inherent and unresolved tension in creating styleable general-purpose components. Of course Polymer is too young as a platform, and it may not shows yet. This problem will become evident when a component evolves and acquires more styling.
Suppose you give your component a light gray background so that its “out of the box” appearance looks reasonable. An author overrides that background to be red so that it fits in with their red visual theme. Later, you decide that your component requires a border somewhere to clearly delineate its contents from the outer page. Unfortunately, the aforementioned author wasn’t prepared to override this new border. When they pick up a new version of your component, they’ll end up with a red background but a gray border. That may not be what they want. If this happens too often, the author may come to feel that the use of a general-purpose component is not worth the trouble. The best resolution to this tension is still an open question. For the time being, your best bet is to give your general-purpose component an extremely basic visual appearance. But with time authors would end thinking that is quickier and safer to write all the elements by themself in plain html with their own stylesheet, and this could spell the end of Polymer Elements adoption.﻿
-----
COMMENT:
AUTHOR: Yury Zholobov
EMAIL: 
IP: 67.170.75.137
URL: http://profile.typepad.com/6p01a73de3115e970d
DATE: 06/29/2014 10:50:24 PM
What about navigation by touch swiping with the component reacting as expected by user - tracking touch and dynamically scrolling the content with prev/next content becoming partially visible?
-----
COMMENT:
AUTHOR: Jan Miksovsky
EMAIL: 
IP: 67.185.162.218
URL: http://profile.typepad.com/jan_miksovsky
DATE: 07/17/2014 08:13:46 AM
Yury: Yes, these components definitely need to support touch. That's still a work in progress.
-----
--------
AUTHOR: Jan Miksovsky
AUTHOR EMAIL: jan@miksovsky.com
TITLE: Paper can be faster than gadgets: a printable 2014 wall calendar for more efficient scheduling discussions
STATUS: Publish
ALLOW COMMENTS: 1
CONVERT BREAKS: wysiwyg
ALLOW PINGS: 0
BASENAME: paper-can-be-faster-than-gadgets-printable-wall-calendar

UNIQUE URL: https://miksovsky.blogs.com/flowstate/2013/12/paper-can-be-faster-than-gadgets-printable-wall-calendar.html 
DATE: 12/18/2013 08:00:00 AM
-----
BODY:
<p>I’ve posted an app that lets you <a href="http://janmiksovsky.github.io/printable-wall-calendar">print a free wall calendar</a>&#0160;that can make your scheduling discussions go faster.</p>
<p>This is based on <a href="http://miksovsky.blogs.com/flowstate/2013/01/a-2013-wall-calendar-optimized-for-project-management-discussions.html">a printed calendar I created by hand</a>&#0160;for some years now. As I noted in that post, most wall calendars contain far too much junk. Most professionals I know track future events in an online calendar, not a wall calendar, so among other things, you may not actually need room to write on a wall calendar these days. But it&#0160;<em>is</em>&#0160;handy to be able to quickly answer questions about what day of the week a given date falls on, or vice versa. While you can whip out a mobile device and answer those questions, this is one case where I believe paper is faster than gadgets.</p>
<p><img alt="Year Calendar" border="0" height="600" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201a3faa3c039970b-pi" title="Year Calendar.png" width="484" /></p>
<p>If you hang one of these on your office or conference room wall, I think you’ll find it useful. Each year, the startup I founded continues to print out a huge version of this calendar. (Tip: print it as a poster at Fedex). It works great for planning agile development sprints.</p>
<h2>Optimizing for text legibility</h2>
<p>I&#39;ve tried to remove everything from this calendar that’s not strictly necessary to answer the key day/date scheduling questions. In particular, to improve legibility at a distance, I’ve tried to maximize the size of the date numbers so they can be read from far away. In the case where a single month requires six rows to display, I tuck the name of the month on the same row as the first week. Such a week can contain at most two dates on the far right. For example, in a typical U.S. calendar, this situation will come up in March 2014:</p>
<p><img alt="Three Months" border="0" height="171" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2019b03303468970d-pi" title="Three Months.png" width="600" /></p>
<p>This trick lets me save a row for the tall months. Reclaiming that vertical space means the dates can be bigger and more legible at a distance.</p>
<h2>A web component wall calendar</h2>
<p>Instead of creating another one-off paper calendar this year, I realized I could use web components to create a live app without too much trouble. I already had a <a href="https://github.com/JanMiksovsky/quetzal-calendar-month-with-headings">month calendar component</a> (available for your own web components app via Bower). This component handles most of the date math, so it was fairly straightforward to just stick twelve instances of this component together, then apply some styling and glue logic, and end up with a live calendar app.</p>
<p>Generally speaking, that process is what I see most web app design and development moving toward: 1) a search for the best components, 2) some wrangling to glue them together, and 3) the application of styling to achieve the desired aesthetic. The core <a href="https://github.com/JanMiksovsky/printable-wall-calendar/tree/master/elements">.html source for the app</a>&#0160;is tiny, weighing in at a little over 13K, and most of that is markup or CSS. Looking just at the JavaScript, there are only about&#0160;100 lines of code.</p>
<p>This web app is slightly unusual in that it focuses on printing, and the web isn’t particularly print-friendly. As far as I know, it’s hard to say: “Scale this text to be as tall as possible, subject to this layout, and still have everything fit on a page.” I ended up having to be most conservative than I would have liked, tuning the app for U.S.-centric “Letter” sized paper, which is shorter than the A4 paper used nearly everywhere else. Some space goes to waste which could have been used for more generous text sizing and spacing.</p>
<h2>Falsehoods designers believe about time</h2>
<p>A while back, Noah Sussman posted a great list of <a href="http://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time">Falsehoods Programmers Believe About Time</a>. Designers make most of the same incorrect assumptions as well. When I read a list like this, the lesson I take away is that most people (including me) shouldn’t be doing date math or creating UI elements that depend directly on it. Instead, they should be building on top of work others have done.</p>
<p>In this particular case, I’d already invested a bunch of time doing the work to be able to create a month calendar component that can easily be reused in other applications. This component avoids at least a few of the Falsehoods About Time listed above. E.g., given a date, to calculate the next date it doesn’t just add 24 hours, but does some gyrations to handle daylight saving time edge cases.</p>
<p>A designer or developer can hopefully drop this month calendar component into their web app and get a useful result with having to worry about (or even be aware of) the edge cases. The component itself undoubtedly has edge cases it fails to handle; there are Falsehoods About Time which aren&#39;t addressed yet. But the value of doing this as a component is that at least such work is spread across applications. Others can pitch in, and we can collaboratively work towards a bug-free solution.</p>
<h2>Global support for hundreds of languages/locations</h2>
<p>In past years, people have asked me for “international” versions of the wall calendar that have Monday as the first day of the week, instead of Sunday the way most Americans prefer it.</p>
<p>Since my month calendar component already leveraged the excellent <a href="https://github.com/jquery/globalize">Globalize.js</a>&#0160;library, it was actually easier for me to just let the user pick the language/location they want a calendar instead of having to hard-code support for specific formats. To simplify things, I created a component that wraps the Globalize list of supported language/location combinations. Then it was just a matter of wiring the language/location selector to the calendar, and —&#0160;boom! —&#0160;the calendar instantly got basic support for hundreds of language/locations.</p>
<p>The results are likely imperfect for many places, but for languages and locations with small populations, this printable wall calendar might already be the best solution out there.</p>
<p>If you’re like me, it’s a good five minutes fun to just pick cultures and see what their calendars might look like. I knew that cultures in the Americas tend to prefer having a calendar start on Sunday, while European cultures tend to prefer that weeks start on Monday. This holds true even when the same language is spoken in both hemispheres: see English (U.S.) vs English (U.K.), or Spanish (Mexico) vs Spanish (Spain). Until I started working with Globalize, though, I hadn’t realized that there were cultures that prefer weeks start on a Saturday. Here’s how March 2014 looks in three settings, English (U.S.), French (France), and Arabic (Saudi Arabia):</p>
<p><img alt="US Calendar" border="0" height="225" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2019b032f63e4970c-pi" title="US Calendar.png" width="225" /></p>
<p><img alt="French Calendar" border="0" height="225" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201a3faa3c018970b-pi" title="French Calendar.png" width="225" /></p>
<p><img alt="Arabic Calendar" border="0" height="225" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e2019b03303414970d-pi" title="Arabic Calendar.png" width="225" /></p>
<p>The start-of-week day, plus the month and day names, all come for free from Globalize. (I don’t actually know if people in Saudi Arabia want their months to look like the one above, but couldn’t find conclusive evidence of a single preferred style.)</p>
<h2>Localize your UI and get&#0160;fun surprises for free!</h2>
<p>One last bit I thought was funny was rediscovering that, even when building atop a localization library or a localization-aware component, there are always surprises. I think this can be expressed as a law of UI design: <em>For any user interface layout that looks good for most cultures, there exists a culture that will break that layout.</em></p>
<p>Here, the clever packing of the month name into the first row of a six-week month (as shown above) looks great in <em>almost</em> all the languages defined by Globalize. In that layout, the month name can span up to five columns’ worth of width, which is more than enough in most cases. But per the above law, there must exist at least one culture for which this layout does not work without modification. And such a culture does, in fact, exist:</p>
<p><img alt="Sami Calendar" border="0" height="225" src="https://miksovsky.blogs.com/.a/6a00d83451fb6769e201a3faa3c020970b-pi" title="Sami Calendar.png" width="225" /></p>
<p>This is the Sami language of northern Scandinavia (“sääm´ǩiõll” in the calendar’s language/location list), in which the month of March is called “pâ´zzlâšttammään”. In a year like 2014, where March starts on a Saturday, the month name will overlap with the date for March 1st. To the 25,000 or so speakers of Sami: I’m very sorry about this.</p>
-----
EXTENDED BODY:

-----
EXCERPT:

-----
KEYWORDS:

-----
--------
