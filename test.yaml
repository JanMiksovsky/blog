2005-07:
  2005-07-11 Can't sleep.html: >
    ---

    title: "Can't sleep..."

    date: 2005-07-11

    slug: cant_sleep

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/07/cant_sleep.html

    ---


    <p>
      ... so I think I'll get around to starting that UI design blog I've been
      meaning to start. I'd prefer to just read someone else's insightful commentary
      on user interface design, but haven't found much yet on the topic. There are
      sites like <a href="http://www.useit.com">Jakob Nielsen's useit.com</a>, but
      that's primarily about usability and user research, not user interface design.
      There are a few other sites on web UI design, but they generally ignore the
      design of client software UI. To me that's odd, since today the UI of the
      average client application is still far richer and interactive than the UI of
      the average web site. Focusing on web design exclusively is like studying
      architecture and only looking at the design of houses. There should be more
      discussion of the craft of UI, and that discussion should include traditional
      PC client UI as well as web UI, cell phones, etc.
    </p>

    <p>Hence, this blog.</p>
  2005-07-12 Progress bars that start over are almost useless.html: >
    
    ---

    title: "Progress bars that start over are almost useless"

    date: 2005-07-12

    slug: progress_bars_t

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/07/progress_bars_t.html

    ---


    <p>
      An app should never show the user a progress bar, fill it up, only to reset it
      and make them watch it fill up again.
    </p>

    <p>
      <img src="/images/flowstate/progress_bar_1.PNG" alt="Progress_bar_1" />

      <br /><em>Two-thirds done — or is it?</em>
    </p>

    <p>
      An app with a progress bar that resets will fail to deliver on the promise it
      has made. The app is saying, &quot;Almost done! Almost done! Just a second
      more!&quot;, then saying, &quot;Just kidding! There's still more.&quot; The
      user loses faith the process is anywhere near completion. For all they know,
      the progress bar is going to reset again, and again, and again. If a progress
      bar can start all over, there’s practically no value in having a progress bar
      in the first place. It's more honest in such a case to use a progress
      animation instead of a progress bar; at least that doesn't make any promises
      about when an operation will finish.
    </p>

    <p>
      When an app has back-to-back operations that can take a long time, incorporate
      the progress for those operations into a combined progress bar. This can be
      done, for example, by assigning arbitrary percentages based on expected
      results. If the first operation usually takes about three times as long as the
      second, then the first operation can be defined to fill up 75% of the progress
      bar and the second operation to fill up the remaining 25%. This can result in
      a change in progress bar speed, but this still allows the user to derive more
      value from the progress bar, and maintains a sense a progress.
    </p>
  2005-07-13 A UI sketch whose controls perfectly fill the window is probably too good to be true.html: >
    
    ---

    title: "A UI sketch whose controls perfectly fill the window is probably too good to be true"

    date: 2005-07-13

    slug: if_a_ui_sketch_

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/07/if_a_ui_sketch_.html

    ---


    <p>
      If you're ever shown a UI design for a new top-level application window, be
      sure to notice whether the controls on the window happen to perfectly fill up
      on the available space. This is often a sign of trouble.
    </p>

    <p>
      Many application windows are resizable. (If a top-level modeless window isn't
      resizable, it's a reasonable question to ask: why not?) A common mistake when
      designing resizable windows is to focus too much on some perfect window size
      that happens to show off the window's controls to best advantage -- a window
      size that few people other than the designer is ever likely to see. It's
      important to question how the window is going to respond when the user resizes
      it. For example, many users commonly maximize the application window they're
      working in. A surprising number of applications actually look awful when
      they're maximized on a typical large display: the additional space the
      designer didn't design for is either wasted or allocated to some control
      (often a text box or list box) that didn't really need it.
    </p>

    <cd:preserve whitespace="CL"></cd:preserve>
  "2005-07-15 How many apps are there in that app, anyway.html": >
    
    ---

    title: "How many apps are there in that app, anyway?"

    date: 2005-07-15

    slug: how_many_apps_a

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/07/how_many_apps_a.html

    ---


    <p>
      Software product teams working on large products need to give names to
      individual application components just so they can communicate effectively --
      but that's not a good reason to force a user to learn names for different
      parts of something that, to them, is a single entity.
    </p>

    <p>
      A common example: a Setup app is a little application that helps install a
      bigger application. The software team needs to keep straight which application
      they're talking about (in specs, bug reports, etc.), so they give the Setup
      app its own name. The user ends up having to bear the burden of figuring out
      who does what. The following is a particularly egregious (and unfortunately
      very common) example:
    </p>

    <p>
      <img
        alt="Java_runtime_environment_setup"
        src="/images/flowstate/java_runtime_environment_setup.PNG"
      />
    </p>

    <p>
      So here we've got one named thing (Java Runtime Environment Setup) that's
      preparing another named thing (an InstallShield Wizard) that will help the
      user install a third named thing (Java). The user could care less about these
      other pieces that are involved, so there's no reason to confuse them by
      introducing these other components by name at all. All the user cares about
      here is getting Java onto their machine (and they may not really care about
      that either -- maybe what they're <em>really</em> trying to do is get a Java
      app to run).
    </p>

    <p>
      The dialog could easily have said, &quot;Please wait while Java is
      installed&quot;, or even just, &quot;Please wait.&quot;
    </p>
  2005-07-18 Picasa Hello vs MSN Photo Swap.html: >
    ---

    title: "Picasa Hello vs MSN Photo Swap"

    date: 2005-07-18

    slug: picasa_hello_vs

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/07/picasa_hello_vs.html

    ---


    <p>
      I recently played with two photo slideshow sharing products:
      <a href="http://www.hello.com">Picasa Hello</a> and MSN Photo Swap (part of
      <a href="http://messenger.msn.com/">MSN Messenger</a> version 7). These two
      products both give people a way to show someone else photos over the net, but
      their UIs reveal subtle distinctions between their user models for this task.
    </p>

    <p>
      The most interesting distinction for me comes up in the UI for determining
      who's showing photos and who's watching photos. Hello's model allows for
      free-form interaction between the participants. If you want to look at a
      specific photo, you can. If you want to let your buddy drive the action, you
      click a command called &quot;Follow Friend&quot;:
    </p>

    <p>
      <img src="/images/flowstate/picasa_hello.jpg" alt="Picasa_hello" />
    </p>

    <p>
      You can see which photo your friend is looking at and -- if they want to
      follow your lead -- they can elect to follow along with you. In practice, this
      model and the resulting UI feels natural.
    </p>

    <p>
      MSN Photo Swap, meanwhile, feels like what you'd get if you shared photos
      according to Robert's Rules of Order. One user has the floor, so to speak, and
      gets to hold on to it for as long as they want. When they see fit to cede
      control to someone else, they click a &quot;Pass Control&quot; command:
    </p>

    <p>
      <img src="/images/flowstate/msn_photo_swap.png" alt="Msn_photo_swap" />
    </p>

    <p>
      In practice, this model makes what should be a pleasant experience between
      friends feel dull. If I don't want to look at the photo my buddy is showing,
      I'm stuck. (Where is the &quot;Filibuster&quot; command?)
    </p>

    <p>
      The rest of Picasa Hello's UI is likewise friendlier than that in MSN Photo
      Swap -- but the UI is moot. Hello is probably doomed as a standalone
      application.
    </p>

    <p>
      Photo slideshow sharing is a feature, not a product. It only makes sense in
      the context of a larger framework for interaction over the net such as an IM
      client like MSN Messenger. I can't imagine telling someone that I want to show
      them some photos I took, but first they should download and install a client
      app that they'll never use for any other purpose.
    </p>

    <p>
      Here's hoping Picasa Hello gets incorporated into something bigger, or that
      Photo Swap loosens up.
    </p>
  2005-07-20 Leaving dependent controls enabled.html: >
    ---

    title: "Leaving dependent controls enabled"

    date: 2005-07-20

    slug: leaving_depende

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/07/leaving_depende.html

    ---


    <p>
      In certain types of UI such as wizards and forms, it's common to see UI like
      this:
    </p>

    <p>
      <img
        src="/images/flowstate/dependent_control_1.png"
        alt="Dependent_control_1"
      />

      <br />
    </p>

    <p>
      Here the text box is said to be a &quot;dependent control&quot;, because its
      enabled state depends upon the current selected state of the radio buttons.
    </p>

    <p>
      In situations like the one above, I personally prefer a design that leaves the
      text box enabled at all times. Instead of using the state of the radio buttons
      to drive the state of the text box, the design goes the other way: the state
      of the text box drives the state of the radio buttons.
    </p>

    <p>
      <img
        alt="Dependent_control_revised"
        src="/images/flowstate/dependent_control_revised.png"
      />
    </p>

    <p></p>


    <ul>
      <li>The text box is always enabled but is empty by default.</li>

      <li>
        If the user clicks in the text box and enters any text, the second radio
        button becomes selected to let the user know that they have now implicitly
        chosen the second option.
      </li>

      <li>
        Clearing the text box implicitly selects the first radio button (but leaves
        the focus in the text box so the user can enter something new).
      </li>

      <li>
        If the user types something in the text box and then changes their mind to
        explictly select the first radio button, the (non-empty) contents of the
        text box are left as is. If the user goes back and changes the contents of
        the text box, the second radio button is again implicitly selected (as long
        as the text box is non-empty).
      </li>
    </ul>


    <p>
      This lets the user who wants to enter something in the text box do so
      directly, without having to first select the second radio button. In my
      experience, this technique makes the UI feel faster, avoids frustration
      (&quot;Why can't I type in the box?&quot;), and doesn't suffer any practical
      downside.
    </p>

    <p></p>
  2005-07-22 The inscrutable purpose of Mac controls.html: >
    ---

    title: "The inscrutable purpose of Mac controls"

    date: 2005-07-22

    slug: the_impenetrabl

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/07/the_impenetrabl.html

    ---


    <p>
      I just got a new Mac for the first time in ages. I was a complete Mac fanatic
      at the dawn of the Macintosh age, but eventually moved over to Windows since
      that's where the action was. I've taken a look at OS/X numerous times, but
      playing around with a product for a short while isn't the same thing as
      sitting down and really trying to use it to get something done.
    </p>

    <p>
      I'm constantly struck by how little effort OS/X Tiger expends in bothering to
      explain the purpose of controls. Most of the bundled apps include their own
      collection of beautifully rendered little widgets whose purpose is often
      difficult to discern. My favorite example is the little glass bead found in
      the upper right corner of numerous windows for expanding and collapsing the
      toolbar and sidebar:
    </p>

    <p>
      <img
        src="/images/flowstate/mac_osx_glass_bead.png"
        alt="Mac_osx_glass_bead"
      />
    </p>

    <p>
      The glass bead in the upper right corner surely represents some sort of high
      water mark for obscurity. No text or icon to detract from the purity of the
      lovingly rendered glass! Maybe hovering the mouse over it produces a little
      tip window? Nope. (Why the heck not?) The search box, at least, uses a
      magnifying glass icon to suggest its purpose, even if the icon is highly
      abstract in both visual representation and concept. It's hard to think of a
      control that communicates less about its purpose than this little glass bead.
      (But not impossible -- perhaps we should be grateful the bead is at least
      adjacent to the region of the window it affects.)
    </p>

    <p>
      The new user looks at the control and wonders, &quot;What the hell do
      <em>you</em> do?&quot;<br />The control gives its stony reply: &quot;If you
      must ask, you are unworthy.&quot;<br />
    </p>
  2005-07-25 Error message o' the week.html: >
    ---

    title: "Error message o' the week"

    date: 2005-07-25 09:09:24 PM

    slug: error_message_o

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/07/error_message_o.html

    ---


    <p>
      I've been using <a href="http://del.icio.us">del.icio.us</a> for a while to
      search for things, and finally got around to registering so I could tag things
      myself. I tried to create an account with an &quot;@&quot; sign in the user
      name, and the site produced the following message:
    </p>

    <blockquote><p>you can't use silly characters in your username</p></blockquote>
  2005-07-25 Positive emotion from the point of first contact.html: >
    
    ---

    title: "Positive emotion from the point of first contact"

    date: 2005-07-25 09:40:00 AM

    slug: positive_emotio

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/07/positive_emotio.html

    ---


    <p>
      An application can engender positive or negative emotions in its users at the
      very earliest point of contact. When interacting with an operating system, the
      earliest point of contact is often the logon UI. The way an OS treats logon UI
      can easily establish a good or bad impression in the user's mind.
    </p>

    <p>
      A long time ago, if you typed an incorrect password into a Windows logon
      dialog, you'd get something like this:
    </p>

    <p>
      <img
        src="/images/flowstate/incorrect_password.gif"
        alt="Incorrect_password"
      />
    </p>

    <p>
      Windows is clearly treating the situation as an error and, moreover, it
      clearly thinks the error is the<em> user's</em> fault. Later iterations of the
      OS soften this message somewhat. By Windows 2000, the message changes to:
    </p>

    <blockquote>
      <p>
        The system could not log you on. Make sure your User name and pasword are
        correct, then type your password again. Letters in passwords must be typed
        using the correct case.
      </p>
    </blockquote>

    <p>
      This is a big improvement (not sure why User is capitalized, though), but the
      tone is still stiff and a tad patronizing. By Windows XP's Home edition,
      things become much more conversational:
    </p>

    <blockquote>
      <p>
        <strong>Did you forget your password?</strong><br />Please type your
        password again.<br />Be sure to use the right uppercase and lowercase
        letters.
      </p>
    </blockquote>


    <p>
      This is pretty good, and it's hard to think of how to make this message much
      friendlier. Apple manages to, though, in its OS/X logon dialog. Apple's
      solution deftly finesses the situation by
      <em>avoiding the error message altogether</em>.
    </p>

    <p>
      <img alt="Mac_osx_logon" src="/images/flowstate/mac_osx_logon.png" />
    </p>

    <p>
      If you don't enter the right password, the dialog literally
      <em>shakes back and forth</em> and the password field is cleared. A couple of
      years ago when a colleague showed this to me, I laughed out loud. The dialog
      is clearly shaking its head to say, &quot;Nope!&quot;, and just as clearly
      letting the user know they have to try again. It does this all in a humorous
      way that engenders a positive emotion in the user and without having to play
      verbal games to avoid assigning blame.
    </p>

    <p></p>

    <p></p>

    <p></p>
  2005-07-26 Outlook's clever modeless delivery of useful info.html: >
    
    ---

    title: "Outlook's clever modeless delivery of useful info"

    date: 2005-07-26

    slug: outlooks_clever

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/07/outlooks_clever.html

    ---


    <p>
      Microsoft Outlook, a dyed-in-the-wool client app, makes very effective use of
      a certain UI technique that comes up more often on web sites: whenever Outlook
      has additional information to communicate to the user, it does so in a
      modeless way by making room for the information in the window the user is
      working in.
    </p>

    <p>
      For example, if you're scheduling an appointment over a time interval that
      contains other appointments, Outlook lets you know in a status area near the
      top of the main appointment window:
    </p>

    <p>
      <img
        src="/images/flowstate/outlook_appointment_status_1.png"
        alt="Outlook_appointment_status_1"
      />
    </p>

    <p>
      The &quot;Conflicts with another appointment&quot; message works so well
      because the information, which is clearly salient to the current situation, is
      delivered in a modeless way. A less thoughtfully designed client app would pop
      up a modal dialog to communicate the same information, getting in the way of
      the user and forcing them to dismiss the dialog before they could fix the
      problem.
    </p>

    <p>
      That web sites handle feedback modelessly is taken for granted. Virtually all
      feedback regarding field validation in a web form is dealt with this way,
      typically as red text adjacent to the fields that require re-entry. A Win32
      application like Outlook has to do more work than a web site to achieve the
      same effect, because Win32's facilities for layout are so primitive that the
      designers and developers have to handle all the layout themselves.
      Nevertheless, this isn't rocket science, and the technique is so useful that
      more app designers should consider adopting it.
    </p>
  "2005-07-29 Situation normal, all fouled up.html": >
    ---

    title: "Situation normal, all fouled up"

    date: 2005-07-29

    slug: outlooks_terrib

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/07/outlooks_terrib.html

    ---


    <p>
      Sometimes an application treats a situation as an error when the situation is,
      in fact, completely normal.
    </p>

    <p>
      For a good example of a poor user experience, consider Microsoft Outlook’s
      support for the IMAP mail protocol. The vast majority of consumers use the POP
      protocol to get email at home, which generally forces them to keep all their
      mail on one machine at home. IMAP, in contrast, lets you keep all your email
      on the server, where you can get to it from work, home and on the road. Most
      email clients -- including those found on cell phones -- support IMAP. Upon
      hearing of these wonders, most people will ask why IMAP isn't used more often.
    </p>

    <p>
      While large portions of Microsoft Outlook are very well designed, there’s no
      escaping the fact that the Office team cares first and foremost about the
      enterprise market. Large enterprises have more money than you do. They use
      Exchange, and Outlook's support for Exchange is fantastic.
    </p>

    <p>
      People who use Outlook outside of an enterprise struggle along with support
      for POP mail that hasn't improved appreciably in years. While POP isn’t great,
      at least Outlook's POP driver is reasonably solid. Outlook's IMAP driver, on
      the other hand, appears to have been left for dead in the jungle, where it was
      raised by apes.
    </p>

    <p>
      Among its many deficiencies, the driver can’t properly cope if you use two
      different machines (say, at home and at the office) to check your email. This
      scenario is one of the reasons for IMAP’s existence, and most IMAP clients
      handle this situation gracefully: if they see another client is checking the
      mailbox, they wait for a while then try again. If you try to use Outlook this
      way, however, the IMAP driver throws up the following error:
    </p>

    <blockquote>
      <p>
        Your IMAP server has closed the connection. This may occur if you have left
        the connection idle for too long.
      </p>
    </blockquote>

    <p>
      Not only is this message a poor indication of what's actually going on,
      Outlook displays this message <em>every few minutes</em> until you shut down
      one of the two Outlook clients trying to reach the mailbox. Outlook even
      displays this dialog even if Outlook is already displaying
      <em>another instance of the same dialog</em>. This is insane. I can come home
      from a day of work and see, literally, a hundred of such errors sitting on the
      screen.
    </p>

    <p>
      Somewhere, deep down in the IMAP driver, there's probably a core function that
      checks for new mail. It's a sure bet that if this function is unable to check
      for new mail -- if, say, another email client is already checking the same
      mailbox -- this function returns an error. The function does this not because
      there’s anything really wrong, but because the function doesn’t have any other
      way of communicating what’s going on. The developer who wrote the calling
      function assumed that any error result is a real error, so they wrote the
      calling function to punt things off to a general purpose error handler that
      displays a generic error message. The limited forms of expression in code have
      completely warped the top-level user experience.
    </p>

    <p>
      That explains why the error dialog got into the product, but why did it stay?
      Clearly the simplest reason is that none of Outlook’s developers use the
      product’s IMAP driver themselves. The above error is exactly the kind of thing
      a developer will kill in five minutes if it's in the way of them doing their
      own work. It's reasonable to assume that the reason no Outlook developers use
      IMAP is because they rely primarily on Microsoft-supplied Exchange accounts
      for email at work. The rest of the world suffers at home because of this.
    </p>

    <p>
      I use so many of Outlook’s PIM features that I could never go back to a pure
      email client, but if all you need is mail, I’d encourage you to try
      <a href="http://www.mozilla.org/products/thunderbird/">Mozilla Thunderbird</a
      >, which has excellent IMAP support.
    </p>
2005-08:
  2005-08-01 Make every piece of text count.html: >
    ---

    title: "Make every piece of text count"

    date: 2005-08-01

    slug: make_every_piec

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/08/make_every_piec.html

    ---


    <p>
      Avoid the trap of letting a design template make you write redundant text.
      Consider the instructions in this wizard page from Windows XP:
    </p>

    <p>
      <img src="/images/flowstate/order_prints_online_2.png" />
    </p>

    <p>
      Wow! Depending on how you count, this page tells the user the same thing at
      least twice, maybe even three or four times. (If you just had the label
      &quot;Companies&quot; above a list box, the user could probably guess that
      they were supposed to select a company from the list.)
    </p>

    <p>
      Why does a UI end up with so much redundant text? Part of the problem can lie
      with the template used to create the UI. The Windows wizard template used for
      the above dialog includes the ability to easily add a subheading below the
      main heading. The person writing text for the page ends up feeling compelled
      to fill this out, even if the subheading adds no information of value to the
      user. (The user could probably assume that the photo companies print
      high-quality photos -- although that didn't stop Shutterfly from adding its
      <em>own</em> redundant text on that point.)
    </p>

    <p>
      One problem with this template is that it puts the headings on a separate
      visual surface than the main page content (the list box). Suppose we decided
      to drop all the unnecessary text and stick with a single instruction. The
      template forces a result like this:
    </p>

    <p>
      <img src="/images/flowstate/order_prints_online_take_2_1.png" />
    </p>

    <p>
      The top of the dialog now feels somewhat unbalanced. Worse, the instruction
      feels separated from the list box that the instructions refer to. Looking at
      this, you might see why someone felt compelled to add a subheading for
      balance, and then some more text to the main content area where it could sit
      directly next to the list box.
    </p>

    <p>
      Fixing this requires jettisoning the template altogether. If we put the
      instruction on the same visual surface as the list box (and lose the rather
      unhelpful icon in the upper right), we end up with:
    </p>

    <p>
      <img src="/images/flowstate/order_prints_online_take_3_1.png" />
    </p>

    <p>
      There's more visual design work that could be done here, but this is a big
      step in the right direction.
    </p>

    <p>
      We see so much redundant text in UIs that we can become inured to the clutter.
      Pare back your text to what is essential. If you find yourself writing text
      that adds no value, step back and consider whether your template is part of
      the problem.
    </p>
  2005-08-18 The tyranny of 1 or N.html: >
    ---

    title: "The tyranny of 1 or N"

    date: 2005-08-18

    slug: the_tyranny_of_

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/08/the_tyranny_of_.html

    ---


    <p>
      UIs support working with one thing at a time, or with a potentially infinite
      list of N things, but rarely for dealing with a small fixed number of things.
      This is too bad—there are some cases where supporting a small fixed set leads
      to a simpler user experience.
    </p>

    <p>Consider the typical example of a list in this Windows XP Control Panel:</p>

    <p>
      <img
        src="/images/flowstate/phone_and_modem_options.png"
        alt="Phone_and_modem_options"
      />
    </p>

    <p>
      Let's see... How many modems do you think the typical PC has? I have no idea,
      but I'm guessing the numbers are something like: 70% of PCs have no modem, 29%
      have 1 modem, and 1% have a number of modems between 2 and 4.
    </p>

    <p>
      You couldn't guess this from the UI above, though. The UI makes it look like
      it's common for a PC to have dozens of modems. The list box alone is tall
      enough to show about 13 modems comfortably before it needs to scroll. Who has
      13 modems?
    </p>

    <p>
      The product development process that produces a UI like the one usually goes
      like this. A designer builds a UI to edit settings for one modem, since that's
      the common case. This UI includes a collection of edit controls like dropdown
      lists for things like modem speed, duplex handing, etc. A tester on the team
      complains because they've got a machine that has two modems, so the designer
      is told they need to support two modems. The designer discusses this with the
      developer, who says that they don't want to have duplicate the whole set of
      edit controls to support settings for two modems: copying the controls is a
      pain, and besides, the code gets ugly. To a developer, the only numbers that
      make sense for UIs are 1 and N. If you don't want a UI to edit one thing, then
      put in a list box that lets you edit an essentially infinite number of things.
      You've not only solved the problem of the person with two modems, you've
      covered every conceivable configuration ever. Problem solved.
    </p>

    <p>
      This is weak thinking. The team may discover a significant new problem on
      their hands: the vast majority of users who come to this UI to set up their
      one and only modem must now first go through an extra, non-obvious step. The
      user comes into the dialog to find a big empty white rectangle, with most of
      the controls disabled, and it's not clear at all that the thing they need to
      do is click the &quot;Add...&quot; button.
    </p>

    <p>
      It takes guts to hardcode a UI to deal with a fixed number of things that
      covers 99% of your scenarios. One group of designers who consistently do this
      right are people who design cellphones. List management on a cellphone is a
      pain, so whenever they can, the designers give you a fixed list of things. My
      cellphone lets me switch between different &quot;profiles&quot; by selecting
      from a fixed list of exactly eight items: normal, silent, meeting, outdoor,
      automatic, headset, car, speakerphone. I can't add another profile, but that's
      fine—I can't imagine what else I'd need to create another profile for, and in
      any event I could always repurpose an existing profiles that I don't use.
    </p>

    <p>
      There are certainly many cases when a list box is appropriate, but if
      virtually all of your users will only need to work with a small handful of
      things, consider optimizing the UI for a small fixed set.
    </p>

    <p></p>
2005-09:
  2005-09-05 How big is a big download these days.html: >
    ---

    title: "How big is a big download these days?"

    date: 2005-09-05

    slug: how_big_is_a_bi

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/09/how_big_is_a_bi.html

    ---


    <p>
      I've noticed that a previously answered question has recently become open
      again: where does a typical user place their threshold for a download that's
      too big?
    </p>

    <p>
      Companies that distribute client software via a web download used to agonize
      over how to reduce their download size in order to encourage adoption. Browser
      developers in particular used to crow about how their download was smaller
      than their competitors. This was a big deal in the days of dialup. If I
      recall, a rule of thumb in the mid 90s held that each 1MB of download would
      take 10 minutes over a typical dialup connection of that period. Worse, dialup
      connections could easily fail, forcing the user to sit through the long
      download again. A user who had to devote an hour of their life to babysit your
      6MB download was quite cautious about clicking the &quot;Download Now&quot;
      button. The user was also concerned about how much disk space your product
      would ultimately eat up was everything was installed.
    </p>

    <p>
      The relevant factors have changed significantly: many users have broadband
      connections, download managers exist to cope with flaky connections, and hard
      drive space is easy enough to come by. Many companies now seem to pay scant
      attention to their download size, so I can only assume many users don't care
      either. Download Adobe's Reader product (a business requirement these days)
      and you'll see a lightning quick 500K download... of Adobe's Download Manager,
      which then brings down another 80MB or so of software—including some other
      Adobe products slipped in for good measure.
    </p>

    <p>
      One reason this question is interesting to client software designers is that
      there are some pretty interesting client runtimes coming down the pike that
      open up some great UI possibilities at the expense of download and install
      size. The forthcoming .NET Framework version 2.0 package is 22MB. The Windows
      Presentation Foundation (&quot;Avalon&quot;) or Windows Communcation
      Foundation (&quot;Indigo&quot;) add more on top of that. If you're building a
      product that itself already depends on broadband use, does the download size
      of your client even matter at all? If anyone has actual, recent data (not
      anecdotal experiences) on how todays user's react to download size, I'm
      interested in hearing it.
    </p>
  2005-09-07 Google Earth Drop-dead gorgeous satellite photo rendering with clunky visuals.html: >
    
    ---

    title: "Google Earth: Drop-dead gorgeous satellite photo rendering with clunky visuals"

    date: 2005-09-07

    slug: google_earth_dr

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/09/google_earth_dr.html

    ---


    <p>
      My favorite app of the past year has been the satellite imaging client
      <a href="http://earth.google.com">Google Earth</a>. Much of this product's
      design is absolutely state of the art, but the fact that they've done such a
      good job in the core UI makes some really clunky parts stand out.
    </p>


    <p>
      If you haven't tried Google Earth yet, you owe it to yourself to stop what
      you're doing and download their free version. While you're downloading, here's
      the summary: they give you a 3D model of the Earth that you can spin and tilt
      freely, zooming in to incredibly detailed images of your own city—and (if you
      live in a big city) your own house. The main window looks like this:
    </p>


    <p>
      <img src="/images/flowstate/google_earth_main_window.png" />
    </p>


    <p>
      I first tried Google Earth when it was an independent product called Keyhole.
      The core user experience remains the same: a set of navigation controls let
      you manipulate the virtual globe and camera. Given the complexity of doing
      anything in 3D, I think they've done a reasonable job. Most of the magic in
      the user experience comes from what happens under the covers: the high
      performance incremental downloading and caching of huge images that all
      happens in the background, with exactly the right degree of progress feedback
      in the UI.
    </p>


    <p>
      Since Google acquired Keyhole and rebranded it as Google Earth, they've
      tweaked the UI a bit. Most noticeable is an attempt to give the product some
      Google branding. Google's visual branding strategy appears to consist of
      randomly selecting user interface elements and coloring them pure red, blue,
      yellow, or green. You can be the judge of whether the above screen shot really
      says &quot;Google&quot; to you. In my mind, this UI is dominated by the
      rendered globe, and the arbitrary splashes of bright color elsewhere in the UI
      offer little more than distraction.
    </p>


    <p>
      What's really striking are the parts of the UI that have remained completely
      untouched. Just before the product shows you a magnificent, full-motion, high
      resolution magic 3D globe of the whole darn planet, you see... a gray dialog
      box:
    </p>


    <p>
      <img src="/images/flowstate/google_earth_initialization.png" />
    </p>


    <p>
      I'm a believer in trying to establish
      <a href="http://miksovsky.blogs.com/flowstate/2005/07/positive_emotio.html"
        >positive emotion from the point of first contact</a
      >, and dialogs like this don't help. This would be a lame dialog in any
      product, but it's particularly odd to see something like this—something that
      clearly no one has spent any time on since the day the dev first coded
      it—followed immediately by one of the coolest visual experiences available in
      any product on any platform. What's even odder is that the above status dialog
      appears in the startup sequence <em>after</em> a rather attractive splash
      screen. To cap it off, the dialog is pointless: the status text doesn't
      communicate any information that's meaningful to the user beyond the fact that
      the app is starting up—precisely the fact communicated by the splash screen
      that precedes this dialog.
    </p>


    <p>
      Anyway, the fact remains that Google Earth is such a draw-droppingly cool
      product that the clunky parts don't spoil an amazing user experience. Now that
      Google Earth has finished downloading, go take the next two hours off from
      work looking at every place you've ever lived.
    </p>
  2005-09-12 Media Center nicely blends data sources to create album list.html: >
    
    ---

    title: "Media Center nicely blends data sources to create album list"

    date: 2005-09-12

    slug: media_center_ni

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/09/media_center_ni.html

    ---


    <p>
      Microsoft Windows Media Center Edition contains a UI nugget worth a close
      look: the My Music area's list of albums includes any CD that happens to be in
      the drive:
    </p>

    <p>
      <img
        alt="Media_center_my_music_showing_inserted_c"
        src="/images/flowstate/media_center_my_music_showing_inserted_c_1.png"
      />
    </p>

    <p>
      This sort of thing looks obvious after the fact, but consider the fact that
      the list is blending data from two completely different sources: 1) Media
      Player's local music database, and 2) whatever CD happens to be inserted in
      the drive. All actions in the UI work essentially the same regardless of what
      kind of item is selected (with the difference that a CD can be ripped).
    </p>

    <p>
      Faced with this design problem, most teams would have created a UI that
      directly reflected the underlying data model. This would force the user to
      deal with two distinct UI elements: one area for the the albums already in the
      database, and a separate area for the local CD drives. (This is, in fact, what
      Windows Media Player does.)
    </p>

    <p>
      The Media Center team did a bunch of work to let the user work at the right
      level of abstraction: everything in the list is an album, regardless of
      whether it's ripped yet or not. This sort of thing doesn't come up every day,
      but it's worth thinking about whether your own application could benefit by
      adopting this nice trick.
    </p>
  2005-09-15 Vista UX details starting to arrive.html: >
    ---

    title: "Vista UX details starting to arrive"

    date: 2005-09-15

    slug: windows_vista_u

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/09/windows_vista_u.html

    ---


    <p>
      As part of Microsoft's Professional Developers Conference 2005, the company
      has released more information on how to design user experiences for Windows
      Vista. I was the UX architect on Vista for a number of years, so it's good to
      see this information finally starting to coming into the light of day.
    </p>

    <p>
      (As it turns out, Microsoft has created a remarkably poor user experience for
      reading their guidelines on user experience. You have to go to a section on
      Microsoft's MSDN developers site for the
      <a href="http://msdn.microsoft.com/windowsvista/uxguide/"
        >Windows Vista UX Guidelines</a
      >. You need to go through some Windows verification foolishness, although I'm
      baffled why it matters what platform you're using to read the guidelines. You
      then need to <em>download a ZIP file</em>. This ZIP file turns out to
      contain... wait for it... <em>a copy of a web site</em> that describes how to
      design good user experiences. Oh, the irony. The byzantine reasons behind
      Microsoft's web site production process are not worth delving into. Let's just
      say I'm glad I now work at a tiny startup.)
    </p>

    <p>
      Some of the Vista work I'm most excited to see deals with an effort to bring
      clarity to muddled dialog boxes and wizard pages. Vista offers OS support for
      a new &quot;task dialog&quot; style. This style—and the accompanying
      guidelines—call out a dialog's main question or instruction as a single
      sentence in clear, natural language. (The blurry example JPEG images below
      come straight from the guidelines; too bad they didn't offer lossless PNGs.)
    </p>

    <p>
      <img src="/images/flowstate/aero_dialog.jpg" alt="Aero_dialog" />
    </p>

    <p>This same task style is reflected in the new standard wizard template:</p>

    <p>
      <img alt="Aero_wizard" src="/images/flowstate/aero_wizard.jpg" />
    </p>

    <p>
      This wizard style is, in fact, an operating system feature designed
      specifically to
      <a href="http://miksovsky.blogs.com/flowstate/2005/08/make_every_piec.html"
        >make every piece of text count</a
      >. Gone are the big pointless graphics that took up a third of the page, and a
      single piece of instruction text replaces the old stack of redundant headings.
      Hallelujah. It's gratifying to see the evolution of direct OS support for the
      <a href="http://msdn.microsoft.com/library/en-us/dnwui/html/iuiguidelines.asp"
        >inductive UI style</a
      >
      I developed way back in the late 90s for Microsoft Money.
    </p>

    <p>
      Some Vista UX guidelines are specific to Vista development, but many of them
      make just as much sense for products that ship on Windows XP, OS/X, or Linux.
      Worth a look.
    </p>
  2005-09-22 LCDs recreating old physical controls (whether or not that makes sense).html: >
    
    ---

    title: "LCDs recreating old physical controls (whether or not that makes sense)"

    date: 2005-09-22

    slug: prius_lcd

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/09/prius_lcd.html

    ---


    <p>
      As LCD prices comes down, we can look forward to seeing small LCDs appear on
      every device or appliance we own. During this transition, manufacturers are
      likely to replace physical device controls with an on-screen UI that exactly
      duplicates the old physical controls, sparing them the real labor of thinking.
    </p>

    <p>
      Consider the LCDs showing up in cars. My Toyota Prius is a great little car,
      but its LCD is the weak point of the car's design. Most of the time, the LCD
      displays a power transmission diagram that lets you know when you're using the
      battery in some way. During a test drive, this diagram serves the useful
      function of giving the salesperson something to point at, because otherwise
      it's hard for them to prove to you that you're in a hybrid car. After the
      first week of actually owning the car, the power transmission diagram is
      mostly pointless.
    </p>

    <p>
      The Prius designers did come up with some other uses for this LCD, using it to
      replace a random subset of controls that used to take the form of physical
      hardware buttons and knobs. For example, the LCD controls most—but not all!—of
      the radio functions. The Prius designers have carefully preserved many of the
      limitations of the old controls, particularly the hardware radio preset
      buttons (the original &quot;radio buttons&quot; in user interfaces):
    </p>

    <p>
      <img
        alt="Toyota_prius_radio"
        src="/images/flowstate/toyota_prius_radio.jpg"
      />
    </p>

    <p>
      You can only see six radio preset buttons on the screen at a time, most likely
      because earlier Toyota cars had six hardware preset buttons. These preset
      buttons are tiny compared to the overall screen size. I can only assume that
      the designers were influenced by the physical dimensions of the old hardware
      buttons, and mirrored those old sizes on the new screen—even if the new screen
      isn't subject to any of the physical constraints that governed the old
      buttons. The designers also seemed to believe it was important that all
      buttons be about the same size, even if some buttons could benefit from
      longer, self-explanatory labels.
    </p>

    <p>
      The tiny buttons on screen are actually <em>less</em> easy to use that the old
      physical buttons that you could feel with one hand while keeping your eyes on
      the road. The tiny on-screen button size does add a spark of excitement to the
      driving experience, seeing as how each time you have to look down at the
      screen to stab at the buttons, you risk smashing into the car in front of you.
    </p>

    <p>
      What could the designers have done instead? They could have made the radio
      present buttons bigger, but that would all be small potatoes. They really
      should have thrown out the old model completely and started over by
      considering their users' basic radio listening needs and the physical nature
      of an LCD screen.
    </p>

    <p>
      Years ago I saw a demonstration of a bank ATM UI that had been completely
      redesigned from the ground up to meet the needs of the bank's blind customers.
      (If I recall, it was designed by Chase in New York City.) The bank's design
      team recognized that the easiest regions to find by feel alone are the four
      corners of the screen. They created a UI in which every page had four huge
      buttons that each took up a full quadrant of the screen. The buttons ran all
      the way to the edge, because that made it easier for the user to be sure they
      were pressing something. (The Prius designers studiously keep all their
      buttons away from the edge of the screen. It probably looks better that way in
      a graphics editor on a computer screen in the design team's office.)
    </p>

    <p>
      Perhaps this bank ATM UI could inspire better on-screen UI for car LCDs,
      making it easier to change stations without risking death. There are surely
      many other factors at play here (I'm no car designer), but the point remains
      that there are many ways to take better advantage of a graphical interface
      than simply duplicating the old way things were done before in hardware.
    </p>

    <p>
      As LCD prices drop to the point where they approach the cost of physical
      hardware buttons, LCDs will crop up absolutely everywhere. Some manufacturers
      will get this transition right, but most probably won't, at least the first
      time. It's a virtual certainty someone will end up making a toaster with a
      tiny touch screen showing a picture of knob from &quot;Light&quot; to
      &quot;Dark&quot;.<br />
    </p>
2005-10:
  2005-10-02 My complication had a complication.html: >
    ---

    title: "My complication had a complication"

    date: 2005-10-02

    slug: my_complication

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/10/my_complication.html

    ---


    <p>
      <img
        alt="Microsoft_application_error_reporting"
        src="/images/flowstate/microsoft_application_error_reporting.png"
      />
    </p>

    <p>
      Ironic, isn't it? Microsoft Outlook hung this morning, and when Microsoft
      Application Error Reporting tried to report the error, that hung too. I
      suppose I should be grateful that the above dialog didn't hang as well.
    </p>
  2005-10-03 The fractal nature of UI design problems.html: >
    ---

    title: "The fractal nature of UI design problems"

    date: 2005-10-03

    slug: the_fractal_nat

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/10/the_fractal_nat.html

    ---


    <p>
      Getting UI right requires obsessive attention to detail, particularly if
      you're building on a platform that doesn't provide substantial help for common
      UI patterns. I've recently been designing and implementing a minor feature in
      a Windows client application, and can't believe how long it's taking to get
      this feature right. The feature? Remembering the position of an application
      window across sessions.
    </p>

    <p>
      Users like applications that remember the state and position of windows across
      application sessions. They can pick a window arrangement they like, close the
      app whenever they want, and next time have everything just the way they like
      it. In the case of the Microsoft Windows APIs (both Win32 and .NET), the
      platform doesn't provide any built-in support for remembering window position.
      The platform documentation blithely tells you to do this work yourself, and
      sort of implies it won't be very hard. Hah.
    </p>

    <p>
      Here's what the learning curve looks like during a sequence of
      design/implement/test iterations:
    </p>


    <ol>
      <li>
        Designer: This feature is easy to deliver: when the user closes the window,
        we'll save the window's current state (on Windows, this is either maximized,
        minimized, or normal) and the window's current position.<br /><br /><em
          >User: Huh. This kind of works, but if I close the application while the
          window is minimized (sometimes this happens if I log off while I've got a
          bunch of apps minimized), the next time I start the application, the app
          comes up minimized. That's dumb.</em
        ><br /><br />
      </li>

      <li>
        Designer: Okay, we'll only save the window state and position if the
        window's maximized or normal.<br /><br /><em
          >User: That's better, but sometimes it still doesn't do the right thing.
          If I position the window, then minimize it, then close it, the app doesn't
          remember my window position.</em
        ><br /><br />
      </li>

      <li>
        Designer: That's easy to fix: we'll always save the window position, but
        we'll only save the window state if the window is normal or maximized.<br /><br /><em
          >User: This doesn't work.</em
        ><br /><br />
      </li>

      <li>
        Designer: Ugh. It appears that, if a window is minimized, it's &quot;window
        position&quot; data is essentially junk, and not the window's last
        meaningful position like we'd expected. To fix this, whenever the user
        positions the window in its normal state, we'll remember that position as
        the user's preferred position for the window. Then, when the user closes the
        window, we save this preferred position (not the current position, which
        could be junk). Additionally, if the window is maximized or normal, we save
        the window state too.<br /><br /><em
          >User: Not bad! This seems to work most of the time. How about this,
          though: I position the window where I want it, then maximize it, then
          minimize it, then close it. The next time I open the app, the window is in
          the normal state—not the maximized state the I last saw it in. That's
          odd.</em
        ><br /><br />
      </li>

      <li>
        Designer: You are one tough customer. Fine: whenever the user puts the
        window into the normal or maximized state, we'll remember this as the
        preferred state. Then, when the user closes the window, we save this
        preferred state (regardless of what state the window is currently in).
        Satisifed?<br /><br /><em
          >User: Not by a long shot. You see, I have a laptop. I've also got this
          external monitor on my desk—a monitor whose dimensions are different than
          those of the laptop's built-in screen. If I close the application when the
          laptop is docked, then reopen the application when the laptop is undocked,
          the application tries to come up in a position that no longer makes sense.
          Sometimes I can't even get to the window with the mouse because the window
          comes up off-screen.</em
        ><br /><br />
      </li>

      <li>
        Designer: Crap. Okay, whenever we're recording the user's preferred position
        for the window, we'll also save the current dimensions of the monitor
        itself. Then, if the app is opening and the monitor's dimensions have
        changed, we'll do our best to interpolate a meaningful position for the
        window in the new monitor dimensions.<br /><br /><em
          >User: This helps a bit, but it's not perfect. Each time I move between
          the docked and undocked state, the window position shifts a bit. I really
          want the window to be one size when I'm undocked, and a different size
          when I'm docked.</em
        ><br /><br />
      </li>

      <li>
        Designer: Urg. To do this right, we'll have to save a window's position in a
        list that stores a monitor's size and the user's preferred size for the
        window whenever the window is opened on a monitor of that size. Over time,
        this list will grow to encompass all monitor sizes the user likes to use,
        and their preferred window size for each of these monitor sizes. Satisfied
        now?<br /><br /><em
          >User: Mostly. Did I mention I recently bought a high DPI monitor? I was
          thinking that your window size interpolation routine should take into
          account physical screen inches instead of assuming a fixed pixel
          size...<br /><br
        /></em>
      </li>

      <li>Designer: Please, please go away.</li>
    </ol>


    <p>
      And so it goes.&nbsp; Since the OS doesn't provide any help, every ISV rolls
      their own solution for this, with the unsurprising result that they all
      stumble in different ways at some point along this path. Most seem get to step
      three or so. (Internet Explorer 7.x, for example, has the bug described by the
      user after step four.) If someone were willing to bake support for saving
      window state into Windows, the work would be leveraged across enough apps that
      it'd be worth the time to implement a deep solution. Even then, there'd still
      be room for improvement.
    </p>

    <p>
      There is no magical point where perfection is reached. Good design is a
      fractally hard problem: the more closely you focus on any given feature, the
      more rough edges you find to polish. The only sane approach is to iterate in
      an area until you've produced a solid user experience for a substantial
      portion of the cases you care about, then move on.
    </p>

    <p></p>
  2005-10-14 BBOP the ubiquitous yet under-examined UI model.html: >
    
    ---

    title: "BBOP: the ubiquitous yet under-examined UI model"

    date: 2005-10-14

    slug: bbop_the_ubiqui

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/10/bbop_the_ubiqui.html

    ---


    <p>
      Modern software includes a large and growing class of UIs that in my opinion
      has received insufficient formal recognition. UIs in this class share many
      traits and are distinctly different from the WIMP UIs of the 1980s and 90s.
      The WIMP acronym summarizes the hallmarks of that UI paradigm: WIndows, Icons,
      Menus, and a Pointer (usually a mouse pointer). I've noticed that I now spend
      more and more of my time on UIs that have neither windows, nor icons, nor a
      menu bar, nor a pointer. These clearly aren't WIMP interfaces, so what are
      they?
    </p>

    <p>Consider the following:</p>

    <p>
      <img
        src="/images/flowstate/media_center_television_scaled.jpg"
      /><br />Microsoft Windows Media Center Edition<br />
    </p>

    <p>
      <img src="/images/flowstate/jetblue_kiosk_1.jpg" /><br />JetBlue check-in
      kiosk (designed by
      <a href="http://www.antennadesign.com/">Antenna Design)</a>
    </p>

    <p>
      <img src="/images/flowstate/cell_phone_app.png" /><br />Typical cell phone
      screen<br />
    </p>

    <p>
      These UIs cross a diverse range of devices and environments. The first UI is
      for a media hub that is designed to be displayed on a widescreen TV, viewed
      from across a room, and navigated with an IR remote control. The second is for
      a kiosk for checking in at airports. Here the display is of average size, but
      the UI is negotiated with a touch screen. The third screen comes from a cell
      phone. This UI is optimized for a small display size, and is navigated with a
      directional pad.
    </p>

    <p>
      Despite their different origins and contexts, such UIs nevertheless share many
      traits. Instead of multiple overlapping windows, the UIs show a single page at
      a time that consumes the entire display surface. The user navigates between
      pages in the style of a web browser, and can usually navigate backwards via a
      Back button. A page almost always presents a single task at a time for the
      user to focus on. Often (but not always) the task is stated directly on the
      page. Text, not icons, is generally used to guide the user. (If they're
      present at all, the icons play mostly a decorative role.) There are menus, but
      not the dropdown sort of menu found in a WIMP UI. Instead, these menus are
      lists of buttons that sit directly on the page at all times. In fact, buttons
      are by far the most common control found in such UIs.
    </p>

    <p>
      Finally, there is no free-form pointer, or at least no dependency on one. You
      could argue that your fingertip is the pointer in a touch screen UI, but in
      practice a well-done touch UI feels completely different to me than a
      mouse-driven one. (E.g., in a touch UI, your finger clicks big fat buttons,
      with none of the dragging, double-clicking, or right-clicking that pervade
      WIMP UIs.) Many of these UIs dispense with a free-form pointer entirely.
      Instead, the user drives a keyboard focus around the screen (usually with a
      directional pad of arrow buttons) and presses a commit button like OK to
      invoke the targeted action.
    </p>

    <p>
      The commonalities between such UIs are driven by a higher-level fact: they are
      meant to help users accomplish very specific tasks immediately, without any
      training or up-front learning whatsoever. People generally use them in a
      transient way—they get in, do what they need to do (pick a TV show, check in
      for a flight, make a call), then get out. Users generally don't spend more
      than a few minutes at a time interacting with the UI proper. Even an SMS-crazy
      teen doesn't live all day inside the phone's UI the way some people live
      inside WIMP environments like Microsoft Excel or Adobe After Effects.
    </p>

    <p>
      UIs like the ones above form an important class of UI, yet this class seems to
      have received little or no formal recognition. I don't think there's even a
      commonly-accepted term for this paradigm. To facilitate discussions with my
      colleagues, I coined the acronym BBOP (&quot;bebop&quot;) to refer to such
      user interfaces. In the spirit of WIMP, the term BBOP summarizes the
      paradigm's hallmarks:
    </p>


    <blockquote>
      <p>
        <strong>B</strong>uttons (as the predominant control type)<br /><strong
          >B</strong
        >ack stack (as a organizing principle for navigation)<br /><strong>O</strong
        >ne Task (one task at a time, often explicitly stated)<br /><strong
          >P</strong
        >age-based (a single page consumes the entire visible screen area)
      </p>
    </blockquote>

    <p>
      Once we had a term for this, we began recognizing BBOP UIs in more and more
      places: DVD players, in-car navigation systems, iPods, and so on. I'm
      personally hoping to see more discussion and analysis of BBOP UIs (or whatever
      they end up being called) in the future. Even more, I'm hoping to see better
      support in UI platforms for creating them.<br />
    </p>
  2005-10-24 Remember to set AutoMessWithYourHead to false.html: >
    
    ---

    title: "Remember to set AutoMessWithYourHead to false"

    date: 2005-10-24

    slug: remember_to_set

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/10/remember_to_set.html

    ---


    <p>
      There's nothing quite like the frustration of trying to keep an application
      from helping you. I spent a good chunk of the past weekend trying to figure
      out why a UI package was displaying controls at random sizes.
    </p>

    <p>
      I'm working a Windows client application that's built on the .NET platform,
      with the UI built in Windows Forms. We recently moved from .NET 1.1 to .NET
      2.0, and I've generally been impressed by the wealth of new UI facilities. In
      particular, most controls can now auto-size to a reasonable size (finally!),
      and the new TableLayoutPanel and FlowLayoutPanel go a long way towards
      building scalable UI in a structured way through the visual designer without
      having to hand-code a bunch of layout logic.
    </p>

    <p>
      The new platform is not without its faults, however, as I discovered when some
      custom controls mysteriously changed sizes. I'd create a control with a bunch
      of auto-sized elements and nested layout panels, and in the designer
      everything would look perfect. I'd build the project, drop the control on to a
      form, and the control would look <em>almost</em> right—but the size would be
      off by some small, random amount. No amount of inspection could determine why
      this was happening, nor could any amount of groveling through the docs.
    </p>

    <p>
      It turns out that Microsoft Visual Studio 2005 offers yet another attempt to
      help ISVs build UIs that scale with respect to the user's preferred system
      font. Scaling UI to assist users who, for example, prefer large fonts is in
      principle a great thing. Changing the development paradigm for coping with
      this problem in a new product release is not so great.
    </p>

    <p>
      VS 2005 does so through a new form property called
      <a href="http://msdn2.microsoft.com/en-us/library/syyzc2zw">AutoScaleMode</a>,
      although perhaps a more appropriate name for this property might be
      AutoMessWithYourHead. Its default value is true. The true value means that
      Windows Forms will try to scale your UI with regard to the system
      font—although it won't tell you it's doing this.
    </p>

    <p>
      Now that I know what the $#*@% is going on, I can understand why Microsoft
      changed this behavior, and it's at least nice to see them trying to fix this.
      The underlying problem is that a modern, complex UI layout package is
      essentially a pretty face on top of a recalc engine. As the Microsoft Excel
      team learned years ago, in a complex spreadsheet it can be near impossible to
      track down why a particular cell value is ending up with the value it does. To
      address this very problem, Excel offers a tool that let you visually trace the
      origins of any calc.
    </p>

    <p>
      In the same light, it would be enormously valuable for WYSIWYG HTML editors or
      a client UI designers to offer some way to point to a visible element and ask,
      &quot;Why is this thing ending up with the position and size that it
      has?&quot;
    </p>

    <p></p>
  2005-10-30 Avoiding unnecessary questions in command UI.html: >
    
    ---

    title: "Avoiding unnecessary questions in command UI"

    date: 2005-10-30

    slug: ui_as_a_pesky_w

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/10/ui_as_a_pesky_w.html

    ---


    <p>
      A European acquaintance once remarked that when they go to an American
      restaurant, they feel like they're &quot;under assault&quot; by the waitstaff:
      placing an order requires answering a long series of questions—&quot;Soup or
      salad? Italian dressing or Ranch? Lite Italian or Regular Italian?&quot;—and
      the waitstaff continues to interrupt them every ten minutes to ask yet more
      questions. Some user interfaces can feel like this.
    </p>

    <p>
      In particular, some applications have commands with UIs that ask too many
      questions before the application will actually carry out the command. If you
      try to insert a new page into a Microsoft Visio document, you get a form to
      fill out:
    </p>

    <p>
      <img
        alt="Microsoft_visio_new_page"
        src="/images/flowstate/microsoft_visio_new_page.png"
      />
    </p>

    <p>
      What you really wanted was a new page, not a form to fill out. The difference
      between ordering a salad and inserting a new page is that the restaurant has
      to get things right the first time. Once you get the salad, you can't change
      your mind and have them turn the salad into a soup (or, at least, not a very
      good soup).
    </p>

    <p>
      An application, in contrast, can adjust its output after the fact. Good UIs
      often eliminate unnecessary up-front questions by doing <em>something</em> in
      response to a command and letting you tweak the results if they're not what
      you wanted.
    </p>

    <p>
      A common example: when you create a new folder in virtually all modern
      operating systems, you get a new folder right away. The new folder is called
      something like &quot;New Folder&quot;. You don't get a question asking you
      what kind of folder you want, what sort of name you'd like to give it, etc.
      For this UI to be effective, the OS simply needs to make it easy for you to
      rename the new folder once it's been created.
    </p>

    <p>
      Another example comes from Microsoft Office. In old versions of Office, if you
      wanted to paste something from the clipboard that could be pasted in multiple
      ways, you had to use an ugly and confusing Paste Special dialog:
    </p>

    <p>
      <img
        alt="Microsoft_office_paste_special"
        src="/images/flowstate/microsoft_office_paste_special.png"
      />
    </p>

    <p>
      Recent releases of Microsoft Office have deprecated this dialog in favor of a
      contextual pop-up menu that appears after commands like Paste. If you don't
      like the result of the command, you simply select another result from the
      pop-up menu:
    </p>

    <p>
      <img
        alt="Microsoft_office_paste_popup"
        src="/images/flowstate/microsoft_office_paste_popup.png"
      />
    </p>

    <p>
      Advances like these obviate the need for an application to bug the user with
      lots of questions. Other suggestions for streamlining command UI:
    </p>


    <ul>
      <li>
        If a single command is really providing two features that are only loosely
        related, refactor the command UI into two proper commands with their own
        entry points.
      </li>

      <li>
        If you have to ask a question, at least propose a default response and/or
        give examples of typical responses.
      </li>

      <li>
        If you have to present a dialog or wizard, consider employing some form of
        elision (an &quot;Advanced...&quot; button, an expando that reveals advanced
        options, etc.) to hide the unusual stuff.
      </li>

      <li>
        Instead of presenting a long sequence of questions, consider presenting a
        quick summary of what's going to happen, and let the user edit just those
        parts they want to change.
      </li>

      <li>
        If you really, really need to display a dialog (e.g., for legal reasons) but
        are confident most users won't actually need to see it each time, offer an
        option to skip past the dialog in the future.
      </li>

      <li>
        Have the basic form of the command do the thing that 95% of your users want,
        then let the remaining 5% tune the behavior of that command through an
        application option.
      </li>

      <li>
        If only a tiny number of users would ever answer a question a particular
        way, have guts and cut the question altogether. In general, you're better
        off addressing the common needs of a broad set of users than building
        special-purpose UI that only ever be used by a few people (especially if
        those few people work down the hall from you).
      </li>
    </ul>
2005-11:
  2005-11-07 Letting a user specify a preference using an example.html: >
    
    ---

    title: "Letting a user specify a preference using an example"

    date: 2005-11-07

    slug: letting_a_user_

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/11/letting_a_user_.html

    ---


    <p>
      I recently came across an elegant demonstration for getting the user to
      specify a preference by offering examples to choose from. This technique is
      often done with visual settings (e.g., letting a user select a template for a
      document by clicking on sample template thumbnails), but in this case, the
      technique was applied in letting a user specify a simple textual setting for a
      date format.
    </p>

    <p>
      I've been looking at some web sites that help manage To Do lists, including
      <a href="http://tadalists.com">tadalists.com</a>,
      <a href="http://rememberthemilk.com">rememberthemilk.com</a>, and
      <a href="http://mypimp.com">mypimp.com</a>. (Where do they get these names?
      The latter could adopt the slogan, &quot;We think having a borderline
      offensive name is so funny it's worth giving up market share!&quot;) All these
      sites strive to be as interactive as possible, and to some extent they each
      struggle with the absence of conventions for entering data on highly
      interactive web pages. This has produced some interesting and creative UI
      experiments, some of which succeed.
    </p>

    <p>
      One bit of creativity (albeit in a non-interactive area) shows up in the
      account setup page for rememberthemilk.com:
    </p>

    <p>
      <img src="/images/flowstate/remember_the_milk.Png" alt="Remember_the_milk" />
    </p>

    <p>
      It's the last line that caught my attention. The label for the radio buttons
      doesn't even say what you're picking (preferred date format), but it's obvious
      what you're supposed to do: pick the sample that shows the date the way you
      like it. What's particularly interesting is that this trick capitalizes on a
      person's ability to recognize patterns at a subconscious level. I live in a
      country where the month comes before the date, so the first option
      (&quot;14/02/05&quot;) looks like a jumble of numbers to me, while the second
      option (&quot;02/14/05&quot;) leaps off the page as a valid date. Presumably
      people who live in date-first countries have the opposite reaction.
    </p>

    <p>
      It may turn out that this trick only works in narrowly constrained
      circumstances; perhaps it would stop working, for example, if they needed to
      support a broader range of date formats. Nevertheless, it's impressive that
      rememberthemilk is able to ask for something as mundane as a date format in a
      manner consistent with the site's overall casual visual and textual tone.
    </p>
  2005-11-08 Google Local for Mobile bellwether Java cell phone applet.html: >
    
    ---

    title: "Google Local for Mobile: bellwether Java cell phone applet"

    date: 2005-11-08

    slug: google_local_ni

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/11/google_local_ni.html

    ---


    <p>
      The new <a href="http://google.com/glm">Google Local for Mobile</a> is a
      compelling little demonstration of what a Java cell phone applet can do. It's
      carefully tuned to the constraints of cell phone hardware, uses the network
      well, and makes good use of the graphic display and local caching.
    </p>

    <p>
      <img
        alt="Google_local_for_mobile"
        src="/images/flowstate/google_local_for_mobile.Png"
      /><br /><span>Google Local for Mobile</span>
    </p>

    <p>
      The installation process was much easier than I’d expected. Google’s site does
      a good job helping you figure out whether your phone will actually run their
      applet, which is nice and presumably reduces customer disappointment. The site
      directs you to a web page to open on your phone, and offers to SMS you the URL
      to save you the trouble of typing it in. The resulting web page sniffs your
      browser to determine which download you need, so you only have to make a few
      clicks to download and install the applet.
    </p>

    <p>
      In my case, I had to put up with some very clunky Java applet management UI
      produced by the local cell phone OS (controlled by my phone manufacturer, not
      Google). For example, the phone asked me to confirm that I wanted to install a
      “MIDlet”, whatever the heck that is. I expect most cell phone manufacturers
      outsource the utility UI like this to the cheapest bidder, with predictably
      poor results.
    </p>

    <p>
      The Google Local applet itself is simple but quite polished for a phone app.
      It feels a lot like Google Maps. The keyboard UI for zooming in and out took
      some getting used to. You can read a complete description in the
      <a href="http://google.com/glm/tour.html">Google Local tour</a>. The UI
      suffers from the fact that the key to zoom in (the OK button, or the center of
      the directional pad) is otherwise unrelated to the key you press to zoom out
      (a mappable button that labeled here as &quot;Zoom -&quot;). This is a
      reasonable trade-off given the small keyset available on a phone, but
      nonetheless the lack of conceptual connection between the buttons makes it
      hard to learn their relationship. It's also confusing to see the zoom out
      command clearly labeled, when what every user will need to do first is zoom
      in. The applet does offer a quick tip on how to zoom.
    </p>

    <p>
      The zoom UI also has the unusual behavior that setting the zoom level doesn't
      take effect immediately—you can zoom in or out multiple levels, then wait a
      second for the new zoom level to kick in. Again, this is a reasonable
      trade-off given the bandwidth on a phone, but again this is confusing for the
      new user. Now that I know how zooming works, I think it’s elegant, but I
      expect a significant number of users will be completely confused and give up
      on the applet after a few minutes of failing to successfully zoom around.
    </p>

    <p>
      Other small points: I was disappointed that Google’s address lookup couldn’t
      find my house. I was also disappointed that Google Local couldn’t show me my
      approximate location on the map based on info from the cell towers. Finally,
      at one point when I switched away from Google Local and then launched it
      again, Google Local lost track of the previous map view. It reset the map back
      to a high-level country view, forcing me to laboriously re-zoom down to my
      local area.
    </p>

    <p>
      The weakest part of the whole experience in my opinion is that it’s hard to
      get back into to the Google Local applet once you've left it. This isn't
      really Google's fault. On my phone (and probably most other phones), Java
      applets don't get their own top-level entry point in the main menu, nor is
      there an option to create such an entry point. I have to navigate to a special
      Java area first, then launch the Google Local app from there. For me, the
      entire navigation sequence in six clicks long, and requires two clicks that
      are essentially random (i.e., the UI element doesn't suggest that clicking it
      will lead you closer to a mapping application). The top-level Java area
      eventually did show up as a shortcut on a top-level MRU (Most Recently Used)
      list, which cut out a few clicks, but that shortcut will age off the MRU list
      if I don’t keep using it.
    </p>

    <p>
      I’ll bet that a big chunk of people who download Google Local won’t be able to
      find the applet after the first time they run it, so this single issue of
      finding the app’s entry point could be a critical weakness. Convincing cell
      phone OS designers to make it easier to launch Java applets is a
      chicken-and-egg problem: OS designers won't do this until there are more
      interesting applets like Google Local for Mobile, and app ISVs won't create a
      significant body of interesting cell phone applets unless they can be sure
      users can quickly and easily run them.
    </p>

    <p>
      Nevertheless, my overall reaction to this applet is quite positive. Google
      Local for Mobile may become a bellwether entry in the mobile app space, in
      much the same way Google Maps broke ground for highly interactive AJAX apps.
      This is the first non-game Java app I’ve seen that’s worth downloading. If you
      have a Java-capable phone, it's worth checking out.
    </p>
  2005-11-30 Why not allow the user to rename an open file.html: >
    
    ---

    title: "Why not allow the user to rename an open file?"

    date: 2005-11-30

    slug: why_not_allow_t

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/11/why_not_allow_t.html

    ---


    <p>
      It's odd that virtually all document editors still prevent the user from
      changing the name of the file they're working on. This is a shame, because
      it's a common user task.
    </p>

    <p>
      A user may start writing a new document, save it under one name, and then as
      the document evolves come to realize that another name would be more
      appropriate. There's usually no good way to do this inside the application, so
      they struggle through workarounds like saving the file under a new name and
      then digging around in the file system to delete the file with the old name.
      The operating system usually doesn't offer much help either:
    </p>

    <p>
      <img src="/images/flowstate/error_renaming_file_1.png" />
    </p>

    <p>
      The main reason most applications don't support this is because most platforms
      don't make it easy—and the main reason platforms don't make this easy is
      because most applications don't think they need to support the feature. Alan
      Cooper vented about this problem in
      <a href="http://www.cooper.com/content/insights/cooper_books.asp"
        >About Face</a
      >, and it's still a widespread problem today.
    </p>

    <p>
      There are a few applications enlightened enough to let you rename an open
      file. Microsoft Visual Studio, for example, handles this without complaint.
      Interestingly, Microsoft Word used to support this—but only in the Macintosh
      version years ago, before its user interface was realigned for consistency
      with the Windows version.
    </p>

    <p>
      It's almost impossible to get problems like this fixed in an application, let
      alone the operating system. Unless customers complain about this, no one wants
      to tackle the problem—and by now most people have grown too used to working
      around the problem.
    </p>
2005-12:
  2005-12-05 Lightweight in situ editing of page content.html: >
    
    ---

    title: "Lightweight in situ editing of page content"

    date: 2005-12-05

    slug: editing_setting

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/12/editing_setting.html

    ---


    <p>
      Sites adopting AJAX and other interactive techniques are increasingly giving
      users the ability to express preferences or change settings <em>in situ</em>,
      without having to navigate to a separate page just to change the way things
      work. This direction seems promising, but until standards emerge it's also
      fraught with the potential to confuse users or simply get in the way.
    </p>

    <p>
      The wiki vendor JotSpot, for example, allows a user to rename a page by
      hovering over the page title:
    </p>

    <p>
      <img
        alt="Jotspot_page_title"
        src="/images/flowstate/jotspot_page_title.png"
      />&nbsp; &nbsp;<img
        alt="Jotspot_page_title_hover"
        src="/images/flowstate/jotspot_page_title_hover.png"
      />
    </p>

    <p>
      An earlier generation of web sites required the user to travel to another page
      to make such an edit in the text box of a web form, then submit their changes.
      Here the interactivity is lightweight and allows for quicker changes.
    </p>

    <p>
      In a similar vein, various web portals let the user personalize the look and
      content of their home page by directly interacting with page content. The
      <a href="http://www.google.com/ig">customziable Google home page</a> puts
      links in the corner of each blurb to customize the blurb's size or remove the
      blurb entirely:
    </p>

    <p>
      <img
        alt="Google_home_page_blurb"
        src="/images/flowstate/google_home_page_blurb.Png"
      />
    </p>

    <p></p>

    <p>
      To my recollection, MSN was one of the first portals (if not the first) to
      offer lightweight editing on its own
      <a href="http://my.msn.com">customizable home page</a>. This interactivity is
      still there today, albeit with some heavy visuals and advertising:
    </p>

    <p>
      <img
        src="/images/flowstate/msn_home_page_customization.Png"
        alt="Msn_home_page_customization"
      />
    </p>

    <p>
      The main issue with all such lightweight editing facilities is the possibility
      of interfering with the average user's use of the product. If the user is just
      trying to read something, the editing controls can be distracting. At worse,
      they can throw the user into a mode that they didn't want to be in—or into a
      mode they're not even aware they're in. The situation will improve as more
      conventions emerge for lightweight editing of page content, but until then
      it's worth incorporating such interactivity cautiously.
    </p>
  2005-12-06 Elegant Cropper utility for capturing screen shots.html: >
    
    ---

    title: "Elegant Cropper utility for capturing screen shots"

    date: 2005-12-06

    slug: elegant_cropper

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/12/elegant_cropper.html

    ---


    <p>
      A helpful reader recently pointed me at the handy
      <a href="http://blogs.geekdojo.net/brian/articles/Cropper.aspx"
        >Cropper screen capture utility</a
      >
      for Microsoft Windows.
    </p>

    <p>
      One of the most time-consuming tasks in creating a post for this blog is
      capturing small images of UI examples. For certain jobs, Cropper lets me
      perform this task more quickly than other tools I've used. (<a
        href="http://www.techsmith.com/products/snagit/default.asp"
        >SnagIt</a
      >, for example, has grown somewhat ponderous for my needs.) Cropper's
      alpha-blended overlay technique for marking the crop boundaries is elegant,
      and its keyboard support allows you to tweak the position and size of the
      captured image.
    </p>
  2005-12-13 Front-loading user interaction before long operations.html: >
    
    ---

    title: "Front-loading user interaction before long operations"

    date: 2005-12-13

    slug: frontloading_us

    originalUrl: https://miksovsky.blogs.com/flowstate/2005/12/frontloading_us.html

    ---


    <p>
      Apps often need to ask users questions during long operations like
      installation or file copying. Whenever possible, it's good to front-load these
      questions whenever possible. It's irritating to walk away from a process that
      the app says will take an hour, then come back an hour to discover the app's
      only 5% done because it's waiting for you to answer a simple Yes or No
      question.
    </p>

    <p>
      I was reminded of this again during a hunt for a better file synchronization
      utility for Windows. For years I've used
      <a href="http://www.secondcopy.com">Second Copy</a> by Centered Systems, which
      has been as a straightforward workhorse, but I thought I'd see what else is
      out there now.
    </p>

    <p>
      As a rule, file synchronization tools have atrocious user interfaces. The
      people who really care about the fine points of synchronization or backup tend
      to focus on the technical challenges and ignore the greater challenge of
      presenting a simple user experience. These products typically have tabbed
      dialogs or wizards chock full of options that cover an enormous range of
      scenarios. Figuring out how to configure these options to get the product to
      do something basic often requires far more time than I'm willing to spend.
    </p>

    <p>
      I've recently tried out a number of products, including
      <a href="http://www.tgrmn.com/web/file_synchronization.htm">ViceVersa</a> by
      TGRMN Software. The UI in ViceVersa is only about average in terms of
      simplicity (in other words, not very simple), but they do offer an obvious and
      helpful mode that compares the contents of two file systems locations that are
      about to be synchronized. This lets you make sure you'll get the results you
      want. I thought the comparison mode was a nice touch, and after reviewing the
      results of such a comparison, went ahead and initiated a sync.
    </p>

    <p>
      The sync ran for many hours, and
      <a href="http://miksovsky.blogs.com/flowstate/2005/07/progress_bars_t.html"
        >restarted so many progress bars</a
      >
      that I lost count. Each phase of the sync process provided an estimate of how
      long that phase would take, but as far as I could determine, that estimate was
      meaningless because I had no idea how many other phases were yet to come or
      long those phases would take. Because the file sync was tying up two machines,
      I effectively had no idea when I would regain use of either of them.
    </p>

    <p>
      This is all par for the course in utility program UIs, but what was
      particularly irritating was coming back to the PC the next morning to find a
      dialog asking me to confirm that a given file should be overridden. This was
      quite disappointing. The application had earlier performed an exhaustive
      comparison of the files to be synchronized—<em
        >for the very purpose of letting me confirm that I wanted to copy or delete
        the files as indicated</em
      >.
    </p>

    <p>
      If the application wanted to draw my attention to some particularly
      questionable operations, it already had essentially all the information it
      would need to ask me all of those questions up front. As far as I could tell,
      there was virtually nothing that the product would find out later during the
      file sync process that it didn't already know before the sync began. There
      could perhaps exist some cases where this wouldn't be the case (e.g., arising
      from files that changed while the operation is in place), but even then the
      product should have been able to take some reasonable default course of
      action—confirmed in advance if necessary.
    </p>

    <p>
      The general point here is: when designing UI to support a long operation,
      consider whether any questions could potentially arise during the operation,
      and strive to move those questions to the point before the operation begins in
      earnest. Specifically, let the user know when they should be able to walk away
      and come back to find the process complete.
    </p>

    <p>
      I recall one UI like this that came up a long time ago in Microsoft's first
      email product, Microsoft Mail. (Microsoft Mail, interestingly, was written for
      Macintosh computers and ran on AppleTalk networks.) During a certain
      operation, the product needed to have the user insert and remove a sequence of
      floppy disks. To its credit, the team took incredible pains to: a) order the
      disk insertions so as to minimize the number of times during the process that
      the user needed to remove one disk and insert another, and b) ensure that the
      longest disk operation took place last.
    </p>

    <p>
      It's likely that no user ever perceived these refinements to the process, but
      I'm sure that some significant number of users were nevertheless saved the
      irritation of returning to their desk to discover that their computer was
      stuck halfway through, awaiting their return.
    </p>
2006-01:
  2006-01-11 Streamline dialog tasks with careful setting of the default button.html: >
    
    ---

    title: "Streamline dialog tasks with careful setting of the default button"

    date: 2006-01-11

    slug: speed_tasks_wit

    originalUrl: https://miksovsky.blogs.com/flowstate/2006/01/speed_tasks_wit.html

    ---


    <p>
      Most UI platforms allow a designer to indicate which button in a dialog should
      be the <em>default button</em>: the button that will be pressed if the user
      types the Enter key. The default button is generally the button the user is
      most likely to press next, often a button like OK that closes the dialog. In
      very high-traffic dialogs, you may want to consider dynamically changing the
      default button to save keystrokes and help speed the user's task.<br />
    </p>

    <p>
      The best example I can think of is the &quot;Select Names&quot; dialog in
      Microsoft Outlook for picking recipients for an email message. When the dialog
      opens, the focus starts out the &quot;Type Name&quot; field, and the default
      button is the &quot;To -&gt;&quot; button:
    </p>

    <p>
      <img
        alt="Outlook_address_book_2"
        src="/images/flowstate/outlook_address_book_2.png"
      />
    </p>

    <p>
      The user can start typing a name immediately, and when they've finished typing
      the name (or have selected a name in the list), they can press Enter to do the
      most likely thing: add the name to the message's To line.
    </p>

    <p>
      Here's where things get interesting. Watch what happens after the user presses
      Enter:
    </p>

    <p>
      <img
        src="/images/flowstate/outlook_address_book_3.png"
        alt="Outlook_address_book_3"
      />
    </p>

    <p></p>

    <p>
      The OK button is now the default button! Having added someone to the To line,
      the user's most likely next action has changed: they're now most likely to
      want to click the OK button and close the dialog. So, the OK button becomes
      the default button. (Leaving the To button as the default would be a bit of a
      waste here, because there's essentially no chance that the user wants to add
      the same recipient to the message twice.)
    </p>

    <p>
      The keyboard focus stays in the &quot;Type Name&quot; field. (The previous
      name is left selected in case the user wants to edit it, but typing will
      replace the selection.) The user can type any key but Enter (or Escape, etc.)
      to start entering a new name, in which case the &quot;To -&gt;&quot; button
      becomes the default button again. That is, the user is returned to the state
      shown in the first image.
    </p>

    <p>
      The overall result is that a user can open the dialog, type a name, then press
      Enter twice to add the name and close the dialog. This behavior is natural
      enough that most users zip through the dialog without even noticing what's
      going on.
    </p>

    <p>
      Since this technique is somewhat unusual, it should be used judiciously. The
      above dialog was arrived at after many, many iterations, and capitalizes on a
      very predictable sequence of user actions to shave time off a very common
      task. Without careful attention to detail, it would be easy to end up moving
      the default button to the wrong place and cause users to accidentally press
      the wrong button. The larger point here is that it's worth exploring the
      limits of standard user interface behavior to streamline a UI that will
      receive a high volume of traffic.
    </p>
  2006-01-23 Crack in the Memory Stick facade.html: >
    ---

    title: "Crack in the Memory Stick facade"

    date: 2006-01-23

    slug: crack_in_the_me

    originalUrl: https://miksovsky.blogs.com/flowstate/2006/01/crack_in_the_me.html

    ---


    <p>
      Earlier this month I attended the massive CES 2006 show in Las Vegas. When you
      meet someone during or after the show, the stock question you get is:
      &quot;What was the coolest thing you've seen at the show?&quot; My answer: the
      new
      <a href="http://products.sel.sony.com/pa/PRS/reader_features.html"
        >Sony Reader</a
      >.
    </p>

    <p>
      What was impressive about this device was not the electronic ink technology,
      nor the range of improvements this version 2.0 device shows over its
      predecessor. No, the most amazing this about this device is that
      <em>this is a Sony device that accepts SD media cards</em>.
    </p>

    <p>
      In early 1988 I had the chance in Japan to see a Sony representative
      demonstrate the Mavica, their first production digital camera. For the past 18
      years I've watched Sony's relentless efforts to foist this memory format on a
      rather uninterested public. In all those years I have experienced exactly one
      occasion where I found myself needing to transfer files between two devices
      that turned out to both be Sony devices and where I was hence able to use a
      Memory Stick to directly transfer the files.
    </p>

    <p>
      It's gratifying to see Sony finally concede the inevitable and recognize the
      standard media formats that consumers actually want to use.
    </p>
2006-02:
  2006-02-12 Some basic UI patterns for preventing accidental deletion.html: >
    
    ---

    title: "Some basic UI patterns for preventing accidental deletion"

    date: 2006-02-12

    slug: some_basic_ui_p

    originalUrl: https://miksovsky.blogs.com/flowstate/2006/02/some_basic_ui_p.html

    ---


    <p>
      Many client applications and web sites let the user enter and manipulate data,
      and these manipulations often include the ability to delete data. Designers of
      UIs that include deletion of data generally feel the need to protect the user
      from unintentionally destroying data. For such a UI, it's important to
      consider the context surrounding the Delete command (or whatever action
      triggers deletion) before settling on a solution.
    </p>

    <p>
      It's worth asking: exactly what is the concern with the user clicking a Delete
      button? I've often heard people express fear that the user's mouse might slip
      and click a Delete button, or that the user might not be paying much attention
      to what they are doing and might stab at the Delete button without
      understanding what it will do. I suspect that, in many cases, designers now
      habitually second guess the user's intention behind a deletion without
      considering alternatives.
    </p>

    <p>
      <img src="/images/flowstate/mac_trash.png" alt="Mac_trash" />
    </p>

    <p>
      Designers actually have more choices at their disposal than a delete
      confirmation dialog. Here's a quick survey of some UI patterns for a Delete
      command, in rough order of what I perceive to be the most frequently
      encountered to least frequently encountered:
    </p>


    <ol>
      <li>
        Delete with Confirmation Dialog. The user selects a Delete command (or press
        the Del key, etc.) and the application displays an &quot;Are you sure?&quot;
        dialog; the application only deletes the data if the user responds
        affirmatively. Such dialogs are ubiquitous. The goal is to provide the user
        with a second chance to consider their action. In my experience, such
        dialogs provide slender protection—users can blow past the confirmation
        dialog before their brain has even registered what it is asking them.<br />
      </li>

      <li>
        Delete Immediately. The user selects Delete, and the application deletes the
        data immediately. This is generally used if the amount of accidental loss is
        very small, or if it's quite easy to reconstruct any accidentally deleted
        data. A good example here is the Delete button next to items in today's
        typical web shopping cart. In my opinion, this plain &quot;Delete
        Immediately&quot; pattern is woefully underused. As shopping carts show,
        it's perfectly fine to blow away data immediately if the user can just
        quickly add back something they didn't mean to delete. (This is probably
        another case where the difficulty of producing a dialog in vanilla HTML
        inadvertently leads to a better UI.)
      </li>

      <li>
        Delete + Undo (single or multi-level). The application deletes the data
        immediately, but allows the user to undo the deletion by selecting separate
        Undo command. The application may allow the user to Undo only the most
        recent operation, or any arbitrarily long history of operations. The classic
        example here is a text editor. Most decent file system browsers support an
        Undo stack as well. This model is actually quite nice: it provides the
        benefits of Delete Immediately, and moves the complexity of restoring data
        to those users actually facing the need to get their data back. Even a
        single level of Undo can be helpful, as described in this
        <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=97581"
          >post about Gmail's Undo Deletion command</a
        >.
      </li>

      <li>
        Trash (with manual or automatic cleanup). The application moves deleted data
        to a temporary Trash bin (or Recycle Bin, if you're afraid of being sued by
        Apple). The user can recover deleted data from the Trash. The data is
        permanently deleted at some later point in time: when a time interval
        elapses, when some space threshold is exceeded, or when the user manually
        empties the Trash. The classic example here is the Mac Trash can, but most
        email clients follow this model as well. Perhaps because of these strong
        precedents, the Trash pattern is used almost exclusively in icon-based
        object-oriented UIs, and rarely anywhere else.
      </li>

      <li>
        Mark for Deletion. The user invokes Delete, and the selected data is marked
        in some way (e.g., grayed out, or with <del>strikethrough</del>) to indicate
        that the data is still there, but will no longer be treated as active
        (included in calculations, etc.). As with the Trash pattern, the data is
        permanently deleted at a later point. Example: IMAP email clients such as
        Mozilla Thunderbird. I consider this to be another under-utilized
        pattern.<br />
      </li>

      <li>
        Delete with Context-Sensitive Confirmation Dialog. The user selects Delete,
        and the application determines from the data to be deleted or other
        contextual information whether the user is likely to be unaware of
        consequences of the operation. In other words, the delete confirmation
        dialog <em>only comes up with when it's important</em>. A tepid example of
        this pattern comes up in text editors that only give you a &quot;Save
        changes?&quot; dialog if you're trying to close a non-empty document, but
        that close an empty document silently. This is another pattern that could
        benefit from much wider use. The basic idea is that, if the dialog only came
        up in the 10% of the time the user was really about to shoot themselves in
        the foot, the user would have a higher chance of stopping to read what it
        said. &quot;Are you sure you want to delete this file you've been working on
        for <strong>the last eight hours</strong>?&quot;
      </li>
    </ol>


    <p>
      Any time an &quot;Are you sure?&quot; dialog is about to be added to a UI
      should force you to at least briefly consider whether an alternative pattern
      might better suit the context.
    </p>
  2006-02-16 Death of the lame Recycle Bin confirmation dialog in Windows.html: >
    
    ---

    title: "Death of the lame Recycle Bin confirmation dialog in Windows?"

    date: 2006-02-16

    slug: completely_lame

    originalUrl: https://miksovsky.blogs.com/flowstate/2006/02/completely_lame.html

    ---


    <p>
      Before leaving behind the previous topic of deletion patterns, let's briefly
      look at one of the weakest implementations of the Trash pattern anywhere: the
      Recycle Bin in Microsoft Windows. On the Mac, when you move something to the
      Trash, it moves to the Trash. In Windows, when you move something to the
      Trash, you get this:
    </p>

    <p>
      <img
        src="/images/flowstate/windows_delete_confirmation_dialog.png"
        alt="Windows_delete_confirmation_dialog"
      />
    </p>

    <p>
      When Microsoft appropriated the Trash pattern (from Apple and Xerox), it was
      apparently helpless to resist the desire to protect the user with a
      confirmation dialog—even though
      <em
        >the entire point of the Trash pattern is to avoid irritating the user with
        a confirmation dialog</em
      >. File this one under, &quot;Unclear on the concept&quot;.
    </p>

    <p>
      For what it's worth, both Windows and the Mac display an additional
      confirmation dialog if you manually invoke the Empty Trash command. The
      Windows dialog says like, &quot;Are you sure you want to delete these
      <em>&lt;number&gt;</em> items?&quot; The Mac dialog says: &quot;Are you sure
      you want to remove the items in the Trash permanently? You cannot undo this
      action.&quot; It's a matter of opinion, but here I give a slight preference to
      the Windows version, since the Mac dialog is redundant; an action that's
      permanent is, by definition, an action that can't be undone. (You could also
      argue that, if you know how to use&nbsp; disk utilities, the delete operation
      isn't actually permanent. Either way, the dialog is wrong.)
    </p>

    <p>
      The confirmation dialogs in the Windows means the lucky user has at least
      <em>three</em> chances to avoid accidental deletion! They can: 1) say No to
      the first confirmation dialog, 2) Undo the move to the Recycle Bin, or 3) say
      No to the second confirmation dialog. It's nice to know that, with all this
      protection, no Windows user anywhere has ever deleted something they didn't
      want to delete.
    </p>

    <p>
      It's possible that Microsoft has silently made some progress on this issue.
      When I tried to reproduce the first delete confirmation dialog to take a
      screen shot of it, I was unable to get it to appear on any of five different
      Windows XP PCs. The &quot;Display delete confirmation dialog&quot; check box
      still exists in the Recycle Bin's Properties dialog, but as far as I can tell,
      this check box no longer has any effect. Perhaps the dialog was quietly
      dropped in a service pack update? I can find no confirmation of this on the
      net. If anyone has an authoritative account on whether this dialog has been
      dropped, let me know. It'd be nice to say good riddance to an unloved dialog.
    </p>
  2006-02-26 Approachable UI package in Garmin Nuvi GPS.html: >
    ---

    title: "Approachable UI package in Garmin Nuvi GPS"

    date: 2006-02-26

    slug: approachable_ui

    originalUrl: https://miksovsky.blogs.com/flowstate/2006/02/approachable_ui.html

    ---


    <p>
      The new <a href="http://www.garmin.com/products/nuvi/">Garmin Nuvi</a> GPS
      presents a well thought-out UI, cleanly knitting together three modes of
      interaction: display, touch, and audio.
    </p>

    <p>
      <img src="/images/flowstate/garmin_nuvi.png" alt="Garmin_nuvi" />
    </p>

    <p>
      Garmin and other manufacturers have been making GPS units since the late
      1980s, and during that time have continually made incremental improvements in
      size, form factor, performance, and UI. From time to time I've looked at the
      category, but beyond the flat-out magic of finding your way using satellites,
      I found little captivating about the products themselves. GPS units have
      suffered from a wide range of UI problems, such as the heavy use of jargon,
      awkward use of a few buttons to accomplish complex tasks (such as entering an
      address), and cumbersome systems for transferring maps to a device with
      limited memory.
    </p>

    <p>
      Sometimes you encounter a product and get the strong feeling its the first one
      in its category to really be Designed, with a capital &quot;D&quot;. In my
      case, <a href="http://www.tomtom.com">TomTom</a> had the first GPS with that
      distinction. From the branding to the startup sound to the UI, they had
      clearly thought about the product as a consumer experience. Despite breaking
      that ground, I still felt that the TomTom product I saw came up short.
    </p>

    <p>
      The Garmin Nuvi is the first GPS I've seen that meets my bar for a good user
      experience. They've given a lot of thought to an overall package of
      functionality a traveler might want in a single pocket device. In addition to
      the GPS, the Nuvi unit includes an MP3 player, a photo vault, a currency
      converter, a world clock, a foreign language dictionary, and a travel guide.
      This is a good sign that Garmin's considering the overall user experience of
      the device, not just trying to make a housing for a satellite receiver.
    </p>

    <p>
      You can read thorough plenty of reviews of the Nuvi elsewhere, so I'll focus
      on the nice bits in the user experience:
    </p>


    <ul>
      <li>
        Clear screen organization, with careful use of color, shape, contrast, and
        typography to define a hierarchy of screen elements. Consider that in the
        above image they've made the &quot;200&quot; in a significantly larger font
        than the &quot;m&quot; (meters) unit that follows it. Moreover, they've
        top-aligned the &quot;m&quot; unit to maintain the legibility of the much
        more important number. In this particular application, it's critical for the
        user to be able to glance down at the screen and get a sense of how far they
        have to go until they need to turn. That is, if they see three characters,
        they know they have hundreds (3 characters) of meters left to go, not
        thousands (4 characters). Displaying the units as &quot;200m&quot; in the
        same font and aligned along the text baseline would make it harder for the
        user to intuitively grasp this.
      </li>

      <li>
        Responsive touch screen. Unlike some folks (like
        <a href="http://miksovsky.blogs.com/flowstate/2005/09/prius_lcd.html"
          >Toyota</a
        >), Garmin generally makes good use of buttons placed flush against the
        corners to improve the chance you'll actually hit what you want. (The map
        screen above is an exception.)
      </li>

      <li>
        Generally solid implementation of a
        <a href="http://miksovsky.blogs.com/flowstate/2005/10/bbop_the_ubiqui.html"
          >BBOP</a
        >
        (Back, Buttons, One Task, Page Based) UI. One small nit: they show a Back
        button on <em>almost</em> every page, but not on all pages. In particular,
        if you click the Menu button in the main driving map (shown above), you end
        up a menu page with no clear way to get back to what you were looking at. It
        turns out you need to pick one of the menu options: the one called
        &quot;View Map&quot;. I found this counter-intuitive. In general, I think
        that if you're going to offer a Back button on the screen, you need to offer
        this button on every screen and in the same location.
      </li>

      <li>
        Judicious use of &quot;transparent&quot; buttons on maps to add UI elements
        that take up a surprisingly small amount of actual screen pixels. The Zoom
        In/Out buttons shown above are roughly 46x46 pixels square and the border is
        two pixels thick. The borders only consume about 350 pixels, and for that
        price they get a pretty big transparent button. A transparent button like
        this consumes about the same number of pixels as a 19x19 solid button, which
        would be incredibly tiny on a touch screen.
      </li>

      <li>
        Reasonably good voice prompts with text-to-speech. I was impressed with the
        Nuvi's ability to not only pronounce local street names, but to apply fairly
        natural phrasing and intonation to an entire instruction. I do think Nuvi
        and similar products could benefit by tightening up the phrases they're
        trying to read. No human passenger includes street type or direction markers
        when giving instructions to a driver, unless such information is currently
        salient. Instead of saying, &quot;Turn left of East Galer Street&quot; like
        the Nuvi does, people say, &quot;Turn left on Galer&quot;. People generally
        add more information like &quot;East&quot; only when that helps discriminate
        among the current roads the driver can turn down. It would be relatively
        trivial to add this refinement to a GPS voice UI.
      </li>
    </ul>


    <p>Overall, a nice information appliance.</p>
  "2006-02-26 Okay, death *TO* the lame Recycle Bin confirmation dialog in Windows.html": >
    
    ---

    title: "Okay, death *TO* the lame Recycle Bin confirmation dialog in Windows"

    date: 2006-02-26 10:58:00 AM

    slug: okay_death_to_t

    originalUrl: https://miksovsky.blogs.com/flowstate/2006/02/okay_death_to_t.html

    ---



    <p>Thanks to those of you who pointed out that the first Windows delete confirmation dialog described in the previous post only appears when the user presses the Del key, but not if they use drag and drop. (I'd been trying to reproduce the dialog using drag and drop.)</p>

    <p>Both Windows and the Mac offer multi-key keyboard shortcuts (Shift+Del and Command+Backspace, respectively) to delete a file without displaying a confirmation dialog. Since the Mac doesn't offer a single key shortcut for deleting a file, it has no need of a confirmation dialog. Personally, I find this to be an elegant answer, although it's inconceivable that Windows would take its Del shortcut away.</p>

    <p>I still argue that the dialog in Windows should fade away. As a comment to the earlier post describes, the dialog would be an appropriate place to educate the user on how the Recycle Bin works, where to find it, and how to get things back out of it. Once the user has figured out how the Recycle Bin works, they should be able to easily get rid of the dialog with an option in the dialog itself (and not in a property dialog far away). Alternatively, Windows could simply track user actions and determine when the user no longer required this education.</p>
2006-03:
  2006-03-12 Windows Live image search makes strides beyond Google.html: >
    
    ---

    title: "Windows Live image search makes strides beyond Google"

    date: 2006-03-12

    slug: windows_live_im

    originalUrl: https://miksovsky.blogs.com/flowstate/2006/03/windows_live_im.html

    ---


    <p>
      It's a relief to finally see Ajax-based search pages moving beyond the
      limitations of vanilla HTML pages. A good example is the recent update to
      Windows Live
      <a
        href="http://www.live.com/#q=cherry%20blossoms&amp;scope=images&amp;page=results"
        >Image Search</a
      >, which allows you to browse an entire set of search results in a single
      scrolling region.
    </p>

    <p>
      <img src="/images/flowstate/windows_live_image_search.Png" />
    </p>

    <p>
      I use Google's
      <a
        href="http://images.google.com/images?q=cherry+blossoms&amp;btnG=Search+Images"
        >image search</a
      >
      a lot. The most time-consuming part of posting to this blog is often getting a
      decent screenshot, and while a
      <a href="http://miksovsky.blogs.com/flowstate/2005/12/elegant_cropper.html"
        >good screen capture tool</a
      >
      is invaluable, it's often faster to google for a screenshot. For certain types
      of UIs, such as cell phone UIs, this is sometimes the only reasonable way to
      get a good screenshot at all.
    </p>

    <p>
      Google's image search tool is good but doesn't seem to have changed
      significantly in a year or so, whereas Microsoft's image search tool makes a
      number of important advances. Live's single scrolling region is much faster to
      navigate than Google's multiple pages, especially since Google insists on
      putting the Next button only at the bottom of the page (where it often ends up
      below the fold). Live also lets you scale the size of the thumbnails so you
      can either quickly scan lots of images or linger over more detail. Live makes
      good use of large ToolTip pop-ups that give you a decent preview of the image
      before you navigate. Finally, after you click a thumbnail, Live provides a
      filmstrip view of your search context down the left side of the page, allowing
      you to continue navigating without having to return to the main results page.
    </p>

    <p>
      It must said that even though Live's virtualized image list box is faster in
      practice to navigate than browsing multiple pages, the scroll bar feels just
      slow enough to make the overall user experience seem unresponsive. Hopefully
      they haven't hit the upper bound of what's possible in Ajax yet, and we'll see
      some improvement in performance in Live—and in Google as they play
      catch-up.<br />
    </p>
2006-05:
  2006-05-09 Blogging through the product cycle.html: >
    ---

    title: "Blogging through the product cycle"

    date: 2006-05-09 09:29:00 PM

    slug: blogging_throug

    originalUrl: https://miksovsky.blogs.com/flowstate/2006/05/blogging_throug.html

    ---


    <p>
      One of the realities of startup life is that there's not much time left for
      side pursuits like blogging. Every project ebbs and flows between periods that
      are busy and periods that are completely, insanely busy. The last two months
      have qualified as insanely busy, forcing an unplanned hiatus from blogging
      here on flow|state.
    </p>

    <p>
      Many thanks to those of you who shared their support and quietly expressed
      interest in when the next post was coming. As my company's first product
      trundles along towards its initial launch, there will be more insanely busy
      periods, but I'm hoping to find a posting schedule that lets me keep
      contributing even through those periods.
    </p>
  2006-05-09 Font impoverished.html: >
    ---

    title: "Font impoverished"

    date: 2006-05-09 09:30:00 PM

    slug: what_the_font

    originalUrl: https://miksovsky.blogs.com/flowstate/2006/05/what_the_font.html

    ---


    <p>
      Over the past few months I've found myself confronted by an unexpected
      problem: the lack of a functioning platform and ecosystem for using custom
      fonts in applications. I'd assumed this problem had been solved long ago, but
      practical experience suggests otherwise, as does the the world of extant UI
      out there. Something like 99% of the client UIs seem to use a stock system
      font, and 95% of all the real text in web pages seems to be set in a standard
      sans serif font (Arial or Helvetica). I've come to view this as one of the
      tightest practical constraints on UI expression today.
    </p>

    <p>
      User experiences suffer from this bland uniformity, as does an organization's
      ability to reinforce its identity. Type is such an important part of
      establishing brand. No one designs printed material without careful
      consideration of typography, yet we put up with only tiny amounts of custom
      type on web pages and in applications—and this text is inevitably hardcoded as
      images where it can't do as much good. To me this is akin to the color
      limitations of yesteryear.
    </p>

    <p>
      <img
        src="/images/flowstate/16_color_palette.png"
        alt="16_color_palette"
      /><br />16 colors: Limited, boring, lame
    </p>

    <p>
      <img src="/images/flowstate/helvetica_sample.png" alt="Helvetica_sample" />
    </p>

    <p>Stock sans serif font: Limited, boring, lame</p>

    <p>
      Here are just some highlights from the catalogue of pain accompanying attempts
      to use a custom font in a user interface:
    </p>

    <p>
      <strong>Lack of decent development support for rich text.</strong> On most
      client UI platforms, if you want to display static text, you use a simple
      label control. This label control can generally display a block of text in a
      single typeface, point size, weight, and style. There's generally no support
      for simple inline changes <strong>like this</strong> that apply to a span
      within the text; text properties always affect the entire text block. This
      leads to a general apathy towards typography that pervades the entire
      development experience: since doing anything interesting is hard, why bother?
      There's generally no support for styling, so evolving a user interface that
      uses anything but the system font becomes a tedious exercise in tracking down
      font references and making sure that every obscure dialog is using your fonts
      the right way. Most platforms include a rich text control, but these are meant
      for run-time editing, not design-time editing, and their performance is
      usually terrible. Alternatively, you could host your text in a browser
      control, which has an even worse design-time experience, even worse
      performance, and complicates your development substantially as you have to
      factor text into tiny fragments of HTML.
    </p>

    <p>
      <strong>Licensing minefield.</strong> Oh, you thought you could just give away
      that font with your app, huh? That font file is intellectual property that you
      need to pay for, and licensing anything can be a legal nightmare. Designers at
      large software companies can call in airstrikes from their legal department to
      have licensing agreements negotiated on their behalf. Startup folk have to do
      this on their own, and what a royal pain it is.
    </p>

    <p>
      Font foundries are focused on graphic designers. A graphic designer usually
      needs one copy of a font for their own use. They create something in Photoshop
      or whatever with the font, then create the desired physical (print) or
      electronic rasterized output (PDF, etc.). Approaching a company like this with
      a request to include their font in your application or site will get you the
      email equivalent of a blank stare. I spent an entire morning on the phone with
      one of the largest font vendors on the planet trying to find someone who could
      license one of the company's fonts to me. I was transferred
      <em>seven times</em> to different people, none of whom had the faintest idea
      was I wasking for. One person asked me whether my application would be used by
      more than 5 people. The company's web site was no help—in fact, it was
      misleading and therefore worse than useless. Whever a company has this much
      trouble accepting money from someone desperate to do the right thing and pay
      them, something is seriously wrong.
    </p>

    <p>
      <strong>Installation hassles.</strong> For Microsoft Windows, at least,
      support for custom fonts remains the same as it has for years: you can only
      reference fonts that installed in system's Fonts folder. This means that your
      Setup program has to physically copy the required font files to the user's PC.
      The copied fonts are loose font files
      <em>that the user can then use themselves</em>. This is Lame with a capital
      &quot;L&quot;, particularly because it compounds your licensing nightmares
      (above). Why on earth should you have to pay to give all your customers the
      ability to use a font in their own documents just because you want to use it
      in your app's UI? You don't have to give your customers loose copies of your
      audio files, or image files, or videos, or any other type of resource. Recent
      experience has convinced me that installing fonts on Windows is a fragile and
      buggy proposition. Even with the substantial assistance of a widely-used setup
      framework, it's absurdly difficult to ensure that the fonts you want get
      registered in such a way that they can be used immediately (without requiring
      a reboot) under all conditions. Other OSes may fare better here, but given the
      problems I've witnessed in Windows, it's no big surprise that most Windows
      ISVs punt and stick with Tahoma.
    </p>

    <p>
      <strong>Web limitations.</strong> Web sites that want to use custom fonts can
      resort to what can only be described as hacks. You can use Microsoft's
      <a href="http://www.microsoft.com/typography/web/embedding/default.htm"
        >WEFT</a
      >
      (Web Embedding Fonts Tool) if you want to limit yourself to Internet Explorer
      and sign up for a bunch of deployment hassle. You could also look at tricks
      like <a href="http://www.mikeindustries.com/sifr/">sIFR</a> that (amazingly)
      work but involve gyrations with scripting and Flash. Isn't it odd that it's
      easier to make text blink than it is to format that same text in a font that
      is part of your organization's visual identity? One can infer that the small
      number of sites using any of these hacks is a reasonable indiciator that the
      problem remains unsolved.
    </p>

    <p>
      Flash is a bright spot here, giving designers the choice of embedding fonts or
      referencing installed fonts. Unfortunately, for a variety of reasons, I don't
      find Flash a viable option for mainstream application development. If you're
      someone who gets to use Flash, I envy you your freedom of typographic
      expression.
    </p>

    <p>
      Given the pace of change, I'm sure this problem will eventually be fixed. In a
      few years we'll look back at screen shots of client apps or web pages from
      this time and instantly recognize them as dating from an earlier era—because
      most of the text will be formatted in the same stupid sans serif fonts.
    </p>
  2006-05-25 Windows Media Player 11 Early bit of Aero.html: >
    ---

    title: "Windows Media Player 11: Early bit of Aero"

    date: 2006-05-25

    slug: windows_media_p

    originalUrl: https://miksovsky.blogs.com/flowstate/2006/05/windows_media_p.html

    ---


    <p>
      For someone who loves to see new user interface ideas, it doesn't get much
      better than the current season of Microsoft betas. Last week Microsoft
      released a beta of Windows Media Player 11, followed this week by betas of
      Office 2007 and Windows Vista. These products are all such significant updates
      that, regardless of one's opinion of Microsoft and its products, they should
      all present ample inspiration for user interface designers.
    </p>

    <p>
      Although I don't think Microsoft has billed it as such, I believe Windows
      Media Player will end up being considered to be the first product in the Vista
      wave of UIs to actually ship. (Rumored release dates put it sometime in the
      next month or so.) Windows Media Player 11 already embodies many of the Vista
      user interface principles and the Aero visual style.
    </p>

    <p>
      <img
        alt="Windows_media_player_11"
        src="/images/flowstate/windows_media_player_11_scaled.png"
      />
    </p>

    <p>Vista and Aero elements that can be seen in the beta include:</p>


    <ul>
      <li>
        Clean, minimalist UI. All parts of the previous XP-era UI have been
        thoroughly overhauled to make sense for this app’s needs, while retaining
        clear guiding elements for the new user.
      </li>

      <li>
        Black glass visual style. This includes pervasive use of lighting effects,
        particularly simulated reflection. (The “R” in the original AERO acronym
        stood for “reflective”.) Particular design attention has been lavished on
        the front and center Play button, which sports a very nice hover effect.
      </li>

      <li>
        Back/Forward buttons in upper left corner. Web-style navigation is applied
        much more consistently in WMP 11 than in previous versions. WMP 11 follows
        the general Vista application of navigation to views. For instance, commands
        that effect the presentation of a view (the sort order, say), but not its
        contents, do not count as navigation events. Changes that effect the
        contents (filtering, view changes) are considered navigation events. These
        events can be undone by going Back. That is, you click Back to return to
        your previously view. This navigation model has been a long time coming, and
        feels pretty good to me in practice.
      </li>

      <li>
        Toolbar across the top spells out the application's value proposition. Aside
        from offering quick access to the WMP's major features, the toolbar also
        lets a new user quickly grasp what it is that WMP actually has or does: play
        music, (organize a) Library, Rip, Burn, Sync, and purchase music from a
        store. This toolbar element isn't properly speaking a Vista UI guidelines
        element (i.e., something Microsoft asks other ISVs to follow), but is a
        hallmark of a number of Microsoft's own applications included in the Vista
        product itself.
      </li>

      <li>
        Breadcrumb bar across top of viewing area. As in the Vista shell, clicking a
        breadcrumb element (&quot;Music&quot;, &quot;Library&quot;, or
        &quot;Songs&quot;, in the image above) navigates to that point in the
        virtual search hierarchy. Clicking a breadcrumb element's dropdown arrow
        (revealed on hover) allows fast navigation to that element's siblings in the
        hierarchy.
      </li>

      <li>Full text search box in the upper right.</li>

      <li>
        Property tree on left. Of all the Vista element in WMP 11, the property tree
        seems the most rudimentary. The Vista shell will eventually deliver a much
        richer experience here for filtering and viewing lists, but it's interesting
        to see that WMP is already lined up with that future direction.
      </li>

      <li>
        New views. The default “Songs” view is an instance of an Expanded Tile that
        shows song information alongside album art. I find this more useful and
        attractive than either a flat track listing or album art view. This Songs
        view will probably not be interesting to folks who acquire individual music
        tracks (by whatever means).<br />
      </li>
    </ul>


    <p>
      I do have one minor nit: The toolbar buttons across the top are split buttons
      (on hover, a small portion of the button reveals a dropdown menu), but the
      target area for the dropdown arrow is a incredibly thin horizontal rectangle
      across the bottom of the button. Common sense (and consequences of Fitts’ Law)
      suggest that targets are easier to hit if they’re big and square. The decision
      to use a target area along the bottom of the button was presumably influenced
      by aesthetic considerations. (Putting the dropdown arrow on the right would
      spoil the general horizontal symmetry throughout this UI.) I can appreciate
      the importance of aesthetic concerns, but here it seems they should have been
      overpowered by the practical need for usability. Or perhaps it’s the case that
      only young people with hyperfine dexterity are the people that want to quickly
      rip albums at specific bit rates.
    </p>

    <p>Anyway, after a week of using WMP 11, I’m quite impressed.</p>
2006-06:
  "2006-06-25 Oh app, for crying out loud, go update yourself.html": >
    
    ---

    title: "Oh app, for crying out loud, go update yourself"

    date: 2006-06-25

    slug: hey_app_go_upda

    originalUrl: https://miksovsky.blogs.com/flowstate/2006/06/hey_app_go_upda.html

    ---


    <p>
      When I start my PC these days, I see six or seven different applications in
      the Windows system tray screaming for attention. “An update is available!
      Update me!” “No—Update ME!” they cry. Great. Another click, another progress
      bar, another completely minor upgrade accomplished. One wonders: is there a
      meaningful role for the user in this process at all?
    </p>

    <p>
      When it comes to updates, companies making client software have an enormous
      disadvantage versus web-based competitors. Deploying new server bits is a
      problem of considerable complexity in its own right, but at least the web
      software company gets to decide when to deploy and who conducts the upgrade.
      The user has no choice whether to use the updated site or not. In my own
      experience, most site updates seem to go rather well (your mileage may vary),
      so it’s not something I even pay attention to.
    </p>

    <p>
      The client software manufacturer, meanwhile, has the challenging task of
      deploying bits to a quantity of machines orders of magnitude greater in size.
      The target machines could be running in any number of configurations the
      manufacturer isn’t even aware of, much less have in their test matrix. The
      update process is under the supervision of a user who generally has no idea
      what to do if something goes wrong.
    </p>

    <p>
      Nevertheless, the mere existence of the constantly upgrading web-based
      competitor puts considerable pressure on the client software manufacturer to
      make the update process as transparent as possible. To be sure, client
      software updates are much less of a pain than they used to be.
      <a href="http://en.wikipedia.org/wiki/DLL_hell">DLL hell</a> is, by and large,
      no longer a nightmare plaguing every single update. Persistent broadband
      connections make checking for updates easy, and downloading new bits quick. In
      the vast majority of cases, the user needs to supply no additional data, the
      updates fall under EULAs the user has already agreed to, and the software
      already knows where it should be installed.
    </p>

    <p>
      So why make the user agree to the update at all? Why not just do the update
      for them—at least in the cases where the user doesn’t have to do anything
      else?
    </p>

    <p>
      Users at the extreme end of the techno-savvy spectrum may demand the ability
      to control when updates happen. Let’s stipulate that they should have the
      right to do so. I expect that most users, however, don’t care to exercise this
      right. I think the average person would only ask the following of any client
      software manufacturer regarding updates:
    </p>


    <blockquote>
      <p>
        Rule 1: Don’t screw up my PC. This includes things like surreptitiously
        switching my home page, spamming my desktop, etc.
      </p>

      <p>
        Rule 2: Don’t try to upgrade your product when I’m in the middle of using
        it. In general, don’t distract me from what I’m doing right now. To be
        honest, you’re really not that important to me.
      </p>

      <p>
        Rule 3: Don’t reboot my PC. That’s rude. Whatever Adobe Acrobat Reader is
        doing that requires a reboot isn’t worth it to me.
      </p>
    </blockquote>


    <p>
      I think that’s about it. Is the typical client software upgrade user
      experience these days actually supporting these goals?
    </p>

    <p>
      Following a reboot on my main home PC, MSN Messenger (now called Windows Live
      Messenger) is the application most likely to be yelling for attention. Its
      upgrade experience is at the, er, “good” end of the user experience continuum
      for these sorts of things.
    </p>

    <p>
      <img
        alt="Msn_messenger_toast"
        src="/images/flowstate/msn_messenger_toast.png"
      />
    </p>

    <p>
      This little window that pops up is called a “toast” by the MSN design team
      because it pops up like a piece of toast. This particular piece of toast is
      lying. Clicking it brings up a dialog that does not, in fact, offer any more
      information.
    </p>

    <p>
      <img
        src="/images/flowstate/msn_messenger_upgrade_dialog_1.png"
        alt="Msn_messenger_upgrade_dialog"
      />
    </p>

    <p>
      Instead, the toast has actually tricked the user into starting the upgrade
      process. (For the record, this particular upgrade to MSN Messenger Version 7.5
      will require a reboot.) The user can try to leave, but only by being forced to
      agree to be bothered again later. The user can click yet another button to see
      a web page that (finally) tells them why they should care about this upgrade:
    </p>

    <p>
      <img
        src="/images/flowstate/msn_messenger_upgrade_page.png"
        alt="Msn_messenger_upgrade_page"
      />
    </p>

    <p>
      It's interesting to wonder which of the features listed above was the one that
      required a reboot.
    </p>

    <p>
      In any event, the list of new features is beside the point. The placement of
      this information—three clicks away from the user—makes this fact obvious. The
      user has no choice in this process. It really doesn’t matter whether they like
      the new features or not. The manufacturer has updated the software, and will
      at some point stop supporting the old software. The user is going to have to
      upgrade at some point, or run the risk of being shut out when they really do
      need the service.
    </p>

    <p>
      Why can’t the manufacturer simply arrange to have the client software
      automatically upgrade itself at some convenient time?
    </p>

    <p>
      First, there’s the matter of preference—the user might not actually prefer the
      new software to the old software. This is entirely likely, but allowing them
      to keep running the old version seems like an incredibly inefficient solution
      to the problem. This creates tribes of users running old versions,
      complicating maintenance and improvement of both the client and server
      software. The enormous resources thus wasted could be put to better use
      finding out why people hate the new software and addressing the core design
      issues. This is what good web sites do. Or, if the differences are
      irreconcilable, the manufacturer can resort to leaving in program options that
      preserve aspects of the old user experience. In any event, making upgrades
      optional simply delays the inevitable disappointment of a forced upgrade when
      the manufacturer eventually can no longer support the old version.
    </p>

    <p>
      Second, there’s the matter of bad upgrades. Sometimes this is because the
      manufacturer wrote buggy code. Postponing the upgrade isn’t going to fix this
      problem—the user is going to play upgrade roulette at some point. As noted
      earlier, the hapless user’s hardware and software stack may operate in a
      configuration outside of the manufacturer’s testing matrix. If this really is
      a critical reason to leave upgrades under a user’s control, then the existing
      user experiences fall far short of actually supporting this goal.
    </p>

    <p>
      The problem is that no upgrade experience I’ve seen actually helps the user
      conduct a realistic evaluation of whether they can expect the upgrade to go
      smoothly in their configuration. As seen above, upgrade announcements for most
      applications are entirely rosy lists of new features, with no indication of
      what might go wrong. The little pop-up toast affords no links to resources
      such as upgrade FAQs, knowledge base articles, or most importantly, current
      user discussions of issues related to the upgrade. Users who care about
      upgrades currently must find this information on their own.
    </p>

    <p>
      Given that the mainstream user can’t invest that kind of time, the only user
      experience that makes sense for them is automatically upgrading them at a
      convenient time (e.g., the machine is idle and it’s the middle of the night).
      If the program is in use, the program should at least download the bits,
      install as much as it can, and be prepared to cut over to the new version when
      the user next restarts the application. (Mozilla Firefox does this, although
      with too many dialogs for my taste.)
    </p>

    <p>
      To support those users who want to carefully manage the upgrade process, the
      manufacturer can offer an option for manual upgrades. This option
      should—quietly—notify users when an upgrade is available. Since the mainstream
      user can’t be bothered to understand that option, the option should default to
      automatic upgrades. This scheme is, in fact, the route that Microsoft has
      finally taken with Microsoft Windows upgrades. Their user experience certainly
      isn’t ideal, and yet on balance Automatic Updates probably saves far more
      grief than it inflicts. Given the challenge of the client software upgrade
      problem, that’s about as good as anyone can expect.
    </p>
2006-07:
  2006-07-11 Insert key safely disarmed in Microsoft Word 2007.html: >
    
    ---

    title: "Insert key safely disarmed in Microsoft Word 2007"

    date: 2006-07-11

    slug: insert_key_safe

    originalUrl: https://miksovsky.blogs.com/flowstate/2006/07/insert_key_safe.html

    ---


    <p>
      The Office 2007 user interface overhaul has generated justified hoopla that
      has also overshadowed some minor but welcome improvements. Case in point:
      Microsoft Word 2007 has finally neutralized the Insert key, preventing the
      accidental triggering of an utterly bewildering Overtype mode.
    </p>

    <p>
      I’ve been using
      <a href="http://www.microsoft.com/office/preview/default.mspx"
        >Office 2007 Beta 2</a
      >
      for production work for about a month now, with generally positive results. I
      use Word intensively, and it’s taken just a bit of time to get used to where
      all my favorite features ended up, but overall I’m fine with it. In Excel
      2007, the new UI has lead me to discover some useful features that have
      probably been there for years. Excel charting, in particular, is no longer
      awful. On the down side, while Outlook 2007 adds full-text searching, it
      continues to perpetrate its abysmally poor IMAP support on the world. They’ve
      left intact an
      <a href="http://miksovsky.blogs.com/flowstate/2005/07/outlooks_terrib.html"
        >incredibly irritating dialog</a
      >
      that could easily be removed in ten minutes by anyone on the Outlook team if
      they didn’t live in a warm bubble of intensive Exchange-focused IT support.
      For shame.
    </p>

    <p>
      In contrast, the Word 2007 team appears to have taken a moment from a
      completely massive redesign to fix the Insert key.
    </p>

    <p>
      Don’t know about the Insert key in Word? Open a document in Word 2003 or
      earlier, press Insert, then try typing somewhere in the middle of your
      document. You’ve just discovered Overtype mode. In Overtype mode, each
      character you type replaces the existing character at the insertion point,
      instead of pushing that character to the right. Uninitiated users have other
      names for this mode, such as Word Is Eating My Important Document And I Can’t
      Get It To Stop mode.
    </p>

    <p>
      Overtype mode has to be one of the longest-lived terrible design flaws in a
      continuously upgraded shipping product:
    </p>


    <ol>
      <li>
        A user can easily engage Overtype mode without realizing it. Depending on
        the keyboard used, all that's required is a slip of the finger from, say,
        the commonly pressed Delete key. The user has to press modifier keys like
        CTRL and ALT to do unusual things like, say, pick a font or print a
        document, but if it’s the destructive Overtype mode they want, then by
        golly, no modifier key should stand in their way!
      </li>

      <li>
        If a user accidentally ends up in Overtype mode, they can easily destroy
        data for a good long time if they’re not looking very closely at the screen.
        If the user happens to have left the status bar visible, Word meekly shows
        the letters “OVR” in a distant edge of the screen—far from where the
        disaster is taking place.
      </li>

      <li>
        By the time the user realizes that something is going wrong, a considerable
        length of time may have passed since they accidentally hit the Insert key.
        This reduces the chance that the user will connect the terrifying
        circumstances they are now facing with an accidental keypress they made a
        while back.
      </li>

      <li>
        Even once the user realizes that something very, very bad is happening, it’s
        still hard to pin down exactly what is happening. Stuff is disappearing from
        the screen, but because the Overtype behavior completely flies in the face
        of the user’s carefully learned model of word processor behavior, it’s hard
        to recognize that each new character is overwriting an existing character.
      </li>

      <li>
        Once an astute user has figured out that they’re in some sort of word
        processor mode from hell, there’s no obvious way to get out of the mode
        short of quitting the application and restarting. They're return to editing
        their document with shaken confidence in Word, in Microsoft products, and in
        software in general.
      </li>
    </ol>


    <p>
      I’ve yet to meet a user who understands—or more to the point, wants—Overtype
      mode, but it’s there anyway. In the eighteen years I’ve been using Word, I
      haven’t had a single occasion where I felt this mode could save me keystrokes.
    </p>

    <p>
      With a user base the size of Microsoft’s, it's virtually guaranteed that a
      large corporate customer has a vocal department that swears they need Overtype
      mode, so dropping the mode was probably out of the question. Instead, they've
      left Overtype mode in, but arranged the default keyboard settings so that the
      Insert key doesn't engage the mode. It's always been possible in Word for an
      advanced user to unmap the Insert key from Overtype mode. Word 2007 simply
      does this by default, then adds an explicit option to turn the old keyboard
      mapping back on:
    </p>

    <p>
      <img
        src="/images/flowstate/microsoft_word_2007_insert_key_option.png"
        alt="Microsoft_word_2007_insert_key_option"
      />
    </p>

    <p>
      I conjecture that Overtype mode is a user interface fossil: a piece of
      behavior leftover from a long bygone era whose entire ecosystem has been so
      utterly changed that the very rationale for the UI is hard to reconstruct. I
      have a dim memory of IBM character mode terminals that let a user could freely
      navigate a cursor with directional arrow keys across data entry forms. These
      forms to some extent mirrored the behavior of paper forms, letting a user
      “fill in the blanks” on the screen. Entering text into a field with existing
      text would overwrite the old text with the new. By some twist of fate, some
      author of a character mode word processor was compelled—perhaps under duress,
      we may never know—to include support for this behavior. An age passed, and
      support for this behavior became a requirement for backward
      compatibility—leading directly to its carefully preserved (but neutralized)
      existence years later in Microsoft’s latest word processor.
    </p>

    <p>
      You can read more about the substantial UI changes in Office 2007 in Jensen
      Harris'
      <a href="http://blogs.msdn.com/jensenh/">Office User Interface Blog</a>.
    </p>
2006-09:
  2006-09-14 Improving the EULA user experience with Bullet Summaries.html: >
    
    ---

    title: "Improving the EULA user experience with Bullet Summaries"

    date: 2006-09-14

    slug: improving_the_u

    originalUrl: https://miksovsky.blogs.com/flowstate/2006/09/improving_the_u.html

    ---


    <p>
      Publicly available software applications and web sites contain myriad end user
      license agreements, terms of use, and other legalese, but the user experience
      of actually reviewing and accepting these legal agreements is universally
      poor. Software users click through license agreements almost every time they
      install or upgrade software, but even vendors that care deeply about user
      interfaces leave untouched the fundamentally bad user experience of their
      legally binding dialogs and pages. I've been looking for a way to improve this
      experience in the products I work on.
    </p>

    <p>The canonical End User License Agreement (EULA) dialog looks like this:</p>

    <p>
      <img
        alt="Windows_xp_sp_2_eula"
        src="/images/flowstate/windows_xp_sp_2_eula.png"
      />
    </p>

    <p>
      The dialog is a smallish window that contains a very long scrolling text box.
      Below the text box sit controls with which the user must accept or decline the
      agreement. This may take the form of an &quot;I agree&quot; check box, or a
      set of push buttons (shown above).
    </p>

    <p>
      The user experience of reviewing a EULA in such a dialog is, of course,
      terrible. The text of the EULA itself is dense legal language fully of text
      INEXPLICABLY IN CAPITALS warning you that you hereby AGREE to ALL SORTS OF
      STUFF YOU DON&quot;T UNDERSTAND. The text is not generally organized in any
      interesting way (e.g., important stuff first). The text is usually plain text
      or simply formatted and—profligate use of capitals to the contrary—does not
      actually highlight the most interesting bits in the text. The text goes on for
      pages and pages.
    </p>

    <p>
      In most cases, the application does not offer a default option. If it does,
      the default is nearly always to decline the agreement. Since the user is
      almost always going to accept the agreement anyway, the default option (if
      there is one) is essentially never the option the user wants.
    </p>

    <p>
      It's commonly held wisdom that most users blow through such dialogs as quickly
      as they can. Having paid for software, or at least having gone through the
      trouble to download it, are they really going to read the agreement carefully
      and Decline it?
    </p>

    <p>
      The effect of this is that users often end up agreeing to all sorts of things
      they'd probably not be comfortable with if they were aware of them. Here's the
      <a
        href="http://www.gripewiki.com/index.php/Microsoft_Windows_XP_Service_Pack_2_%28Supplemental_EULA%29"
        >complete text of the EULA</a
      >
      above, with highlighting around some ominous clause related to digital rights
      management. This EULA is even more daunting than it first appears: it's a
      <em>supplemental</em> EULA, amending another, probably equally lengthy EULA.
    </p>

    <p>
      In some cases, glossing over concerning details is exactly what the vendor had
      in mind. Still, there are many cases when the vendor probably would prefer
      that you really did know a fact that's unfortunately buried in the EULA. The
      EULA for many software products indicate that the license entitles the user to
      install the software on one computer. While there are many users who willingly
      ignore (or do their best to circumvent) such a restriction, there are surely
      others who would abide by this restriction—if only they were aware of it.
    </p>

    <p>
      Despite the obvious shortcomings with such a user interface, there are many,
      many very good reasons why vendors offer an interface just like this. One very
      good reason is that few vendors even give the UI a second thought. It's a
      standard part of most application Setup frameworks, so it's essentially free
      to use a framework-supplied EULA UI and it's not free to write something
      better. The company lawyers fill it in once and the dialog is forgotten
      forever.
    </p>

    <p>
      Another very good reason for using this interface is that everyone else uses
      it. Even if you tried to do something differently, your lawyers would probably
      tell you to cut it out. If a lawyer didn't stop you, there's always the small
      but nagging chance you could goof something up, and someone will have a good
      opportunity to successfully sue you. Most people don't think this is worth the
      trouble.
    </p>

    <p>
      I sat in on a number of early design reviews of the Microsoft Windows Vista
      Setup user experience, and asked whether we could do better than the dialog
      above. The Setup team loudly shouted, &quot;NO!&quot;, for essentially the
      reasons given above. A company like Microsoft is sued on a daily basis, and
      has probably paid for every word of its EULAs with bloody court battles they
      don't care to repeat. They would prefer not to expose themselves to new legal
      risk. Accordingly, the
      <a
        href="http://miksovsky.blogs.com/flowstate/2006/09/Windows_Vista_Beta_1_EULA.jpg"
        >Windows Vista EULA </a
      >experience can dress up the dialog with glassy effects, but the experience
      remains essentially unchanged.
    </p>

    <p>
      I've spent the last few months at my startup,
      <a href="http://www.cozi.com">Cozi</a>, preparing for the not-too-distant
      launch of our first product. I wanted to make another go at coming up with a
      better EULA user experience. We're fortunate enough to work with some
      forward-thinking lawyers who would at least entertain the idea of trying
      something new.
    </p>

    <p>
      Our final user interface is, for now, that of the canonical EULA dialog above.
      We rely on a third-party Setup framework, and ultimately decided we didn't
      have time to rewrite the framework's EULA dialog. However, we were able to
      introduce what I hope will prove to be an improvement in the user experience
      of trying to actually understand what the agreement says.
    </p>

    <p>
      The idea is to summarize the key points of the EULA (or privacy policy, or
      whatever) in 2-4 bullets at the top of the document. I call this practice the
      Bullet Summary. The bullets are introduced with the leader, &quot;Here are
      some key points to know about &lt;the topic covered by the
      agreement&gt;:&quot; The bullets are followed by a line that says,
      &quot;Please read the complete agreement that follows:&quot; The goal is to
      get these bullets and the accompanying lines above the fold; the user should
      be able to read the Bullet Summary without having to scroll.
    </p>

    <p>
      You'll also be able to see a Bullet Summary in the EULA of Cozi's first
      product when we announce it someday soon. In the meantime, you can see two
      examples of Bullet Summaries on the Cozi web site in our
      <a href="http://www.cozi.com/about/terms.aspx">Terms of Use</a> and our
      <a href="http://www.cozi.com/about/privacy.aspx">Privacy Policy</a>. Offering
      a summary of a legal document is not new, but perhaps this particular
      convention is, and in any event I haven't seen something like this in
      software.
    </p>

    <p>
      NOTE: Those simple lines above and below the bullets are absolutely critical.
      The Bullet Summary is meant to summarize, <strong>not replace</strong>, the
      text of the agreement. I'm not a lawyer, but it's my understanding that
      offering the user a summary of a legal agreement can be acceptable as long as
      the summary is not misleading, is consistent with the complete agreement that
      follows, and does not imply that the summary is a complete account of what the
      user is agreeing to.
    </p>

    <p>
      The reaction to the use of a Bullet Summary in our EULA has been quite
      positive. Our lawyers thought it would be helpful. And, indeed, more than one
      beta tester has offered completely unprompted feedback saying they found the
      bullets helpful. If users actually notice what's going on in a EULA dialog
      during Setup, of all things, and then take the trouble to tell you they like
      it, something must be going right.
    </p>

    <p>
      In an on-site usability test, I watched one user who came to the EULA page.
      They reached immediately for the &quot;I Agree&quot; button—and then paused to
      read the bullets. It was my impression that this user would never have read
      anything in the EULA if they hadn't stopped to read the bullets.
    </p>

    <p>
      I, for one, am happier to have people use our products knowing that they are
      at least slightly better informed about what they've agreed to. And, finally,
      writing a Bullet Summary is a highly useful design exercise. It prompts a
      deep, reflective discussion among team members about which points in the
      agreement are actually the most important for their users to understand.
    </p>

    <p>
      It bears repeating that <strong>I'm not a lawyer</strong>. I'm offering this
      information about the products I work on because I think this idea helps make
      life marginally better for my company's customers. Indepent of whether you
      agree with the contents of Cozi's legal agreements, you may find the Bullet
      Summary approach interesting. If you are tempted to apply this idea to your
      own product, consult an attorney before proceeding. You may find it helpful to
      point them at this post and Cozi's site. With any luck, a user interface
      precedent—and a legal precedent— will be established that results in EULAs and
      other software-related legal agreements that are just a bit easier for the
      typical user to understand.
    </p>
  2006-09-27 Designing for families.html: >
    ---

    title: "Designing for families"

    date: 2006-09-27

    slug: designing_for_f_1

    originalUrl: https://miksovsky.blogs.com/flowstate/2006/09/designing_for_f_1.html

    ---


    <p>
      This week my company Cozi launched
      <a href="http://www.cozi.com/products/default.aspx">Cozi Central</a>, a
      product that lets busy families communicate with each other and juggle the
      many elements of their lives at home. Among other things, our public launch
      means I can now cover my own user interface designs in this blog. I thought a
      good place to start this coverage was a quick look at what it means to design
      software for families.
    </p>

    <p>
      Most software products and services for the home market oddly do not, in fact,
      recognize the family dynamics that dominate home life. Consider any service
      with which the entire household has a single account, then see how many family
      members are allowed to administer that account. In most consumer products, the
      single person who signs up for a household account becomes the account’s sole
      administrator. They can add other family members to the account, but those
      other users are invariably treated as second class participants in the
      account.
    </p>

    <p>
      Many households have not one, but <strong>two</strong> people running the
      household. In these cases, the user model doesn’t match the household’s actual
      organization. If Mom ends up as the family’s account administrator, how does
      Dad feel asking her to reset his password? Or if Dad ends up as the account
      administrator, how does Mom feel asking him to give her access to a new
      feature? A poor design decision in the virtual world provokes awkward
      interactions between family members.
    </p>

    <p>
      Products like this are presumably made by organizations that unintentionally
      mirror their business paradigm in a home product—since groups in the business
      world tend to be organized with a single leader, they fail to question whether
      a similar hierarchy will actually work in the home. As it turns out, a strict
      hierarchical approach is also easier for a developer to code: if you’re going
      to have two classes of users, the data schema and accompanying UI is easier to
      manage if you can simply designate exactly one of the users as an
      administrator than if you can designate one or at most two. If a company does
      decide to support more than one administrator, the design usually makes
      administrative privileges an option that can be enabled for any account. So
      instead of letting two people run the account, they allow N people to run the
      account, which often needlessly complicates the product’s interface. (A good
      example of
      <a href="http://miksovsky.blogs.com/flowstate/2005/08/the_tyranny_of_.html"
        >The Tyranny of 1 or N</a
      >.)
    </p>

    <p>
      We designed Cozi Central from the ground up for the dynamics of families, not
      small businesses. Either one OR two people can be identified as the adults
      running the household.
    </p>

    <p>
      <img src="/images/flowstate/cozi_central_household_settings.png" />
      <br />
    </p>

    <p>
      There are, of course, numerous households with multiple adults, but in most of
      them, one or two people can be identified as running the household. For our
      v1.0, those edge cases weren't worth pursuing if they would cause the 90% case
      to suffer.
    </p>

    <p>
      Designing things this way does require a bit more design and development work.
      On the whole, however, the product’s model of family organization now more
      closely represents that of actual households, so it enables unique features
      that capitalize on family dynamics.
    </p>

    <p>
      A good example is the “Hand Off” feature in Cozi Central’s family calendar.
      Couples, especially parents in homes with children, are constantly trading
      errands and other responsibilities. It might be the case that Dad usually
      drives his daughter to soccer practice, but if he suddenly needs to take his
      son to the doctor, he may hand the driving duty off to Mom. This happens so
      often that Cozi Central has an explicit “Hand Off” menu command on
      appointments just for this purpose:
    </p>

    <p>
      <img
        src="/images/flowstate/Cozi_20Central_20Appointment_20Menu.png"
        alt="Cozi Central Appointment Menu"
      />
    </p>

    <p>
      This user interface shortcut would be far more cumbersome to offer in a
      product that assumes families are organized in a hierarchy with a single
      person at the top. (By the way, Cozi Central's appointment menu comes up on
      left click as well as right click, a trick I think could be useful in other
      UIs.)
    </p>

    <p>
      You can see more examples of family-ready design in Cozi Central itself. The
      product, which includes features to track family calendars, messages, and
      shopping lists, is available for free at
      <a href="http://www.cozi.com/">http://www.cozi.com</a>.
    </p>
2006-10:
  2006-10-01 Asking for first names with an example.html: >
    ---

    title: "Asking for first names with an example"

    date: 2006-10-01

    slug: asking_for_firs

    originalUrl: https://miksovsky.blogs.com/flowstate/2006/10/asking_for_firs.html

    ---


    <p>
      To keep things friendly and approachable, applications often ask a new user to
      supply their first name. In designing the sign up procedure for Cozi Central,
      I applied my favorite trick for asking for first names: provide an example of
      what kind of name you want.
    </p>

    <p>
      To ask a user their first name, you'd think you could just create a text box
      labeled &quot;First name:&quot;. The problem is that many people don't
      <em>want</em> to use their first name. A user might prefer to go by a
      nickname, for example. However, at sign up time, the user has no idea how your
      product is going to use the name they enter, so they may hesitate to enter a
      nickname instead of their real first name. Your application may end up
      addressing the user by a name they dislike.
    </p>

    <p>
      You could just ask the user for &quot;Name:&quot;, and figure that they can
      enter whatever they want. Now you've got a new problem: tons and tons of
      people will enter their full name, or their last name, or something else. Your
      program might then address them cheerfully but stiffly: &quot;Good morning,
      John Anthony Smith!&quot;
    </p>

    <p>
      To elicit a first name but leave the door open for something else, ask the
      user for &quot;Name:&quot;,
      <em>but provide an example that shows a first name</em>:
    </p>

    <p>
      <img
        alt="Cozi_central_signup_page_section"
        src="/images/flowstate/cozi_central_signup_page_section.png"
      />
    </p>

    <p>
      This seems to work quite well in practice. (I give credit for this trick to
      software designer and all-around nice guy David Sloo.)
    </p>

    <p>
      Caution: There's a limit to how far you can push this idea, as Cozi learned
      this past week. Since our sign up page used an example for Name, we went ahead
      and put examples next to most of the fields, including the email address
      fields. The sample email addresses were at cozi.com, so that we could avoid
      collisions with a real domain name. Bad idea: many users thought we were
      giving them a new email address, so they entered their own name @cozi.com
      instead of entering their existing email address. We promptly cut the email
      address examples from the sign up page. By now, most people should know what
      an email address looks like.
    </p>
  2006-10-26 Matching design sketches to the desired level of design feedback.html: >
    
    ---

    title: "Matching design sketches to the desired level of design feedback"

    date: 2006-10-26

    slug: using_crude_ske

    originalUrl: https://miksovsky.blogs.com/flowstate/2006/10/using_crude_ske.html

    ---


    <p>
      When you ask people for feedback on a design that has not yet been
      implemented, take care how much polish you put on the design's representation.
      A counter-intuitive principle of soliciting early design feedback is that
      <em>people reviewing a highly polished design may </em
      ><em>concentrate on superficial details and </em
      ><em>overlook fundamental issues</em>. In the early stages of the process, you
      may be able to elicit deeper feedback by striving for an unfinished look in
      your design representations.
    </p>

    <p>
      Even novice designers can employ production tools like Adobe Photoshop or
      Flash to quickly work up beautiful conceptual screen shots or prototypes. They
      can lavish attention on the presentation of early design concepts, even those
      that might be thrown away. However, when such a design is shown for review,
      reviewers may fixate on such details as the color on a button—and fail to
      question why the button, or indeed the entire screen, needs to exist at all.
    </p>

    <p>
      One obvious force at work here is the visually engaging nature of beautiful
      imagery. I believe another, subtler issue is that people unintentionally
      calibrate their criticism according to their impression of where you are in
      the development process. A highly polished image may look like a screen shot
      of an implemented UI, or at least the result of many weeks' work, leading
      someone to assume that only small details can be changed at this point. Even
      if you repeatedly remind them that the design is just an early sketch, they
      may still demur from suggesting anything so bold as starting over. People may
      also have difficulty criticizing a design if the representation seems far
      beyond what they could have created themselves.
    </p>

    <p>
      As an antidote to this phenomenon, in my own design process I usually keep
      early designs looking rough, and try to refrain from jumping straight to a
      polished result. I often draw early sketches by hand with paper and ink. Why
      ink and not pencil? I don't want to give myself too much opportunity to polish
      up even a hand-drawn sketch. To avoid the tedium of recreating design elements
      like navigation bars, I sometimes draw a sketch of just the global design
      elements, then photocopy that to create a template for sketches of individual
      screens. I take care to leave even the template sketch looking pretty rough.
    </p>

    <p>Here's a scan of an early sketch for Cozi Central's Shopping Lists area:</p>

    <p>
      <img src="/images/flowstate/shopping_list_sketch.jpg" />

      <br />
    </p>

    <p>
      No one has any trouble giving feedback at this stage, any may indeed call for
      something completely different. Reviewers figure, &quot;How hard could it have
      been to crank that out? I could have done that!&quot;
    </p>

    <p>
      After I've had a chance to iterate at this hand-drawn level, I may create a
      prototype in Microsoft PowerPoint to explore some interactive elements. Again,
      I resist the temptation to apply visual polish. It's still too early.
    </p>

    <p>
      I'll eventually create a skeleton UI directly in a development environment's
      visual designer, leading to a design like this:
    </p>

    <p>
      <img src="/images/flowstate/shopping_lists.png" />
    </p>

    <p>
      At this stage, things are being to feel more solid and less mutable. Design
      feedback may begin to focus on smaller details, but people still recognize
      substantial room for change. Following further iteration, the design
      stabilizes enough to warrant a full treatment from visual design specialist:
    </p>

    <p>
      <img src="/images/flowstate/cozi_shopping_lists.png" />
    </p>

    <p>
      The design is now polished to the point that many people may find it difficult
      to look past the surface. Luckily, by now significant portions of the design
      are often functional enough that people can interact directly with the user
      interface. This opportunity can counteract the tendency to notice only
      superficial issues. People who have a chance to actually use a design will
      generally notice when it suddenly does something they didn't want. A
      thoughtful user will step back and realize the problem lies with the software
      (and not with them), and deliver this feedback to you.
    </p>

    <p>
      In this particular interface, feedback that came late in the game on the
      surface appearance turned out to be quite important too. People who looked at
      the above design said that it was &quot;cool&quot;, in both senses of the
      word: interesting, but also cold. Since we were aiming the product at families
      for use at home, we iterated on the design to produce a warmer feeling. The
      feature finally shipped like so:
    </p>

    <p>
      <img src="/images/flowstate/cozi_shopping_lists_1.png" />
    </p>

    <p>
      If you're intrigued by the idea of presenting rough sketches early in the
      development cycle, but appalled by the idea of manually drafting paper
      sketches, you might consider modifications to your own design process. This
      past week I conducted design reviews of a PowerPoint prototype that used a
      free handwriting font (at a suitably legible point size) for the UI text. The
      feedback collected during the reviews was at the right level for this stage of
      the process, and it was easy to refine the design between reviews, so I'm
      likely to use this approach again in the future.
    </p>
2007-03:
  2007-03-04 Vista Start menu a nice command prompt for normal users.html: >
    
    ---

    title: "Vista Start menu: a nice command prompt for normal users"

    date: 2007-03-04

    slug: command_lines_s

    originalUrl: https://miksovsky.blogs.com/flowstate/2007/03/command_lines_s.html

    ---


    <p>
      I've been using Windows Vista on my production machines for two months now,
      and I've noticed my habits have already shifted to take advantage of some of
      the new features. You can always tell a new feature is actually worthwhile if
      you suddenly find yourself cursing its absence on an older machine. One such
      feature in Vista that's quickly becoming a must-have for me is the search box
      in the overhauled Windows Start menu. This search box serves as a useful
      text-based command prompt, even for mainstream users.
    </p>

    <p>
      <img src="/images/flowstate/030207_1724_VistaStartm1_1.png" />
    </p>

    <p>
      Vista preserves the older Run dialog and Address bar (including the one on the
      task bar), but the Start menu's search box adds the ability to issue a fast
      search across program names, control panels, document names, and web favorites
      (if you use Internet Explorer). Like Apple's Spotlight, this search box leads
      to a surprisingly quick and natural way to launch documents. I find that I've
      virtually stopped groveling through the Start menu for programs at all, and
      end up having to surf the file system far less often. (My only gripe is that
      there are subtle behavioral differences between the Start menu, the Run
      dialog, and the Address bar, with the result that none of these tools does
      everything I want.)
    </p>

    <p>
      Because the search box uses prefix matching, you can type just the beginning
      of the word(s) you're looking for. This lets you launch Windows Media Player
      for example, by typing &quot;play&quot; or &quot;m p&quot;, and son. This
      leads to a shorthand mode of using the operating system that feels curiously
      like a finely-tuned command shell and its collection of obscure abbreviations.
    </p>

    <p>
      There are a number of other places in which command prompt-style interactions
      have seen a resurgence of mainstream use. The best example is probably Google
      and its multifaceted search box, which now offers a
      <a href="http://www.google.com/intl/en/help/features.html"
        >long list of search features</a
      >
      such as dictionary lookup and phone number lookup. These search features also
      have a quasi-command shell feel to them. Google's command structure isn't as
      rigid as that of a typical command shell—indeed, many search forms don't
      require a command at all, just search terms—which gives the search experience
      a natural feel. The nice thing about these text-based command prompts is that
      they can translate well to a number of environments, even plain text
      <a href="http://www.google.com/intl/en_us/mobile/sms/"
        >mobile phone text messages</a
      >.
    </p>

    <p>
      During the past 20 years, most user interface designers worked as hard as they
      could to get away from text-based commands. In the mid 1990s, Don Gentner and
      Jakob Nielsen wrote a paper called
      <a href="http://acm.org/cacm/AUG96/antimac.htm">The Anti-Mac Interface</a>
      that anticipated an evolution beyond pure pointer-based UIs and to
      environments that reincorporated language:
    </p>


    <blockquote>
      <p>
        Mouse buttons and modifier keys give us a vocabulary equivalent to a few
        different grunts… Computer interfaces must evolve to let us utilize more of
        the power of language. Adding language to the interface allows us to use a
        rich vocabulary and gives us basic linguistic structures such as
        conditionals. Language lets us refer to objects that are not immediately
        visible. For example, we could say something like &quot;Notify me if there
        is a new message from Emily.&quot; Note we are not advocating an interface
        is based solely on language. Neither does the interface have to understand
        full natural language. Real expressive power comes from the combination of
        language, examples, and pointing.
      </p>
    </blockquote>


    <p>
      While the Vista start menu or Google's search features aren't exactly natural
      language, they do form a grammar of sorts. These UIs marry the speed and
      expressiveness of text with highly responsive processing engines to create
      command prompts even mortals can use. Pure graphical UIs in other applications
      may similarly benefit from the introduction of a well designed text-based
      command area.
    </p>
  2007-03-18 Collecting data efficiently with text box micro-grammars.html: >
    
    ---

    title: "Collecting data efficiently with text box micro-grammars"

    date: 2007-03-18

    slug: collecting_data

    originalUrl: https://miksovsky.blogs.com/flowstate/2007/03/collecting_data.html

    ---


    <p>
      A tiny bit of language support can turn a simple text box into a compact and
      powerful way to let a user quickly supply complex data. An application can
      constrain the allowable text to adhere to a small and computer-friendly
      grammar that mirrors somewhat a natural human language. Even a highly
      constrained grammar can still produce a user experience that feels natural.
      This works best when the domain of text a user might enter is small, when the
      user can easily imagine what they can type, and when the designer and
      developer can collaborate on thoughtful construction of the grammar.
    </p>

    <p>
      A simple example of a micro-grammar at work is a UI combining a scalar
      quantity and a unit into a single field, such as the measurement fields in
      Microsoft Word 2007. These fields throughout Word accept a variety of units,
      such as inches, metric centimeters, points, or lines. As in natural (here,
      English) language, the units directly follow the numeric value:
    </p>

    <p>
      <img src="/images/flowstate/102106_1833_Microgramma1_1.png" />
    </p>

    <p>
      The fields on the left in the image above happen to be showing measurements in
      inches (&quot;) while those on the right are showing points, but all the
      fields accept all supported units. The controls not only parse out the value
      from the units, they can also convert and render measurements in a canonical
      format. In the default settings for the Microsoft Word on a U.S. system,
      indentations are converted to inches, and leading is converted to points.
    </p>

    <p>
      Compare the above to an application like Adobe PhotoShop CS2 that uses
      standard operating system controls:
    </p>

    <p>
      <img src="/images/flowstate/102106_1833_Microgramma2.png" />
    </p>

    <p>
      Here the user must enter units separately, requiring that they move the focus
      with the mouse or keyboard. The UI also looks significantly more cluttered.
      Word's text-parsing micro-grammar let one control in Word do the job of two in
      Photoshop. The trade-off is one of cleanliness versus discoverability. This
      efficiency is critical in cases like Word's Ribbon, in which a large number of
      controls are packed into a small space. On the other hand, using two controls
      makes clearer what units are supported. A UI with separate controls is also
      significantly easier to implement.
    </p>

    <p>
      One distinct advantage of text boxes that support micro-grammars is that they
      can offer shortcuts to power users without compromising the simplicity of the
      typical user's experience. The date fields in Microsoft Outlook, for example,
      not only accept dates in local form, but also accept shortcut phrases such as
      &quot;tomorrow&quot; or &quot;next Tuesday&quot;. Some supported shortcuts
      don't seem to add much value. The U.S. version of Outlook lets the user type
      the names of a number of common American holidays like &quot;Christmas&quot;
      (but not Easter, the date of which involves non-trivial astronomy, and even an
      overeager Microsoft Office developer has to stop somewhere).
    </p>

    <p>
      It's dubious that the ability to type in &quot;New Year's Day&quot; as an
      appointment date has ever actually helped anyone—who schedules appointments on
      New Year's Day, anyway? Still, even these dubious shortcuts don't clutter
      anything up. Another advantage is that such text boxes allow the pasting of
      complete text from other sources directly into the UI in one step, letting the
      application do the work of breaking apart relevant information instead of
      forcing the user to do this by hand.
    </p>

    <p>
      To have a program understand text the user has typed requires that a developer
      create a parser: a chunk of code that implements the rules of the grammar to
      determine what the user is trying to express with that text. If the desired
      grammar is extremely simple, a developer might hand-code a parser for it, but
      this can quickly get out of hand. More complex grammars typically entail the
      use of a parser generated by a tool. For example, if it's possible to restrict
      the supported input to a form known as a
      <a href="http://en.wikipedia.org/wiki/Context-free_grammar"
        >context-free grammar</a
      >, there are a wide variety of tools for generating a parser that can handle
      such grammar.
    </p>

    <p>
      Any attempt to optimize a micro-grammar for the nuances of one natural
      language will, of course, complicate matters if and when the need arises to
      localize the UI for other languages. Suppose some culture normally puts the
      units <em>before</em> the numeric value. Users in this culture might
      reasonably expect to be able to enter data that way. If the parser has been
      generated with a tool, it should be relatively straightforward for the
      developer to create a new grammar definition that swaps the position of those
      elements. The rest of the application logic should remain virtually unchanged.
    </p>

    <p>
      I'm not sure how many software companies would actually go through the trouble
      to adapt a micro-grammar for a specific market. Then again, companies rarely
      go through much trouble to change the layout of a dialog like the one from
      PhotoShop above, in which the layout of the controls is heavily biased in
      support of the designer's natural language. The work required to update a
      well-factored grammar definition is likely less than that required to
      reposition a significant number of controls across a large number of pages or
      dialogs.
    </p>
2007-04:
  2007-04-04 Wall Street Journal "Cozi just works".html: >
    ---

    title: 'Wall Street Journal: "Cozi just works."'

    date: 2007-04-04

    slug: wall_street_jou

    originalUrl: https://miksovsky.blogs.com/flowstate/2007/04/wall_street_jou.html

    ---


    <p>
      I normally avoid any overt plugs for Cozi Central here, but everyone here in
      my office is <strong>very</strong> excited by a favorable review of Cozi
      Central in today's Wall Street Journal:
      <a href="http://ptech.wsj.com/archive/solution-20070404.html"
        >Getting Families Synced Up</a
      >.
    </p>


    <p>
      <em
        >&quot;Cozi just works. It looks clean, organized and uncluttered,
        regardless of hectic schedules. It's also easy enough for anyone to use, and
        Cozi Group Inc. is constantly working to improve the program, which is a
        good sign.&quot;</em
      >
    </p>


    <p>
      The Journal's research into our product was extremely thorough. I've fielded
      dozens and dozens of fact-checking questions in the past two days alone. Katie
      rightfully dinged the product for a few minor issues that had been missed by
      others, and in each case we're looking forward to fixing the issue as soon as
      possible.
    </p>


    <p>
      As a designer, it's always gratifying to see an objective evaluation like this
      confirm that you're on the right track. Ultimately, users decide for
      themselves whether a product meets their needs, but the press obviously plays
      a vital role in getting the word out to them.
    </p>
  2007-04-09 Paying down design debt.html: >
    ---

    title: "Paying down design debt"

    date: 2007-04-09

    slug: paying_down_des

    originalUrl: https://miksovsky.blogs.com/flowstate/2007/04/paying_down_des.html

    ---


    <p>
      Developers use the term <em>technical debt</em> to refer to the backlog of
      inevitable future work produced when things are implemented in a quick and
      dirty way. An application can accrue design debt as well—user interface issues
      created by design hacks that must be resolved eventually. Like financial debt,
      you may find you don't have control when the next payment needs to be made.
    </p>

    <p>
      I was recently forced to make a minimum payment on some of Cozi's design debt.
      In our case, our flagship PC application
      <a href="http://www.cozi.com/products/default.aspx">Cozi Central</a> had a
      setup experience that omitted an important step. Cozi Central includes a photo
      collage screen saver that we think is pretty darn cool. Until this month,
      however, when you first ran Cozi Central on a Windows PC,
      <em
        >the application took over your screen saver, and it didn't even ask you</em
      >.
    </p>

    <p>
      Terrible, no? The story starts way back when we first created the product. The
      screen saver happened to be the first part of Cozi Central we wrote. We
      started giving families our very first pilot release, and Cozi Central did at
      that point was act as a screen saver. There didn't seem to be any point in
      asking them if they wanted to use the screen saver—why else would they install
      it?
    </p>

    <p>
      Fast forward a year, and Cozi Central now did a bunch more: it had a family
      calendar, a shopping list you can call up with your mobile phone from the
      grocery store, and a way to leave messages for family members. In fact, the
      product did enough that there were some adopters who wanted to use everything
      in it <em>but</em> the screen saver. Those people didn't want the setup
      experience to silently take over their screen saver. We knew we needed to take
      care of that, but month after month we kept pushing off this work in favor of
      fighting bigger fires. We were carrying design debt.
    </p>

    <p>
      The vast majority of users love the screen saver. One even wrote us
      specifically to relate how delighted they'd been by the photo screen saver
      they didn't even have to ask for. We did hear complaints from a small number
      of families, though, and a few weeks ago we finally heard from one user who
      was irate. Let's just say that business professionals may have photos on their
      PCs that they don't want suddenly displayed during a presentation.
    </p>

    <p>
      It was finally time to pay down our design debt, so we recently added new page
      to our setup experience that describes the screen saver and asks the user
      whether they want it:
    </p>

    <p>
      <img src="/images/flowstate/041007_0355_Payingdownd1.png" alt="" />
    </p>

    <p>
      This isn't a great solution—throwing a question into the setup experience is a
      clear hallmark of a design hack. This approach could easily cause issues later
      if we ever really do need to ask the user another question during setup, and
      discover that two questions in setup is one too many. We've made the minimum
      payment, but we've still got more design debt going forward.
    </p>

    <p>
      I'm happy that at least one Cozi user
      <a
        href="http://thanksgivingfeast.blogspot.com/2007/04/my-life-in-pictures.html"
        >found the new UI acceptable</a
      >. (Their post is, hands down, the funniest commentary I've read about Cozi
      Central yet.) On we go.
    </p>
2007-05:
  2007-05-17 Hurdles at the entrance to a site.html: >
    ---

    title: "Hurdles at the entrance to a site"

    date: 2007-05-17

    slug: hurdles_in_the_

    originalUrl: https://miksovsky.blogs.com/flowstate/2007/05/hurdles_in_the_.html

    ---


    <p>
      It's not unusual for a site to position a long sequence of hurdles just inside
      their entrance. Someone walking in the door might have to clear some or all of
      these hurdles before they can even try out the site:
    </p>


    <ol>
      <li>
        <strong>Figure out what the service does</strong>, and whether it meets
        their needs. This can be a lot harder than it sounds. The site might
        describe itself in text, images, or Flash demos. Even assuming the user has
        Flash installed, sitting through a demo can be tedious. The worst case: the
        site already assumes visitors know what it does.
      </li>

      <li>
        <strong>Find the entry point for signing up</strong>. You'd think this would
        always be obvious, but on some sites it's not.
      </li>

      <li>
        <strong>Pick a user ID</strong>. Often the first thing the service wants a
        new customer to do is pick an identifier such as a user name with which to
        identify themselves to the site later. If the site doesn't use email
        addresses as IDs, the user generally picks some variation on their own name.
        If they have a common name, they might have to guess several times before
        they find a variation of their name that hasn't already been picked as an
        ID.
      </li>

      <li>
        <strong>Enter their email address</strong>. If the user ID isn't an email
        address, the user almost always has to enter their email address separately.
        Even if the service can be used without an email address, the site is eager
        to obtain this critical piece of marketing data from the user.
      </li>

      <li><strong>Pick a password</strong>.</li>

      <li><strong>Enter the password again</strong> to confirm it.</li>

      <li>
        <strong>Pick the password several more times</strong> to comply with
        arbitrary security requirements.
      </li>

      <li>
        <strong>Write down their password</strong> somewhere before they forget the
        new variation of their usual password that finally made it past the
        arbitrary security requirements.
      </li>

      <li>
        <strong>Enter personal data</strong> used to configure the service to their
        needs.
      </li>

      <li>
        <strong
          >Comply with (or carefully turn down) requests for demographic
          data</strong
        >
        for marketing purposes. This may include opting out of requests to be added
        to email newsletters.
      </li>

      <li><strong>Agree to terms of use</strong> and other legal agreements.</li>

      <li>
        <strong>Activate their account.</strong> The user might need to switch to a
        completely different application—their email client—and look for a message
        from the service. They might have to wait for a period of time for this
        message to arrive. The length of this time period is unknown: it could be a
        few seconds, or a few days. When the user finally receives the message, they
        have to find a link somewhere in it that they need to click on in order to
        verify that they are, in fact, the proper owner of the email address.
      </li>

      <li>
        <strong>Download software.</strong> If the service entails client software
        or browser plug-ins, the user has an additional dozen hurdles to jump
        through: the browser's save dialog, progress dialog, &quot;Are you sure you
        want to run this?&quot; dialog, an elevate-to-administrator security dialog,
        and probably a firewall dialog—not to mention the software's own overly long
        sequence of setup questions.
      </li>
    </ol>


    <p>
      And <em>finally</em>, after all this, the person gets to try the actual
      service—and decide whether it's worth using.
    </p>

    <p>
      With all these hurdles, it's a small miracle some web-based services end up
      with any users at all. Each hurdle constitutes an opportunity for the user to
      leave. The site is effectively asking the user, &quot;Are you sure you want to
      use us? Are you really sure? How about now? Are you sure you're sure?
      Hmm?&quot; Some users are going to take one of these opportunities and leave.
      People are growing increasingly leery of starting down the hurdle-strewn path
      of a new site. They've been down similar paths so many times that they've
      concluded the experience won't be worth their time unless they're already
      confident the site will provide substantial value.
    </p>

    <p>
      Admission: The signup experience for
      <a href="http://www.cozi.com">Cozi Central</a> isn't exactly a disaster in my
      opinion, but it's clearly old school in this regard, and puts up many of the
      hurdles listed above. I can't say the demo's great, and our setup experience
      is, unfortunately, waaaaay too complex (and almost entirely a result of the
      development framework we selected for building the product). We've got a lot
      to learn, but there are some great sites to learn from.
    </p>

    <p>
      <em
        >Next time:
        <a href="http://miksovsky.blogs.com/flowstate/2007/05/easing_visitors.html"
          >A new school of sites that eases users in with anonymous accounts</a
        >
      </em>
    </p>
  2007-05-23 Easing visitors into a site with anonymous accounts.html: >
    
    ---

    title: "Easing visitors into a site with anonymous accounts"

    date: 2007-05-23

    slug: easing_visitors

    originalUrl: https://miksovsky.blogs.com/flowstate/2007/05/easing_visitors.html

    ---


    <p>
      For while now I've been trying
      <a href="http://www.netvibes.com">Netvibes</a> and
      <a href="http://www.pageflakes.com">Pageflakes</a>, two members of a new
      school of sites that invert the traditional service signup experience. As
      discussed in the last post, old school sites put up numerous marketing,
      signup, and technology-related
      <a href="http://miksovsky.blogs.com/flowstate/2007/05/hurdles_in_the_.html"
        >hurdles at the entrance to their service</a
      >. New school sites like Netvibes and Pageflakes turn this experience on its
      head: <strong>first the visitor tries the product</strong> using something
      tantamount to an anonymous account. Once the visitor is convinced they like
      the service and want to get more out of the service—only then do they complete
      the steps to form a relationship with the service.
    </p>

    <p>
      Both Netvibes and Pageflakes let users build and edit a highly customizable
      home page. Such home pages have existed for years, but in the past
      customizations were generally available only to users with established
      accounts. These two sites, in contrast, take a new visitor straight to their
      very own customizable home page. In Netvibes, for example, a small portion of
      the page explains what the service does, but most of the page is given over to
      functional widgets that demonstrate the service with real examples:
    </p>

    <p>
      <img src="/images/flowstate/netvibes.png" />

      <br />
    </p>

    <p>
      The general idea is that
      <strong
        >the user will figure out what the product is by using the product
        itself</strong
      >—not by reading marketing verbiage or sitting through a demo. The page
      reveals customization capabilities through a combination of self-explanatory
      elements (&quot;Type your page title here&quot;) and additional options
      revealed on hover.
    </p>

    <p>
      PageFlakes is very similar to Netvibes. Pageflakes does almost as good a job
      as Netvibes in welcoming visitors to their product, although for some reason
      they feel compelled to display a welcome page first. In using both sites,
      PageFlakes seems to be slightly more polished than Netvibes (though I
      personally wouldn't have attempted to build a brand around the word
      &quot;flake&quot;).
    </p>

    <p>
      <img src="/images/flowstate/pageflakes.png" />

      <br />
    </p>

    <p>
      These sites both use cookies to establish a tentative, anonymous relationship
      between you and the site. You can even enter personal data to customize the
      various widgets, but until you've established an account, you're generally
      using the service anonymously. (Of course, even without a user ID, each
      additional piece of data you enter to customize the site can be used to more
      precisely identify you.)
    </p>

    <p>
      You can use your anonymous account for as long as you want to, provided you
      use the same browser on the same machine to do so. Whenever you reach that
      point—maybe even months after starting to use the service—you can sign up for
      an account. The basis of your relationship with the site transfers from your
      anonymous browser cookie to a real account secured with a user ID and a
      password. (Both these sites use your email address as a user ID, to eliminate
      the signup hurdle of picking a user ID.)
    </p>

    <p>
      The deep principle at work is that a site doesn't need to rush to secure a
      relationship with a visitor. Inevitable interest in getting more out of the
      site (in these cases, the desire to use your customized home page from another
      location) slowly pushes you, the casual anonymous visitor, to finally forge a
      permanent relationship with the site as an identified user.
      <strong
        >The site knows a relationship with you will develop in its own
        time.</strong
      >
    </p>

    <p>
      I've been searching for a compelling real-world analogy to this kind of
      anonymous trial-before-signup experience. The best I've come up with so far: a
      public library. Anyone can walk in off the street and participate in a highly
      useful basic level of service—just pick a book off the shelves and start
      reading. You can do this for as long as they want, and you don't need to
      supply identification to do so. However, when you eventually want to take a
      book home, you must &quot;upgrade&quot; to a higher level of service. You must
      establish an account with the library, and this step requires that you
      identify yourself (with, for example, a document showing your address).
    </p>

    <p>
      I still have yet to establish a full account with either Netvibes or
      Pageflakes, but have continued to try both out anonymously. I might never
      elect to sign up with either service. Yet, even if I eventually abandon them,
      I will have used each far longer than I ever would have if it had made me sign
      up first.
    </p>
2007-06:
  2007-06-03 Geni Slickest trial-to-signup path yet.html: >
    ---

    title: "Geni: Slickest trial-to-signup path yet"

    CONVERT BREAKS: __default__

    date: 2007-06-03

    slug: geni_slickest_t

    originalUrl: https://miksovsky.blogs.com/flowstate/2007/06/geni_slickest_t.html

    ---


    <p>
      A few months ago I came across <a href="http://www.geni.com">Geni</a>, a
      genealogy site that offers the slickest trial-to-signup path I've seen yet. I
      wanted to post on Geni, but to appreciate how good a job they do, I thought it
      was useful to look at old school sites, where&nbsp;signup is one of many
      <a href="http://miksovsky.blogs.com/flowstate/2007/05/hurdles_in_the_.html"
        >hurdles to site usage</a
      >, and new school sites that avoid some of these hurdles through the use of
      <a href="http://miksovsky.blogs.com/flowstate/2007/05/easing_visitors.html"
        >anonymous accounts</a
      >. Geni goes beyond all the rest in creating what, in my opinion, is&nbsp;the
      most inviting initial user experience for a site to date.
    </p>

    <p>
      Right off the bat, you're cleverly dropped into a family tree that's already
      partially started: there's a place for you, and obvious points to add your
      parents. No fanfare is needed to introduce the site or explain what it's for.
      The very nature of the task's UI makes it obvious that you're building a
      family tree:
    </p>

    <p>
      <img alt="" src="/images/flowstate/042307_0436_Genishowsho1.png" />
    </p>

    <p>
      You're asked for an email address, and in the most compact text imaginable,
      they define the key points of their privacy policy ("never spammed, never
      shared").
    </p>

    <p>
      It's not advertised to the user at this point that the email address they
      enter for themselves will become their user ID on the site. This is revealed
      the first time the user tries to return to the site. At that point—the
      <em>second </em>visit—the user is asked to sign in with their email address
      and a temporary password that was emailed separately to that address.
    </p>

    <p>
      The second visit also includes a minor but noteworthy detail: the user is
      asked to agree to the service's "Terms of Use". This strikes an elegant
      balance between the ease of use and legal risk. Terms of use generally come in
      two flavors:
    </p>

    <ol>
      <li>
        Browse-wrap. The act of browsing the site implicitly signals agreement.
        Because a user could argue that they didn't notice or were unaware of the
        site's terms of use, this form of consent is considered comparatively weak.
        This is generally used for sites that don't require the user to sign up at
        all.
      </li>
      <li>
        <a href="http://en.wikipedia.org/wiki/Click_wrap">Click-wrap</a>. You must
        explicitly check a box or comparable control to indicate that you agree to
        the terms. This presumably confers stronger legal protection for the site,
        because it would be harder for a user to claim that they were unaware of the
        terms.
      </li>
    </ol>

    <p>
      <em
        >DISCLAIMER:&nbsp;I'm not a lawyer, and you would have to be a complete
        idiot to base a legal strategy on the content of this blog without
        consulting an attorney.</em
      >
    </p>

    <p>
      Most services that require accounts go for&nbsp;click-wrap terms, hence the
      ubiquitous "I agree to the terms and conditions" check box found on service
      signup pages. The site feels obligated to obtain explicit agreement because
      the user and site are forging an ongoing relationship, and each future
      interaction could increase the likelihood a legal issue might arise. The
      downside is the "I agree" check box becomes just another hurdle in the way of
      the user trying out the service, and creates another opportunity for the user
      to decide they'd rather just walk away.
    </p>

    <p>
      Geni's approach to terms of use strikes a nice balance. You can try out the
      site once under a browse-wrap agreement, but for future visits you must accept
      the click-wrap agreement. By that second visit, of course, you've clearly
      indicated your interest in what the site has to offer, and you're motivated to
      regain access to the family tree you've already begun to create. So, agreeing
      to terms of use at that point seems like a trivial matter. In their approach
      to terms of use, Geni has managed to move one more hurdle from the entrance of
      the site to somewhere deep within. This incredibly careful attention to detail
      pervades the Geni user experience.
    </p>

    <p>
      The Geni site is worth checking out for their signup experience alone. The
      other thing to marvel at their intensely viral proposition. Genealogy lends
      itself to reaching out to people you know, and they make it drop-dead simple
      to enter a relative's email address and invite them with a single click. The
      beauty of this is that you get to offload all the data entry tedium to the one
      or two relatives in the family that actually enjoy that sort of thing.
      Everyone in the family receives the benefit of their work—as does Geni.
    </p>
  2007-06-14 Times Reader finally delivers long-promised digital newspaper reading experience.html: >
    
    ---

    title: "Times Reader finally delivers long-promised digital newspaper reading experience"

    date: 2007-06-14

    slug: times_reader_fi

    originalUrl: https://miksovsky.blogs.com/flowstate/2007/06/times_reader_fi.html

    ---


    <p>
      For the past month I've been playing with
      <a href="http://select.nytimes.com/gst/timesreader.html">Times Reader</a>, a
      Windows client application for browsing the New York Times. I think the
      computing industry has been promising this sort of digital newspaper for, oh,
      30 years or so, so it's nice to see it finally happened.
    </p>

    <p>
      I remember reading about early prototypes of digital newspapers in coverage of
      work at the
      <a
        href="http://www.amazon.com/Media-Lab-Inventing-Future-M/dp/0140097015/ref=pd_bbs_sr_1/103-5341647-4876649?ie=UTF8&amp;s=books&amp;qid=1180930122&amp;sr=8-1"
        >MIT Media Lab</a
      >
      in the 1980s. The basic idea is that the computer would download news
      articles, then use principles of layout and typography to create a result that
      was optimal for browsing and reading on the user's display. Since then we've
      seen the advent of newspaper web sites, but in my opinion, none of them offer
      anything close to the pleasure of reading a paper newspaper.
    </p>

    <p>
      In general, Times Reader effectively realizes the original digital newspaper
      vision. It makes intelligent layout decisions that maximize legibility,
      achieve a reasonable aesthetic appearance, keep articles on one page if
      possible (to avoid scrolling), and allow for advertisements. It also renders
      type exceedingly well by using ClearType.
    </p>

    <p>
      The results are particularly interesting on a large monitor. Compare a
      <a href="http://www.nytimes.com/2007/06/13/dining/13oven.html"
        >typical New York Times article</a
      >
      in a web browser:
    </p>

    <p>
      <img src="/images/flowstate/new_york_times_2.png" />
    </p>

    <p>
      The browser version is quite static, and makes poor use of the display space.
      Times Reader, in contrast, takes full advantage of the available screen real
      estate, all the while following time-honored rules for column widths, leading,
      margins, and so on:
    </p>

    <p>
      <img src="/images/flowstate/times_reader_2.png" />
    </p>

    <p>
      At a modest window size, Times Reader still does its best to create an
      effective presentation of the same article:
    </p>

    <p>
      <img src="/images/flowstate/times_reader_medium_3.png" />
    </p>

    <p>
      I find Times Reader actually does deliver a more newspaper-like reading
      experience. When I don't have a chance to read the paper edition of the Times,
      I enjoy catching up in Times Reader over reading the basic nytimes.com site.
    </p>

    <p>
      That said, I'm not sure many people will find the experience so much better
      that it's worth a download and the additional hassle of using a separate
      application. According a
      <a
        href="http://www.microsoft.com/presspass/press/2006/apr06/04-28TimesReaderPR.mspx"
        >Microsoft press release about Times Reader</a
      >, the application is developed in Windows Presentation Foundation (Avalon),
      which in turn requires the Microsoft .NET framework. (Interestingly, the ads
      appear to be implemented in WPF as well, so the marketing verbiage can also be
      rendered in gorgeous ClearType.) If you've got Vista, the install isn't a big
      deal, but Windows XP users will probably struggle.
    </p>

    <p>
      I've found some practical issues with Times Reader as well. In theory Times
      Reader has a component that downloads and caches content when you're not
      running the app itself, but this doesn't seem to always work. At least, in my
      experience, I've found that I sometimes boot the app only to discover that the
      content is stale. A progress indicator in the corner spins for several minutes
      to let me know it's working, but as new content begins to appear (over many
      minutes), I have no way of knowing which content is stale and which is fresh.
    </p>

    <p>
      Moreover, Times Reader uses a newspaper-style columnar layout for the section
      summary pages. These look great, but their minimalist appearance unfortunately
      leaves the reader wondering which articles are the most recent: is the article
      in the upper left the most recent, or the most important, or some combination?
    </p>

    <p>
      Finally, while Times Reader does a better job than a browser at rendering a
      page of content, the actual browser frame of the application is unremarkable,
      and it's tiresome to use a separate browser just to read one site. I'm looking
      forward to seeing Times Reader rewritten in Silverlight so the entire thing
      can just run in the browser.
    </p>

    <p>
      I think it's interesting to note that Times Reader omits a feature always
      stressed in early digital newspaper prototypes. Those demos invariably showed
      off a user's ability to selectively express interest in certain types of news.
      (&quot;In the future, we engineers won't have to even <em>see</em> the Sports
      pages!&quot;) By now, most news sites don't make a big deal of this sort of
      personalization. If someone's really interested in a particular topic, they
      can either set up a news filter for it or, more likely, just visit a
      specialized news site focused solely on that topic. If someone's uninterested
      in a topic, they can just ignore it.
    </p>

    <p>
      I first saw early demos of Times Reader several years ago and it's frankly
      stunning that the product actually broke through to see the light of day. It's
      exactly the sort of technology collaboration that sounds so great in
      principle, but in practice is hardly ever pulled off. Kudos to the Times
      Reader teams at both Microsoft and the New York Times for their success in
      bringing this to fruition.
    </p>
  2007-06-20 Don't bury the lede What's the real story behind a UI interaction.html: >
    
    ---

    title: "Don't bury the lede: What's the real story behind a UI interaction?"

    date: 2007-06-20

    slug: dont-bury-the-l

    originalUrl: https://miksovsky.blogs.com/flowstate/2007/06/dont-bury-the-l.html

    ---


    <p>
      A user interface designer, like a journalist, should avoid
      <em
        ><a href="http://en.wikipedia.org/wiki/Bury_the_lead"
          >burying the lede</a
        ></em
      >: engaging the user with an opening question or statement that omits the most
      critical point of interest. The
      <a href="http://en.wikipedia.org/wiki/News_style#Terms_and_structure">lede</a>
      is the all-important opening sentence of a news story, and journalists labor
      over them. User interface interactions have ledes too, and they should be
      crafted with as much care.
    </p>

    <p>
      The Move File dialog in Windows Vista offers a convenient example. (Although a
      dialog is used here, this principle applies equally well to web pages or other
      UI modalities.) The Move File dialog appears when a user attempts to move a
      file into a folder that already contains a file of the same name:
    </p>

    <p>
      <img src="/images/flowstate/image_thumb_1.png" />
    </p>

    <p>Can you see the disaster in progress? Most users can't either.</p>

    <p>
      This dialog has buried the lede. It focuses the user's attention on the fact
      that there is another file with the same name in the destination folder. It
      fails to point out a much, much more interesting condition:
      <strong
        >The user is about to overwrite a newer file with an older file.</strong
      >
    </p>

    <p>
      To its credit, this Move File dialog does improve upon the older File Replace
      dialog in previous versions of Windows: it offers more details that can help
      the user make a decision, and offers a new option to keep both files. (The
      latter is particularly helpful when dealing with files like auto-named digital
      photos, because a user can easily take different photos that end up with the
      same name.)
    </p>

    <p>
      Overwriting a file is not, by itself, an uncommon or bad thing. It is a daily
      occurrence for users to overwrite an older file with a newer version of that
      same file. The user may be posting an updated copy of a document to a backup
      location, or to a server for use by others, or to removable media for
      transportation elsewhere, etc. This is business as usual.
    </p>

    <p>
      Going the other way—overwriting a newer file with an older files—is a much
      rarer event. The user might be giving up on work they've done and throwing it
      away. Alternatively, they could be restoring a backup file to replace one that
      has become corrupted. Either event is unusual, a point which should be
      emphasized in the dialog.
    </p>

    <p>
      The above dialog's text fails at this, as does its layout and typography.
      There are numerous pieces of text competing for attention, but among the most
      prominent are the bolded file names. That's a bit odd, since the entire
      premise of the dialog is that <em>these two file names will be the same</em>.
      The dialog has carefully drawn the user's attention to information which is
      guaranteed to be redundant. (If the user is moving multiple files, only some
      of which have conflicts, the file names are relevant—but that case can and
      should be handled specially.)
    </p>

    <p>
      As just a very first cut at revising the above dialog to restore the lede,
      some text could change. The typography could be tweaked to focus on the
      salient time stamps. A different sound is probably also in order, to
      distinguish the invocation of this dialog variant from the more normal one
      above, and emphasize that something unusual is going on.
    </p>

    <p>
      <img src="/images/flowstate/File%20Replace%20Dialog%20Revised_thumb.png" />
    </p>

    <p>
      (It should be pointed out that the designers of Vista's Win32-based UI can't
      actually set a run of text in bold, as shown in the dialog's introductory
      statement, because Win32 is
      <a href="http://miksovsky.blogs.com/flowstate/2006/05/what_the_font.html"
        >font impoverished</a
      >.)
    </p>

    <p>
      This revision would clearly needs a ton more work, but is a start in the right
      direction. At least the dialog now opens with the lede.
    </p>
2007-08:
  "2007-08-16 OpenID Great idea, bewildering consumer experience.html": >
    
    ---

    title: "OpenID: Great idea, bewildering consumer experience"

    date: 2007-08-16

    slug: openid-great-id

    originalUrl: https://miksovsky.blogs.com/flowstate/2007/08/openid-great-id.html

    ---


    <p>
      A while back I tried signing up for an
      <a href="http://en.wikipedia.org/wiki/Openid">OpenID</a>, an &quot;open,
      decentralized, free framework for user-centric digital identity.&quot; The
      basic idea is that, instead of needing to choose a user name and password for
      every site you visit, you can identify yourself with an ID that many sites
      will accept. It sounds great, but in practice I found the whole process
      bewildering. In my opinion, it’s not ready for consumer use.&nbsp;
    </p>

    <p>
      <img alt="image" src="/images/flowstate/image_thumb_2.png" />
    </p>

    <p>
      Beyond security criticisms of the scheme that can be found elsewhere, I think
      OpenID has some significant user experience issues. Some of the problems can
      be fixed, others are integral to the way the system works.&nbsp;
    </p>


    <ul>
      <li>
        It's way, way too hard to get started. All the sites supporting OpenID point
        curious users to the home page for the
        <a href="http://openid.net">OpenID Foundation</a>. From this site, it’s
        actually stunningly difficult to find a link to a place where you can
        actually get an OpenID. A link to a site called
        <a href="http://iwantmyopenid.org/">I want my OpenID!</a> sounds promising,
        but the destination page doesn't actually deliver on the promise of getting
        a user an OpenID either.&nbsp;
      </li>

      <li>
        The content and tone of the OpenID Foundation site is oriented at
        developers, not end users. The second sentence of the home page boasts,
        &quot;OpenID starts with the concept that anyone can identify themselves on
        the Internet the same way websites do—with a URI.&quot; You know what? To
        most people, that doesn't sound like an advantage; it sounds geeky,
        dehumanizing, and more than a little bit frightening.&nbsp;
      </li>

      <li>
        While there are very cool benefits that come from identifying oneself with a
        URL (URI), pity the poor consumer. They have dutifully learned that a user
        name is an identity and a URL is a place to go. Now they must wrap their
        weary brains around the concept that, when asked to identify themselves,
        they should provide a location. &quot;Why can't I just use my email
        address?&quot; they'll wonder.
      </li>

      <li>
        The process of selecting an OpenID provider will stump the average consumer.
        They’re being asked to pick an ID that they will, in theory, use everywhere
        and forevermore to gain access to everything they own. They’re supposed to
        obtain this ID by making an effectively random selection from a group of
        providers they have never heard of.
      </li>

      <li>
        Various OpenID sites also promote the notion that users should set up their
        own OpenID provider. This is fine for a teeny tiny portion of web users, and
        scary and out of the question for everyone else.
      </li>

      <li>
        The lists of OpenID providers are presented in a static order. In some cases
        this will be
        <a href="http://iwantmyopenid.org/about/openid">alphabetical</a>. The most
        commonly referenced
        <a href="http://openid.net/wiki/index.php/OpenIDServers"
          >list of OpenID providers</a
        >
        is presented in chronological order of when the service went live, an order
        that is effectively random. It's not immediately clear in most of these
        lists why a user would pick one provider over another. None of the lists
        I've seen are organized around attributes which are relatively easy for a
        user to base a decision upon, like: Do you have a blog already? Or, Which
        language do you prefer to speak?
      </li>

      <li>
        As an aside, when you ask a normal person to choose a provider from a list
        for a service they don't understand, most people are just going to pick the
        first or last entry. (If a default value is provided, they'll pick that. The
        default value will almost always be the first entry.) So, a static list of
        providers turns out to be a really good way to screw the bulk of providers
        whose entries sit in the middle of the list. Microsoft learned this lesson
        the hard way in various places in Windows, addressing such problems by
        dynamically shuffling provider names so that all providers spend equal time
        at the top of the list. More usefully, the lists could reflect
        community-based provider ratings.
      </li>

      <li>
        The ostensible universality and permanence of an OpenID actually makes the
        task of picking a provider harder. Even if I happen to currently have a
        SixApart blog with a <a href="http://www.sixapart.com/typekey/">TypeKey</a>,
        am I really prepared to use that ID everywhere? Exactly how long can a
        consumer expect a given OpenID provider to remain in existence? In my
        playing around on one site, when I remapped a URI from one provider to
        another, I lost my ID-related preferences. This gives me pause in depending
        upon any provider that could potentially die before the web service I'm
        using the ID with. Frankly, many of the OpenID providers seemed like tiny
        organizations that could disappear overnight. Nowhere could I find anything
        that would tell me what should theoretically happen to my ID-bound accounts
        if that were to happen.
      </li>

      <li>
        Suppose that, at some point, a visitor to an OpenID-enabled site is really
        intrigued by this OpenID thing they keep coming across, and decides on the
        spot that they want to get one for themselves. The OpenID community, and the
        sites that use it, appear to have given little thought to addressing this
        scenario. Go to the
        <a href="http://www.livejournal.com/">LiveJournal</a> home page and try
        figuring out how you’d get an OpenID <em>and come back to use it</em>. I’ll
        bet analytics on the site will show that, of the tiny percentage of visitors
        to LiveJournal who go off from there to get an OpenID, only the most
        determined will make it back. Why would a site operator let anyone leave
        their site to perform a task from which they will never return?&nbsp;
      </li>

      <li>
        An OpenID is an identity (like a user name), not an account. A consumer
        still needs an account to use the site. However, this isn't at all obvious
        to a consumer. When I tried to sign in to
        <a href="http://plaxo.net">Plaxo</a> with my OpenID, I got an otherwise
        blank page displaying the error, “Unable to verify the specified OpenID.”
        Some sites do a reasonable job of letting a user who has never logged on
        before create an account on the spot. When I tried to sign in to
        <a href="http://livejournal.com">LiveJournal</a> with my OpenID, they let me
        create an account and then start using it. This inconsistency among
        implementations will confuse a lot of people.
      </li>

      <li>
        When I actually tried to use my OpenID on a site, I got a confusing message
        from the OpenID provider requiring me to confirm that I really wanted to let
        the site access personal information I had associated with my OpenID. The
        clarity of such messages varies from OpenID provider to provider, ranging
        from puzzling to incomprehensible. In the case of Verisign, I was instructed
        to select which “Trust Profile” I wanted to associate with the site—or did I
        want to create a new Trust Profile? Wha?
      </li>
    </ul>

    <blockquote>
      <p>
        <img src="/images/flowstate/OpenID%20Trust%20Request_thumb.png" />
        <br />Since most users have never encountered the concept of sharing
        information across sites, a ton of education would be necessary to make
        these messages meaningful to the average user.
      </p>
    </blockquote>

    <ul>
      <li>
        Currently, even those sites that do implement OpenID generally treat OpenIDs
        as a second-class form of identification. They put their own proprietary
        means of signing in (generally with a user name and password) on their home
        page, and bury the OpenID sign in facility behind a link. This means that
        the hip OpenID-using visitor has to make more clicks than the proprietary
        ID-using masses... which doesn't exactly sound like a reward.
      </li>
    </ul>

    <p>
      And all this is for—what, exactly? To save me from having to pick a user name
      and password? As annoying as that can be,
      <strong>it's just not that hard!</strong> Remembering an arbitrary user name
      does cause real trouble, but simply allowing email addresses to be used as IDs
      can solve almost all of that problem. As more and more sites allow email
      addresses as IDs, the need for OpenID becomes less compelling to a consumer.
    </p>

    <p>
      For the time being, I can’t imagine a sane business operator forcing their
      precious visitors through this gauntlet of user experience issues just for the
      marginal benefits that accrue to a shared form of ID. I've read numerous
      claims that all it will take is for someone big like Google to support OpenID
      to crack this problem open. Unfortunately, there's no business of any size
      that can afford to direct their traffic down a dead end.
    </p>

    <p>
      Most service operators will, at best, offer users a choice between using a
      proprietary ID or an OpenID, creating a terrible economic proposition for a
      consumer. Faced with the proposition of: 1) struggling once for thirty minutes
      to struggle through a process they can barely understand, or 2) spending two
      minutes on every new site breezing through a familiar process they've done
      countless times before,
      <strong
        >normal busy people will choose the familiar route time and time
        again</strong
      >. I’ll bet anything that most people will keep going for proprietary IDs,
      further deferring the network effects possible from OpenID adoption.
    </p>

    <p>
      This isn't to say that OpenID isn't worth attempts to fix it. At least some of
      the above problems can, and should, be addressed head on by the OpenID
      community. My recommendations:
    </p>

    <ol>
      <li>
        Redesign the OpenID home page for consumers. The page's main content should
        contain a brief explanation of OpenID in consumer-friendly terms, along with
        a giant Get an Open ID button. Move all the developer material behind a
        Developers button.
      </li>

      <li>
        Design an end-to-end process for getting an OpenID from a service operator's
        site. Since most services won't care which provider the user uses, let these
        services send the user into a real flow for picking a provider, getting an
        ID, and most importantly
        <em>coming back to the original service to use the new ID.</em> When they
        get back to the service, the new OpenID should be prefilled.
      </li>

      <li>
        Give the above flow a sidebar titled &quot;Do you have a blog?&quot; that
        explains that, if they have a blog on LiveJournal, TypePad, etc., they can
        use that for their OpenID. A link in the sidebar should shunt the user into
        a page that has them pick their blog provider, then tells them what the
        (blog service dependent) form of their OpenID is. The flow should then
        return the user to the service they started on (again, with their OpenID
        prefilled).
      </li>

      <li>
        Organize the list of providers around factors that can actually influence a
        user's decision. Consider offering provider ratings based on ease of use,
        uptime, etc.
      </li>

      <li>
        Refine reference designs for the complex range of cases that come up in
        using OpenID with a service. E.g., define the expected behavior and
        terminology that should be used when a user tries to log in with an OpenID
        but does not already have an account with that ID.
      </li>

      <li>
        Define guarantees that services should offer to users in the event their
        OpenID provider goes out of business.
      </li>

      <li>
        Build an organization that can do real usability testing on this service
        with real consumers.
      </li>
    </ol>


    <p>
      <em
        ><strong>UPDATE (October 7, 2007): </strong>This week OpenID.net overhauled
        their site, and the new site addresses a number of the criticisms listed
        above.</em
      >
    </p>
2007-09:
  2007-09-05 Bill Buxton's "Sketching User Experiences".html: >
    ---

    title: Bill Buxton's "Sketching User Experiences"

    date: 2007-09-05

    slug: bill-buxtons-sk

    originalUrl: https://miksovsky.blogs.com/flowstate/2007/09/bill-buxtons-sk.html

    ---


    <p>
      <img src="/images/flowstate/Sketching User Experiences.jpg" />
    </p>

    <p>
      I'm reading the book
      <a
        href="http://www.amazon.com/gp/product/0123740371?ie=UTF8&amp;tag=httpmiksovskb-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0123740371"
        >Sketching User Experiences</a
      >
      by <a href="http://www.billbuxton.com/">Bill Buxton</a>. The author's
      attention to the presentation of examples make for an engaging book, and he
      covers some interesting ground. I came across an interesting list he presents
      (pp. 111-2) of attributes that characterize design sketches, in which he
      asserts that sketches are (or have):
    </p>


    <ol>
      <li>
        <em
          ><strong>Quick:</strong> A sketch is quick to make, or at least gives that
          impression.</em
        >
      </li>

      <li>
        <em><strong>Timely:</strong> A sketch can be provided when needed.</em>
      </li>

      <li>
        <em
          ><strong>Inexpensive:</strong> A sketch is cheap. Cost must not inhibit
          the ability to explore a concept, especially early in the design
          process.</em
        >
      </li>

      <li>
        <em
          ><strong>Disposable:</strong> If you can't afford to throw it away when
          done, it is probably not a sketch. The investment with a sketch is in the
          concept, not the execution. By the way, this doesn't mean that they have
          no value, or that you always dispose of them. Rather, their value largely
          depends on their disposability.</em
        >
      </li>

      <li>
        <em
          ><strong>Plentiful:</strong> Sketches tend not to exist in isolation.
          Their meaning or relevance is generally in the context of a collection or
          series, not as an isolated rendering.</em
        >
      </li>

      <li>
        <em
          ><strong>Clear vocabulary:</strong> The style in which a sketch is
          rendered follows certain conventions that distinguish it from other types
          of renderings. The style, or form, signals that it is a sketch. The way
          that lines extend through endpoints is an example of such a convention, or
          style.</em
        >
      </li>

      <li>
        <em
          ><strong>Distinct gesture:</strong> There is a fluidity to sketches that
          gives them a sense of openness and freedom. They are not tight and
          precise, in the sense that an engineering drawing would be, for
          example.</em
        >
      </li>

      <li>
        <em
          ><strong>Minimal detail:</strong> Include only what is required to render
          the intended purpose or concept. Lawson (1997, p. 242) puts it this way,
          &quot;... it is usually helpful if the drawing does not show or suggest
          answers to questions which are not being asked at the time.&quot;
          Superfluous detail is almost always distracting, at best, no matter how
          attractive or well rendered. Going beyond &quot;good enough&quot; is a
          negative, not a positive.</em
        >
      </li>

      <li>
        <em
          ><strong>Appropriate degree of refinement:</strong> By its resolution or
          style, a sketch should not suggest a level of refinement beyond that of
          the project being depicted. As Lawson expresses it: &quot;... it seems
          helpful if the drawing suggests only a level of precision which
          corresponds to the level of certainty in the designer's mind at the
          time.&quot;</em
        >
      </li>

      <li>
        <em
          ><strong>Suggest and explore rather than confirm:</strong> More on this
          later, but sketches don't &quot;tell&quot;, they &quot;suggest&quot;.
          Their value lies not in the artifact of the sketch itself, but in its
          ability to provide a catalyst to the desired and appropriate behaviours,
          conversations, and interactions.</em
        >
      </li>

      <li>
        <em
          ><strong>Ambiguity:</strong> Sketches are intentionally ambiguous, and
          much of their value derives from their being able to be interpreted in
          different ways, and new relationships seen within them, even by the person
          who drew them.</em
        >
      </li>
    </ol>


    <p>
      Point #9 above states that sketches should exhibit an appropriate degree of
      refinement, a point echoed in a post I made a while back on
      <a href="http://miksovsky.blogs.com/flowstate/2006/10/using_crude_ske.html"
        >matching design sketches to the desired level of design feedback</a
      >. I found the other attributes listed here interesting food for thought.
    </p>
2007-10:
  2007-10-10 Show mercy to keyboard users (yourself included) by setting the default keyboard focus.html: >
    
    ---

    title: "Show mercy to keyboard users (yourself included) by setting the default keyboard focus"

    date: 2007-10-10

    slug: show-mercy-to-k

    originalUrl: https://miksovsky.blogs.com/flowstate/2007/10/show-mercy-to-k.html

    ---


    <p>
      As more of my UI work moves from client software to web sites, I'm often
      struck by the lack of attention most web sites spend on details of UI
      interactions. As a case in point, compare the degree to which a software
      company considers its keyboard users. Most client software products do a fair
      to middling job of keyboard support, but at least provide some basic
      facilities like keyboard accelerators for input fields, and give at least a
      bit of thought to the order in which a user will tab through fields. Most web
      sites, in comparison, apparently fail to give the keyboard user the slightest
      bit of thought.&nbsp;
    </p>

    <p>
      Keyboard support is often considered to be something done just for people who,
      for various physical reasons, can't use a mouse. That's an important community
      to serve, but not the only reason to think about keyboard users. Most people
      use a keyboard at some point in a given computer session. The vast majority of
      people searching with Google, sending email, IMing, twittering, and so on,
      every day are doing so with a keyboard. Laptop users routinely find themselves
      in situations where using a mouse or pointing device is cumbersome. As with
      many services initially intended for users with disabilities (closed
      captioning, sidewalk curb cuts, wheelchair ramps), keyboard support benefits
      the broader public.&nbsp;
    </p>

    <p>
      For all people complain about Microsoft Windows, the platform and its
      applications do a great deal of work in service of keyboard users. As much as
      I love my MacBook, I'm often frustrated by operations that have no obvious
      keyboard shortcut. And I was amazed to discover OS/X disables a good portion
      of its keyboard support by default, requiring a trip to System Preferences to
      fix. Still, OS/X does a fantastic job of keyboard support in comparison to
      almost every web site today.&nbsp;
    </p>

    <p>
      The very simplest thing a UI designer to help keyboard users is
      <strong
        >deliberately pick a good control to receive the keyboard focus by
        default.</strong
      >
      This is usually a trivial task—just figure out which control the user is
      likely to want to interact with first, and put the focus there. Often this
      control will be a text box. In a decent visual UI designer, setting the
      default keyboard focus is usually something that can be done purely through
      design-time UI, without resorting to code. In HTML, the default focus can
      usually be easily set with a tiny amount of the most rudimentary JavaScript in
      an onload event handler. [Example:
      onload=&quot;document.myform.textbox1.focus()&quot;]
    </p>

    <p>
      <strong>Yet virtually no web pages bother to do this.</strong> This is pretty
      remarkable, even more so for web forms with text input fields. On such pages,
      almost every user is going to have to click the mouse on the first input field
      so they can start typing. Every user, every day, will have to spend a second
      or two to do this. In a minute or so, a web developer could permanently
      eliminate the need for that extra click. So why don't more people
      bother?&nbsp;
    </p>

    <p>
      As far as I can tell, the most prominent class of web sites that consistently
      set the default keyboard focus is search engines:
      <a href="http://www.google.com">Google</a>,
      <a href="http://www.yahoo.com">Yahoo</a>,
      <a href="http://www.live.com">Windows Live</a>, etc. Most other sites don't
      bother, even those like <a href="http://www.facebook.com">Facebook</a> that
      have obvious fields, like Search boxes, that could receive the focus. And even
      the search engines that do set the keyboard focus don't appear to reflect a
      consistent corporate design goal. <br />
    </p>

    <p>
      <img src="/images/flowstate/Google%20Search%20Box_thumb.png" />
    </p>

    <p>
      <span><em>Google home page sets the default keyboard focus</em></span>
    </p>

    <p>&nbsp;</p>

    <p>
      <img src="/images/flowstate/Google%20Reader%20Search%20Box_thumb.png" />
    </p>

    <p>
      <span><em>Other Google properties generally don't</em></span>
    </p>

    <p>
      Google's home page sets the keyboard focus, but the main page for other Google
      properties like <a href="http://www.google.com/reader">Google Reader</a>,
      <a href="http://news.google.com">Google News</a>, and
      <a href="http://www.youtube.com">YouTube</a> don't. Windows Live does, but
      <a href="http://www.microsoft.com">Microsoft's corporate home page</a>
      doesn't. This last example is particularly telling. Microsoft spends untold
      hundreds of hours every year ensuring that its Windows products comply with
      regional accessibility regulations such as the wide-reaching
      <a href="http://en.wikipedia.org/wiki/Americans_with_Disabilities_Act_of_1990"
        >Americans with Disabilities Act</a
      >. American federal agencies generally insist that suppliers like Microsoft
      create products that comply with these laws if they want to do business with
      the agency. I have no specific knowledge, but it's reasonable to assume that
      the Microsoft home page doesn't fall under these regulations—maybe for the
      simple reason that no one's paying to use the page.&nbsp;
    </p>

    <p>
      I think the primary reason web companies ignore keyboard users boils down to
      expectations. Web sites don't bother to set the keyboard focus because other
      web sites don't, and because by now users don't expect them to. This double
      standard is so pervasive that, as much as I care about well-designed keyboard
      support, the web version of the product I work on generally doesn't set the
      keyboard focus either. It just never occurred to me as something to worry
      about,
      <em
        >even as I devoted attention to keyboard users of the downloadable Windows
        client version of the same product.</em
      >&nbsp;
    </p>

    <p>
      Starting to write this post provided me the impetus to finally address this UI
      problem in some portions of on Cozi's marketing site. Some pages like the
      <a href="https://secure.cozi.com/accounts/signup.aspx">Cozi sign-up page</a>
      had forms that were completely straightforward to fix. The
      <a href="http://www.cozi.com/">Cozi home page</a> proved tougher to fix. I
      wanted to set the focus to the search box. Unfortunately, that control happens
      to use hint text, the light gray text inside a field that serves as a field
      label. Like most HTML implementations of hint text, the particular
      implementation we happen to use clears the hint text when the control receives
      the focus. This means setting the default keyboard focus has the unwanted side
      effect of removing the hint text, thereby obscuring the purpose of the very
      field the user might want to type in. As it turns out, we've been developing a
      better hint text implementation anyway that won't disappear until the user
      starts typing, and I'm looking forward to eventually using that control for
      our search box.&nbsp;
    </p>

    <p>
      In the meantime, I've at least resensitized myself to the interests of
      keyboard users, myself included. If your web product has a commonly used form
      or search box, why not take a minute to put the default keyboard focus in the
      right place? Setting the default keyboard focus is only a simple tiny step
      towards designing a good experience for keyboard users, but at least it's a
      start.
    </p>
2007-11:
  2007-11-08 Directional keyboard navigation could improve PC-based browsing too.html: >
    
    ---

    title: "Directional keyboard navigation could improve PC-based browsing too"

    date: 2007-11-08

    slug: directional-key

    originalUrl: https://miksovsky.blogs.com/flowstate/2007/11/directional-key.html

    ---


    <p>
      <em
        >Many thanks to people who shared suggestions in the previous post on
        keyboard navigation. I'm looking forward to trying them out on Cozi's
        site.</em
      >
    </p>

    <p>
      Continuing a discussion of
      <a href="http://miksovsky.blogs.com/flowstate/2007/10/show-mercy-to-k.html"
        >keyboard navigation</a
      >, it's worth asking whether the Tab navigation model itself is a problem that
      needs fixing. The Tab model works well in the small dialogs for which it was
      designed, but has completely failed to scale up to navigating complex web
      sites. Consider two user interfaces, one old and one contemporary:
    </p>

    <p>
      <img src="/images/flowstate/windows_95_dialup_networking.png" /><br /><em
        >Windows 95 dialog with approximately 10 focusable controls</em
      >&nbsp;
    </p>

    <p>
      <img src="/images/flowstate/msn_home_page.png" />
    </p>

    <p>
      <em>Default MSN.com home page with approximately 200 focusable controls</em>
    </p>

    <p>
      Note that
      <strong>the relative scale of these two screens has been preserved</strong>.
      Both spatially and logically, the user has a much, much larger area to move
      around.
    </p>

    <p>
      Modern operating system UIs provide two standard mechanisms for moving the
      focus around a window using the keyboard: a linear Tab model, and explicit
      keyboard shortcuts (e.g., Alt keys). The Tab model is the most commonly used
      for moving between fields in a UI. It evolved from a UI intended for
      navigating through the modest collection of input fields that could fit on
      small character-based display (with, for example, 24 rows of 80 characters),
      and represented an evolution in turn from Tab keys on typewriters. The Tab
      model hasn't evolved much since the character-based days. A single control in
      the active window has the keyboard focus. This control indicates its active
      state in one of several ways: button-like controls and list boxes show a
      dotted marquis or other highlighting effect, while text controls show an
      insertion point or selection. Pressing the Tab key moves the keyboard focus
      through the focusable (interactive) controls on the page in a linear order
      defined at design time by the programmer. Pressing Shift+Tab moves the focus
      through that order in reverse.
    </p>

    <p>
      That the Tab model was adequate for simple dialogs like the one above is
      evidenced by the model's survival over decades of change in UIs. To my mind
      this model has completely broken down, however, in its application to typical
      web pages. The first issue is one of scale: the page above has
      <strong>twenty times</strong> the number of focusable controls as the simple
      dialog. A user trying to use the keyboard to reach a link in the middle of the
      page might have to press the Tab key 125 times to reach it. (Or, if they were
      exceptionally efficient, they could tab around the other direction and only
      have to press Shift+Tab 75 times.) The second issue is that the page has a
      much more complex two-dimensional columnar layout that the dialog, but that
      layout cannot be captured in the one-dimensional tab order. To the user, the
      behavior of the Tab key is therefore quite unpredictable.
    </p>

    <p>
      The other standard keyboard navigation technique—explicit keyboard
      shortcuts—are also inadequate for complex user interfaces. Microsoft Windows
      allows users to move the focus directly to a control on the dialog by pressing
      a keyboard shortcut, generally the Alt key plus a single letter in the
      control’s label. (OS/X does this too, although I find it less discoverable and
      generally weaker in execution.) This system is workable for dialogs with a
      small number of controls and a reasonable distribution of letter frequencies
      in control labels, but is obviously unable to scale well beyond a handful of
      controls. (I remember once running out of available letters in a large dialog
      and having to resort to using the label's trailing colon as the shortcut
      character.)<br />
    </p>

    <p>
      The leading web browsers have adopted these legacy keyboard navigation
      techniques despite their inadequacy to scale up to modern web-based UIs.
      Mozilla Firefox, for its part, does offer one more keyboard navigation
      technique: Emacs-style incremental searching. This lets the user move the
      focus to a specific link by typing the apostrophe ('), or to specific text by
      typing a slash (/), then typing the initial text of the desired target. This
      is quite fast, although I personally find this method less than satisfying. I
      find it less brain-taxing to just point at the thing I want instead of having
      to read it and type it. I also have trouble keeping straight the three
      different keys for the three slightly different kinds of search Firefox offers
      for searching within a single page. In practice this UI doesn't work well for
      long scrolling pages: you need to be able to see the thing you want. Once you
      start typing and move the focus somewhere, you can't easily move the focus to
      an adjacent element without starting over or falling back to tabbing. The
      incremental search mechanism can't target controls other than textual links,
      and then only if the link text is unique. A substantial number of links are
      images, and don't even have visible text. And finally, because the keyboard
      shortcuts are unmodified by a key like Ctrl, they don't work if the keyboard
      focus is already in a text box.
    </p>

    <p>
      Interestingly, a much better user interface for navigating screens with lots
      of elements is already ubiquitous—but not on PCs. It's found on mobile phone
      web browsers, which of necessity do a good job at keyboard navigation. They
      support two-dimensional directional navigation by using Left, Right, Up and
      Down arrow keys (or a joystick) to move to the &quot;nearest&quot; element in
      the corresponding direction. For example, if you press the Right key,
      heuristics determine whether there's an element you might be trying to reach
      towards the right, and if there are multiple elements, which element you
      probably want.
    </p>

    <p>
      Significantly, these heuristics
      <strong>respect the rendered visual representation of the page</strong>, not
      the structure of the document's object model or the original location of
      elements at design time. This is necessary to account for the fact that the
      user may be viewing the page at a different width than the designer used, with
      different fonts, at different sizes, etc. Directional navigation UIs also
      tightly connect keyboard focus and scroll position, allowing someone to
      continually press the Up and Down keys to move through focusable controls
      <em>and</em> to page over large blocks of text.
    </p>

    <p>
      The first time I saw a directional navigation UI was actually in the original
      WebTV browser, later acquired by Microsoft and rebranded as MSN TV. I was
      inspired by that UI to push for inclusion of directional navigation support in
      Windows Presenation Foundation (&quot;Avalon&quot;), and was happy to hear
      that that work eventually saw the light of day in the .NET 3.0 release. (I
      haven't played with the final result myself, but my understanding is that you
      can turn it on or off for a page via its DirectionalNavigation property. I'm
      not sure if that feature made it into Silverlight.)
    </p>

    <p>
      Directional navigation works so well on mobile devices, I'm hoping it will get
      built into a browser someday. To avoid conflict with the existing semantics of
      arrow keys, the final UI could optionally support a keyboard modifier like
      Ctrl. (So that, e.g., Ctrl+Left means move the focus to the
      &quot;nearest&quot; control to the left). Microsoft has already filed for a
      patent on the very elegant heuristics in the WPF DirectionalNavigation
      feature, so it would make a natural addition to a future version of Internet
      Explorer. I'd love to see a similar approach adopted by Firefox, or at least
      developed as a Firefox add-on.
    </p>
2008-01:
  2008-01-10 Zune a fine music subscription device.html: >
    ---

    title: "Zune: a fine music subscription device"

    date: 2008-01-10

    slug: zune-a-fine-mus

    originalUrl: https://miksovsky.blogs.com/flowstate/2008/01/zune-a-fine-mus.html

    ---


    <p>
      Last month I received a Microsoft Zune 80 as a gift. (Thanks, Johnny!) Having
      used the device for several weeks now, I wrote up some opinions of that
      experience to send to a friend on the Zune team, and have decided to share
      those thoughts here as well.
    </p>

    <p>
      My experience with Zune actually goes back a few months, to when I first
      subscribed to the Zune music service without actually owning a Zune device.
      I'm partial to having a <strong>music subscription</strong> rather than
      &quot;owning&quot; tracks. This is due to personal past experiences wrestling
      with DRM, and the sense of freedom I find in paying a flat fee for unlimited
      music. For $15/month I can listen to whatever I want within the reasonably
      spacious Zune Marketplace. In practice I could use the same amount to buy a
      big pile of audio tracks from iTunes, but for me a subscription enables a
      freer sense of experimentation. Case in point: a relative who visited over the
      holidays wanted to share music by an obscure Chilean musician. It felt great
      to listen to several esoteric albums through the subscription, and there's
      simply no way I would have felt good forking over money on the spot to listen
      to something I might never listen to again.
    </p>

    <p>
      Nevertheless, owning a Zune in an iPod world feels akin to belonging to an
      oppressed religious minority. Discussions about the Zune with fellow Zune
      owners must be conducted in secret, lest the conversation be overheard by the
      dogmatic iPod-wielding masses. This is too bad, since I found the
      second-generation Zune client software and the Zune device itself to work
      quite well in practice.
    </p>

    <p>
      <img src="/images/flowstate/zune_player.png" />
    </p>

    <p>
      The Zune client on Windows generally looks attractive. The client UI is
      designed carefully enough to reward a close look:
    </p>

    <ul>
      <li>
        I found it trivial to find new music, download it, and sync it to the Zune.
        YMMV.
      </li>
      <li>
        The original Zune client felt like a warmed-over skin for Windows Media
        Player, while the new one feels distinct enough to have its own style. The
        swirly background fractal may not be to your taste, but at least it's making
        a statement. I like it.
      </li>
      <li>
        A very subtle visual orange/pink gradient animates in the background at the
        bottom of the window when music is playing. I didn't notice this until I
        tried to take screenshots for the image above and compared them. It's
        similar to, but much more subdued than, the background effect in Windows
        Media Center. I assume the effect is there to confer a (slight) sense of
        movement.
      </li>
      <li>
        The UI makes extensive use of elements that come alive or reveal more detail
        on hover, such as scroll bars, the volume label, the device/disc/playlist
        icons in the lower left.
      </li>
      <li>
        The five-star rating system from Media Player always seemed to be more
        detail than I cared to supply. The Zune client replaces this with three
        simple states: neutral, I Like It, or I Don't Like It.
      </li>
      <li>
        The client makes good use of web-style navigation, a style I've referred to
        as a
        <a href="http://miksovsky.blogs.com/flowstate/2005/10/bbop_the_ubiqui.html"
          >BBOP</a
        >
        UI (Buttons, Back, One task, Page-based). My only complaint is that the
        little back arrow in the upper left disappears in the Settings area, which
        is treated like a giant modal dialog. I think that's a mistake—if you're
        going to offer web-style UI with a Back button, you really <em>have</em> to
        offer the Back button on every page, or you're really going to confuse the
        user. I can sympathize with the designers' dilemma, though. It's hard for
        client software designers to accept the fact that a user might want to walk
        away a page in which data has been entered—without making an explicit
        command to save their changes or cancel the operation. People do this every
        day on the web without issue. The Settings area should offer a Back button,
        and if the user happens to click it and loses it, so be it. That's how
        virtually all web pages already work.
      </li>
      <li>
        I was happy to discover that I could sync recorded TV shows from my Windows
        Media Center to the Zune. This worked well overall, even if video files did
        have to go through a slow conversion process. One annoyance was that the
        Videos view on the Zune client only shows the episode title, not the show
        title, air time, or episode description. This makes it hard to find the show
        you want to sync. I assume that essentially no time has been spent designing
        Zune and Media Center to coexist happily, and that minor issues like this
        will get resolved as Media Center integration improves in the future.
      </li>
    </ul>

    <p>I'm no hardware guru, but the Zune device itself seems well designed.</p>

    <p>
      <img src="/images/flowstate/Zune%20Device.png" />
    </p>

    <ul>
      <li>The out-of-box experience was reasonable.&nbsp;</li>

      <li>The Zune 80 device itself is attractive and lightweight.</li>

      <li>
        The headphones seem better than most. My only complaint is that, like most
        headphones, you can't tell the Left and Right phones apart without looking
        closely at them to find a tiny &quot;L&quot; or &quot;R&quot;. It would be
        great if one could feel which one was which through some means (a raised
        letter, dots, whatever). Interestingly, the Zune cable already does
        something similar: there's a raised bump on one side of the connector so you
        can tell which of the otherwise identical flat surfaces on the connector
        needs to be facing up as you plug it in.&nbsp;
      </li>

      <li>
        Just once I wish I could buy a device with an expensive screen that came
        with its own cheap plastic stick-on screen protector in the box, instead of
        having to hunt for an aftermarket screen protector myself.
      </li>
    </ul>

    <p>The software on the Zune device also looks and feel pretty good.</p>

    <ul>
      <li>
        The touchpad is an elegant way to scroll up and down through lists—while
        allowing you to navigate laterally across lists to the left or right.
      </li>

      <li>The UI uses animated transitions to good effect.</li>

      <li>
        I wish the Zune device UI weren't <em>quite</em> so minimalist. It feels
        like Microsoft is trying to out-minimize Apple by pursuing
        <a href="http://miksovsky.blogs.com/flowstate/2005/07/the_impenetrabl.html"
          >Apple's desire for a UI that's clean to the point of inscrutability</a
        >. Case in point: I couldn't find the UI for turning on Shuffle. Through
        trial and error I discovered that pressing the middle of the touchpad
        brought up a context menu of sorts which included the Shuffle command. If
        hardware buttons must be context sensitive to keep down the number of
        buttons, I always appreciate an on-screen indication of what they're going
        to do if I press them now. Windows Mobile does a decent job of this by
        always showing what the two soft buttons directly below the screen will do.
      </li>

      <li>
        I'm really curious about the decision to have the main menu scroll. In the
        above image, you can see that the designers have very carefully sized and
        positioned the menu items so that one item (&quot;podcasts&quot;) is clipped
        at the bottom of the screen. This is a great way to indicate that the user
        can scroll down to see more items without having to resort to a heavy-handed
        scroll bar. Very elegantly done, yes? So, how many additional menu items do
        you think you will gain access to if you scroll down? <em>One</em>. One! If
        you scroll down, you'll see one more item (&quot;settings&quot;). I'd be
        inclined to dismiss this as insanity, if it weren't for the careful
        attention to detail here. It would have been trivial to position and size
        the text slightly differently to get all the text to fit on the screen
        without scrolling. More to the point, it would have a been a
        <em>lot</em> easier to develop. I can only conclude that making the menu
        feel more dynamic (by forcing the user to scroll) felt better than offering
        a completely static menu.
      </li>

      <li>
        The Photos area was fine, but I was disappointed the device doesn't include
        a rotation sensor like the iPhone (or most modern digital cameras). This
        means that, when looking at photos, valuable screen real estate is often
        wasted, and pictures are shown at a size smaller than that of the screen.
      </li>
      <li>
        The Zune offers a modest personalization option: you can set the background
        of the main menu to a photo. Surprisingly, that was entirely sufficient for
        me to feel like I'd made the device mine. Many other devices do this, of
        course, but here the trick felt a particularly effective because the main
        menu itself is so minimal.
      </li>
    </ul>

    <p>
      In putting the device through its paces, I ran into more than a few issues:
    </p>

    <ul>
      <li>
        The Zune client incorrectly catalogued a few albums under the wrong artist.
        This appears to be a
        <a href="http://support.microsoft.com/?id=945319">bug</a> introduced during
        the upgrade from Zune 1.x to Zune 2.0.
      </li>

      <li>
        I was puzzled why the Zune client doesn't offer a context menu on every UI
        element a user might conceivably want to right-click on. There are no
        context menus on many online store data elements, for example. A UI that
        makes inconsistent use of context menus can be pretty frustrating, here all
        the more so because context menus are a nearly perfect way to offer a rich
        set of commands without cluttering the UI.
      </li>

      <li>
        I'd prefer a Now Playing area in the client that showed what was playing
        without a distracting album art visualization.
      </li>

      <li>
        The Zune Marketplace often appears to get confused as to which online tracks
        are already in my collection.
      </li>

      <li>
        The client frequently hiccups when I move between PCs. One of the major
        benefits of a music subscription is being able to move from one PC to
        another and not have to go through the absurd exercise of copying massive
        piles of audio bits everywhere I want to listen to music. The Zune client
        sometimes gets confused if I switch PCs and try to listen to music through
        the subscription. Signing out and back in always fixes the problem, but
        that's an irritating workaround. I'm hoping the client will eventually do a
        better job of automatically signing in whenever one switches to a different
        PC.
      </li>

      <li>
        I had trouble syncing over WiFi: nothing would happen, or else I would see a
        cryptic error message. I eventually discovered that the error message would
        go away if I got closer to the wireless router, so presumably the error
        message was just a (very bad) way of saying the WiFi signal wasn't strong
        enough.
      </li>

      <li>
        The aforementioned Settings area pegs its buttons to the lower right, which
        is a bad idea. On a large monitor, these controls all but disappear in a
        distant corner of the screen, far from the content they pertain to. This
        common UI flub occurs when
        <a href="http://miksovsky.blogs.com/flowstate/2005/07/if_a_ui_sketch_.html"
          >designers optimize too much for a specific window size</a
        >.
      </li>

      <li>
        While home videos on my local PC show up in the Zune library, videos on a
        networked PC don't show up at all, with no explanation. I still can't figure
        this out.
      </li>

      <li>
        The Zune would make for a decent podcast player—if it weren't for a
        crippling bug: the Zune sometimes (randomly?) forgets what portion of the
        podcast already I've listened to. For me, being able to Resume a paused
        podcast is the feature that distinguishes a music player from a podcast
        player. The unreliability of this feature on the Zune nearly wipes out it's
        value as a podcast player.
      </li>

      <li>
        Both the Podcast and Videos areas are missing a crucial feature: the ability
        to remove a podcast or TV show when you're done listening or watching to it.
        A list of podcasts isn't like a list of songs you want to listen to over and
        over. It's more like a To Do list of things you want to listen to once. It's
        tedious to have to go back to your PC just to remove a podcast you've
        listened to or a TV show you've watched.
      </li>
    </ul>

    <p>
      Overall, I'm pretty happy with my Zune 80. As a music player for an online
      music subscription service, the Zune works nearly flawlessly. It's less
      effective as a podcast or video player, but I'm looking forward to seeing
      those deficiencies addressed.
    </p>

    <p>
      I'm not sure what Microsoft can do about Zune's biggest handicap: its brand.
      People like buying Apple products because of what they feel the purchase says
      about them. At this point, buying a Zune either tells people that you're a
      Microsoft-loving sap, or else so uninformed as to be unaware that you've just
      purchased a second-place music player. Virtually all of this bad vibe is
      attributable to the unshakable feeling that Microsoft is trying too hard to be
      cool. I actually think Microsoft has made some bold and innovative moves in
      designing and marketing the Zune, but all that works has to fight against the
      grain of the intrinsically uncool brand of Microsoft itself. And for what? I
      can't think of a single way in which the Microsoft brand has helped the Zune
      in any way, and one can only wonder how much more successful the Zune would be
      if it had been marketed as a completely independent entity. To their credit,
      the Zune folks at Microsoft are painfully aware of this enormous marketing
      handicap, and I wish them the best of luck overcoming it.
    </p>

    <p>
      In the meantime, I'll be happily listening to all the music I can eat on my
      Zune.
    </p>
  2008-01-27 Looking forward to seeing Facebook apps drop their pointless mystery.html: >
    
    ---

    title: "Looking forward to seeing Facebook apps drop their pointless mystery"

    date: 2008-01-27

    slug: facebook-applic

    originalUrl: https://miksovsky.blogs.com/flowstate/2008/01/facebook-applic.html

    ---


    <p>Consider the following hypothetical computer experience:&nbsp;</p>

    <blockquote>
      <p>
        <em
          >One day a friend of yours sends you a one line email saying, &quot;Hey,
          check out FooBar!&quot; That's all the message says. &quot;Okay&quot;,
          you're wondering, &quot;What the heck is FooBar?&quot; You follow the link
          to the FooBar site, and all you can see is a EULA check box and a
          &quot;Sign Up&quot; button. You have no idea what FooBar does, so you're
          reluctant to entrust any information to this site. Before leaving, you
          notice a tiny link that says, &quot;Learn more about FooBar&quot;. You
          click it, and are presented with the FooBar logo and a short paragraph
          that says that FooBar is pretty cool. You're still confused about what it
          does because you can't actually get inside and see it for yourself.
          Finally, overcome with curiosity about why your friend would recommend the
          site, you give in and click the Sign Up button.</em
        >&nbsp;
      </p>

      <p>
        <em
          >Once inside the site, you realize the site is stupid, and wish you'd
          never signed up. You later discover that all your friends have just
          received a one line email from you saying &quot;Hey, check out
          FooBar!&quot;</em
        >
      </p>
    </blockquote>

    <p>
      This, in a nutshell, seems to be the experience of trying the typical
      <a href="http://www.facebook.com">Facebook</a> app. Granted, in Facebook, the
      above experience would generally take place entirely within the world of
      Facebook (with its own messaging system, etc.), but I think the story captures
      the basic pointless mystery of it all.
    </p>

    <p>
      I've been watching with interest how Facebook's application model will pan
      out, particularly the user experience of engaging with an application:
      discovering it, learning about it, adding it to one's profile, and using it. A
      while back I noted how many companies were busily removing
      <a href="http://miksovsky.blogs.com/flowstate/2007/05/hurdles_in_the_.html"
        >hurdles at a site's entrance</a
      >
      so people could experience a product's value (or at least a taste of the
      product's value) before committing to the product. Facebook, in contrast,
      seems to be confidently bucking this trend with the apps that live on top of
      its platform.
    </p>

    <p>
      On the one hand, Facebook users can quickly add a new app to their profile
      because they don't have to reenter personal information for each app. However,
      in my opinion, this advantage is overwhelmed by the
      <em>de facto</em> requirement that a user add a Facebook app to their profile
      before they can derive any meaningful value from it—or even understand what it
      does.
    </p>

    <p>
      The first point of contact you may have with an app may be when it tries to
      catch your attention in your feed:
    </p>

    <p>
      <img
        src="/images/flowstate/Facebook%20News%20Feed%20-%20Friend%20Added%20Application.png"
      />
    </p>

    <p>
      Many apps are deliberately coy about what they do before you install them.
      Many (or sometimes all) of the links in the feed entry will require that you
      first add the app to your profile:
    </p>

    <p>
      <img src="/images/flowstate/Facebook%20Add%20Super%20Wall_thumb.png" />
    </p>

    <p>
      If the anecdotal accounts of my friends are anything to go by, at this point
      most people just go ahead and click the big Add button. A curious user can
      read the laconic and non-descriptive Developer's Description. An especially
      cautious user can click the tiny &quot;More information about
      &lt;application&gt;&quot; link to view an About page:
    </p>

    <p>
      <img src="/images/flowstate/Facebook%20Super%20Wall%20(Full)_thumb.png" />
    </p>

    <p>
      If you do add the application, unless you're careful to uncheck &quot;Publish
      stories in my News Feed and Mini-Feed&quot;, you'll end up telling all your
      friends that you've just added the app to your profile (in the manner of the
      original news feed entry shown above). The app has enlisted your unwitting
      help in perpetuating its pointless mystery.
    </p>

    <p>
      That mystery would, in fact, seem to be the basis for the viral distribution
      model of many Facebook apps. I have trouble with this approach, being founded
      on a disregard for a user's intelligence and precious time.This model relies
      entirely on mystery to entice you add the application—and then banks on the
      fact that, once you add an application to your profile, you'll just leave it
      there rather than remove it. This is fundamentally deceptive.
    </p>

    <p>
      (The deception is compounded in cases like the one above, in which the app
      developer has deliberately incorporated a <em>huge </em>amount of white space
      into their description. Below the app's description, Facebook displays
      commentary from friends and other users of the app about the app itself. The
      obvious purpose of incorporating lots of white space into the description is
      to push all the commentary far below the fold, the better to leave the app's
      potential users uninformed.)
    </p>

    <p>
      That a Facebook app would hide information about itself suggests the app
      offers no persistent, real value. If it were actually valuable, the app would
      employ all the means at the disposal of a normal web site to balance the
      amount of value they provide to user with the degree of commitment they
      require from the user. For example, a normal site might let a curious
      potential customer: start a process but not finish it; read content but not
      write content; do something a fixed number of times; use the site for a trial
      period; perform certain basic operations but not other, more interesting ones;
      etc. Even the most brain-dead web site at least presents information about
      itself <em>first</em>, before making you sign up for the site. The first
      generation of Facebook apps generally forego all these techniques in favor of
      an all-or-nothing requirement that you add the app to your profile.
    </p>

    <p>
      Remove a Facebook app you don't like is not hard, requiring a simple click on
      the little &quot;X&quot; in the app's profile box. Still, it's a tiny bit of
      work, and the work adds up with every app you try. I have to believe that most
      people will eventually tire of removing applications, and therefore tire of
      adding them. That in turn means the Facebook world is biased in favor of the
      first set of Facebook apps a user comes into contact with (i.e., all the apps
      used by their initial Facebook friends), and impairs the ability of later apps
      to succeed.
    </p>

    <p>
      One could argue that it's in the interests of Facebook and an app's developer
      to force a user to agree to an app's terms of use before they can use it. And
      yet somehow the rest of the Internet doesn't have this problem. In the normal
      web, users implicitly agree to a &quot;browse wrap&quot; agreement whenever
      they visit the site, conferring a degree of legal protection to the site.
      Presumably this same level of protection extends to browsing Facebook apps, so
      it's unclear why Facebook would be more concerned about this than sites on the
      open web.
    </p>

    <p>
      I also find it hard to stomach the presumption that, when you add an app on
      Facebook, by default the platform and app presume to advertise that the app is
      now part of your identity. That's absurd.
      <em>You haven't even seen what the app does.</em> What else in the world works
      this way? When you pick up a book in a bookstore to <em>consider</em> buying
      it, are you really prepared to declare to everyone you know that you've picked
      up the book? The news feed entries about adding applications seem like nothing
      more than spam. They do, however, also also serve Facebook's ulterior goal of
      giving every user the illusion of social activity, regardless of how many
      friends they have or how active those friends are.
    </p>

    <p>
      All the behavior described here appears to stem from a combination of
      deliberate platform limitations, unintentional platform limitations,
      <em>de facto</em> conventions that arose around the plaform's first apps, and
      plain bad design. A newer generation of apps do let you see a tiny bit of
      their functionality before you the add the application to your profile, but
      what you can see is generally still a very limited subset of what the app
      does.
    </p>

    <p>
      Regardless of their intent, it's fascinating to see Facebook facilitate such a
      closed app adoption model—and still create a successful and vibrant
      application platform. Clearly there are a huge number of people who don't mind
      (yet) adding unknown applications to their profile, nor do they mind (yet)
      advertising that fact to the world. What's odd is that those same users don't
      tolerate the same experience on every other web site. I'm hopeful those users
      will eventually turn away from Facebook's unnecessarily mysterious apps, and
      eventually force those apps to open their front doors as wide as the rest of
      the web.
    </p>
2008-04:
  2008-04-02 Cozi calendar UI overhaul.html: >
    ---

    title: "Cozi calendar UI overhaul"

    date: 2008-04-02

    slug: fit-and-finish

    originalUrl: https://miksovsky.blogs.com/flowstate/2008/04/fit-and-finish.html

    ---


    <p>
      It's been way too long since I was last able to post here, mostly because
      having three small children equates to having zero personal time. Still, work
      has been productive. Today Cozi posted an update to the web version of our
      <a href="http://www.cozi.com/products/familycalendar.aspx">family calendar</a
      >. Our web calendar has long lagged behind the PC version, but we've been
      working hard to correct that, and today's release represents a big step
      towards that goal.
    </p>

    <p>Before today, the calendar was a bare-bones UI that looked like this:</p>

    <p>
      <img src="/images/flowstate/Calendar%20-%20Old_thumb.png" />
    </p>

    <p>The new calendar looks like this:</p>

    <p>
      <img src="/images/flowstate/Calendar%20-%20New_thumb.png" />
    </p>

    <p>
      We still have a long list of improvements in the works for the calendar, but
      this latest public release already includes a range of large feature
      enhancements and small fit-and-finish details that collectively make the new
      calendar, IMHO, quite polished for an AJAX UI:
    </p>

    <ul>
      <li>
        Asynchronous loading of appointment data. We used to reload the entire page
        whenever we needed to display new calendar data (e.g., when adding an
        appointment). Now we just refresh the days we need to.&nbsp;
      </li>

      <li>
        Infinite scrolling. The old implementation would only let you see one week's
        worth of appointments at a time. Movement between weeks was generally
        managed with &quot;Previous Week&quot; and &quot;Next Week&quot; links. The
        new UI uses infinite scrolling, so the user can move as far into the future
        (or past) as they need to with just the scroll bar. This work dovetails with
        the aforementioned async loading of data.
      </li>

      <li>
        Complete typography overhaul. Improved margins and leading make it easier to
        visually parse the information into three vertical columns and a large
        horizontal row for each date. This included details like right-aligning the
        color-coded family member dots so that they are visually grouped with the
        appointment subject.
      </li>

      <li>
        We took extreme pains to line up the start times and end times by the colons
        to improve legibility. This was somewhat at odds with our desire to follow
        proper typographic convention and separate times with an
        <a href="http://en.wikipedia.org/wiki/Endash#En_dash">endash</a> instead of
        a hyphen. Using an endash with vertically-aligned colons produced a
        situation in which a bit of extra white space would appear before end time
        that had a single hours digit. That is, &quot;–<span face="Courier New"
          >&nbsp; 3:00</span
        >&quot; would have more interior space than
        <span face="Courier New">&quot;</span>–<span face="Courier New"> 12:00</span
        >&quot;. We finessed this by using an endash when the end time has a single
        digit hour, but a hyphen when the end time has a double digit hour:<br /><br />
        <img src="/images/flowstate/Cozi%20Calendar%20Timetable.png" />
        <br /><br />For all we know zillions of other people have done the same
        thing, but we think this bending of the rules lets you produce a clean and
        highly legible timetable with plain HTML.<br />
      </li>

      <li>
        Tuned the color of all text elements in the calendar data. Dates are shown
        in color, body text in gray. For contrast, the subjects of a non-routine
        appointment (something that doesn't happen weekly) are set in black to make
        them stand out—since those are the appointments a family needs to focus
        their attention on.
      </li>

      <li>
        Placed the day of the week over the date. Users of a family calendar are
        extremely interested in what's happening during the coming week, and much
        less so in what's happening months away. Placing the day of the week over
        the date reflects that priority.
      </li>

      <li>
        Tweaked the background color banding on alternate days to make it a bit more
        prominent. This is really hard to get right so that it's perceptible on all
        monitors, but not overpowering on monitors with excessive contrast.
      </li>

      <li>
        Revised the UI controls for selecting the family member whose calendar you
        want to look at. The old design had big tabs, which users immediately
        understand, but they occupied more space than was justified by their
        relatively infrequent use. We took the opportunity to more explicitly
        present the list of names as a legend for the color-coded dots.
      </li>

      <li>
        Added gradients to the colored bars at the top and bottom of the calendar.
        These are done as a series of one pixel-high DIVs so that we can easily swap
        out the gradient based on the current family member's color without needing
        to store a ton of images.
      </li>

      <li>Cleaned up element margins overall.</li>

      <li>
        Tightened borders around the natural language appointment entry area at the
        bottom.
      </li>

      <li>
        Shifted the little triangle that had been to the left of the text box so
        that now it's inside the box. That triangle is one of a pair of triangles
        used to visually imply a connection between the text box and the calendar:
        the triangle on the calendar indicates the day where new typed appointments
        will go (if you don't type a date). Moving the bottom triangle inside the
        box more clearly connects the two triangles: they're now directly
        horizontally lined up, and they can now both share the same black color.
        (Users will readily infer a connection between two elements on a page if
        they share a color.)
      </li>

      <li>
        Shortened the hint text inside the text box. Although being able to
        double-click a day to create an appointment is a useful shortcut, users can
        find it on their own without instruction.
      </li>

      <li>
        In that same area, replaced the &quot;What can I type?&quot; link (which was
        spec'ed as white, but had ended up as black due to a bug) with a smaller
        question mark icon.
      </li>

      <li>
        Cleaned up the &quot;Home&quot; button script in the upper left. We'd
        previously used <a href="http://www.mikeindustries.com/sifr">sIFR</a> for
        this and other instances of &quot;handwritten&quot; text in the product.
        It's a nice bit of technology, but in this case the text was static, so
        using Flash was complete overkill. Now it's a simple transparent PNG (or a
        <a href="http://blogs.cozi.com/tech/2008/03/transparent-png.html"
          >transparent PNG8 in IE 6.x</a
        >).
      </li>

      <li>
        Cleaned up the mini-calendar on left. The mini-calendar now shows a minimal
        set of information and controls in its normal state (when the mouse isn't
        over it). This keeps the UI clean. When the user moves the mouse over the
        mini-calendar, various navigation controls appear for navigation to the
        previous month, the next month, and today. In the rollover state, the
        mini-calendar also shows the dates at the end of the previous month and the
        dates at the beginning of the next month. This makes it quicker to navigate
        to dates just outside the current month. We've built this calendar by
        styling the
        <a href="http://docs.jquery.com/UI/Datepicker">jQuery UI date picker</a>,
        which has worked well in practice.
      </li>

      <li>
        Added advertising in the left pane. Hey, we have to pay for all this work
        somehow! We've been careful to keep advertising separate from the family's
        calendar content on the right.
      </li>
    </ul>

    <p>
      Overall, we're quite happy with the result. We have more improvements to the
      Cozi calendar in the works, and are eager for those to see the light of day
      too.
    </p>
  2008-04-13 Showing the complete range of choices in a grid.html: >
    
    ---

    title: "Showing the complete range of choices in a grid"

    date: 2008-04-13

    slug: using-a-grid-of

    originalUrl: https://miksovsky.blogs.com/flowstate/2008/04/using-a-grid-of.html

    ---


    <p>
      The previous post on Cozi’s updated family calendar reminded me to point out a
      small but interesting aspect of the Cozi calendar UI that’s worked out rather
      well. As it turns out, the UI in question is in the Settings area of the
      product—an area where interesting design opportunities are often overlooked in
      the haste to get that peripheral stuff out of the way so one can get back to
      designing core features.
    </p>

    <p>
      During Cozi's early family research, we met parents who liked to color-code
      calendar entries according to the person or people involved in the
      appointment. Accordingly, Cozi lets families color-code appointments in the
      calendar. (Color is used as a shorthand; it’s not the only way of seeing who
      an appointment is for, so color blind users need not worry.) Cozi picks a
      color for each family member by default, but since color is a highly emotional
      element, we wanted to offer a way to let family members choose their own
      color.&nbsp;
    </p>

    <p>We had the following constraints in mind for our color settings UI:&nbsp;</p>


    <ol>
      <li>
        The available colors should all be attractive and work well with the overall
        Cozi color palette.&nbsp;
      </li>

      <li>
        The UI should ensure each family member ends up with a unique color for each
        family member, otherwise the family won’t be able to tell whose appointments
        are whose when scanning the colors.
      </li>

      <li>
        The colors need to cover a sufficiently broad range that each family member
        can get a color they like.&nbsp;
      </li>

      <li>
        The palette from which colors are chosen shouldn’t contain colors that are
        too similar. If one family member chooses dark blue and another a slightly
        darker blue, they’ll never be able to tell them apart.&nbsp;
      </li>

      <li>
        It shouldn’t be hard for a family to collectively choose a set of colors
        that all work well together. This is a challenging design constraint: once
        you’ve got about 6 colors in a palette, your choices for each additional
        color are either going to start running close to your existing colors, or
        else create the potential for ugly combinations. Some applications like
        Microsoft PowerPoint have a sophisticated color model to help people create
        reasonably attractive combinations of colors. (Alas, they still can’t
        prevent the determined user from creating something hideous.) We didn’t have
        the capacity to develop such a model, and needed something simpler.&nbsp;
      </li>

      <li>
        As a consequence of the above point, the palette of choices should be as
        small as possible. The smaller the palette, the smaller the chance of a
        clashing disaster. Here Cozi’s targeted focus on families works in our
        favor, since we can optimize the UI for the demographics of a family. Our
        database schema allows a maximum of 10 people per household, but in practice
        our sweet spot is families with 2-4 children. A family with two parents and
        two kids gets 5 colors: 4 colors for the family members, plus an additional
        color to represent appointments for the whole family. We eventually settled
        on a palette with 16 colors. This is sufficient to satisfy the above
        constraints and still leave some breathing room. (In any given family, there
        are certain to be colors liked by none of the family’s members.)
      </li>

      <li>A family should be able to have some fun picking the colors.</li>
    </ol>

    <p>
      Our starting point for the design was fairly standard: we listed out the names
      of the family members, and next to each name put a dropdown color picker. You
      can see something similar in other applications that let users choose a set of
      colors from a large palette. Here's a clean example from Microsoft PowerPoint
      2007's &quot;Create New Theme Colors&quot; dialog, which lets users select
      twelve colors from a large palette that is revealed when a dropdown color
      picker is clicked:
    </p>

    <p>
      <img src="/images/flowstate/PowerPoint%20Theme%20Colors_thumb.png" />&nbsp;
    </p>

    <p>
      One wrinkle in using a design like this for our calendar settings UI was
      created by requirement #3 above: the need for unique color mappings. This is
      an instance of a cross-field validation rule: the validity of one field value
      may depend upon another. In a UI like the one above, it’s hard to come up with
      a good design to communicate cross-field validation rules without confusing or
      irritating the user. Suppose the colors must be unique, and the user wants to
      swap the colors in field A and field B. They try to change B’s value to the
      value in A, but the field complains that B's value duplicates A's value—and
      forces the user to fix field B before they can leave it. This is terrible!
      They’re forced to clear B (or assign some temporary value to B), go to A,
      change it, and come back and enter the desired value in B.&nbsp;
    </p>

    <p>
      One solution is to leave such cross-field validation rules until the user
      tries to commit the whole form. Alternately, you can deliver the feedback
      about the need for uniqueness modelessly. The problem with either solution is
      that the user ends up being surprised: just at the point they think they’re
      done, they have to go back and rethink their entries. You can try to let them
      know the uniqueness requirement up front via instructional text, but most
      users aren’t going to read it, so you’d probably just spend some screen real
      estate for nothing.&nbsp;
    </p>

    <p>
      Our strategy in such a dilemma is always to refer back to our family domain
      and see whether we can optimize for it. Here, we see that the above UI allows
      for an arbitrarily large palette, but we don’t need that: we only have 16
      choices for each color. And the typical user will only need to pick 3-5
      colors. Instead of displaying the palette in a dropdown, we display all the
      available choices in a row:&nbsp;
    </p>

    <p>
      <img src="/images/flowstate/Cozi%20Calendar%20Colors_thumb.png" />
    </p>

    <p>
      The immediate advantages of this approach is that the user can see all the
      color choices at a glance, and they can make a choice with a single click
      (instead of having to spend one click revealing the dropdown palette, and
      another to make a selection). But the true benefit of this approach is that
      <em>the user will infer the requirement for uniqueness</em> without it needing
      to be enforced. In usability tests, we see users intuitively grasp that they
      should pick a color from any given column no more than once. They can work
      that out on an intellectual level, of course, but the UI makes that easier to
      see. With that in mind, we were able to relax the enforcement of unique color
      selections—the user takes care of that on their own. This lets us deal handily
      with situations like the need to swap color choices. And, finally, people seem
      to enjoy using the UI to pick colors.
    </p>

    <p>
      This design approach could be applied in other situations. It's quite similar
      to what you find in online surveys. The design requirements here are slightly
      different, but the final result still shares the presentation of the complete
      range of choices:
    </p>

    <p>
      <img src="/images/flowstate/SurveyGizmo%20Template_thumb.png" />
      <br /><span>from <a href="http://www.surveygizmo.com/">SurveyGizmo</a></span>
    </p>

    <p>
      It's well understood that a dropdown control will generally be more compact
      than a set of radio buttons, but in situations where the same dropdown control
      is repeated across multiple rows, a grid of radio buttons can be efficient as
      well. Each column only needs to be labeled once, so the individual radio
      buttons don't need their own labels. (The color swatches in the Cozi design
      are effectively self-descriptive radio buttons that don't even need column
      labels.) And though the repeated controls take up considerable space, they
      afford the user the ability to quickly apprehend relationships between field
      values. In the Cozi color UI, the user can spot-check whether each color has
      been used only once. And in the survey UI, the user can quickly perceive the
      balance of their responses across the range of choices.
    </p>

    <p>
      If you have a similar settings UI in your own product, perhaps with dropdown
      controls, consider whether the set of choices is small enough that you can
      display the complete range in a grid.
    </p>
2008-05:
  2008-05-15 Looking for concrete research on impact of animated ads on user experience.html: >
    
    ---

    title: "Looking for concrete research on impact of animated ads on user experience"

    date: 2008-05-15

    slug: concrete-resear

    originalUrl: https://miksovsky.blogs.com/flowstate/2008/05/concrete-resear.html

    ---


    <p>
      I find myself faced with the question of whether to accept animated ads in an
      ad-based product. An animated ad likely detracts from the user's
      experience—everyone says they dislike them—but to what degree? I'm finding it
      difficult to find persuasive research quantifying that effect.
    </p>

    <p>
      It's relatively easy to find data on the side of the advertiser or the site
      showing the ad. An animated ad will likely be noticed by more people, and can
      have higher click-through rates, which is what an advertiser is looking for.
      Accordingly, a site willing to show an animated ad can charge a higher premium
      for such an ad over a static ad. Animated ads = more revenue. It's hard to
      argue with that—especially at an ad-funded startup.
    </p>

    <p>
      To put the potential revenue upside in perspective, I'm looking for concrete
      research on the impact of animated ads on the user experience. Here's the kind
      of research that would be most helpful:
    </p>


    <ul>
      <li>
        Hard data. An anecdotal personal claim that, &quot;I refuse to use a site
        that shows an animated ad&quot;, holds little weight. Same goes for
        claiming, &quot;Everyone hates animated ads... obviously!&quot; If everyone
        hates animated ads, then it should be easy to find research proving that
        point.
      </li>

      <li>
        Focused on the actual effect on site usage. The little research I can find
        seems focused on user opinions. (<a
          href="http://www.useit.com/alertbox/20041206.html"
          >Example</a
        >, from Jakob Nielsen's AlertBox) I don't want to know whether people like
        animated ads—I want to know how much they actually impair site usage, or
        diminish a site's brand, or drive people away.
      </li>

      <li>
        Recent. I can't use a study done way back in the halcyon days of 1997 when
        the web was fresh and new and people didn't think there should be ads in it
        anywhere.
      </li>

      <li>
        Expressed in money terms. It'd be helpful to find, for example, a case study
        comparing a site's gain in ad revenue from the introduction of animated ads
        with the monetary downsides (if there are any) of those same ads.
      </li>

      <li>
        Objective. A tiny study done by a user interface designer with a personal
        bias may not help. A large study done by a company that's taking the long
        view, and trying to balance revenue with customer satisfaction would be
        better. A peer-reviewed scholarly paper on the topic would be ideal.
      </li>
    </ul>


    <p>
      Any timely pointers here would be helpful in making this decision. Thanks.
    </p>

    <p>
      <em>Updated 6/22/08: A big thanks to Michael who </em><em>in the comments </em
      ><em
        >posted links to a pair of relevant papers. Those papers were very helpful
        to us in deciding whether to accept animated advertisements. We ultimately
        did decide to accept animated ads, but did put in place some guidelines that
        we hope will keep out the more egregious uses of that medium.</em
      >
    </p>
2008-06:
  2008-06-22 Transient controls a delicate balance between discoverability and visual clutter.html: >
    
    ---

    title: "Transient controls: a delicate balance between discoverability and visual clutter"

    date: 2008-06-22

    slug: transient-contr

    originalUrl: https://miksovsky.blogs.com/flowstate/2008/06/transient-contr.html

    ---


    <p>
      Last week Cozi posted an update to our
      <a href="http://www.cozi.com/products/familycalendar.aspx">family calendar</a>
      that included a small but significant usability fix to the UI for entering
      appointments. In addition to a traditional form-based UI for entering
      appointments, the bottom of the main calendar page offers a text box in which
      a user can type an appointment in English:
    </p>

    <p>
      <img src="/images/flowstate/Calendar_thumb.png" />
    </p>

    <p>
      In general this UI for entering appointments works well, but usability testing
      had indicated that a sizable population of users would hesitate when entering
      an appointment. They would type the text of the appointment, then move their
      mouse over the right end of the text box, apparently searching for a button
      they could click to save the appointment.
    </p>

    <p>
      These users were likely conditioned by web browsers, which generally have a Go
      button to the right of the address field. Advanced users generally don't click
      the Go button (and may take steps to hide it), but many users navigate with
      it. We had originally left off a Go button in the interests of reducing visual
      clutter, and expected people would be able to figure out they could just press
      the ENTER key to save the appointment.
    </p>

    <p>
      In testing, it became apparent that we were correct, but only to a point. Most
      users would, in fact, eventually try pressing the ENTER key. The issue is that
      it would take a second or two of uncertainty before they would figure it out.
      We didn't like the thought of producing any uncertainty or anxiety, especially
      in relation to the natural-language appointment feature. That's a star feature
      in our calendar, and we want to show off. (Yes, Google Calendar and others
      have a similar feature, but we think ours is better.)
    </p>

    <p>
      We were reluctant to add a permanent button to the page if we could avoid it.
      Instead, we opted to follow the lead of Internet Explorer and Firefox and use
      a <em>transient control</em>: a control that's only visible part of the time.
      Both IE and Firefox used to have their Go buttons visible all the time, but
      both changed the Go buttons to a transient control that is only visible when
      the user is actually typing a URL.
    </p>

    <p>
      Here's how it works in Cozi's case. When the user enters the page, the focus
      is in the appointment entry text box. The text box sports hint text to let the
      user know what the text box is for. (Significantly, the hint text does
      <em>not</em> disappear when the text box has the keyboard focus—since the text
      box has the focus by default, hiding the hint text on focus for this field
      would mean the hint text was invisible when it would have been most valuable.
      If the user clicks on the text box, we do hide the hint text, so the user
      doesn't waste any time trying to delete the hint text before typing their own
      text.)
    </p>

    <p>
      <img src="/images/flowstate/Entry%20Area%201_thumb_1.png" />
    </p>

    <p>
      When the user starts typing, the transient Enter button appears on the far
      right:
    </p>

    <p>
      <img src="/images/flowstate/Entry%20Area%202_thumb.png" />
    </p>

    <p>
      When the user moves the mouse (not shown below) over the Enter button, the
      Enter button exhibits its hover state:
    </p>

    <p>
      <img src="/images/flowstate/Entry%20Area%203_thumb.png" />
    </p>

    <p>
      The user presses the button or types the ENTER key, and the appointment data
      is sent to the server to be parsed. During this round-trip to the server, the
      text box and its associated change to a quasi-disabled state to suggest that:
      a) something is happening, and b) the user shouldn't type again until the text
      box has left this state.
    </p>

    <p>
      <img src="/images/flowstate/Entry%20Area%204_thumb.png" />
    </p>

    <p>
      When the updated calendar data returns from the server, the calendar view
      updates to show the new appointment. The appointment entry text box resets to
      its original state to let the user know they can type again:
    </p>

    <p>
      <img src="/images/flowstate/Entry%20Area%201_thumb_1.png" />
    </p>

    <p>
      So far, this transient Enter button seems to work well, but we will continue
      to watch that button closely in testing. We're cautious about employing this
      UI technique, because it's easy to accidentally sacrifice discoverability in
      the name of visual cleanliness. Here the transient control works well because
      it manages to appear just when a user is about to start looking for it. In
      other cases, a user might hold their mouse still while looking around the
      page, and if they didn't see the control they were expecting, they might jump
      to the reasonable conclusion that such a control did not exist.
    </p>
2008-10:
  "2008-10-05 The Shared Suffering Hypothesis, or setting things up the way everyone else does.html": >
    
    ---

    title: "The Shared Suffering Hypothesis, or setting things up the way everyone else does"

    date: 2008-10-05

    slug: the-shared-suff

    originalUrl: https://miksovsky.blogs.com/flowstate/2008/10/the-shared-suff.html

    ---


    <p>
      Tinkering endlessly with computer hardware and software can be fun... if you
      have the time. As for me, I eventually came to the paradoxical conclusion that
      the more I tuned a product to my specific needs, the less likely the product
      would actually work as intended—and the less likely I could find someone to
      help me when a problem did arise. Product manufacturers often tout the ability
      of their products to be configured to a user's idiosyncratic needs, but maybe
      users can most effectively minimize heartache this way:
    </p>

    <blockquote>
      <p>
        <em
          >The Shared Suffering Hypothesis: You're best off configuring a product so
          as to maximize the number of other people who can help identify and
          resolve problems with that configuration.</em
        >
      </p>
    </blockquote>

    <p>
      Here's an example: A number of years ago I set up a media PC, eschewing the
      small number of commercial media PCs then available to get a tricked-out gamer
      PC. I maxxed every spec—video card, hard drive, etc.—and for its day, this
      machine <em>rocked</em>. What didn't occur to me was that, with each component
      I picked, I was reducing the number of other people who had the same device I
      had. And upon receiving the box, I wiped it and installed an early beta of an
      obscure OS version. Fantastic! Now I had a blazingly fast PC, the likes of
      which were possessed by no one else on the planet!
    </p>

    <p>
      I was a user community of one. When sorting through the inevitable driver
      weirdness and other nightmares, I had no one to turn to for help, because no
      one else shared this configuration or anything like it. The OEM and its
      component manufacturers, of course, had no experience with that OS, nor had
      the OS manufacturer ever tested on any of that hardware. The nascent media PC
      user community couldn't help either. This left me solving every configuration
      issue on my own. I spent hours on exciting tasks like trying to see if the PC
      motherboard would cope better with the hard drive configured for RAID 0 or
      RAID 1, or maybe I should try RAID 5? Damn, and all I wanted to do was watch
      TV on this thing.
    </p>

    <p>
      Lesson learned, when I bought a new media PC a couple years later, I abandoned
      impressive computer specs in favor of amassing the largest number of people
      who could share my problems. If I ran into a problem, I wanted a hundred other
      people to have already hit it and collectively solved it. I purchased a basic
      media PC from a huge OEM—not because they made great media PCs, but because
      they sold a lot of them. I purchased the most vanilla configuration possible,
      more or less blindly accepting the OEM's self-serving default hardware
      recommendations. The more defaults I could accept, the more likely it was
      someone else would have something like the same box I did. When the box
      arrived, I tried hard to avoid changing anything from the default config, and
      in generally avoided installing funky apps on the box. In the end, the new PC
      wasn't a perfect media experience—but it worked, and I spent very little time
      keeping it that way.
    </p>

    <p>
      (And now the impending forced cutover to digital cable in the U.S. is going to
      kill me. It's forcing me to rebuild a perfectly good media PC setup, all so
      that our seldom-watched analog cable TV can now be a seldom-watched digital
      cable TV. Once again I'll be searching for the solution that involves the
      least weird configuration.)
    </p>

    <p>
      The problem here are the economics of configuration. You'd think you'd benefit
      by tailing a product to your needs, but I believe in most cases that benefit
      is overwhelmed by the benefits of <em>not</em> customizing. And the issue has
      implications for software designers: each time you add an option to your
      product, you might be making things worse for your users, not better. I'll
      take a cut at that question in the next post.
    </p>

    <p><em>Next time: The economics of configuration</em></p>
2009-02:
  2009-02-01 Hiatus.html: >
    ---

    title: "Hiatus"

    date: 2009-02-01

    slug: hiatus

    originalUrl: https://miksovsky.blogs.com/flowstate/2009/02/hiatus.html

    ---


    <p>
      At the beginning of January, I set myself a goal to see if I could make at
      least one post on flow|state a month. January&#39;s now over, with no post.
      I&#39;ve had a draft of the promised follow-up to the last post on the
      <a href="http://miksovsky.blogs.com/flowstate/2008/10/the-shared-suff.html"
        >Shared Suffering Hypothesis</a
      >&#0160;under construction for three months. (Thanks to Michael, Barry, Evan,
      &amp; co. for their comments, the most interesting dialogue I&#39;ve received
      on a post in a long while.) I still&#0160;can&#39;t find the time to finish
      off the darn post.
    </p>

    <div>
      <div>
        <br />
        <div>
          <div>
            It&#39;s sinking in that helming a startup through a stormy economy
            while adequately parenting three young children just doesn&#39;t leave
            enough personal time to do this blog justice. FeedBurner says I&#39;ve
            got several thousand subscribers, and I&#39;ve occasionally run into
            readers who offered me their encouragement (thanks, John F.!). I would
            prefer not to leave them wondering why there&#39;s no activity.
          </div>
          <br />
          <div>
            I need less stress, not more, right now, and think the safest thing to
            do is declare an indefinite blog hiatus. There are still countless UI
            topics on which I would like to write, and I hope at some point to find
            the time to get some down. At that point you—and I—can be pleasantly
            surprised. Until then, thanks for reading.
          </div>
          <br />
          <div>Best,</div>
          <div>Jan</div>
        </div>
      </div>
    </div>
2009-04:
  2009-04-19 Attending UIE's Web App Summit this week.html: >
    ---

    title: "Attending UIE's Web App Summit this week"

    date: 2009-04-19

    slug: attending-uies-web-app-summit-this-week

    originalUrl: https://miksovsky.blogs.com/flowstate/2009/04/attending-uies-web-app-summit-this-week.html

    ---


    <p>
      Just breaking the radio silence to say that this week I&#39;ll be down in
      Newport Beach, CA, attending UIE&#39;s
      <a href="http://www.uie.com/events/web_app_summit/2009/"
        >Web App Summit 2009</a
      >. If you&#39;ll be there, let me know via a comment or mail to jan at cozi
      dot com; it&#39;d be great to connect in person.
    </p>
2009-11:
  2009-11-09 Announcing QuickUI a fast and powerful way to create web UI controls.html: >
    
    ---

    title: "Announcing QuickUI: a fast and powerful way to create web UI controls"

    date: 2009-11-09

    slug: introducing-quickui-a-tool-for-creating-web-ui

    originalUrl: https://miksovsky.blogs.com/flowstate/2009/11/introducing-quickui-a-tool-for-creating-web-ui.html

    ---


    <p>
      Today I want to announce the project I&#39;ve been working on as a hobby for
      most of the past year: <a href="https://quickui.org">QuickUI</a>, a framework
      for creating web user interface controls. The work on QuickUI has taken the
      place of my normal blog writing, hence the long hiatus here on flow|state.
    </p>

    <p>
      <strong>Why create a web control framework?<br /></strong>
    </p>

    <p></p>

    <p>
      I couldn&#39;t find anything that met my needs. I was so completely frustrated
      by the dearth of good tools in the middle ground between image editors
      (PhotoShop), prototyping tools (I&#39;ve often used PowerPoint), HTML editors
      (e.g., DreamWeaver), and raw code using JavaScript UI frameworks and libraries
      (jQuery et al.). There are plenty of tools contending for this middle ground,
      but to me they seem to avoid working with the substance of the web—HTML, CSS,
      JavaScript—in favor of something that obscures those technologies (Cappucino,
      etc.) or does away with them altogether (Silverlight).
    </p>

    <p>
      I want to work in the real stuff of the web. The web is built with HTML, CSS,
      and JavaScript, so that&#39;s what I want to use. I just want to be more
      efficient doing so. The fact is, those technologies are riddled with
      idiosyncrasies, and I don&#39;t want to feel like I&#39;m solving the same
      problems over and over again. And it&#39;s not just me—the UI world wastes
      uncounted hours painfully (re)learning the various hacks to do something as
      simple as
      <a href="http://stackoverflow.com/questions/148251/css-centering-tricks"
        >centering something on the page</a
      >.
    </p>

    <p>
      For me, the worst problem with the web is that it lacks a native control
      framework. There&#39;s no way to easily bundle up a bunch of content, visual
      styling, and behavior into a reusable control. There are certainly JavaScript
      control frameworks (YUI, jQuery UI, etc.), but most seem to be either a very
      small library of common controls, or a set of utilities for writing controls
      on your own. Nothing seems to be scaling up to permit an <em>ecosystem </em>of
      controls. The Visual Basic 1.0 community had a more vibrant control ecosystem
      of VBX controls in 1991 than the web does nearly twenty years later.
    </p>

    <p>
      I&#39;m sure the HTML 5 team has worked long and hard to get to where they are
      today, but the last thing I need are new HTML tags with fixed semantics. What
      I want is to be able to write new tags and <em>define </em>their semantics.
      (<a href="http://msdn.microsoft.com/en-us/library/ms752059.aspx">XAML</a> is
      great, and would be incredible if it weren&#39;t proprietary.)
    </p>

    <p>
      A good framework should give me a way to package things up so that I can
      easily share those tags with other people—and they can share them with me. If
      we had a good control framework, someone could package up good solutions to
      common problems as live code. I wouldn&#39;t have to find the answer to my
      question on <a href="http://www.stackoverflow.com">StackOverflow</a> as little
      fragments of HTML, CSS or JavaScript embedded in text—the answer to my
      question would be a fully reusable piece of self-contained working code.
    </p>

    <p>
      <strong>A markup language for controls<br /></strong>
    </p>

    <p>
      The control framework I envisioned was built around a markup language that
      looked and felt like HTML, but defined controls (at any level of the UI)
      instead of only pages. The control would <em>define a new tag</em>, so it
      could be used inside of other controls just like a native HTML tag. As with
      HTML, the control markup would define document elements for the control&#39;s
      contents, a &lt;style&gt; tag for CSS defining the control&#39;s visual
      appearance, and a &lt;script&gt; tag for JavaScript defining the control&#39;s
      behavior. A control would be packaged up in a single file that could be added
      to a new UI project simply by copying the file into the project folder.
    </p>

    <p>
      This idea eventually took shape as QuickUI, and evolved into the release
      I&#39;m announcing today. For details and examples, including a full tutorial,
      please see the <a href="https://quickui.org">QuickUI</a> site. Here I&#39;ll
      simply mention that QuickUI currently comprises:
    </p>

    <ol>
      <li>The Quick markup language for defining new controls.</li>
      <li>
        A compiler for compiling Quick markup files into JavaScript and CSS files.
      </li>
      <li>
        A build tool for compiling a collection of Quick markup files and combining
        the generated output into a project-level .js and .css file.
      </li>
      <li>A JavaScript library used by QuickUI controls at run time.</li>
    </ol>

    <p></p>

    <p>
      The QuickUI compiler and build tool are themselves written in C#, and I use
      the tools on Windows machines and Macs (via
      <a href="http://www.mono-project.com">Mono</a>) alike. (For the time being,
      I&#39;ve posted instructions only for Windows use, but hope to document Mac
      use soon.)
    </p>

    <p>
      The generated JavaScript makes use of the jQuery library to build the user
      interface on demand. QuickUI works well with jQuery, but should be able to
      interoperate with other JavaScript frameworks.
    </p>

    <p>
      Adding a compile-time step to web UI design is, admittedly, a hassle—but only
      a minor one. A small amount of tinkering with a reasonable development
      environment makes it possible to automatically invoke the QuickUI build tool
      whenever a Quick markup file is updated. These days I prefer Aptana Studio,
      and have documented steps for integrating QuickUI into that environment on the
      QuickUI site. Other tools make similar integration possible. With that in
      place, working in Quick markup feels only a small step removed from working in
      raw .html and .css files, and the productivity gains of a modular control
      framework quickly outstrip the minor inconvenience of compilation.
    </p>

    <p></p>

    <p></p>

    <p>
      <strong>So far, so good<br /></strong>
    </p>

    <p>
      I now use QuickUI almost exclusively to quickly prototype functional UI
      designs for <a href="http://www.cozi.com">Cozi</a>. I occasionally take
      recourse to PhotoShop to create image assets for inclusion in specific QuickUI
      controls, but the vast majority of my design work is now authored in Quick
      markup. The tools are good enough for my everyday use that I&#39;d never go
      back to working without such a framework. And, as I slowly build up a library
      of reusable controls, I&#39;m spending less and less time fighting old
      problems, and more time moving forward.
    </p>

    <p>
      I consider the current state of QuickUI to now be minimally interesting to
      others, hence this announcement. Nothing’s set in stone, and any part of it
      could be made better.
    </p>

    <p>
      If you&#39;re interested, please check out
      <a href="https://quickui.org">QuickUI</a> for yourself. You can post questions
      or comments on the discussion board there. If you like this and want to make
      it better, I would welcome the help.
    </p>
2010-06:
  2010-06-21 Evolving Cozi's calendar UI controls.html: >
    ---

    title: "Evolving Cozi's calendar UI controls"

    date: 2010-06-21

    slug: evolving-cozis-calendar-ui-controls

    originalUrl: https://miksovsky.blogs.com/flowstate/2010/06/evolving-cozis-calendar-ui-controls.html

    ---


    <p>
      <em
        >[This post marks a tentative return to blogging. We’ll see how it
        goes…]</em
      >
    </p>

    <p>
      Spring and summer have turned out to be the busiest time of the year for
      design at Cozi. The driving force behind this annual cycle is the Back to
      School period: when parents prepare their household for their children’s
      return to school from summer vacation. American schools traditionally started
      in September after Labor Day, but various forces have moved the start of
      school earlier, such that roughly half the school districts now have resumed
      by the middle of August. As part of their Back to School preparations, parents
      often reconsider the way they will manage their calendar—and the family’s
      calendar—during the coming school year. This presents a good opportunity for
      Cozi, and so we are often focused on delivering new features and improvements
      by early August.
    </p>

    <p>
      This year we’re making significant changes to the layout of the calendar page
      to make more room for the family’s calendar data, so they can take in more
      calendar information at a glance. Towards that end, there are a number of
      changes in the works. One change we just released today is a consolidation of
      various calendar commands into a single toolbar at the top of the page:
    </p>

    <p>
      <img
        alt="Calendar"
        src="/images/flowstate/6a00d83451fb6769e20134849d507f970c-500wi.png"
      />
      <br />Before
    </p>

    <p>
      <img
        alt="Calendar with Toolbar"
        src="/images/flowstate/6a00d83451fb6769e20134849d5103970c-500wi.png"
      /><br />After
    </p>

    <p>
      Here we’ve merged three rows of user interface elements (the Week and Month
      buttons at the top, the appointment entry area at the bottom, and the row of
      buttons below that) into one. This buys us some vertical real estate, and lays
      groundwork for some future changes.
    </p>

    <p>
      A toolbar is a standard user interface design pattern, but applying this
      design here has still been interesting for several reasons. For one thing,
      it’s always interesting to me to see how UIs evolve over time.
    </p>


    <ol>
      <li>
        We didn’t start with the proposition that we should have multiple places for
        commands. We started with the row of colored dots at the top, and the
        appointment entry area below.
      </li>
      <li>
        Then we needed a place to put a Print command, and later a Send to Phone
        command. They didn&#39;t fit anywhere else, so we created a new row for
        them.
      </li>
      <li>
        We added several other forms of Send to Phone, which evolved into a Phone
        menu.
      </li>
      <li>
        When we transitioned from a Windows application to the web, we changed the
        UI model for calendar views, and moved the Week and Month buttons to the
        top.
      </li>
      <li>
        We added the ability to sync with Outlook and subscribe to Internet
        calendars, necessitating more buttons.
      </li>
      <li>
        We added some more buttons to the appointment entry area. To keep things
        clean, those buttons are
        <a href="http://miksovsky.blogs.com/flowstate/2008/06/transient-contr.html"
          >transient controls that only appear while typing</a
        >.
      </li>
    </ol>

    <p>
      Now we’re preparing to add some more features, which would have meant even
      more buttons. But by now the UI is reaching a tipping point where it begins to
      feel clunky, and so we’ve decided to simplify the UI by consolidating the
      controls into a toolbar.
    </p>

    <p>
      Many, many other UIs have passed through similar stages. In Stewart Brand’s
      book,
      <a
        href="http://www.amazon.com/gp/product/0140139966?ie=UTF8&amp;tag=httpmiksovskb-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0140139966"
        target="_blank"
        >How Buildings Learn</a
      >, he describes a similar evolution of a house’s porch into a proper room:
    </p>


    <blockquote>
      “Porches fill in by stages, not all at once you know…. The family puts screens
      on the porch one summer because of bugs. Then they see they could glass it in
      and make it part of the house. But it&#39;s cold, so they add a duct from the
      furnace and some insulation, and now they realize they&#39;re going to have to
      beef up the foundation and the roof. It happens that way because they can
      always visualize the next stage based on what&#39;s already there.”
    </blockquote>


    <p>
      We’ve got more changes for the toolbar coming in the next couple of months.
      (And hopefully no bugs.)
    </p>
2010-07:
  2010-07-12 Paternalistic design.html: >
    ---

    title: "Paternalistic design"

    date: 2010-07-12

    slug: paternalistic-design-1

    originalUrl: https://miksovsky.blogs.com/flowstate/2010/07/paternalistic-design-1.html

    ---


    <p>
      A recent Cozi usability study offered an interesting example of the
      paternalism latent in the task of designing something for someone else. In
      short, a designer is often required to make decisions which are directly
      counter to the requests of some of their users.
    </p>

    <p>
      The usability subject in this study was an avid user of Apple iCal. A
      particular iCal feature which they repeatedly praised was its ability to show
      color-coded appointments in Month view. In contrast, Cozi’s Month view eschews
      our own color-coding scheme (which we use in our Week view and our new Day
      view) and presents all appointments in monochrome.
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20134855272f1970c-pi.png"
        alt="Apple iCal Month View"
      />&#0160;&#0160;&#0160;
      <img
        src="/images/flowstate/6a00d83451fb6769e20133f22cac1d970b-pi.png"
        alt="Cozi Calendar Month View"
      />
      <br /><em>Apple iCal (left) and Cozi (right) views of the same calendar</em>
    </p>

    <p>
      The iCal user insisted that they required a Month view with color-coding. They
      found other Cozi features like liked, but they repeatedly dinged Cozi for the
      lack of color in Month view. At the end of the study, when asked if they had
      any general comments to offer on Cozi, they returned to this point. And then a
      curious thing happened. As they flipped between Apple iCal and Cozi to make
      their point, they stopped on the Cozi calendar. They paused, then slowly
      began:
    </p>

    <blockquote>
      <p>
        “Hmm… you know, now that I look at the two calendars side by side, there
        <em>is</em> something about the Cozi calendar. It’s cleaner…
      </p>
      <p>“Gosh, all that color is really kind of distracting.</p>
      <p>
        “I guess it’s easier to read the calendar without all that color. And
        because the one-time appointments are in bold, I can really see the stuff I
        need to pay attention to…
      </p>
      <p>
        “Okay, I’m going to take back everything I said. I like the Cozi calendar
        better. Maybe if I had been using Cozi’s calendar,
        <em>I wouldn’t have missed this usability study scheduled today.</em>”
      </p>
    </blockquote>

    <p>
      This was the clincher. The user had in fact been completely surprised at the
      beginning of the appointed study time we had scheduled with them, even though
      we could see they had the usability study appointment on their iCal calendar.
      They had completely missed it in the rainbow of color.
    </p>

    <p>
      Design requires a degree of paternalism. The word has an unfortunate nuance;
      adult users are not children, and not to be treated as such. But there is
      nevertheless something about listening and responding to user feedback that
      mimics the way a parent listens and responds to requests from their children.
      A child may ask for all kinds of things that the parent judges to be counter
      to the short and long term interests of the child, the parent, the family, or
      society. Due to cognitive or developmental limitations, the child may not be
      able to arrive at the same point of view, or at least not at that time.
    </p>

    <p>
      Adult users are constrained by different forces. They are extremely busy, and
      don’t have the time, skills, energy, or interest to pursue a particular point
      of feedback to its logical conclusion. They use a product, something about it
      differs from their expectations, a response pops into their head, and they
      voice it—sometimes strenuously.
    </p>

    <p>
      That feedback has to be taken seriously, but not slavishly. Many, many users
      have similarly demanded that Cozi’s Month view show color-coding. It’s a
      reasonable request, which of course we have considered closely. From the
      earliest days of work on our calendar, we have tried various approaches to
      introduce color coding into Month view. (Cozi has the the additional challenge
      of showing a single family appointment that involves multiple users, each with
      their own color.) To date, none of our design experiments with color-coding in
      Month view have satisfied us.
    </p>

    <p>
      Maybe someday we’ll crack the design problem, and delight that we can finally
      give these users what they’ve been asking for. In the meantime, the
      consequences of following through on that feedback would so compromise the
      legibility of the calendar that we think it would represent a net loss in
      utility. (Offering color-coding in Month view via an option is another story,
      but the short answer there is that such options compromise things in a
      different way.)
    </p>

    <p>
      An individual user doesn’t have anywhere near the time (or, likely, the
      ability) to perform these design explorations on their own, or even to find
      and read through arguments like this one here as to why we’ve done what we’ve
      done. In the end, we make a conscious, paternalistic decision not to give them
      the very thing they’re asking for. We trust in our own judgment, then look for
      research like this usability study to confirm that we’ve made the right call.
    </p>
  2010-07-19 Closure between UI states.html: >
    ---

    title: "Closure between UI states"

    date: 2010-07-19

    slug: closure-between-ui-states

    originalUrl: https://miksovsky.blogs.com/flowstate/2010/07/closure-between-ui-states.html

    ---


    <p>
      Like the panels in a comic, the sequence of pages in a user interface requires
      <em>closure</em> in the user’s mind to logically connect each step with the
      preceding step. At each step, the user is trying to mentally confirm that the
      place they’ve just arrived logically follows from the action they just took in
      the previous step. A designer can create a smooth experience by ensuring good
      closure; a disjoined interface can interfere with closure, producing
      substantial confusion.
    </p>

    <p>
      Scott McCloud describes the concept of closure in comics in his book,
      <a
        href="http://www.amazon.com/gp/product/006097625X?ie=UTF8&amp;tag=httpmiksovskb-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=006097625X"
        >Understanding Comics</a
      >, as “observing the parts, but perceiving the whole”. A comic reader
      subconsciously fills in the action that must be taking place
      <em>between</em> the comic’s panels in order to give sense to the story.
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e201348579f653970c-pi.png"
        alt="At Least Jerry Never Called"
      />
      <br /><em>from Understanding Comics</em>
    </p>

    <p>
      Users of a software product perform similar closure any time an interface
      transitions between states: the user clicks a button and a window appears;
      they click a link and their browser navigates to another page; they type
      something and a button becomes enabled. Like the comic reader, the user
      connects (at least subconsciously) what they’re looking at now with what they
      just did. The closure either helps confirm that they’re on the right track, or
      gives them pause to wonder whether things are amiss. Interfaces that
      facilitate closure produce a smooth user experience and a satisfying sense of
      control and accomplishment.
    </p>

    <p>
      Any time the interface interrupts the user with an unasked-for dialog, page,
      or similar state, the product runs the risk of irritating or confusing the
      user. Errors are often especially problematic in this regard. A user clicks a
      button that says, “Save”, and an error appears telling them that a particular
      field is required. The user must expend enormous mental effort to achieve
      closure between the thing they asked for, and the error they ended up with.
    </p>

    <p>
      Cozi recently completed an A/B test experimenting with the destination of a
      “Calendar” link on the Home page. Cozi’s calendar is oriented towards
      families, and allows a family to color-code appointments with the names of the
      family members who will attend. For this to work, the user has to first enter
      the names of their family members. Usability studies had shown that users who
      didn’t complete that task before entering the calendar overlooked that aspect
      of the product, so we were looking for ways to encourage users to perform that
      simple setup task.
    </p>

    <p>
      Users in the control condition who clicked the “Calendar” link went straight
      to their calendar, while users in the experimental condition went to a page
      that asked for their family member names and <em>then</em> took them to the
      calendar.
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20133f254ab2a970b-pi.png"
        alt="Home Page (Initial State)"
      />&#0160;&#0160;&#0160;<img
        src="/images/flowstate/6a00d83451fb6769e201348579f6b2970c-pi.png"
        alt="Calendar with Toolbar"
      />
      <br /><em
        >Control condition: clicking the Calendar link takes the user straight to
        the calendar</em
      >
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20133f254ab66970b-pi.png"
      />&#0160;&#0160;&#0160;
      <img src="/images/flowstate/6a00d83451fb6769e20133f254ab84970b-pi.png" />
      <br /><em
        >Experimental condition: clicking the Calendar link takes the user to a page
        to set up their calendar first</em
      >
    </p>

    <p>
      The experiment results indicates that the control condition performed better
      than the experimental condition in getting new users to adopt Cozi. This
      surprised us, because earlier experiments showed that completing this simple
      setup task gives the user a better calendar experience. However, it seems that
      forcing the users through a setup task they didn’t ask for had the
      counter-productive result of making them less likely to use the product.
    </p>

    <p>
      There are likely many factors at work here, but I expect at least one factor
      is that the flow violated the user’s expectations. In other words, the closure
      between the two states in the experiment was not as satisfying. When a user
      clicks a link that says, “Calendar”, they expect the very next thing they see
      to be a calendar. That’s an eminently reasonable expectation. When the
      experiment didn’t meet their expectations, they had reason to believe that the
      <em>next</em> link they clicked on wouldn’t deliver them to their desired
      destination either (perhaps they were now trapped in some wizard of indefinite
      length) and they gave up.
    </p>
2010-08:
  2010-08-09 It&rsquo;s easier to imagine hiding an ad than completely redesigning a UI.html: >
    
    ---

    title: "It&rsquo;s easier to imagine hiding an ad than completely redesigning a UI"

    date: 2010-08-09

    slug: its-easier-to-imagine-hiding-an-ad-than-completely-redesigning-a-ui

    originalUrl: https://miksovsky.blogs.com/flowstate/2010/08/its-easier-to-imagine-hiding-an-ad-than-completely-redesigning-a-ui.html

    ---


    <p>
      Over the past week, I’ve seen an uptick in feedback from Cozi’s users, some of
      it responding to a recent change we made in Cozi’s standard page template. It
      seems some users have perceived a significant loss of vertical screen real
      estate on the main family calendar page.&#0160;The odd thing is that the new
      layout has roughly the same vertical amount of calendar data as the old
      design:
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20133f2e3fe01970b-pi.png"
        alt="Calendar"
      />
      <br /><em>Old Cozi design</em>
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20133f2e3fe1d970b-pi.png"
        alt="Calendar (new 2.5 page template)"
      />
      <br /><em>New Cozi design</em>
    </p>

    <p>Two main changes are at work here:</p>

    <ol>
      <li>
        We
        <a
          href="http://miksovsky.blogs.com/flowstate/2010/06/evolving-cozis-calendar-ui-controls.html"
          >simplified the layout of our calendar UI controls</a
        >
        so that they take up less room. The new design consolidates three rows of
        calendar controls (one from the top, two from the bottom) into a single row
        at the top.
      </li>
      <li>
        We redesigned our standard page template. Among other things, we moved the
        navigation controls from a footer at the bottom to the left side. At the
        same time, we moved our standard display advertising unit from the left side
        to the bottom. Specifically, we upgraded the unit from an IAB 180x150
        Rectangle to a IAB 728x90 Leaderboard. The latter is worth more to
        advertisers, and hence commands higher revenue for Cozi.
      </li>
    </ol>

    <p>
      The new design should address some long-standing usability issues, while
      simultaneously increasing revenue — a win/win. So I was surprised when users
      contacted Cozi to complain that the new design showed significantly less
      vertical room for calendar data than the old one. There <em>is</em> a loss,
      it’s true: at 1024x768, the old design allows for 560px of vertical height for
      calendar data, whereas the new design only allows 553px. This is a loss of
      seven vertical pixels of data. (As it turns out, the new design could easily
      gain that space back if we get rid of the rounded corners in the visual
      design. We’re working on that.)
    </p>

    <p>
      I don’t think users begrudge the loss of seven pixels. I think the main issue
      is that the new design makes it really apparent that Cozi has to make a
      trade-off between the needs of its users and its advertisers. That trade-off
      is just a fact of life for an ad-driven business, and most people would prefer
      that Cozi to keep its product free for users. Virtually every user I’ve
      interviewed on this specific point has indicated that, in the abstract,
      they’re comfortable with this trade-off.
    </p>

    <p>
      Here, though, the user can readily see what the ad is costing them. It’s very
      easy for them to imagine that, if only that Leaderboard at the bottom were
      hidden, they’d be able to see more data. Compare this with the old design:
      it’s hard for someone to imagine what they would gain if the small Rectangle
      ad on the left were hidden. It’s harder still for a user to imagine what would
      need to happen at the bottom of the old design, with its multiple stacked
      toolbars, to allow them to see more data. The lesson here is that
      <em
        >it’s easier to imagine turning off an ad than to envision a complete
        redesign of the user interface</em
      >. (That’s, um, actually a good thing for me, or else I wouldn’t have a job
      designing user interfaces.)
    </p>

    <p>
      We’re in the midst of making further page layout and calendar UI improvements,
      so I’m looking forward to being able to gives users a design that they can see
      is unequivocally better than the old one. In the meantime, we’ve learned a
      valuable lesson in the user perception of advertisements in screen layouts.
    </p>
  2010-08-16 Lessons learned switching our web UI from stock fonts to a proprietary font.html: >
    
    ---

    title: "Lessons learned switching our web UI from stock fonts to a proprietary font"

    date: 2010-08-16

    slug: lessons-switching-our-web-ui-from-stock-fonts-to-a-proprietary-font

    originalUrl: https://miksovsky.blogs.com/flowstate/2010/08/lessons-switching-our-web-ui-from-stock-fonts-to-a-proprietary-font.html

    ---


    <p>
      Four years ago I wrote about how
      <a href="http://miksovsky.blogs.com/flowstate/2006/05/what_the_font.html"
        >impoverished</a
      >
      most UIs were when it came to rendering live text in fonts other than the
      small set of stock fonts generally available on all operating systems. This
      situation has thankfully changed in the interim, tipping to the point where
      Cozi was able to incorporate a proprietary font in a recent redesign of our
      web client. We’re now using
      <a href="http://www.fonts.com/findfonts/SearchPage.htm?kid=Avenir">Avenir</a>,
      a sans serif font in the Futura vein by reknowned designer Adrian Frutiger.
      <br />&#0160;
    </p>

    <p>
      <img src="/images/flowstate/6a00d83451fb6769e20133f3198294970b-pi.png" />
      <br /><em><span>Sample of Avenir 45 Book</span></em>
    </p>

    <p>
      <br />While many other sites cover the technical aspects of using fonts in web
      pages, I thought it was worth sharing some lessons I learned from a designer’s
      perspective. Using custom fonts is something that actually works now, but
      there are still hassles today:
    </p>

    <ol>
      <li>
        <strong
          >There are currently two distinct routes to using custom fonts:</strong
        >
        1) buy them and host them yourself, or 2) use a font hosting service like
        <a href="http://www.typekit.com/">Typekit</a> or the (free!)
        <a href="https://fonts.google.com/">Google Font Directory</a>. Using a font
        hosting option seems much simpler, but in my mind has some significant
        limitations. <br />
        <br />Depending on which service you use, your choices may be quite limited.
        This issue will certainly fade away quickly (a year?), but at the moment,
        you still don’t have access to everything you’d want. If you already have a
        brand identity you care about and worked to refine, it may be impractical to
        chuck it all and go with some new font just because it’s easy to reference
        on a web page. In our case, we selected a font that we felt was consistent
        with our brand values and good for both body text and data (like a family
        calendar). The font we picked wasn’t available on a hosted service at the
        time, and we were willing to go to some lengths to get it. <br />
        <br />With the service route, actually getting the supplied font code to
        work can be a hassle. Most suppliers of web componentry seems to feel that
        it’s fine to dictate where you <em>need</em> to stick their &lt;script&gt;
        tag. These solutions always work great in some toy test app, and completely
        break when added to a large complex web application. Google actually get
        this right: you can host a font with a completely plain &lt;link&gt; tag.
        Unfortunately, Google currently offers a tiny number of fonts, none of which
        were appropriate for our use. <br />
        <br />Based on these factors, we elected to just license the fonts and host
        the files ourselves. This required a bit of pain, on several fonts…
        <br />&#0160;
      </li>
      <li>
        <strong
          >The major font foundries are still just waking up to the potential of
          hosting.</strong
        >
        The Avenir typeface we wanted to use is owned by Monotype Imaging, which
        earlier this year hadn’t yet released their own
        <a href="http://webfonts.fonts.com/">Fonts.com web fonts</a> hosting
        service. This meant we’d have to host the files ourselves, which required
        signing a licensing contract. This is an old-school purchasing process: we
        had to, like, <em>sign documents</em> and fax them to Monotype. We also had
        to (or, depending on your prespective, got the chance to) negotiate a price.
        This consumed quite a bit of time. <br />
        <br />Moreover, Monotype’s lawyers were still grappling with some legal
        aspects of hosting fonts. They’re used to an older world where fonts are
        licensed to a customer for use exclusively within that company’s internal
        design team for producing printed material, or creating web imagery in which
        the text is baked into the image. In either case, there’s no risk to the
        foundry that the people who <em>read</em> the printed material or imagery
        are going to be able to use the fonts themselves. Hence, heretofore there
        hasn’t been such a pressing need to clarify what can be done with the font
        files. <br />
        <br />Now that people want to serve up web pages using proprietary fonts,
        that situation has changed. The lawyers are focused on protecting their
        intellectual property (the fonts they own), and are nervous about
        controlling where those fonts get used. If site A has paid to use a font on
        site A, what’s to stop the folks who make site B from digging through site
        A’s CSS, finding the reference to the font, and using that reference on site
        B? <br />
        <br />In our case, we asked Monotype if we could serve the licensed fonts in
        the emergent <a href="http://en.wikipedia.org/wiki/WOFF">WOFF</a> format,
        and had to wait while their lawyers finished an investigation of WOFF and
        came up with legal language in the contract to cover it. <br />&#0160;
      </li>
      <li>
        <strong
          >Hosting a font can entail legally-mandated server configuration.</strong
        >
        Monotype’s licensing contract stipulated measures we had to take to protect
        their intellectual property. Internet Explorer’s proprietary EOT font file
        format includes built-in DRM, but the WOFF format does not. We were forced
        to set up a form of Cross-Origin Resource Sharing to prevent other sites
        from linking directly to Cozi’s copies of the font we licensed. This didn’t
        take too long, but it was still annoying to deal with. <br />&#0160;
      </li>
    </ol>

    <p>
      These hassles will likely disappear in a year or so. When our licensing
      contract runs out, we’ll likely switch to a hosted solution to avoid most of
      the trouble above. Even when the above issues are addressed, however, moving
      from a stock web font to a proprietary font will entail some issues you should
      keep in mind:
    </p>

    <ol>
      <li>
        <strong
          >Fonts that look great in simple samples may look unacceptably bad in real
          use. </strong
        >A font that looks great in print may look awful online unless it’s been
        specifically <em>hinted</em> for on-screen use. That is, the font foundry
        has to spend an insane amount of time optimizing the font for a range of
        specific point sizes at which the font may be used to render text. The
        online font stores all give you a way to see samples of the text, but (for
        the time being) in many cases those samples are rendered on a server, and
        may use better rendering than what your users will see in practice.
        Similarly, trying out a font in Photoshop may produce great-looking results
        that cannot be reproduced in a browser. The only way to ensure a font is
        going to look great on a web page is to actually use it on a web page. That
        wouldn’t be such a problem if… <br />&#0160;
      </li>
      <li>
        <strong
          >Online font stores aren’t designed for real experimentation. </strong
        >You generally have to buy the font before you can really try it out. While
        this may be a small cost ($25, say), that only covers one weight of the
        font. We ended up having to test about 6 weights of Avenir to settle on the
        two we wanted to use. This experimentation can get expensive. <br />
        <br />I’ve seen a lot of fonts that with insufficient hinting, so I was
        particularly careful to evaluate the fonts we were considering at a wide
        range of point sizes. I was particularly happy to see that, just in time for
        our use, Monotype made available a full set of Avenir weights with improved
        hinting. Despite this attention on hinting, however, we still got burned a
        bit. It turns out that a specific letter (the lowercase “e”) looks bad a
        specific point size (11pt) in a specific weight (Avenir 85 Heavy) we just
        happen to use in some of our menus. This was easy to work around (by bumping
        the text size up a point), but just goes to show that you can’t be too
        careful. <br />&#0160;
      </li>
      <li>
        <strong>Type metrics change between fonts.</strong> The same text rendered
        in the new font may be slightly bigger or smaller than the same text in the
        old font. In our case, most of our web pages had been constructed well, and
        were resilient to this change. I don’t recall any places where we need to
        make a substantial change to the UI in response to changing the font. YMMV.
        <br />&#0160;
      </li>
      <li>
        <strong>The feel of the text may change. </strong>This was something of a
        surprise to me. While Arial (our old font) has roughly similar text metrics
        to Avenir (our new font), the overall feel of Avenir is lighter. This is due
        to a thinner stem weight; i.e., the lines that make up the characters are
        slightly thinner in Avenir. When we initially deployed the Avenir font,
        users responded that the text was too light. As it turns out, we’d
        previously been using a medium-dark gray (#474040) for body text in Arial —
        precisely to lighten Arial up a bit. So we had to tweak our colors to adjust
        to the new, lighter font. <br />&#0160;
      </li>
      <li>
        <strong
          >Users of older versions of Firefox, Safari, and Chrome won’t see the
          proprietary font.</strong
        >
        (Internet Explorer has supported them for years.) This lag can complicate
        the tuning of your site for the specific text metrics of your new font:
        optimizing for the new font can make things worse for users seeing the old
        font, and it’s a pain to create slightly different style sheets for both
        conditions. <br />&#0160;
      </li>
    </ol>

    <p>
      So switching from a stock font to a proprietary font isn’t quite as easy or
      perfect as it should be. I’m still ecstatic things have improved to the point
      where sites can start making real use of real fonts to achieve new levels of
      design expression. In five years, we’ll all look back on screen shots of sites
      from this age and laugh at them. Today’s web sites will look <em>old</em> —
      and part of what will make them look old will be their use of stock fonts.
    </p>
  2010-08-23 iOS 4 Home button double-click Rare case of retiring a behavior preference.html: >
    
    ---

    title: "iOS 4 Home button double-click: Rare case of retiring a behavior preference"

    date: 2010-08-23

    slug: ios-4-home-button-double-tap-rare-case-of-retiring-a-behavior-preference

    originalUrl: https://miksovsky.blogs.com/flowstate/2010/08/ios-4-home-button-double-tap-rare-case-of-retiring-a-behavior-preference.html

    ---


    <p>
      Like a lot of iPhone users, I was surprised that Apple changed the behavior of
      double-click the Home button in iOS 4.0. That action had previously taken the
      user to a user-selected favorite application, which by default was the Phone
      application. On a phone with a tiny number of hardware buttons, having a fast
      way to actually make a phone call seems like a good idea. In iOS 4.0, this
      double-click&#0160;action was redefined to invoke the task switching UI:
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20133f332af3e970b-pi.png"
        alt="iPhone Home Button Settings Page"
      />&#0160;&#0160;&#0160;
      <img
        src="/images/flowstate/6a00d83451fb6769e20134865645f7970c-pi.png"
        alt="iPhone Task Switcher"
      />
      <br /><em
        >In iOS 3.x (left), double-clicking&#0160;Home was customizable; in iOS 4.x
        (right), it invokes the task switcher</em
      >
    </p>

    <p>
      I happen find the new behavior fine, and find a use for it many more times a
      day than I did the previous behavior. Some number of users, however, howled
      when they upgraded their phones and found a favorite feature was missing.
      Apple essentially took a feature away, an occasion so rare in software design
      that I can only think of a handful of cases in more than twenty years where
      I’ve done it myself.
    </p>

    <p>
      Regardless of what one thinks about Apple’s decision, I’m impressed by their
      resolve to retire the old behavior. Features tend to live forever, sometimes
      out of all proportion to their utility. It’s usually cheaper to keep things
      than get rid of them, and as this case shows, every feature has at least some
      number of users that will be inconvenienced and upset if the feature were to
      be removed. Some of the most passionate of those feature users may, in fact,
      work on the team that make the product, and those people serve as advocates to
      ensure the conservation of old features.
    </p>

    <p>
      Usually, the tendency to conserve features is so strong that old features are
      usually buried as settings, rather than eliminated entirely. When Microsoft
      finally
      <a href="http://miksovsky.blogs.com/flowstate/2006/07/insert_key_safe.html"
        >fixed the behavior of the Insert key in Microsoft Word</a
      >, it still preserved the old behavior as a behavior preference. Here it would
      presumably have been trivial for Apple to keep the old behavior<em
        >&#0160;by simply folding the new behavior into the very configuration UI it
        replaced</em
      >. That is, the list in the image on the left above could have been extended
      with a new option to “Switch applications”, and that option could have been
      made the default. Given the low cost of doing that, Apple’s decision to retire
      the old behavior is even more impressive—or, depending upon your point of
      view, more reprehensible.
    </p>

    <p>
      The complexities of preserving such behavior preferences in perpetuity is one
      of the many reasons I personally try very, very hard to avoid introducing them
      in the first place.
    </p>

    <p></p>

    <p>
      <em
        >Side note: This week I&#39;ll be at
        <a href="http://www.uxweek.com/">UX Week 2010</a> in San Francisco. If
        you&#39;re coming, it&#39;d be great to meet up. Send mail to jan at cozi
        dot com.</em
      >
    </p>
2010-09:
  2010-09-07 Every app has a scary basement.html: >
    ---

    title: "Every app has a scary basement"

    date: 2010-09-07

    slug: every-app-has-a-scary-basement

    originalUrl: https://miksovsky.blogs.com/flowstate/2010/09/every-app-has-a-scary-basement.html

    ---


    <p>
      It takes a while for a designer on a mature product to realize that not all
      parts of the application&#39;s user interface are equally stable. As an
      application evolves over the course of years, it tends to develop some
      critically important yet unbelievably fragile component upon which too much
      rests. I picture such a feature as a scary basement: the dark, old,
      mysterious, and temperamental body of code which is vital to the running of
      the operation. The scary basement is cantankerous and hard to
      maintain—something only operated upon by the most senior and stalwart of the
      team&#39;s engineers, and conspicuously avoided by everyone else.
    </p>

    <p>
      When I worked as the lead designer on Microsoft Money, I eventually came
      across its scary basement: the elaborate checkbook register control for
      viewing and editing account transactions. This register control was first
      created around 1990 by legendary Microsoft engineer Doug Klunder. To get the
      most performance out of the PCs of the day, I believe he had the register
      itself more or less<em> directly read and write transaction data from disk</em
      >. In this capacity, this specific UI control was entirely and solely
      responsible for validating all transaction data; there was no separation
      between presentation, business logic, and on-disk representation.
    </p>

    <p>
      This gave rise to all sorts of odd restrictions. For instance, any dialog that
      created an account transaction had to instantiate, somewhere behind the
      scenes, a hidden instance of the register control. When the user entered data
      in dialog fields, the dialog carefully copied those values into the register,
      told the register to save it, and then tried to divine whether the save
      operation had worked.
    </p>

    <p>
      With each new product version, the register control had new functionality
      bolted on (investments, online banking, localized features), and each addition
      increased the complexity of the code. By the time I joined the team four years
      later, the register control had become so incredibly Byzantine, only one or
      two people on the team could, and would, touch it.
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e201348709b1a4970c-pi.jpeg"
        alt="Microsoft Money 95 Account Register"
      /><br /><em
        >Money register control, circa Money 95: Be afraid… be very afraid.</em
      >
    </p>

    <p>
      A distinguishing characteristic of the scary basement is that all work on it
      will take an indeterminate length of time; any bug fixes or improvements are
      essentially uncostable. In the case of Money’s register control, simple
      changing the order of the transaction fields might take a day—or several
      weeks. There was just no way to tell beforehand.
    </p>

    <p>
      When I was first exposed to this reality, some friends on the nearby Microsoft
      Word team shared stories about their app&#39;s own scary basement: a routine
      called FormatLine. Given a point in a document and a column width, FormatLine
      would lay out the next line of text at that point. As I heard it, this routine
      had evolved into a handful of functions that were each thousands of lines
      long. Developers assigned to descend into the depths of FormatLine were
      treated with the same respect and concern as spelunkers attempting to reach
      trapped miners.
    </p>

    <p>
      The basement metaphor isn&#39;t just a way of describing the unnerving nature
      of tiptoeing around such a feature—it&#39;s meant to reflect the fact that
      such a feature is invariably foundational to the application. And like a
      building foundation, this code can’t be replaced with something more solid
      without a colossal engineering effort. In most cases, the scary basement just
      stays that way until the platform the app sits upon becomes irrelevant, and
      the app is ported over to some new, saner, foundation.
    </p>

    <p>
      To prevent a critically important aspect of your UI metastasize into a scary
      basement means investing time in refactoring as you go, and this means moving
      more slowly that you would like. UI changes need to be evaluated in terms of
      the degree to which they compromise the solidity of the foundation.
    </p>

    <p>
      This past week, a developer here at a Cozi came to me with a tough decision.
      I&#39;d designed what, IMHO, was an interesting modification of our family
      calendar UI that could have helped optimize screen real estate for both user
      data and advertising impressions. Unfortunately, after a couple of weeks of
      working on this, the developer indicated that it was proving ferociously
      complicated to get the new UI to work correctly with the infinite scrolling on
      our calendar page. The infinite scrolling feature was itself delicate, and
      doing anything to it was complicated by the need to work across multiple
      browsers. While it might be possible to slowly stabilize this particular new
      feature to an acceptable level of quality, our calendar UI would likely become
      unacceptably fragile—the next feature we tried to add would apply new
      stresses, and things would break in unpredictable (and uncostable) ways. Our
      calendar UI would turn into a scary basement.
    </p>

    <p>
      We couldn&#39;t let that happen. For a family-focused product like Cozi, being
      able to evolve our calendar UI is crucial to the business. So while it was
      painful to let a neat feature improvement go, we ultimately decided that it
      wasn&#39;t the right time for it. Maybe someday cross-browser compatability
      won&#39;t be such a pain (probably when we can drop support for IE 7 and 8),
      and we&#39;ll give it another shot. In the meantime, we have a clean, well-lit
      basement.
    </p>
  "2010-09-13 Form validation feedback Be slow to complain, and quick to forgive.html": >
    
    ---

    title: "Form validation feedback: Be slow to complain, and quick to forgive"

    date: 2010-09-13

    slug: form-validation-feedback-be-slow-to-complain-and-quick-to-forgive

    originalUrl: https://miksovsky.blogs.com/flowstate/2010/09/form-validation-feedback-be-slow-to-complain-and-quick-to-forgive.html

    ---


    <p>
      Anyone designing a form will eventually come across the problem of: 1) when to
      validate the form data which the user has entered, and 2) how to provide the
      user feedback on fields that don’t meet the validation criteria. Many
      approaches have been tried for the second problem, but I think the first
      problem—when to validate the data and provide feedback—could use more
      consideration.
    </p>

    <p>
      Suppose you’re designing a form containing a text box in which you will ask
      the user to enter a mobile phone number. For a variety of reasons, you’ve
      decided that you want to perform some initial validation of the number to
      minimize the chance of later problems. There’s no easy way to ensure, on the
      spot, that the number is, in fact, that of a real mobile phone, but you can at
      least ascertain via some regular expression that the text looks like a valid
      phone number. (Er, have fun with that, especially if you want to support
      international numbers.) Your regex is quick to evaluate, but you need to
      decide <em>when</em> to evaluate it and do something with the result.
    </p>

    <p>
      Here are some choices for when to validate the phone number, along with some
      pros and cons:
    </p>

    <ol>
      <li>
        <strong>When the user types a key.</strong><br />
        <br />Pros: The user will get the feedback as quickly as possible, and so
        they should be able to correct the problem immediately. Because they’re
        looking at the phone number field, feedback positioned next to the field
        will be noticeable. Because the user is thinking about the phone number,
        they don’t need much prompting to spot the problem. The keyboard focus is
        probably already in exactly the right place to fix the problem. <br />
        <br />Cons: It can be incredibly irritating to use a program which instantly
        complains about a problem which you yourself can tell you’ve made. If you’re
        reaching for the “1” key, and see you’ve accidentally hit the “q” key, you
        can see for yourself you’ve made a mistake. You don’t need the additional
        shame of being yelled at. A program that validates on a key press can act
        like the jerk in the car behind you who honks their horn the instant the
        traffic light turns green. <br />
        <br />There are also plenty of situations in which such error feedback is
        completely premature. Suppose the user is pasting in a phone number they’ve
        copied from their address book or some other location, and the pasted text
        contains some extra characters. The user can see the extra characters, and
        would be perfectly happy to remove them if only the program wouldn’t yell so
        loud.<br />&#0160;
      </li>
      <li>
        <strong>When the field loses focus </strong>(e.g., the user has moved the
        keyboard focus to the next field).<br />
        <br />Pros: The user has had a chance to get the field text into the state
        they desire, so any feedback at this point is likely more warranted. Perhaps
        the user may not have noticed that they’re missing a digit from the phone
        number. <br />
        <br />Cons: The user’s attention has already begun to move on, so the error
        feedback may need to be more prominent. Also, while this technique is less
        hasty than the one above, the error feedback may still preempt the user’s
        own ability to recognize the problem. The user has to manually move the
        keyboard focus back to the phone number field.<br />&#0160;
      </li>
      <li>
        <strong>When the user attempts to save the form.</strong><br />
        <br />Pros: By pressing a commit button like Save, the user has indicated
        that they think they’re done entering data. If there’s an error at this
        point, they haven’t noticed it, so the feedback will be timely. <br />
        <br />Cons: By this point, the user’s attention may be far from the phone
        number field, so the feedback needs to be quite prominent. It may need to be
        supplemented by overall form validation feedback near the commit button or
        at the top of the page. Once the user sees that overall feedback, it may
        take a moment for them to visually reacquire the problematic phone number
        field, diagnose the problem, and get the insertion point to the point where
        they can correct it.
      </li>
    </ol>

    <p>
      All these methods have their place, although in a situation like this, I
      personally prefer to defer giving validation feedback to the point where the
      user is attempting to save the form (#3 above). I’d rather give the user a
      reasonable chance to fix any errors, and have observed countless usability
      studies in which they have done so. I believe this leaves the user feeling in
      control, and to me this is worth the disadvantages listed above for this
      approach.
    </p>

    <p>
      Still, there’s one common downside to this approach:
      <em
        >applications that validate on Save tend to keep the error feedback visible
        until the user tries to save again</em
      >. I find this annoying; it’s like the program continues to scold me even
      after I’ve admitted I was wrong and atoned for my mistake. Once I see the
      problem and have fixed it, I wish I could get credit for fixing it right away.
    </p>

    <p><strong>Asymmetric validation feedback triggers</strong></p>

    <p>
      There’s no reason the triggers for showing and hiding the validation feedback
      need to be symmetrical. I’ve been working on the idea of asymmetrical
      validation triggers: validate on save to show validation feedback
      <em>and</em> validate on keypress hide the feedback. In this scenario, the UI
      shows validation feedback (validation message, change field background color,
      etc.) if the user attempts to save the form with something that doesn’t appear
      to be a phone number. But as soon as the user types the key that fixes the
      problem, the validation feedback goes away.
    </p>

    <br />

    <p></p>

    <p></p>

    <p><em>The user is typing…</em></p>

    <p>
      <img src="/images/flowstate/6a00d83451fb6769e20133f418c3f8970b-pi.png" />
    </p>

    <p>
      <em
        ><span
          ><em
            >They mistype. The UI doesn’t complain; maybe the user will fix the
            error.</em
          ></span
        ><br
      /></em>
    </p>

    <p>
      <img src="/images/flowstate/6a00d83451fb6769e20133f418c3fd970b-pi.png" />
    </p>

    <p>
      <em>The user tabs away with the error uncorrected. Still no complaint.</em>
    </p>

    <p>
      <img src="/images/flowstate/6a00d83451fb6769e20133f418c404970b-pi.png" />
    </p>

    <p>
      <em
        >They try to save the form. NOW validation feedback appears (with an
        explanation nearby).</em
      >
    </p>

    <p>
      <img src="/images/flowstate/6a00d83451fb6769e2013487392406970c-pi.png" />
    </p>

    <p><em>The user clicks to correct the error…</em></p>

    <p>
      <img src="/images/flowstate/6a00d83451fb6769e20133f418c412970b-pi.png" />
    </p>

    <p>
      <em
        ><span
          ><em
            >As soon as they type that fixes the error, the validation feedback goes
            away.</em
          ></span
        ><br
      /></em>
    </p>

    <p>
      <img src="/images/flowstate/6a00d83451fb6769e20133f418c416970b-pi.png" />
    </p>

    <br />

    <p><strong></strong></p>

    <p></p>

    <p></p>

    <p>In other words, the UI is slow to complain, and quick to forgive.</p>

    <p>
      I think this is generally the proper conversational posture for a program to
      take regarding the validation of user input. Most programs treat validation
      feedback as if it were the user’s fault, when to me this feels like almost
      exactly the wrong spirit in which the view the situation. Data validation is a
      sign of program weakness — a sign that it’s still too hard to design a program
      that can process input flexibly and resiliently.
    </p>

    <p>
      If I fill out a paper form that asks for my home and work phone numbers, I can
      fill in the first phone number and write the word “SAME” for the second phone
      number, and any human would process that correctly. I can even cross out the
      field label “Work” and handwrite “Cell” and write in my cell number, and again
      this is meaningful to a human reader. I can make all kinds of minor errors,
      and still my input can be interpreted.
    </p>

    <p>
      That is a breathtaking level of input flexibility which no UI today can match.
      And so when a form has attempted to recognize user input, and failed to do so,
      the appropriate stance should be not, “Invalid phone number”, but rather, “I’m
      really sorry, I’m not smart or sophisticated enough to understand you. Could
      you please help me by making this more recognizable as a phone number so that
      I, a mere program, can process it for you?”
    </p>

    <p>
      I’m not saying that’s what the program should really <em>say</em>, but that’s
      a useful mindset to have when approaching the situation as a design problem.
      Such thinking led to the asymmetric validation triggers above, and perhaps
      more thought along these lines will lead to further refinements to this very
      common aspect of user experience design.
    </p>
  2010-09-20 Dear phone OSes in 3rd place and beyond Please accelerate your demise.html: >
    
    ---

    title: "Dear phone OSes in 3rd place and beyond: Please accelerate your demise"

    date: 2010-09-20

    slug: dear-phone-oses-in-3rd-place-and-beyond-please-accelerate-your-demise

    originalUrl: https://miksovsky.blogs.com/flowstate/2010/09/dear-phone-oses-in-3rd-place-and-beyond-please-accelerate-your-demise.html

    ---


    <p>
      Cozi is expanding its family software to the mobile domain. We have a
      <a
        href="http://itunes.apple.com/us/app/cozi-family-organizer/id364719312?mt=8"
        >Cozi iPhone application</a
      >, and are obviously looking at Android as well. The problem is what to do
      about Blackberry, Palm webOS, and perhaps Windows Phone 7. As an entrepreneur
      with friends at two of those companies, I wish good luck to those OSes in
      third place and beyond. As a designer of family software, I have a goal to
      address the needs of my users, and support whatever phone they find meets
      their needs. And as an executive at a company that makes mobile phone
      applications, I wish those OSes in third place and beyond would please die—and
      soon, if they wouldn’t mind.
    </p>

    <img
      src="/images/flowstate/6a00d83451fb6769e20134877bee38970c-pi.png"
      alt="Blackberry[4]"
    />&#0160;&#0160;&#0160;

    <img
      src="/images/flowstate/6a00d83451fb6769e20133f45c62cb970b-pi.png"
      alt="Windows 7 Phone"
    />&#0160;&#0160;&#0160;

    <img
      src="/images/flowstate/6a00d83451fb6769e20134877bee4e970c-pi.jpeg"
      alt="palm-pre-plus-6"
    />

    <br /><em
      >Dear Blackberry, Windows Phone 7, Palm webOS: Could you all go away?
      Please?</em
    >

    <p>
      As an ISV working on top of a platform, I want exactly two platform providers.
      Not one, not three, or four, or ten. Two. If there’s only one platform
      provider, the provider inevitably becomes arrogant and insensitive to the
      needs of the ISVs that keep it alive. Not three, or four, or more—those
      platforms can never get enough market share to make it worth your while. All
      they will do is produce enough users to make your life miserable with endless
      requests for when you’ll get around to supporting the OS they prefer, with its
      3% market share. The only good case with the smaller players is if they can
      become commoditized, ideally in combination with the first or (more likely)
      second place platform, in which case their existence makes no difference to
      the ISV.
    </p>

    <p>
      An ISV wants exactly two platform providers in any given space. The first one
      can be the successful one, with something like 70% market share. The second
      one can be the underdog, with 25% market share. From the ISV’s perspective,
      the underdog’s job is to keep the top dog honest, while maintaining sufficient
      market share to justify the ISV’s investment developing for that platform.
      Without the latter justification, the ISV can’t justify the investment, which
      means the underdog eventually loses compelling apps, and loses market share
      until they can no longer play a meaningful role as underdog. The remaining 5%
      of the market should be splintered among tiny players. None of them should
      have sufficient market share to create a compelling business case to the ISV,
      so the ISV can focus on the two players that really matter.
    </p>

    <p>This effect has been demonstrated over and over again.</p>

    <ul>
      <li>
        In the golden age of personal computer OSes, the Mac had just enough market
        share to be worth developing for, which kept Microsoft honest. When the Mac
        nearly became irrelevant, Microsoft slowed its pace of innovation, and took
        forever to release Vista. Without OS/X nipping at its heels, it’s
        exceedingly unlikely that Microsoft would have gone on to produce a nice
        Windows 7. Thankfully, a personal computer OS is now largely a commodity
        whose greatest purpose is to run a web browser, and web-based ISVs can often
        ignore the space entirely.
      </li>
      <li>
        In the gaming console space, game ISVs resent Nintendo’s steadfast refusal
        to die. Microsoft and Sony can keep each other honest on their own. So, from
        a game developer’s perspective, Nintendo’s existence doesn’t improve their
        life, it only complicates it.
      </li>
      <li>
        When Microsoft maneuvered IE into a position of browser dominance, ISVs had
        no choice but to optimize for IE, giving Microsoft so much market power that
        they could ignore the call to adopt standards. When Mozilla, Chrome, and
        Safari eventually became clawed their way to being good enough and
        threatening enough, Microsoft finally had to get serious again about making
        IE good. In this particular case, web standardization has commoditized the
        smaller players, so as an ISV, I really don’t care whether Mozilla and
        WebKit both stick around. All that matters is that, collectively, they can
        force Microsoft to improve.
      </li>
    </ul>

    <p>
      Now, the mobile OS space is increasingly dominated by iOS and Android. To an
      ISV, that’s fantastic news! The fewer players, the less work the mobile ISV
      has to do to reach more users. I’m really hoping Android manages to create a
      meaningful application marketplace and sustain fast growth. When iPhone was
      the sole high-end mobile OS of interest, they could afford to subjugate ISVs
      with completely mysterious and arbitrary rules for who could be in the App
      Store. With Android on the rise, Apple has been finally forced to
      <a
        href="http://www.nytimes.com/2010/09/10/technology/10apple.html?_r=1&amp;src=me&amp;ref=technology"
        >open up a bit</a
      >.
    </p>

    <p>
      The mobile ISV wants to see that tussle between Apple and Android. But what
      would really make me happy would be to see those other guys get a lot weaker.
      The other mobile OS providers don’t weigh enough on their own, and hence can
      only serve to make the ISV’s life harder. Hey, you guys can all share that
      last 5%!
    </p>
  2010-09-27 Need an inexpensive designer for your project Consider hiring a college student.html: >
    
    ---

    title: "Need an inexpensive designer for your project? Consider hiring a college student!"

    date: 2010-09-27

    slug: looking-for-an-inexpensive-designer-consider-hiring-a-college-student

    originalUrl: https://miksovsky.blogs.com/flowstate/2010/09/looking-for-an-inexpensive-designer-consider-hiring-a-college-student.html

    ---


    <p>
      This past weekend I had a lot of fun giving a talk at
      <a href="http://www.seattle20.com/startupday/">StartupDay</a> 2010 on the
      topic of user experience design in the context of a startup company. After my
      talk, I volunteered my time at a table in the advisory area, where lawyers,
      VCs, and various experts on others topics of interest met with new and hopeful
      entrepreneurs. I ended up spending time with four entrepreneurs, and three of
      them asked the exact same question:
      <strong>Where can I find budget design talent?</strong>
    </p>

    <p>
      I really wanted to help these people get their business started, so did my
      best to come up with a meaningful suggestion. They all liked my advice, so I
      want to share it with you too:
      <strong>Try finding a college student to do your design project.</strong>
    </p>

    <p>
      <img src="/images/flowstate/4068847233_573e2e4317_z.jpg" />
      <br /><em><font color="#666666">Photo: Matt Hintsa</font></em>
    </p>

    <p>There are a bunch of good reasons to hire a college student:</p>

    <ol>
      <li>
        There are incredibly talented undergraduate and graduate students studying
        every form of design that’s out there.
      </li>
      <li>
        They are looking for a job that pays better than part-time work in the
        campus library or a local restaurant, and so are willing to work for less
        money than you might imagine. (That said: Be fair.)
      </li>
      <li>
        They want to build a portfolio. The extent to which your design project is
        actually interesting increases the chance the result of the project will
        look good in their portfolio. This portfolio benefit can translate into more
        motivation (and possibly willingness to work for less).
      </li>
      <li>They can have drive and energy to spare.</li>
      <li>
        Instructors want their students to work on real-world problems! I’ve been
        approached in the past by professors looking for projects for their
        students. They are farming out cheap (or free) labor, but don’t always know
        who’s looking for design work, and may not have local small-company
        connections. These engagements can come with particular constraints: the
        project probably needs to start and end within a given semester, you may be
        obligated to submit an evaluation at the end of the project, etc.
      </li>
      <li>
        If the relationship works well, you can use them for future projects, or
        potentially recruit them. You may discover someone great before anyone else
        does!
      </li>
      <li>This is a way of doing some good in the world.</li>
    </ol>

    <p>
      The obvious downsides to hiring a college student for a real business project
      are lack of experience: specifically in the particular design discipline
      you’re looking to hire, and generally as a professional with business
      responsibilities. They may not yet have worked on a project for which failure
      can entail consequences worse than a bad grade.
    </p>

    <p>
      It can also be hard to find a good student—it takes time to separate the wheat
      from the chaff—but if you’re on a&#0160; budget, it may be worth the extra
      time. And if you’re on a really tight budget, you may have no better option.
    </p>

    <p>
      Reaching out to local instructors can be a good place to start; even if they
      don’t have a specific work/study project coming up (or one that matches your
      parameters), they may know current or past students that might be good for
      your project. These instructors can be found not only at the local college or
      university, but also at trade schools and other adult learning institutions.
    </p>
2010-10:
  2010-10-11 Reconsidering stock controls to create an optimized user experience.html: >
    
    ---

    title: "Reconsidering stock controls to create an optimized user experience"

    date: 2010-10-11

    slug: reconsidering-stock-controls-to-create-an-optimized-user-experience

    originalUrl: https://miksovsky.blogs.com/flowstate/2010/10/reconsidering-stock-controls-to-create-an-optimized-user-experience.html

    ---


    <p>
      One of my core design principles is that, when a designer tackles a new
      problem, they start by trying the simplest thing that could possibly work.
      Once you get that into users’ hands, you’ll discover whether the simple thing
      works. You might have gotten lucky, and can move on — or else you’ll learn
      what users really want (as opposed to what you thought they wanted) and your
      next iteration will be much better. The thing to avoid is stopping after the
      first iteration, avoiding improvements to UI elements that are clearly core to
      a product’s function. This situation often comes up with the use of stock
      controls, because their ubiquitous presence and fundamental nature often
      blinds people to other possibilities.
    </p>

    <p>
      Take the standard solution for entering a time into a form. Given the above
      design principle, it’s completely reasonable that people designing calendar or
      calendar-like interface would start by using stock HTML controls to input
      appointment or event data. In the case of entering the appointment time, the
      standard solution is a SELECT tag, which on most browsers produces a dropdown
      list box. Here’s a typical example from Expedia flight search form:
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20134880ee74c970c-pi.png"
      /><br /><em>Expedia time picker</em>
    </p>

    <p>
      This time dropdown list works, but isn’t particularly elegant, and has
      numerous shortcomings. Depending on your browser, you may only see about 18
      times at once, so you’re often forced to scroll to select a time. This
      scrolling issue is exacerbated by having the dropdown start by showing times
      from midnight through the early morning — times that are unlikely to be
      selected. (In other words, the first third of the options shown will rarely be
      picked.) Furthermore, the times aren’t aligned for easy reading. And, despite
      the heavy capitalized AM and PM markers, from usability experience I can
      attest to the fact that users will often overlook these, and select a time 12
      hours off from the time they want.
    </p>

    <p>
      Overall this is a brute force solution to a problem. That would be fine for an
      initial attempt, but seems puzzling on the home page of a site where task
      completion time (here, selecting flight parameters) almost certainly has an
      inversely proportional effect on revenue.
    </p>

    <p>
      It’s even more puzzling to see the same stock control used as a core component
      of a web-based calendar, where the entire point of the site hinges on entering
      appointments. Yahoo! Calendar uses essentially the same stock control, with
      all the same shortcomings:
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20134880ee76a970c-pi.png"
      /><br /><em>Yahoo! Calendar time picker</em>
    </p>

    <p>
      Google Calendar and Microsoft’s Hotmail Calendar (or Windows Live Active
      Calendar, or whatever it’s called this week) are more puzzling still. Both
      sites have developed custom time pickers, and in both cases they’ve created
      combo boxes to allow typing times (in addition to picking from a list). From
      experience, I can say that this is a non-trivial endeavor — it’s surprisingly
      difficult just to correctly reproduce all the keyboard navigation and other
      interaction behavior of a standard dropdown list, let alone improve upon it.
    </p>

    <p>
      But for all their investment, as far as I can tell, in both cases the dropdown
      list behavior is no better than the standard solution. In fact, both solutions
      are <em>worse</em> because the dropdown list is, amazingly,
      <em>shorter </em>than the stock control. The Google solution only shows six
      times at once; Hotmail’s shows ten. It’s almost impossible to use these UIs
      without scrolling to find the time you want. It’s also noteworthy that both
      sites fail to take the opportunity to improve the legibility of the times and
      leave them left-justified.
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20134880ee780970c-pi.png"
      /><br /><em>Google Calendar time combo box</em>
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20134880ee799970c-pi.png"
      /><br /><em>Hotmail Calendar time combo box</em>
    </p>

    <p>
      With these object lessons in mind, I really wanted to find a better time
      picker solution for Cozi’s own
      <a href="http://www.cozi.com/Family-Calendar.htm">family calendar</a>. When we
      began working on our own combo box time picker (following the same pattern as
      Google and Hotmail), it struck me that all the scrolling pain resulted from an
      insistence on showing all times in a single vertical column. Moving to
      multiple columns let us show a complete day’s worth of times at once, and
      completely eliminate scrolling:
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20134880ee7b2970c-pi.png"
      /><br /><em>Cozi multi-column time combo box</em>
    </p>

    <p>
      Once we introduced the idea of using the horizontal dimension, we realized we
      could take it even further. Each row normally shows just the top of the hour,
      but the row the mouse is over also shows additional fifteen minute increments
      within that hour. This allows the user pick, with a single click, from 96
      discrete times. We also align right-align the hours to improve legibility. The
      fact a user can see all the hours at once makes it slightly more likely they
      will choose the AM or PM time correctly, an effect we’ve tried to reinforce
      through a background gradient to suggest day versus night.
    </p>

    <p>
      In practice, this control works exceedingly well. It’s very fast, and thorough
      usability testing of the control over the years has shown that users
      intuitively grasp its use, despite never having seen anything like it before.
    </p>

    <p>
      I mention this not (just) to toot Cozi’s horn or to sneer at other calendar
      sites. The other sites mentioned above all have aspects in which their user
      interface is better than Cozi’s, and I aspire to match them in those areas. My
      point is that stock controls such as dropdown lists are so pervasive as to be
      invisible even to the product’s own designers. These controls are a perfect
      starting point for a UI design—but they shouldn’t be the end. If your product
      uses a stock control (or any basic UI pattern) in a core function, it might
      well be worth your time to reconsider those controls and explore an optimized
      solution.
    </p>
  2010-10-18 Some observations of the pluses and minuses of Android's user experience.html: >
    
    ---

    title: "Some observations of the pluses and minuses of Android's user experience"

    date: 2010-10-18

    slug: some-observations-of-the-plusses-and-minuses-of-androids-user-experience

    originalUrl: https://miksovsky.blogs.com/flowstate/2010/10/some-observations-of-the-plusses-and-minuses-of-androids-user-experience.html

    ---


    <p>
      For the last few weeks I’ve been playing with an Android phone, a Motorola
      Droid X. The UI takes some adjustment for an iPhone user like me, not unlike
      they adjustment I’ve made going back and forth between the Mac and PC several
      times over the years. In evaluating the Android user experience (including
      aspects shaped by Motorola), the following points seemed interesting to me.
    </p>

    <ol>
      <li>
        <strong
          >On a touch device, it’s easy to constantly forget the presence of the
          hardware buttons.</strong
        >
        A glowing, colorful screen with detailed interactive elements is just too
        visually compelling to remember that, in some applications, critical
        features are only available via the hardware Menu button. A typical
        experience for me has been to stare at a screen looking for the UI element
        I’m certain should be there, and only a frustrating minute realize, “Oh,
        that’s right, I forgot to check what’s hidden behind the Menu button.” If
        it’s not on the screen, I can’t be bothered to keep checking it. It took me
        forever how to get out of “directions” mode in Google Maps because I was in
        a maze of twisty little passages (all alike) each of which produced a
        slightly different Options menu when the Menu button was pressed. <br />
        <br />I think the Menu button flies in the face of evidence that users do
        better when they have a clear and consistent search path for finding the
        commands available at any given point. Jensen Harris wrote on this topic in
        his discussion of
        <a href="http://blogs.msdn.com/b/jensenh/archive/2005/09/14/467126.aspx"
          >why the Microsoft Office team invented the Ribbon</a
        >
        to provide “the one and only place to look for functionality in the
        product”. <br />
        <br />The same thing goes for the other hardware buttons, especially the
        Search button. It seems like a shameless ploy to plug Google search out of
        all proportion to the button’s utility. Even if an application has a Search
        feature, it seems like they’d want to be certain users remembered it was
        there by offering an on-screen UI to invoke it. Given that, why burden the
        user with an extra hardware button?<br /><br />
      </li>
      <li>
        <strong>Long press to invoke commands = Win.</strong> The ability to hold
        down one’s finger on an object to invoke what’s essentially a context menu
        (“Quick Actions”) is a gain for power users, and doesn’t impact users who
        are unaware of this facility. When I go back to the iPhone, this is the
        Android feature I miss the most. Thankfully, this useful UI convention is
        already starting to make its way over to iPhone apps. <br />
        <br />On the downside, this UI will likely lead to a wave of “long press
        people”. Their habit will parallel that of “right-click people” on Windows:
        users who, at some point in the past, found the right click button produced
        some interesting commands. They therefore now right-click on everything—the
        Windows Start menu, OK buttons, <em>everything</em>—whether it has a context
        menu or not.<br /><br />
      </li>
      <li>
        <strong
          >Dear Google: Thanks for taking the iconic dropdown arrow, an element
          which otherwise universally communicates “Click me”, and using it as a
          completely static element that offers no interaction whatsoever.</strong
        >
        <br />
        <br />
        <img src="/images/flowstate/radio_buttons.png" />
        <br />
        <br />That little arrow-in-a-circle next to &quot;Map mode&quot;?
        <em>Users want to click on it</em>. They want to click on it because every
        other app they have ever used has used a similar icon as an affordance for
        interactivity. By abusing this dropdown arrow icon, Google might untrain
        users from clicking on it when they see it. Google’s non-standard use of
        this arrow is precluding the standard use of it on Android. (Cozi’s own
        mobile UI plans called for using a dropdown arrow-in-a-circle very much like
        the one above, and we’ve had to abandon that for fear that Android users
        wouldn’t click on it.)<br /><br />
      </li>
      <li>
        <strong
          >Motorola made a curious decision to set the geeky robotic “Droid” sound
          from a Droid X marketing campaign as the phone’s default error
          sound.</strong
        >
        So Motorola has decided that, at completely random intervals throughout a
        customer’s day, the device should proclaim in a loud robotic voice, “MY.
        OWNER. IS. A. GEEK.”<br /><br />If you like that, great; I&#39;m all for
        self-expression. If you want to customize your phone to announce new emails
        with Worf&#39;s voice stating, &quot;Captain... Incoming message&quot;, more
        power to you. That&#39;s your choice. Having a phone manufacturer make a
        choice like this without user participation&#0160;seems unaccountably
        presumptuous.<br /><br />This one tiny experience made me feel like Motorola
        views me as nothing more than a marketing tool, and they don&#39;t care if
        they make me feel stupid in front of my friends. I disabled the sound at the
        first opportunity. It took a bit of hunting around. Let’s imagine there’s a
        normal person out their who <em>doesn’t</em> want to have their phone scream
        that they’re a geek. How quickly will they learn to hate their new phone?<br /><br />
      </li>
      <li>
        <strong
          >Motorola has managed to completely conflate Droid and Android in the
          minds of mainstream consumers.</strong
        >
        Perhaps this is due to the aforementioned marketing campaign, but it’s more
        likely a result of Motorola’s savvy willingness to pay Lucasfilm through the
        nose for the rights to the “Droid” name. I’ve personally seen the
        effectiveness of this branding decision—on a daily basis I see requests from
        Cozi users asking when we’re going to have a “Droid version”. It’s certain
        that many of those users are actually asking for an Android version (which
        we’re working on, BTW)<br /><br />[<strong>UPDATE:</strong> A reader pointed
        out that Verizion, not Motorola, is the firm that licensed the
        &quot;Droid&quot; trademark from Lucasfilm.]
      </li>
    </ol>

    <ol>
      <li>
        <strong>I still don’t see the high value of Home page widgets. </strong
        >Maybe my usage will change over time, but it still seems odd to have to,
        say, swipe my Home page to the left twice in order to see a few calendar
        appointments, when I could also just launch the Calendar app and see
        <em>all</em> my calendar appointments. When I go back to the iPhone, I don’t
        miss Home page widgets at all. Widgets seem like a great idea in theory. In
        practice I’d imagine most people just can’t be bothered to invest a bunch of
        time optimizing their phone’s Home page in order to get a miniscule gain in
        efficiency. YMMV.<br /><br />
      </li>
      <li>
        <strong
          >It’s fantastic to be able to install apps without valueless interference
          by the carrier, manufacturer, or OS provider. </strong
        >Freedom to install the apps you want is a core part of the Android value
        proposition. It’s good for users. It’s <em>great </em>for ISVs during app
        development. Platforms that make ISVs happy often do well; the conventional
        wisdom is that it’s an unnatural—and probably unsustainable—state of nature
        for developers to hate the OS they’re developing for. Installing a
        prerelease build of Cozi’s iPhone application is a pain: I have to get my
        device ID to a developer, who has to embed that ID in a list of devices
        approved to run the prerelease build, and then have to go through
        shenanigans with iTunes to install the app. Installing a prerelease build of
        Cozi’s Android application is a breeze: just click a link to download and
        install the app, and I’m done.
      </li>
    </ol>
  2010-10-25 Squeeze wide page content into narrow windows let the content overlap the left navigation pane.html: >
    
    ---

    title: "Squeeze wide page content into narrow windows: let the content overlap the left navigation pane"

    date: 2010-10-25

    slug: squeeze-wide-page-content-into-narrow-windows-let-the-content-overlap-the-left-navigation-pane

    originalUrl: https://miksovsky.blogs.com/flowstate/2010/10/squeeze-wide-page-content-into-narrow-windows-let-the-content-overlap-the-left-navigation-pane.html

    ---


    <p>
      UI designers can find themselves challenged today by the need to address a
      huge range of window sizes. In Cozi’s case, we still target 1024x768, but we
      want to take advantage of additional space in larger sizes (sometimes much
      larger), and we want pages to function all the way down to 800x600. Sometimes
      we have to invent to tricks to work well across this range of sizes.
    </p>

    <p>
      That 800x600 minimum size, for example, comes into play surprisingly often. It
      never fails to surprise me how many users with small monitors leave windows in
      their default positions, which can often be unnecessarily small. And the
      current generation of netbooks (and now tablets) can have rather short or
      narrow displays, so even users who maximize window size can still end up with
      a pretty small window.
    </p>

    <p>
      Cozi’s current design places navigation links in a left pane, and page content
      on the right. One challenge at small window sizes is leaving ample room for
      the left-hand navigation at all sizes, while still making right-hand page
      content (e.g., calendar data) wide enough to be useful. Typical patterns for
      balancing these forces:
    </p>

    <ol>
      <li>
        <strong>Make the left navigation as narrow as possible. </strong>The
        downside here is that, on large monitors, the navigation ends up feeling
        narrow — literally marginalized.
      </li>
      <li>
        <strong
          >Size the left navigation width as a percentage of window width. </strong
        >Others might find that they can pull this off, but in our case, we couldn’t
        find a simple percentage that worked well across the range of window sizes
        we wanted to support.
      </li>
      <li>
        <strong>Let the user set the width of the left navigation. </strong>This can
        work well, but punts the problem to the user to solve. Many users won’t
        realize they can resize the left pane, and even for those who do, many won’t
        bother investing time tuning the display of a tool they only use
        sporadically.
      </li>
      <li>
        <strong>Let the user collapse/dismiss the left navigation. </strong>A
        special case of the above point, with the same issues.
      </li>
    </ol>

    <p>
      We came up with another solution:
      <strong>let the page content overlap with the left navigation pane</strong>.
    </p>

    <p>
      It’s likely we’re just independently reinventing an existing solution, but
      it’s worked out well, so here’s how it works. At wide window sizes, a typical
      Cozi page looks like this. The navigation links and other content (e.g., the
      family photo) on the left are completely exposed.
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20133f545178c970b-pi.png"
        alt="Calendar 1200x768"
      />
    </p>

    <p>
      As the user resizes the window to be narrower, the page reduces the width of
      the right-hand page content. When a threshold is reached, however, the
      right-hand content begins to overlap the left pane. This threshold varies by
      page, depending on how much width they need to show their content. (The
      calendar shown here in Month view demands a good deal of width, so its
      threshold is above 1024px page width. Other pages, like Settings, don’t need
      so much.)
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e201348864f56e970c-pi.png"
        alt="Calendar 1024x768"
      />
    </p>

    <p>
      This overlap continues all the way down a size that reveals a minimum amount
      of the left pane. (Below this size, the right content will start to clip.)
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20133f5451802970b-pi.png"
        alt="Calendar 800x768"
      />
    </p>

    <p>
      In this overlapped state, the user can still see enough of each navigation
      link to tell what each one is. E.g., the visible text “Calen” on the left is
      obviously a link to the calendar; “Shopp” is the shopping list, and so on. In
      this state, the user can mouse over the left navigation to see the full pane
      pop forward:
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e201348864f5a7970c-pi.png"
        alt="Calendar 800x768 (Hover)"
      />
    </p>

    <p>
      If the user now moves their mouse back to the right, the left pane drops back
      to the background.
    </p>

    <p>
      The show-navigation-on-hover solution requires that we handle one case
      specially: If the user clicks a navigation link on the left, then when they
      arrive on the new page, <em>the mouse will still be over the left pane</em>.
    </p>

    <ul>
      <li>
        The user’s most likely next action is to move the mouse to the right to
        interact with the page content. As soon as they move the mouse, the page
        will sense the mouse hovering over the left pane. It’d be annoying at that
        point to pop the navigation forward again — this would distract the user,
        who is trying to get to the right. So we disable the hover on page load
        until the user got the mouse to the right, then turn it on.
      </li>
      <li>
        However, some of the time, the user may be using the left pane to surf
        around the product. Perhaps they’re just exploring, or they’re looking for
        something and don’t know what page it’s on. They’ll be clicking in the left
        pane immediately after the page loads, without ever moving the mouse to the
        right. To support <em>that</em> case, we examine two factors: the direction
        the mouse is moving, and the time that has elapsed since the page loaded. If
        the user moves the mouse to the right reasonably quickly, we continue to
        suppress the hover behavior. However, if they move the mouse straight up or
        down, or linger on the left, then we re-enable the hover behavior.
      </li>
    </ul>

    <p>
      (The latter behavior was borrowed from a similar trick used to finesse pop-up
      behavior in hierarchical menus. I believe it was Microsoft who first came up
      with this trick for Windows or Office; it then made its way to OS/X.
      <em>[Update: Commenters recall that the Mac had this first.]</em> If the user
      wants to move from a top-level menu item to a submenu, their mouse may cross
      over a point that’s not over either of those elements. So the OS uses a
      combination of timing and mouse direction to decide whether the user is still
      moving towards the submenu, or has decided to explore other top-level menu
      items instead.)
    </p>

    <p>
      So far this overlap solution seems to be working in practice. Most users don’t
      see it much, and users with narrow window sizes can now see more page content
      while still having full access to site navigation. All of this is achieved
      automatically; the user doesn’t have to pick up the burden of optimizing the
      page display for the current window size.
    </p>
2010-11:
  "2010-11-22 Even if HTML5 doesn’t actually give you much, its buzzword status could still help you deliver a better UX.html": >
    
    ---

    title: "Even if HTML5 doesn’t actually give you much, its buzzword status could still help you deliver a better UX"

    date: 2010-11-22

    slug: html5-buzzword

    originalUrl: https://miksovsky.blogs.com/flowstate/2010/11/html5-buzzword.html

    ---


    <p>
      Sheesh, there’s a lot of
      <a href="http://en.wikipedia.org/wiki/HTML_5">HTML5</a> talk these days. I was
      initially confused and disappointed by HTML5’s buzzword status, until I
      realized that its very buzzword existence could ultimately help me deliver a
      better user experience.
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20133f6196b00970b-pi.jpeg"
        alt="Agent 008 Ball"
      />
      <br /><em
        ><span
          >The Canvas tag makes a game like Agent 008 Ball awesome — but a
          productivity app, maybe not so much</span
        ></em
      >
    </p>

    <p>
      Each time I hear someone tell me that HTML5 the answer to, say,
      <a
        href="http://miksovsky.blogs.com/flowstate/2010/09/dear-phone-oses-in-3rd-place-and-beyond-please-accelerate-your-demise.html"
        >the challenge of developing mobile clients for multiple platforms</a
      >, I have to wonder if they have actually reviewed the set of technologies
      actually comprising HTML5. On its face, HTML5 would seem to mean very little
      for a productivity app like Cozi.
    </p>

    <ol>
      <li>
        The most immediately useful aspect to Cozi is probably the &lt;audio&gt; tag
        for the few situations in which the Cozi web application plays a sound. We
        currently do that with Flash, and it’d be nice to jettison that baggage.
        Audio is not a big deal for us, however.
      </li>
      <li>
        Offline storage? Maybe. The cynic in me is betting that, once we begin
        investigating this, we’ll discover that HTML5 offline storage solves 70% of
        what we want. Still, this is somewhat interesting.
      </li>
    </ol>

    <p>
      And, from what I can see, that’s about it for Cozi. I’m missing the magic of
      the rest.
    </p>

    <ul>
      <li>
        The &lt;canvas&gt; tag is a huge step forward for slick
        graphically-intensive apps like
        <a href="http://agent8ball.com/">Agent 008 Ball</a>, but I’m not seeing the
        big breakthrough for an app that can already render everything it wants with
        native HTML elements.
      </li>
      <li>We don’t do much with video.</li>
      <li>
        Drag and drop. This is only interesting if you believe that drag and drop is
        an intuitive and convenient UI for moving files. My own belief is that users
        would benefit much more from optimized modal UIs designed for common tasks
        like picking photos. (The File Open dialog could start out showing the
        user’s actual photo storage location, show thumbnails by default, the dialog
        could allow multiple selection across multiple folders, etc.)
      </li>
      <li>
        The pile of new tags of purportedly general utility like &lt;section&gt; or
        &lt;figcaption&gt; solve no problem anywhere on our list of the 50 Biggest
        Problems We Have. What would really help instead would be a framework by
        which different communities could define new domain-specific tags that solve
        domain-specific problems. Hence my investment of time and labor in the
        <a href="https://quickui.org/">QuickUI web control framekwork</a>.
      </li>
    </ul>

    <p>
      “But wait!” cry the poorly-informed or deliberately overexcited
      <a href="http://www.technologyreview.com/web/25838/"
        >HTML5 buzzword-pushing media</a
      >. “What about animations? And things with rounded corners and drop-shadows?
      And
      <a
        href="http://miksovsky.blogs.com/flowstate/2010/08/lessons-switching-our-web-ui-from-stock-fonts-to-a-proprietary-font.html"
        >embedded fonts</a
      >? And <a href="http://www.20thingsilearned.com">single-page applications</a>?
      And increased standardization? Those things are all revolutionary!” Yes, they
      are—and all those things were possible before HTML5.
    </p>

    <p>There are however, some very important second-order benefits of HTML5:</p>

    <ol>
      <li>
        HTML5 provides a useful shorthand for “modern web browser”. All I really
        need to pull off most of Cozi’s current feature designs is a fast JavaScript
        engine and CSS3. Those things are independent of HTML5 — but chances are
        that if someone claims their browser supports HTML5, it <em>also</em> sports
        a fast JavaScript engine and CSS3 support. So even though Cozi may not care
        about HTML5, the term “HTML5” provides a great proxy for the things we
        <em>do</em> care about.
      </li>
      <li>
        The relentless repeating of the HTML5 buzzword may have the beneficial
        side-effect of finally giving consumers a way to evaluate whether, for
        example, the latest mobile phone they’re considering buying is going to
        provide them a good browsing experience. “I’ve heard that I need HTML5. Does
        this phone has HTML5?” It doesn’t matter that the literal interpretation of
        the question is probably not what the consumer cares about; the question’s
        answer may still give the user what they want. We might finally see
        consumers and IT departments wake up and jettison their ancient copies of IE
        in favor of a modern browser on a reasonable upgrade cycle.
      </li>
    </ol>

    <p>
      Of course, I’m sure there are many web applications that will directly benefit
      from HTML5 in ways that completely change their business. They must be very
      happy. For now, my company probably isn’t one of those beneficiaries. Still,
      the above second-order effects of HTML5 might eventually allow me to deliver a
      better user experience to more users. If that means reducing HTML5 to a
      buzzword, I’m all for it.
    </p>
  2010-11-23 Presentation "UX Design at a Startup".html: >
    ---

    title: 'Presentation: "UX Design at a Startup"'

    date: 2010-11-23

    slug: presentation-ux-design-at-a-startup

    originalUrl: https://miksovsky.blogs.com/flowstate/2010/11/presentation-ux-design-at-a-startup.html

    ---


    <p>
      This past September, I was invited to present a short 20 minute talk on user
      experience design at the StartupDay 2010 conference in Bellevue, WA. This is a
      nice bootcamp event for nascent entrepreneurs—a single day touching on every
      aspect of starting a company, from finding cofounders, identifying an
      audience, searching for a business model,&#0160;getting funding, ... all the
      way to potential exits.
    </p>

    <p>
      Since the vast majority of the audience were engineers and business types
      (i.e., not designers), I focused on the topic: What should user experience
      design at a startup look like to a founder or executive?
    </p>

    <p>
      <a
        href="http://www.seattle20.com/tv/clip/StartupDay-2010-Design-for-Startups-by-Jan-Miksovsky-1.aspx"
        target="_self"
        alt="Video"
        >Video</a
      >&#0160;(took me a while to find my groove; things pick up around 03:00)
    </p>

    <p>
      <a
        href="http://www.slideshare.net/JanMiksovsky/startupday-2010-design-at-a-startup"
        target="_self"
        alt="Slides"
        >Slides</a
      >&#0160;(not&#0160;much text, might be interesting where the slides in the
      video are too hard to make out)
    </p>
2010-12:
  2010-12-10 A fun photo collage Facebook app that was fun to create.html: >
    
    ---

    title: "A fun photo collage Facebook app that was fun to create"

    date: 2010-12-10

    slug: a-fun-photo-collage-facebook-app-that-was-fun-to-create

    originalUrl: https://miksovsky.blogs.com/flowstate/2010/12/a-fun-photo-collage-facebook-app-that-was-fun-to-create.html

    ---


    <p>
      Ever since I wrote the first version of the
      <a href="http://www.cozi.com/Photo-Screensaver.htm"
        >Cozi Collage photo screen saver</a
      >
      in 2005, I’ve been itching for the chance to port it from Windows to the web.
      Things that were only possible on a desktop client five years ago — access to
      user photos, animated transition effects — are now trivial in a web app. A
      quick attempt to generate photo collages from Facebook photos led to an idea:
      what if you could condense an entire year’s worth of interesting moments in
      your friends’ lives into a 3 minute video showing Cozi-style photo collages
      set to music?
    </p>

    <p>
      This seemed like a fun year-end project for the holiday season, when people
      are inclined to take a look back at the past year. A Cozi colleague joined me
      in bringing the idea to fruition, and we released the app earlier this week.
      The result is
      <a href="http://garage.cozi.com/collage/">The Year in OUR Pictures 2010</a>.
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20148c6962428970c-pi.png"
        alt="The Year in OUR Pictures 2010"
      />
    </p>

    <p>
      I thought this came out pretty neat myself. The experience of creating this
      was itself&#0160;fun and interesting, so I thought I’d share some highlights
      and lessons.
    </p>

    <ol>
      <li>
        The Facebook Graph API is awesome. I worked on a Facebook app just about a
        year ago using their older JavaScript SDK, and it was a complete pain (you
        couldn&#39;t easily develop on localhost, etc.). The new API is
        straightforward and easy to use. In particular, it was a joy to discover
        that Facebook can return data via JSONP in exactly the right way to be
        consumed by jQuery’s AJAX functions. The result of this was that the entire
        application is comprised entirely of static web resources and client-side
        code. The app entails no code running on Cozi’s servers, which makes it
        highly scalable. All the heavy pounding to get photos happens on servers
        that belong to <em>Facebook</em>. (Thanks, guys!)
      </li>
      <li>
        The first time the user clicks on one of the video thumbnails (above),
        they’re presented with a Facebook permissions dialog. We were pretty
        concerned about the degree of fall-off we’d see at that point. We crafted a
        bunch of language for the above screen intended to prepare the user for the
        Facebook permissions dialog. (“When you click the button above, you’ll see a
        dialog from Facebook…”) We ultimately concluded that this sort of text
        wouldn’t help. People weren’t likely to read it, and there didn’t seem to be
        any wording we could put in that would <em>increase</em> the number of
        people successfully getting through the dialog. As it turns out, the vast
        majority of visitors are making past the Facebook permissions dialog with no
        preparation. This is great for us and lets us keep the above introduction
        very clean.
      </li>
      <li>
        The whole user interface is created in jQuery and&#0160;<a
          href="https://quickui.org"
          target="_self"
          >QuickUI</a
        >, which let us move extremely quickly. It was great to have a QuickUI
        library of general-purpose&#0160;JavaScript/CSS-based UI&#0160;components
        that already worked in all browsers, so we could just drop them in and focus
        on the experience. And being able to refactor UI classes cleanly kept things
        stable even as we iterated quickly.
      </li>
      <li>
        Today’s web browsers rock. The original Cozi Collage screen saver has a
        drop-dead simple crossfade animation between collage slides
        &#0160;implemented in DirectX. That simple, stupid DirectX crossfade cost us
        days and days of development time. No matter how we coded it, the
        hardware-accelerated transition was only as good as the user’s video card
        driver — which is to say, we could always find someone whose machine would
        crash when running the screen saver. The current state of browser rendering
        engines and JavaScript engines is such that we can make simple jQuery
        fadeIn/fadeOut calls that work reasonably well everywhere. (Oh: To move
        quickly, we completely ignored IE 7. Good riddance.)
      </li>
      <li>
        We were excited to use the HTML5 audio tag. (Hey, we wanted to join the
        <a href="http://miksovsky.blogs.com/flowstate/2010/11/html5-buzzword.html"
          >HTML5 bandwagon</a
        >.) However, for backward compatibility with IE 8, we also included a
        standard Flash audio player. We ran into a puzzling JavaScript error, and
        eventually learned there are
        <a
          href="http://groups.google.com/group/jquery-en/browse_thread/thread/58a9cbc1068d28c0/eb4bedb2cc36b126?pli=1"
          target="_self"
          >issues using jQuery to insert HTML5 tags into IE 8</a
        >.
      </li>
      <li>
        The music completely makes this user experience what it is. It was a delight
        to discover Wikimedia Commons’ extensive catalog of freely usable
        <a href="http://commons.wikimedia.org/wiki/Category:Ogg_sound_files"
          >audio files in the Ogg format</a
        >&#0160;so we could find music that was both appropriate and free.
      </li>
      <li>
        The volume of information posted by Facebook friends is literally
        overwhelming. Even if your best friend posts a photo album of people you
        care about, the chances are very high you’re not going to see it because it
        will be quickly buried below the “Older posts” fold. The most common
        reaction to seeing a slideshow of friends’ pictures is: “I never saw any of
        these”.We’ve discovered that people really enjoy posting photos of food,
        cats, and weird signs.
      </li>
      <li>
        People are more narcissistic than we’d imagined. It’s our observation that
        most people have a more interesting experience if they click the option to
        see a slideshow of “Your friends’ pictures”. However, they’re more likely to
        <em>share</em> the experience if they click the option to see their own
        pictures. Since we want people to share this, we moved the “Your pictures”
        option to be first, where it gets the most clicks.
      </li>
      <li>
        The one thing I’d wish we could get via the Facebook Graph API that is a
        list of friends sorted by Facebook’s own magic friend-weighting algorithm.
        With no way to evaluate the <em>quality </em>of a friend relationship, the
        end user’s experience is something of a crapshoot. If the user has liberally
        accepted all Facebook friend requests (or they’re just really unlucky and
        our algorithm happens to pick their least-favorite friends), they’ll see a
        bunch of people they don’t even know, and they’ll have a lousy experience.
      </li>
      <li>
        On the other hand, when this thing works, it really works. If someone’s been
        parsimonious in accepting Facebook friendships (or they get very lucky, and
        our algorithm happens to pick their best friends), they’ll see a bunch of
        photos of people they care about celebrating meaningful moments of the past
        year: a birth, a vacation, a wedding. And the music can get people into a
        contemplative mood. (We’ve been using Debussy’s
        <a
          href="http://commons.wikimedia.org/wiki/File:Claude_Debussy_-_clair_de_lune.ogg"
          >Clair de Lune</a
        >, but are thinking of switching to a shorter piece.)
      </li>
    </ol>

    <p>
      One person wrote me to tell me that watching this made them choke up and cry.
      Wow. I’ve worked on Microsoft Windows, which has probably made a lot of people
      cry. But I’ve never before written a piece of software that made someone cry
      for joy.
    </p>

    <p>
      Anyway,
      <a href="http://garage.cozi.com/collage/">take a look for yourself</a>.
    </p>
  2010-12-20 What designing a user interface shares with creating a puzzle.html: >
    
    ---

    title: "What designing a user interface shares with creating a puzzle"

    date: 2010-12-20

    slug: what-designing-a-user-interface-shares-with-creating-a-puzzle

    originalUrl: https://miksovsky.blogs.com/flowstate/2010/12/what-designing-a-user-interface-shares-with-creating-a-puzzle.html

    ---


    <p>
      At various points in my adult life, I’ve taken up the challenge of creating
      puzzles for other people to solve, generally in the context of fairly
      elaborate treasure hunts created for friends or my children. A relative of
      mine recently observed the contrast between designing such puzzles and
      creating user interfaces. I’d never really considered how these activities are
      similar; ultimately they’re both examples of experience design. The
      interesting thing to me is that they both involve careful consideration of
      progressive disclosure — in one case hard-won, while in the other case, it
      should be effortless.
    </p>

    <p>
      User interface designers often concerned themselves with what they call the
      initial user experience: the sequence of actions they expect a new user to
      take in, say, the first ten minutes of using a product. Similarly, a puzzle
      designer gives careful consideration to the alternating sequence of bafflement
      and insights they hope the solver will experience. Both design tasks require
      consideration of the audience’s abilities and especially motivation, which in
      turn establishes a timeframe.
    </p>

    <p>
      Take, for example, a simple puzzle I created for Hope2Die, the 1996
      installation of
      <a href="http://en.wikipedia.org/wiki/The_Game_(treasure_hunt)">The Game</a>
      in Seattle. Treasure hunts for The Game entail something like 18-20 puzzles
      over 24 hours, including driving time between locations, and the time required
      to solve the puzzle. This leaves about 15-45 minutes for actual puzzle solving
      time. The audience is a set of 10-20 teams, which are highly motivated by the
      desire to outperform their peers. They have free access to technological
      tools, including the Internet, in solving a puzzle.
    </p>

    <p>
      In this case, game teams found the following card (in a burned-out building, I
      believe, although that’s not relevant to solving the puzzle):
    </p>

    <p>&#0160;</p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20148c6d6acaa970c-pi.png"
        alt="Hope2Die Clue"
      />
    </p>

    <p>&#0160;</p>

    <p>
      The hope2die text on the card is simply a logo. Likewise the “PW” is just an
      indicator that the clue will produce a password to unlock the next clue — in
      that day and age, on a CD-ROM each team had received. The title and body text
      constitute the puzzle.
    </p>

    <p>The experience I’m looking for goes something like this:</p>

    <ol>
      <li>First reading. Bafflement.</li>
      <li>
        Attempts to interpret the clue as simply as possible. (Here, trying to make
        sense of the text as English words.) A tiny bit of frustration, but reader
        was expecting — or desiring — it, so this really leads to satisfaction.
      </li>
      <li>The search of patterns. Confidence, crumbling to frustration.</li>
      <li>
        Opening the set of possible interpretations. New but dwindling hope with
        each, wilder, idea.
      </li>
      <li>
        Catching hold of something that seems significant; identification of a
        hypothesis. Faint hope.
      </li>
      <li>
        Initial testing of the hypothesis (applying it to a few cases; here, words).
        Anxiety about whether this will work, turning to excitement as each result
        doesn’t disqualify the hypothesis.
      </li>
      <li>First intelligible results. Complete elation.</li>
      <li>Complete application of the confirmed theory. Satisfaction.</li>
      <li>
        In many cases, the puzzle has more than one layer, in which case this
        process repeats.
      </li>
    </ol>

    <p>
      Some nice parts of this puzzle: The word “BeAm” here turned out to
      coincidentally reference the next clue. The password obtained by solving the
      puzzle produced the surprisingly short and vague instruction to simply “Go to
      Redmond” (Washington). This didn’t seem to be nearly enough specific
      information to get teams to the next clue. It was early evening as the teams
      approached the town of Redmond — where they saw green lasers shooting into the
      sky from the location of the next clue. The password itself was also fun to
      select, being the longest interesting one I could construct given the puzzle’s
      mechanics, and one consistent with the over-the-top tone of the game show
      theme in this particular Game.
    </p>

    <p>
      The real challenge in designing a puzzle like this is trying to get
      <em>everyone</em> through it in somewhere between 15 and 45 minutes. It’s easy
      to make something that looks like a puzzle but is, in fact, trivial. It’s also
      not that hard to make a puzzle that’s impossible — that requires either
      time-consuming brute force, or some completely wild conceptual leap for which
      the puzzle offers insubstantial support. The puzzle needs to resist easy
      solution, then yield upon sustained effort. Some individuals will see the
      solution to the above puzzle instantly; others will need a full-team effort
      for the full time.
    </p>

    <p>
      Over and over again, I keep asking myself: Is this puzzle going to be fun to
      solve? I’m just a dilettante puzzle designer, so in a case like The Game, I
      feel satisfied if the puzzle simply keeps hyped-up teams in the flow of the
      event. This felt like the right puzzle for the right place in the treasure
      hunt. In the end, it was part of a sustained sequence of about 5 hours’ worth
      of puzzles and activities that were, by all accounts, interesting, and for
      many the highlight of the game.
    </p>

    <p>
      Designing a puzzle requires controlling that progression of understanding so
      that it unfolds at just the right pace to produce the intended experience.
      Designing a user interface is the same: the user’s understanding needs to
      unfold at just the right pace to produce the intended experience. Unlike a
      puzzle, a UI needs to look simple, interesting, and useful at the very first
      glance. In the next few minutes, it needs to show the user everything they
      <em>think</em> they might want to do, while still not overwhelming them. And
      then it needs to tuck a bunch of rarely-used stuff away somewhere where the
      user won’t even notice it until the day, maybe months later, when they
      suddenly need it and think to look for it. The emotional experience needs to
      balance the sense of potential power and possible mastery with delight and
      instant accomplishment.
    </p>

    <p>Pulling that off, of course, can be quite a puzzle.</p>

    <p>
      <em
        >[If you’ve found the solution to the puzzle, feel free to offer it, or
        perhaps a hint, as a comment.]</em
      >
    </p>
2011-01:
  "2011-01-10 Are wireframes, paper prototypes, and other design outputs simply reflections of the cost of developing a real UI.html": >
    
    ---

    title: "Are wireframes, paper prototypes, and other design outputs simply reflections of the cost of developing a real UI?"

    date: 2011-01-10

    slug: design-outputs-as-reflections-of-the-cost-of-developing-ui

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/01/design-outputs-as-reflections-of-the-cost-of-developing-ui.html

    ---


    <p>
      I wonder how much of the current design process would go away if building
      real, functioning, deployable UI code were cheap and easy.
    </p>

    <p>
      The conventional wisdom of the UI design industry generally espouses a process
      in which a design proceeds through a series of increasingly sophisticated
      representations: starting with hand-drawn sketches, then wireframes, paper
      prototypes, simple interactive prototypes, and finally high-fidelity images
      (often PhotoShop) or movies showing the desired result. Most of these outputs
      are often completely static or otherwise reduced (less than fully functional)
      representations of the desired result. Much of them are thrown away when the
      real coding begins. Are those steps really necessary, or are they just a way
      to minimize the risk of spending time and money building the wrong UI?
    </p>

    <p>
      Over the last two years, my own design process has changed radically. In 2006,
      in a post titled
      <a href="http://miksovsky.blogs.com/flowstate/2006/10/using_crude_ske.html"
        >Matching design sketches to the desired level of design feedback</a
      >, I outlined a fairly standard design process that started with hand-drawn
      sketches and proceeded from there. At that time, I felt that it was vital to
      receive critical feedback on a design concept before it got too far along.
      That post offers two reasons to recommend that practice:
    </p>

    <ol>
      <li>
        A minimalistic representation of the UI focuses reviewer attention on deep
        content instead of surface details.
      </li>
      <li>
        People feel more comfortable criticizing a crude representation of the UI
        because they assume it didn’t take long to create, and so they won’t be
        asking you to waste too much investment if you have to throw it away.
      </li>
    </ol>

    <p>
      The post does not mention a third, implicit reason I created sketches:
      developing a real, functioning UI was, in comparison, at least two orders of
      magnitude more costly. I could sketch in one hour’s time enough UI complexity
      to consume several weeks of an engineer’s time. Worse, the cost (to the
      designer) of a design change often has a non-linear relationship to the cost
      (to the engineer) of the implied architectural change. Pixels can be pushed
      around like so much fingerpaint; changing real UI code can be like trying to
      the change the framing for a house. Once you pick an architectural direction,
      you may not be able to simply change your mind without tearing it all down and
      starting over.
    </p>

    <p>
      Surely that’s not a given, however. Surely someday we’ll have dev tools that
      let us tinker with the whole UX stack as easily as we tinker with pixels in
      PhotoShop. It’s not even like a computational breakthrough is required for
      that to happen—all that’s probably necessary is a much, much better model for
      the UI, and a corresponding set of tools.
    </p>

    <p>
      So assuming we someday <em>do</em> have better coding tools that let even
      fundamental design decisions be reconsidered at any stage—what would our
      design process look like <em>then</em>? Would we really still have wireframes
      and paper prototypes and all?
    </p>

    <p>
      It’s not too hard to imagine all the paper stuff going away. If you could
      write real code as fast as creating a paper prototype, why bother with
      something that’s not as close as possible to the final UX? Static wireframes
      probably go too, for the same reason. It does seem like there still might be a
      point to creating stripped-down representations of a UI to focus user
      attention more on the content of the interaction (point #1 above), although
      even that I wonder about.
    </p>

    <p>
      Let’s assume you had the UI componentry to quickly assemble a UI whose very
      first representation already looked drop-dead gorgeous. Who’s to say that
      you’d get more meaningful results by showing users something less than
      beautiful? And, if that really were the case, would people still bother to
      create stripped-down UIs that looked like they were drawn on napkins
      (something deliberately crude, to hit point #2 above)? If everyone knew you
      could whip out something amazing in an hour, surely they’d recalibrate their
      reluctance to give you their honest opinion. And, ultimately, wouldn’t the
      whole idea of reviewing a UI change radically, moving away from off-the-cuff
      reactions to PowerPoint presentations in a conference room and more about
      watching the real performance of real users test-driving a real UI?
    </p>

    <p>
      I can’t wait for that day. Although such tools still aren’t here yet, my
      design process these days focuses a great deal more on UI coding at the very
      earliest stages, with an eye towards creating something interactive right away
      and refining from there. I’ll try to cover that process in more in detail in a
      separate post.
    </p>
  2011-01-17 Custom context menus always forget to support right-clicking *on* the context menu.html: >
    
    ---

    title: "Custom context menus always forget to support right-clicking *on* the context menu"

    date: 2011-01-17

    slug: custom-context-menus-always-forget-to-support-right-clicking-on-the-context-menu

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/01/custom-context-menus-always-forget-to-support-right-clicking-on-the-context-menu.html

    ---


    <p>
      Most users I see these days know they can use the right mouse button (or, if
      you’re being picky, the secondary mouse button) to produce a context menu.
      Essentially all creators of operating systems and UI frameworks (for platforms
      with mice) allow for this behavior. An interesting question is what happens
      when the user, having produced a context menu,
      <em>right-clicks again on the context menu itself</em>.
    </p>

    <p>
      This isn’t odd at all to see in practice. For one thing, there are plenty of
      “right-click people” who habitually right-click on anything. And even for
      users who understand the difference between a left and right click, it’s
      fairly natural to inadvertently use the right mouse button twice in close
      succession to first invoke a context menu and then, in the next second, to
      select a command from that menu.
    </p>

    <p>
      Microsoft Windows and Apple OS/X both handle this gracefully: right-clicking
      on a context menu command has the same effect as left-clicking the command.
      This behavior lets people who aren’t playing very close attention to which
      mouse button they’re clicking to still get what they want. The user can click
      with the right-mouse button to get the menu, and then immediately right-click
      again to select a command. (I’ve personally found this behavior worth
      exploiting; it feels faster to select context menu commands more quickly with
      two right clicks than a right and then a left click.)
    </p>

    <p>
      This right-click-on-a-menu behavior is an example of a behavior that
      distinguishes long-time UI platforms from application UI creators that think
      they know better than the platform—or haven’t studied the platform closely
      enough. Virtually every application with custom context menus I’ve found fails
      to implement this behavior.
    </p>

    <p>
      Case in point: Microsoft Office 2010, which should know better. I could have
      sworn they had this right at some point, but this knowledge was probably lost
      during the creation of their 19th proprietary UI framework. And if Office got
      this wrong, it&#39;s no surprise that most other apps with custom context
      menus get this wrong too. Generally, right-clicking on a context menu in such
      an application has no effect, which isn’t what the user wanted, but at least
      no harm is done.
    </p>

    <p>
      It’s worse in the case of web application that override the browser’s context
      menu to provide their own context menu. The user gets seriously confused when
      the browser’s context menu comes up
      <em>on top of the custom context menu:</em>
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20147e19401f7970b-pi.png"
        alt="Right Click on Context Menu"
      />
    </p>

    <p>
      Now, there&#39;s a small chance that the browser&#39;s context menu is left
      active by design; i.e., that a standard context menu on a custom context menu
      actually provides some value. Say, the custom context menu provides a plain
      hyperlink, and the user wants to be able to right-click on the link to copy
      the link&#39;s address. However, that rarely seems to be the case with most
      custom context menus. It seems more likely the implementors just didn&#39;t
      consider this scenario.
    </p>

    <p>
      This whole situation isn&#39;t a big deal, but it’s precisely small details
      like this that prove the value of relying on the OS (or a mature UI platform)
      to provide stock control behavior. Most people assume that stock controls like
      menus,&#0160;scroll bars, and combo boxes can’t be <em>that</em> hard to
      implement, failing to appreciate the years of hard usability learning baked
      into the platform.&#0160;If you do have to roll your own context menus,
      consider whether you could save your users a bit of confusion by taking the
      time to get this right.
    </p>
  "2011-01-24 Once a routine animation has made its point, speed it up.html": >
    
    ---

    title: "Once a routine animation has made its point, speed it up"

    date: 2011-01-24

    slug: speed-up-routine-animations-once-theyve-made-their-point

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/01/speed-up-routine-animations-once-theyve-made-their-point.html

    ---


    <p>
      As animations make their way into more user interfaces, many applications
      would benefit from a simple trick: speeding up routine animations after the
      user has had a chance to digest the animation’s message.
    </p>

    <p>
      An interesting and fairly thorough
      <a href="http://msdn.microsoft.com/en-us/library/aa511285.aspx"
        >Animations Overview</a
      >
      from MSDN describes several different reasons for using animation in a user
      interface “to give feedback, preview the effect of an action, show the
      relationship between objects, draw attention to change, or explain a task
      visually.” More and more applications are using animations for these purposes
      as web UI frameworks like jQuery and mobile platforms have made implementing
      such animations trivial.
    </p>

    <p>
      Occasionally one can come across an animation that’s elegant and informative
      the first time one sees it, but which eventually gets tiresome. I’ll use the
      otherwise excellent Windows Phone 7 home screen as a case in point. I’ve been
      trying a Samsung Focus phone with the Windows Phone 7 OS for the past couple
      of weeks, and in general I think it’s 80% awesome. (I wish the Facebook app
      were faster; it needs a Google Reader app as good as Reeder; it needs backup
      and restore; and the phone’s browser is an abomination.) In its favor, the
      <a href="http://en.wikipedia.org/wiki/Metro_UI">Metro User Interface Style</a>
      is elegant to a revolutionary degree. Windows Phone 7’s clean UI makes Apple’s
      iOS look kitschy and cluttered.
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20148c7ecc42a970c-pi.png"
        alt="Windows Phone 7 Phone"
      />
    </p>

    <p>
      The Windows Phone 7 home screen plays a quick animation when you tap on an app
      tile (the squares above). The tiles on the page all flip away, but the tile
      you tapped on lingers just a fraction of a second longer to confirm what app
      you’re about to see. This is all quite elegant and subtly informative. It also
      gets old fast.
    </p>

    <p>
      If you launch, say, the email client, it will play its own beautiful
      animation. When you navigate back to the home screen, you see both animations
      again in reverse. To slip between two email accounts via the home screen, you
      see four separate animations: email closing, home page resuming, home page
      launching app, email app opening. These short animations add up, and start to
      grate. You already understand their point, and each additional playing of the
      animations just beats that point into the ground.
    </p>

    <p>
      A quick cure for a situation like this is to speed up the animation. You can
      play a fairly long one second animation the first time, play it for only half
      a second the next time, then a quarter second, and thereafter either leave a
      residual high-speed animation or drop it altogether.
    </p>

    <p>
      Here’s a simple example. Cozi’s family calendar has a toolbar at the top with
      a text entry area in which the user can type new appointments in natural
      language. This text entry area is normally shown in a collapsed state to save
      space:
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20148c7ecc459970c-pi.png"
        alt="Cozi Calendar Toolbar Animation 1"
      />
    </p>

    <p>
      When the user starts typing, or explicitly clicks in the text entry area, the
      area transitions to an expanded state:
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20148c7ecc492970c-pi.png"
        alt="Cozi Calendar Toolbar Animation 2"
      />
    </p>

    <p>This transition has four components:</p>

    <ol>
      <li>
        The text area gains a box around it. This lets the user know they can type.
      </li>
      <li>
        The text area grows wider. This gives the user more room to type long
        appointments. The area animates from its original narrow width to the full
        width of the main page area. This animation lets the user know that the
        narrow text area and the wide text box are, in fact, the same thing. The
        user can infer that this wide box has the same intent (“Type appointment”)
        as the original narrow area.
      </li>
      <li>
        A white layer over the rest of the toolbar controls animates from fully
        transparent to semi-opaque. This helps make the wider text area stand out,
        and suggests a quasi-modal state. Again, the animation orients the user;
        they understand that the faded controls are the same ones they were looking
        at a second ago, only now those controls are not relevant.
      </li>
      <li>
        Additional controls appear(“X” for cancel, “What can I type”?) which are
        specific to this modal state.
      </li>
    </ol>

    <p>
      The animation of the text box’s width (#2) and the background opacity (#3) run
      concurrently for a short duration. We wanted the animation to be visible to
      new users so they could visually parse what was happening. However, it turns
      out that text entry is not possible until the animation completes, so a long
      animation will not only get tedious, it will slow the user down. (And even if
      the user could type while the animation was running, most people would
      probably wait for the animation to finish before starting to type.)
    </p>

    <p>
      So the compromise is this: the first time the user triggers the animation, it
      runs for 600 milliseconds (i.e., 6/10 of a second). Thereafter, the animation
      runs for only 200 milliseconds (three times as fast). This simple speeding-up
      seems to work well in practice. Users appear to successfully understand the
      animation’s message, and at the same time we’ve never heard complaints that
      the animation is slow or gets in the way.
    </p>

    <p>
      Going back to Windows Phone 7, that team seems have lavished so much attention
      on their UI,&#0160;let’s give them the benefit of the doubt, and assume that
      they not only thought about speeding up their routine animations, but had a
      good reason&#0160;<em>not</em>&#0160;to&#0160;do that here. Perhaps switching
      an app takes a couple of seconds no matter what, and the animations at least
      give you something to watch while that’s happening in the background. In which
      case, this solution might not have helpful in this particular case.
    </p>

    <p>
      In general, though, this is such a simple trick that it’s worth adding to your
      bag of tricks in anticipation of the next time you&#0160;want to add an
      animation users will see all the time.
    </p>
2011-02:
  2011-02-07 Placebo controls make implicit actions explicit.html: >
    
    ---

    title: "Placebo controls make implicit actions explicit"

    date: 2011-02-07

    slug: placebo-controls-make-implicit-actions-explicit

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/02/placebo-controls-make-implicit-actions-explicit.html

    ---


    <p>
      My
      <a
        href="http://miksovsky.blogs.com/flowstate/2011/01/speed-up-routine-animations-once-theyve-made-their-point.html"
        >last post</a
      >
      referenced the toolbar in Cozi’s
      <a href="http://www.cozi.com/Family-Calendar.htm">family calendar</a> for
      entering appointments in natural language. Interestingly, the toolbar’s little
      “X” button for cancelling appointment entry is something of a placebo
      control—it’s not strictly necessary, but nevertheless improves usability:
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20148c855db61970c-pi.png"
        alt="Cozi Calendar Toolbar Animation 2"
      />
    </p>

    <p>
      It turns out that the user can implicitly cancel appointment entry and close
      the toolbar by clicking <em>anywhere</em> on the page outside the highlighted
      box. They can also press the ESC key. These mechanisms seem to suffice when
      the text box is empty; the user figures they can click outside the box to
      close it, and discovers that does exactly what they want.
    </p>

    <p>
      However, once the user enters some appointment text, the stakes for a mistake
      increase. In that state, it’s not at all clear whether clicking outside the
      box will save the appointment or throw it away. By offering a little “X” close
      box, the user can see a clear, explicit means of cancelling the appointment,
      and can be confident that a click on that control will produce the expected
      result.
    </p>

    <p>
      Here both the implicit and explicit means of closing the toolbar feel
      necessary to me. The implicit means isn’t clear enough when it really matters,
      and the explicit means feels too demanding in the common case where the user
      is just clicking around to explore the product. A casual click inside the
      toolbar produces the state shown above, and a click outside cancels that
      state. So both mechanisms play a useful role.
    </p>
  2011-02-14 Users are better at adapting features to their idiosyncratic needs than inexperienced designers realize.html: >
    
    ---

    title: "Users are better at adapting features to their idiosyncratic needs than inexperienced designers realize"

    date: 2011-02-14

    slug: users-are-better-at-adapting-features-to-their-idiosyncratic-needs-than-inexperienced-designers-realize

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/02/users-are-better-at-adapting-features-to-their-idiosyncratic-needs-than-inexperienced-designers-realize.html

    ---


    <p>
      A common instinct I’ve observed in inexperience designers is a desire to
      overly complicate a new feature based on their own expectations about how
      perfectly suited the feature needs to be to a wide range of scenarios. In
      fact, users constantly surprise me with their ingenuity at adapting basic
      features to cover their idiosyncratic needs.
    </p>

    <p>
      I recall a user who built an organization chart in a very early version of
      Microsoft Excel (the only productivity app they really knew) by entering
      employee names in cells—and then carefully&#0160;<em
        >drawing connecting lines with cell borders</em
      >
      for cells in between. On Microsoft Money, I saw users employ Money’s
      general-purpose system of accounts and categories to track a bewildering array
      of financial instruments and personal financial arrangements. As time goes on
      and an application’s user base grows, the feature set can expand into the long
      tail of specialized needs. But in the beginning, users find all kinds of ways
      to make do with what they’ve got.
    </p>

    <p>
      Cozi’s own UI contains a basic household settings page for defining the
      <a href="http://miksovsky.blogs.com/flowstate/2006/10/asking_for_firs.html"
        >names</a
      >
      of each family member. Early pre-release builds of the product allowed a
      family to define two primary adults at the head of the household, followed by
      a list of children. This definition of a family might cover many households,
      but it obviously couldn&#39;t represent every family. This didn’t cover a
      grandparent or other relation that lived with the family, nor did this
      arrangement handle divorced families. We debated whether to add more UI
      complexity to better model a wider range of families before shipping.
    </p>

    <p>
      In the end, we launched with this basic definition of a family, and it turned
      out that many families had no trouble adapting it to their needs. Users were
      quick to realize the shortcomings of the UI, but just as quick to realize that
      the list labeled “children” imposed no real functional restriction against
      entering adults. So while it wasn’t ideal to describe a grandparent as a
      “child”, the family could still accomplish their objective of tracking the
      grandparent’s schedule in the family calendar. A surprising number of families
      went further, entering their dog or cat (or horses!) as family members.
    </p>

    <p>
      Where the UI didn’t explicitly cover the users’ needs, they improvised. This
      makeshift arrangement was functionally acceptable for those families, and
      allowed to Cozi to deliver value to them sooner than if we had had to postpone
      the release until we could explicitly cover a wider range of cases. It’s that
      value, in fact, that caused users to put up with the need for adaptation.
    </p>

    <p>
      Cozi’s household data model remains essentially the same today, although we
      have responded to user feedback by relabeling the list of children:
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e2014e5f28e384970c-pi.png"
        alt="Cozi - About your household"
      />
    </p>

    <p>
      The current label for the list of additional household members is “Children,
      other adults, and busy pets!” With that change, we essentially recognized,
      accepted, and formalized the adaptation our users were already making. (The
      “busy pets!” bit took some time to settle on. We wanted to encourage families
      who were inclined to count pets as family members to do so. However, simply
      saying “pets” would suggest to families that they needed to record every fish
      or hamster they owned, even if those pets never had vet appointments or
      otherwise appeared on the calendar. Hence, “busy pets”. We wanted to be clear
      that this was somewhat tongue-in-cheek, and considered adding a smile
      emoticon, but that seemed to trivialize the UI. The exclamation mark seemed to
      strike the right balance of playfulness and utility.)
    </p>

    <p>
      In the end, it turned out that having, for example, a separate section of the
      settings page for other adults was not strictly necessary; the common
      adaptation proved sufficient.&#0160;We’ll continue to evolve Cozi’s definition
      of a family (to, say, handle divorced families), but for now this seems to be
      good enough for many, many families.
    </p>

    <p>
      In general, I think it’s a sound strategy to assume that a user who wants to
      make your product work for them will find ways to do so. You’re best off
      shipping the simplest thing that could possibly work, seeing how people use
      it, then evolving the design from there.
    </p>
  "2011-02-21 Stop abusive task list UIs highlight imminent tasks, not overdue ones.html": >
    
    ---

    title: "Stop abusive task list UIs: highlight imminent tasks, not overdue ones"

    date: 2011-02-21

    slug: stop-abusive-task-list-uis-highlight-imminent-tasks-not-overdue-ones

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/02/stop-abusive-task-list-uis-highlight-imminent-tasks-not-overdue-ones.html

    ---


    <p>
      Most task list management applications abuse their users by displaying overdue
      tasks in red text. The original, noble intent is to use red, a highly
      noticeable color, to draw the user’s attention to a task they must have missed
      so that they can take immediate corrective action. The reality (as best as I
      can determine it) is that tasks usually fall overdue for reasons that have
      nothing to do with the user’s lack of attention.
    </p>

    <p>
      For example, a person might assign an arbitrary due dates to a task, in the
      belief that this self-imposed deadline will goad them into action.
      Unfortunately, since the person is well aware the date is completely
      arbitrary, when that date arrives, there’s no reason they can’t push the task
      out one more day. A sort of personal time management mathematical induction
      kicks in: day after day, the task can be pushed out one more day,&#0160;<em
        >ad infinitum</em
      >.&#0160;The person will likely leave the original deadline untouched—why
      bother? Even if they assign a new date, that date will also be arbitrary, and
      time will eventually catch up to the new date as well. The inevitable result,
      for all but the most disciplined user, is a sea of red ink:
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20147e2abf781970b-pi.png"
        alt="Outlook To Do List"
      />
    </p>

    <p>
      This is software UX at its soul-crushing worst. One technique for evaluating a
      UX design is to imagine a human being performing the same task
      <em>and&#0160;in the same manner</em> as the software. So ponder the question:
      who would want a personal assistant who behaved like this? Someone who was
      utterly silent about a task until after it was due, and then began ranting:
      “You’re late! <em>You’re late!</em> You’re so completely late! Everything on
      your list is late! You’re pathetic! You can’t get anything done! You’ll
      <em>never</em> get anything done!” No one would put up with this abuse—from a
      person. But millions of people put up with this abuse from software.
    </p>

    <p>
      When Cozi created its initial area for
      <a href="http://www.cozi.com/To-Do-List.htm">To Do lists</a>, I determined to
      avoid this UI and come up with something more humane. I would rather have
      delivered a bare-bones UI that met at least some people’s needs than one which
      purported to meet broader needs, but did so in an obviously terrible way.
      Without time to do better than the above, we shipped our original To Do list
      implementation without support for dates on tasks. As an alternative to
      assigning arbitrary dates, the design allowed people to drag-and-drop tasks to
      prioritize them.
    </p>

    <p>
      Interestingly, when I observed paper To Do lists in user homes, tasks were
      largely free of dates. Penciled dates that did appear were often
      <em>externally imposed</em> deadlines. Those were meaningful, and the users
      knew it. Such dates were probably motivating. Why, then, do people apply
      arbitrary dates so readily in task management software? Probably just because
      there’s a “Due Date” field. The field’s there. They feel compelled to fill it
      in. The abuse ensues.
    </p>

    <p>
      Now let’s reconsider our human personal assistant, and ask how we’d really
      want them to work with us. We want someone who will give useful
      <em>advance </em>notice of a task before it becomes due. This assistant should
      recognize that, if a deadline has passed with a task still incomplete, perhaps
      that’s not the end of the world. Either the task just wasn’t that important,
      or we couldn’t get it done by the original date (and are taking steps to
      remedy the situation already), or we just couldn’t work up the energy to do it
      (but still mean to). Our clever assistant recognizes that can’t know which one
      of these is the case, and takes the most prudent course of action—it shuts up.
    </p>

    <p>
      This line of thinking gave rise to the upgraded To Do lists design which Cozi
      recently deployed:
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e2014e862b7e1f970d-pi.png"
        alt="Cozi To Do List"
      />
    </p>

    <p>Key points:</p>

    <ol>
      <li>
        There’s no Due Date field. For tasks with external deadlines, users can type
        a date anywhere in the text of the task. Cozi parses out the date and
        formats it in bold to confirm recognition.
      </li>
      <li>
        Cozi highlights <em>imminent </em>tasks: tasks due within the next week. The
        yellow highlighter effect is used to draw attention without raising alarm
        (the way red can). The user interface says: “All is well; just pay
        particular attention to these few tasks.”
      </li>
      <li>
        Cozi does absolutely nothing special with overdue tasks. You’ve had a week’s
        notice of the imminent task, so once the date passes, the task&#39;s
        priority is entirely for you to determine.
      </li>
      <li>
        A side effect of the above point is that the the highlighted tasks can’t
        pile up. Because the highlighting gets dropped from past due tasks, the
        overall “volume” at which the task list speaks to you is relatively constant
        from day to day.
      </li>
      <li>
        For extra reference, Cozi puts tasks with dates on your
        <a href="http://www.cozi.com/Family-Calendar.htm">family calendar</a> so you
        can track them there as well.
      </li>
    </ol>

    <p>
      While not perfect, I think it’s a big step forward towards a more humane task
      management UI. If your own application includes any sort of date-based view,
      and it’s currently yelling at users in red text, consider turning down the
      volume on the “overdue” representation and focusing instead on proactive
      highlighting of imminent tasks.
    </p>
2011-03:
  2011-03-07 MaxSquare a fast and simple algorithm for maximizing photo thumbnail sizes.html: >
    
    ---

    title: "MaxSquare: a fast and simple algorithm for maximizing photo thumbnail sizes"

    date: 2011-03-07

    slug: maxsquare

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/03/maxsquare.html

    ---


    <p>
      Is anyone else bothered by photo thumbnails that are smaller than they need to
      be?
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20147e30b7a1d970b-pi.png"
        alt="iPhoto"
      />
    </p>

    <p>
      <span
        >The window above leaves plenty of empty space that could be better utilized
        to show the photos in more detail. Sure, there’s a Zoom slider in the
        toolbar, and I could fiddle with it to find the best zoom level that shows
        all the photos at the largest thumbnail size without forcing the appearance
        of scroll bars. One problem is that this zoom level applies to
        <em>all</em> photo albums, regardless of how many photos a given album has,
        so I have to keep fiddling with it to get the best results for any one
        album. When I switch to a different album with a different number of photos,
        I end up playing with the Zoom again until I’ve got the thumbnails at the
        biggest size that still lets them all fit. Another problem is that, if I
        change the window size at all, I have to play with Zoom yet again.</span
      >
    </p>

    <p>
      <span
        >Virtually all photos apps, including OSes that display photos, work this
        way. Perhaps we’ve had manual Zoom sliders for so long we haven’t
        reconsidered their shortcomings. To me they feel cumbersome—like they’re
        making me do work the app should be able to do on its own. If I can manually
        fiddle with the Zoom slider to make the photos as big as possible and still
        fit all of them (or a good number of them), why can’t the app adjust the
        zoom level for me?</span
      >
    </p>

    <p>
      <span
        >Perhaps the standard Zoom slider is a vestige of a time when dynamically
        scaling photos was slow, so apps (and users) didn’t want to do it that
        often. That’s no longer the case; CPUs and GPUs are such that photo scaling
        just screams these days. </span
      ><span
        >In many situations, and especially for small albums, I think a user would
        prefer to see the photos at the biggest possible size, to make effective use
        of their window real estate. This might not be the case for every user or
        for every app, but surely this would be useful in many cases.</span
      >
    </p>

    <p>
      <span
        >An interesting question is: given an arbitrary canvas size, and a
        collection of <em>n</em> photos with various aspect ratios, how big can
        those photos be shown and still have them all fit? </span
      ><span
        >This turns out to be an issue of how to best divide the screen into
        squares. Squares are generally used to display thumbnails to account for the
        fact that photos have different aspect ratios. The bigger the square given
        to each thumbnail, the bigger the average rendered thumbnail can be. So the
        real question becomes: what grid dimensions (number of rows and columns)
        will divide the canvas into the biggest squares?</span
      >
    </p>

    <p>
      <span
        >This line of thinking led to an algorithm I call MaxSquare which calculates
        the optimal grid size for a collection of <em>n</em> images such that each
        image is allocated the largest possible square cell. It seems to work well,
        and I’d love to see it find some real use.</span
      >
    </p>

    <p>
      <span
        >In that spirit, I’ve put together a MaxSquare
        <a href="https://quickui.org/demos/MaxSquareDemo/?count=12">demo</a> and
        posted the
        <a
          href="https://github.com/JanMiksovsky/quickui/tree/master/site/demos/MaxSquareDemo"
          >source</a
        >. The demo is written in </span
      ><a href="https://quickui.org/"><span>QuickUI</span></a
      ><span
        >, but the core MaxSquare algorithm is in a
        <a
          href="https://github.com/JanMiksovsky/quickui/raw/master/site/demos/MaxSquareDemo/maxSquare.js"
          >standalone JavaScript file</a
        >
        with no dependencies.
        <span
          >The demo is especially fast under Chrome, and works nicely under Firefox
          and Safari as well. (The demo currently doesn’t run in IE; while MaxSquare
          itself performs fine under IE, the demo’s use of jQuery.get seems to have
          trouble retrieving the sample photos from Flickr.)</span
        ></span
      >
    </p>

    <p>
      <span
        >Once you’ve opened the demo, resize the browser window to see the photos
        automatically zoomed to use the available space. You can also adjust the
        “count” parameter on the URL to view a smaller or larger number of photos.
        E.g., enter count=24, and as you resize the browser, you can watch the
        column and row dimensions jump between the various factor pairs of 24 (8x3,
        6x4, etc.).</span
      >
    </p>

    <p>
      <span
        >To walk through some examples: Given a window with a 2:1 aspect ratio and
        twelve photos (drawn from Flickr’s </span
      ><a href="http://www.flickr.com/explore/interesting/7days/"
        ><span>Interestingness</span></a
      ><span> set), MaxSquare renders the photos in a 6x2 grid:</span>
    </p>

    <p>
      <img src="/images/flowstate/6a00d83451fb6769e2014e868b57e6970d-pi.png" />
    </p>

    <p>
      <span
        >When the window is resized to approach a 4:3 aspect ratio, MaxSquare
        appropriately determines that a 4x3 grid is better, again giving each photo
        the maximum square possible:</span
      >
    </p>

    <p>
      <img src="/images/flowstate/6a00d83451fb6769e2014e5fb09ec6970c-pi.png" />
    </p>

    <p>
      <span
        >When more photos (say,
        <a href="https://quickui.org/demos/MaxSquareDemo/?count=30">30</a>) are
        added to the same 4:3 window, MaxSquare determines that a 6x5 grid gives the
        best results:</span
      >
    </p>

    <p>
      <img src="/images/flowstate/6a00d83451fb6769e2014e5fb09fa5970c-pi.png" />
    </p>

    <p>
      <span
        >For large albums (or small window sizes), the thumbnails can be too small
        to be useful, so there’s still a role for scrolling. This could be governed
        with a minimum thumbnail size: once the thumbnails hit that size, a scroll
        bar kicks in. The minimum thumbnail size could be chosen by the user. In
        fact, maybe <em>that’s</em> the right use for a Zoom slider: to pick the
        <em>minimum</em> thumbnail size which the user finds acceptable.</span
      >
    </p>

    <p>
      <span
        >If you work on an app that presents photo or image thumbnails, try using
        MaxSquare in your UI and let me know what you think; I&#39;d love to hear if
        it works well in practice. (Or if you like the demo, and have a favorite
        photo app that could benefit from this behavior, ask the app makers to
        consider picking this up. It&#39;s free, and open!)</span
      >
    </p>

    <p><span>&#0160;</span></p>
2011-04:
  2011-04-04 Start with a stripped-down visual design and slowly add elements back in.html: >
    
    ---

    title: "Start with a stripped-down visual design and slowly add elements back in"

    date: 2011-04-04

    slug: start-with-a-stripped-down-visual-design-and-slowly-add-elements-back-in

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/04/start-with-a-stripped-down-visual-design-and-slowly-add-elements-back-in.html

    ---


    <p>
      <em
        >La perfection est atteinte, non pas lorsqu&#39;il n&#39;y a plus rien à
        ajouter, mais lorsqu&#39;il n&#39;y a plus rien à retirer. <br /></em
      >Perfection is attained, not when no more can be added, but when no more can
      be removed.
    </p>

    <p>—Antoine de Saint-Exupéry</p>

    <p>&#0160;</p>

    <p>
      I love the spirit of this oft-heard design maxim, but it’s not a
      <em>recipe</em> for design, or at least not for iterative software user
      experience design. The statement suggests you could design something that’s
      more elaborate than what would be ideal, then chisel away at it until you’re
      done. That approach might work for a one-off product, but in an evolving
      software app, removing something is rarely an option. All apps have to evolve
      or die, and since a product’s feature set nearly always increases in
      complexity over time, virtually all UI evolution is additive. Indeed, it’s so
      rare that a designer gets the chance to actually remove something in version
      <em>n</em>+1 that it’s notable
      <a
        href="http://miksovsky.blogs.com/flowstate/2010/08/ios-4-home-button-double-tap-rare-case-of-retiring-a-behavior-preference.html"
        >when it happens</a
      >.
    </p>

    <p>
      The only time you, as a designer, generally have the freedom to remove
      anything is before it gets into a user’s hands. After that, it’s almost a
      foregone conclusion that the feature will stay around for the life of the
      product. The only way to “remove” something is often to start over with a
      completely new product, typically on a new platform. The corollary of
      Exupéry’s claim in the UX realm might be that each product iteration should
      add as little as possible. You never know in which ways your evolving feature
      set will impose new design considerations, and what was perfect in version
      <em>n</em> might no longer be desired in version <em>n</em>+1.
    </p>

    <p>
      With that in mind, when Cozi first designed a month view for our web client in
      late 2007, we felt that it was our last best chance to strip all the junk that
      normally clutters up month views (here, Microsoft Outlook 2010):
    </p>

    <p>&#0160;</p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e2014e872c60ba970d-pi.png"
        alt="Microsoft Outlook 2010 Month View"
      />
    </p>

    <p>&#0160;</p>

    <p>
      Aside from the obvious clutter, it’s worth pointing out that this view
      <em
        >doesn’t even show the majority of the appointments actually in this user’s
        calendar</em
      >. At this size, the user only sees the first few appointments each day (which
      may or may not be the most important). To see the rest, the user must click
      the disclosure triangles in the lower-right corner of each day—which take the
      user completely out of context to another view entirely. And, in my opinion,
      the category-based color coding that’s quite useful in day view unfortunately
      overwhelms the user’s attention in month view.
    </p>

    <p>
      Since we were effectively starting over on a new platform (as noted above, the
      most likely opportunity to remove something), we <em>did</em> have the chance
      to remove stuff. Asking ourselves, “What would Tufte do?”, we produced a
      minimalistic initial design concept:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e2014e872c60d0970d-pi.png"
        alt="Cozi Month View (Original Design)"
      />
    </p>

    <p>&#0160;</p>

    <p>
      The main points were to remove the boxes around everything, eliminate
      background color for all but the most notable events, and to tone the
      gridlines way back. We also decided that a calendar view was almost useless if
      it hid appointments, and decided that the grid rows would vary in height to
      contain all the data. Since many people use months to conceptually map out
      their near future, we wanted to clearly delineate the month transitions with
      both boundary lines and a color change. We made the dates much larger (like
      those on many wall calendars) and pushed them into a background layer so that
      they could be easier to spot without consuming more room. And we maintained
      the Cozi precedent for showing non-routine appointments in bold so that they
      would be easier to spot.
    </p>

    <p>
      By the time we shipped, we’d actually gone even further, removing all
      gridlines entirely. This is our initial web implementation:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e2014e60516f51970c-pi.png"
        alt="Cozi Calendar Month View (original web implementation)"
      />
    </p>

    <p>&#0160;</p>

    <p>
      Users told us we’d gone too far, and that it was hard to figure out which
      appointments went on which dates. In a later version, we added the horizontal
      rules line in:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20147e3ac9e70970b-pi.png"
        alt="Cozi Calendar Month View (horiziontal rules)"
      />
    </p>

    <p>&#0160;</p>

    <p>
      This design has generally performed well, although we receive a range of
      feedback. For example, there’s a certain type of user who really,
      <em>really</em> wants vertical gridlines, not just horizontal gridlines. We
      prefer to use negative space itself as a sort of virtual gridline. We clip
      long appointment text on the right end of a day cell, which creates a vertical
      line of negative space. This effectively separates one day from the next
      without the cost of additional clutter.
    </p>

    <p>
      One issue not revealed in these images is that we hadn’t gotten around to
      coding the thicker boundaries between months as called for in the original
      design. We recently got around to fixing that, and now use both a thick line
      and a background color change to delineate months:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20147e3ac9e84970b-pi.png"
        alt="Cozi Calendar Month View (month boundaries)"
      />
    </p>

    <p>&#0160;</p>

    <p>
      We’ve also made other changes made along the way, like a switch to a
      <a
        href="http://miksovsky.blogs.com/flowstate/2010/08/lessons-switching-our-web-ui-from-stock-fonts-to-a-proprietary-font.html"
        >custom font</a
      >, and dynamically vary leading to pack in more appointments into the same
      vertical space. We still haven’t implemented highlighting for special dates
      like birthdays or holidays, although perhaps we’ll get to that at some point.
    </p>

    <p>
      We’re generally pretty cautious about adding something new.We’re cognizant of
      the possibility that the design might not work out for everyone—but the users
      who <em>did</em> like it would be unhappy if we tried to take the feature
      away. As said before, app UIs generally accrete new elements. This makes it
      challenging to deliver a clean design—and keep it clean.
    </p>
2011-05:
  2011-05-02 Where should the hit target boundaries for UI elements go.html: >
    
    ---

    title: "Where should the hit target boundaries for UI elements go?"

    date: 2011-05-02

    slug: where-should-the-hit-target-boundaries-for-ui-elements-go

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/05/where-should-the-hit-target-boundaries-for-ui-elements-go.html

    ---


    <p>
      Have you ever clicked on a portion of a screen you thought was interactive,
      but it had no effect? Or tapped on something expecting one action, but got
      another? Sometimes the issue is that the actual hit target for a UI element
      differs from what can be assumed from the element’s visual appearance. There
      are some subtleties in picking the hit target boundaries for a UI element, but
      I haven’t seen much analysis of the topic, so thought I’d share some
      observations.
    </p>

    <p>
      Time was, if you wanted a UI element to be clickable, you put a thick 3D
      border around it:
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e2014e88296090970d-pi.png"
        alt="Windows 95 OK Button"
      />
    </p>

    <p>
      The 3D border lets the user they can activate the UI element by “pressing” it
      with a pointing device. The hit target here could not be missed: it was the
      entire area defined by the rectangular border. This is clear, but those 3D
      borders add a considerable degree of clutter. The borders of the button above,
      from Windows 95, are actually quite refined from an earlier age of thicker,
      heavier, and uglier borders. (In the early 90s, I was asked to sit on a
      Microsoft task force in which representatives of different teams spent months
      arguing about what the standard button border treatment should be. The group
      fought over the correct width for a 3D border, over the placement of the
      apparent light source, and over the precise shadow treatment for corner
      pixels. See how the white line on the top dives into the black line on the
      right, so that the upper-right corner pixel is black? You have no idea how
      much blood was spilled over that corner pixel.)
    </p>

    <p>
      As time passed, it became apparent there were other ways to suggest
      interactivity. For example, it turns out that an element’s mere existence can
      suggest interactivity: if you put a little icon in the corner of a window, and
      there’s no other obvious reason for why that icon would be there, a user can
      reasonably conclude the icon is an interactive element. Similarly, giving an
      otherwise flat piece of text a distinctive appearance (say, blue and
      underlined) can be enough to let a user know the text constitutes a clickable
      link. So borders began to drop away.
    </p>

    <p>
      But once borders are removed, a question arises: exactly which pixels should
      constitute the element’s hit target? There seem to be several basic
      strategies:
    </p>

    <p>&#0160;</p>

    <p>
      1. <strong>Explicitly define the hit target with a boundary line</strong>.
      This is the strategy behind the 3D border shown above, although many other
      boundary treatments are possible. The boundary itself can be a line with an
      inner and outer edge, or it can simply be a change in background color. The
      boundary’s shape is nearly always rectangular, even if the corners sometimes
      appear to be rounded.
    </p>

    <p>&#0160;</p>

    <p>
      2.
      <strong
        >Implicitly define the hit target as being relatively close to the visible
        pixels</strong
      >
      for an irregular object, such as text or an icon.
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e2014e882960a5970d-pi.png"
        alt="Zune Player Progress Bar"
      />
    </p>

    <p>
      The little heart icon in the upper right of this control group is interactive
      — but exactly which pixels are clickable? If only the gray pixels were
      clickable, that would be a disaster; a user could click through in the middle
      of the heart and miss the target. (I seem to recall an OS long ago—Windows?—in
      which it was indeed possible to double-click through holes in desktop icons
      and not actually open the corresponding application.) [Update: David Buxton
      reports that the OS in question was actually the original Mac OS.] To avoid
      this problem, hit targets almost always surround the element’s visible pixels.
    </p>

    <p>
      Since today’s UI tools still make it <em>much </em>easier to define
      rectangular UI elements than ones with irregular shapes, the most common hit
      target for an irregular element is a bounding box: the smallest rectangle that
      completely encloses the visual pixels in the icon or text. The bounding box
      for a very small element may have additional padding to make it easier to
      click or tap. Picking the degree of padding requires judgment; if the hit
      target extends too far away, a casual click or tap might inadvertently
      activate the element. This problem is especially acute with circular icons,
      where the corners of the rectangular bounding box can actually extend far past
      the visible pixels.
    </p>

    <p>&#0160;</p>

    <p>
      3. <strong>Create a row whose intervals define hit targets</strong>. By
      placing elements at regular rhythm in a visual grid, even irregular shapes end
      up implying a bounding box.
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e2014e882960b5970d-pi.png"
        alt="Twitter for iPad - Tweet (reduced)"
      />
    </p>

    <p>
      In this image from Twitter for iPad, the regularity of the inter-button
      spacing in the upper-right suggests horizontal cells that constitute bounding
      boxes for the icons they contain. In such a row, a button’s hit target
      typically extends halfway to its neighbors. That amount of padding is much
      larger than would be expected if one of these buttons were standing on its
      own. This approach was what allowed toolbar buttons to be some of the first
      buttons to lose their thick, 3D borders. It’s particularly useful on touch
      device, where large hit targets are beneficial.
    </p>

    <p>&#0160;</p>

    <p>
      Regardless of which hit target strategy you pursue, on a device with a mouse,
      you can employ mouse hover effects to clarify the hit target. The hover effect
      might reveal the actual hit target: e.g., showing the rectangular hit target
      boundary being applied to an irregular object. Or, in a case like that of a
      change in link color on hover (which still leaves an irregular shape), the
      appearance of the hover effect at least indicates when the mouse has crossed
      the hit target boundary.
    </p>

    <p>
      This toolbar ribbon from Microsoft Word 2010 uses all three of the above
      strategies:
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e2014e882960cb970d-pi.png"
        alt="Microsoft Word 2010 Ribbon - Font Section"
      />
    </p>

    <p>
      The combo boxes use visible boundary lines (the first strategy above). The
      toolbar buttons appear in rows with regular spacing (the third strategy). The
      visual rhythm isn’t perfectly regular; it’s somewhat altered by narrow group
      separators, as well as dropdown arrows that make some buttons effectively
      wider, but the inter-button spacing is consistent. Finally, the tiny icon in
      the lower right corner, which is not part of any row, defines its hit target
      with a bounding box tightly drawn around the icon’s visible pixels (the second
      strategy). In all cases, hover effects are used to good effect to clarify the
      hit target.
    </p>

    <p>&#0160;</p>

    <p>
      As the opening questions of this post suggest, there are cases where hit
      targets may not be apparent, and may confuse users. In these palette tabs from
      Adobe Photoshop CS5, consider the small dropdown icon in the upper-right
      corner:
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e201543208c2cb970c-pi.png"
        alt="Adobe Photoshop Palette Tabs"
      />
    </p>

    <p>
      The dropdown icon is an irregular shape, which suggests a tight-fitting
      bounding box — but it’s also inside a rectangular boundary (the leftover space
      not used by the tabs), which suggests the whole rectangle is targetable. The
      former is actually the strategy which Adobe employed here, but a user might
      easily be led to click in the empty space to the left of the icon. This is
      clarified somewhat by a hover effect on the icon, but there’s still
      opportunity for confusion.
    </p>

    <p>
      Confusion can also arise when hit targets overlap, or appear to overlap. Apple
      makes occasional use of (apparently) overlapping hit targets in iOS table
      views:
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e201543208c2da970c-pi.png"
        alt="iPhone Recent Calls (reduced)"
      />
    </p>

    <p>
      The blue disclosure arrow button at the right is a independently targetable UI
      element sitting on top of another, larger targetable table row. Tapping the
      disclosure button has a different effect than tapping the overall row. To me,
      at least, this is endlessly confusing. Sometimes I tap the blue button when I
      mean to tap the row; sometimes I want the effect of tapping the button, but
      tap the row instead, forgetting that action has a different effect. This
      confusion is compounded by the fact that
      <em>slightly different </em>disclosure arrows used elsewhere in other iOS
      table views to indicate that tapping anywhere in the row
      <em>including on the arrow</em> will bring up more detail. The table view UI
      above looks clean, but in my opinion, that comes at too great a cost. Perhaps
      the UI would be clearer if, for example, this table view displayed a vertical
      line, just to the left of the arrow, to carve out a square box on the right
      end of the row for the disclosure arrow (i.e., used the first strategy above
      instead of the second).
    </p>

    <p>
      Hit target boundaries are rarely this confusing, however. In most cases,
      following one of the strategies above will lead to a UI people can readily
      pick up and use effectively.
    </p>
  "2011-05-06 If your user got the result they wanted, what do you care if they didn&rsquo;t do it the most efficient way.html": >
    
    ---

    title: "If your user got the result they wanted, what do you care if they didn&rsquo;t do it the most efficient way?"

    date: 2011-05-06

    slug: if-your-user-got-the-result-they-wanted-what-do-you-care-if-they-didnt-do-it-the-most-efficient-way

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/05/if-your-user-got-the-result-they-wanted-what-do-you-care-if-they-didnt-do-it-the-most-efficient-way.html

    ---


    <p>
      Probably the most painful experience I have on a regular basis in my
      professional life is watching usability studies. Last year I became a big fan
      of <a href="http://www.usertesting.com">UserTesting.com</a> for conducting
      remote, unmoderated usability studies. In my experience, it’s been
      ridiculously fast, highly informative, and very inexpensive. Years ago I could
      only experience the agony of watching a floundering user by sitting behind a
      one-way mirror in a very expensive usability research lab. Now I can recapture
      that agony for only $39.
    </p>

    <p>
      The most painful aspect of watching a usability study is seeing a
      well-intentioned UI — one you were sure would be a success — actually cause a
      user emotional distress. But the <em>second</em> most painful aspect of
      watching a usability study is seeing a user successfully accomplish a task in
      10 steps which they could have accomplished in two. For example:
    </p>

    <ol>
      <li>
        A user wants to copy and paste a word. They carefully mouse down at the
        beginning of the word, slowly drag across the word, then let go. They move
        their mouse waaaay up to the Edit menu, click, then slowly read down the
        list of menu items until they come to “Copy”. They select Copy. Whew,
        they’re halfway there. They reorient themselves, and then click where they
        want to paste the word. They move their mouse waaaay back up to the Edit
        menu, click, then slowly read down the list of menu items until they come to
        “Paste”. Click. Voilà! <br />
        <br />
        <img
          src="/images/flowstate/6a00d83451fb6769e2014e8847986f970d-pi.png"
          alt="Microsoft Word Edit Menu"
        />
        <br />
        <br />
      </li>
      <li>
        A user wants to move a window. They drag the upper-left corner of the window
        to a new location. They then drag the lower-right corner of the window to a
        new location, taking care to make sure the window is now roughly the same
        size it was before.
      </li>
      <li>
        A user wants to browse to a URL. They click their browser’s Home button to
        return to a page that has a Google search box. They type the URL into the
        Google search box, then click Search. Google displays a long page of results
        (with ads!). The user finds a link to the desired URL at the top and clicks
        it.
      </li>
    </ol>

    <p>
      It’s impossible to watch these events and not want to rush in and tell the
      user about how to use keyboard shortcuts, drag a window’s title bar, type in
      the address bar. Hey, user, you could be <em>so much more efficient! </em>This
      instinct, while natural, and somewhat altruistic, also has at its core some
      compulsive behavior. Software developers obsess a bit about
      <a
        href="http://www.codinghorror.com/blog/2009/11/whitespace-the-silent-killer.html"
        >Whitespace, The Silent Killer</a
      >. Software designers obsess a bit about user inefficiency.
    </p>

    <p>
      To be clear, being on the lookout for such inefficiencies is an absolutely
      critical design skill, as is being able to iterate towards a design that’s
      more likely to encourage efficient behavior. It’s worth asking, however: if
      the user got what they wanted, and is satisfied with the time and energy they
      spent, why should the fact that they ignored a more efficient route have to be
      troubling?
    </p>

    <p>
      Changing a design—even for the better—has its own costs: the designer’s, the
      engineer’s, the tester’s, the support staff’s, not to mention the existing
      users’ time to learn something new. And sometimes a blunt attempt to
      force-train the user a more efficient path is worse than the original problem.
      (Remember all those “Tip of the day” dialogs that used to pop up on
      application startup to tell you all about a keyboard shortcut the app’s
      designers thought you really should know?)
    </p>

    <p>
      Sometimes, however, it’s best to leave well enough alone. It can be enough to
      rely on the user’s ability to follow the
      <a href="http://en.wikipedia.org/wiki/Information_scent#Information_scent"
        >information scent</a
      >&#0160;down a path that’s circuitous, long — and successful. If a feature’s
      design is generally letting users accomplish their goals, you probably have
      more urgent design priorities to address.
    </p>

    <p>
      I’m always interested in hearing cases like this, where a user followed a
      circuitous but ultimately successful path. What’s the most extreme case of
      this you’ve seen?
    </p>
  2011-05-23 Negative space in a user interface is priceless — so it inevitably gets filled up.html: >
    
    ---

    title: "Negative space in a user interface is priceless — so it inevitably gets filled up"

    date: 2011-05-23

    slug: its-impossible-to-put-a-price-on-negative-space-in-a-ui-so-it-inevitably-gets-filled-up

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/05/its-impossible-to-put-a-price-on-negative-space-in-a-ui-so-it-inevitably-gets-filled-up.html

    ---


    <p>
      A lot of my time as a design executive is spent defending the value of the
      unquantifiable. Business pressures argue for design compromises with some
      quantifiable and significant ROI (Return on Investment). But as Adaptive Path
      put it in their report on
      <a href="http://adaptivepath.com/ideas/reports/businessvalue"
        >Leveraging Business Value: How ROI Changes User Experience</a
      >, “It’s impossible to measure ROI for user experience with a simple equation
      that can be applied across a wide swath of companies and projects.” And, in my
      experience, perhaps the hardest thing to quantify is the value of negative
      space: the space <em>between</em> your user interface elements.
    </p>

    <p>
      Typically brand new apps have lots of space, because UI elements represent
      features, which require code, which requires time and money. With time and
      money, however, the app evolves, and the empty space is quickly filled in with
      new features. The availability of room, in fact, can contribute greatly to the
      decision to place a button in what was previously empty space. “Users are
      asking for this feature, and it looks like there’s room for us to squeeze in
      another button on the toolbar, so let’s do the feature and make it a toolbar
      button.”
    </p>

    <p>
      I rarely hear discussion about setting aside room in a user interface for the
      <em>absence</em> of user interface elements. Speaking both aesthetically and
      from a usability perspective, negative space can be highly valuable in an
      interface. Used effectively, it can create a sense of calm, balance,
      manageability, and competence. It can help guide the user’s eyes across the
      page towards what’s important. The presence of space can separate things that
      are different; the absence of space can join things that are similar.
    </p>

    <p>
      Cozi’s current web page template leaves some significant negative space in the
      lower left (above the clock), as well as a bit in the upper right. Both those
      spaces vary in size depending on the window dimensions. (The calendar view
      itself also has considerable space, but that’s highly dependent on which view
      is selected and how much data is on the calendar.)
    </p>

    <p>
      <img src="/images/flowstate/6a00d83451fb6769e2014e888ee2ff970d-pi.png" />
    </p>

    <p>
      The challenge is that negative space doesn’t <em>look</em> like it’s doing
      anything. It can appear inefficient—like a lost opportunity. In a business
      driven by display advertising, there is pressure to make pixels generate
      revenue. It’s nearly impossible to count the value that effective negative
      space contributes to a user experience, but it’s very easy to estimate the
      rent those same pixels might generate if they were converted to display
      advertising inventory. The thing is, those empty pixels <em>are</em> doing
      something. The user experience would be different—worse—if the space were
      filled.
    </p>

    <p>
      (The Leaderboard ad in the image above is actually a different problem. That
      ad isn’t filling space that was previously empty; it’s consuming space that
      would otherwise be used to show user data. See my earlier post on why
      <a
        href="http://miksovsky.blogs.com/flowstate/2010/08/its-easier-to-imagine-hiding-an-ad-than-completely-redesigning-a-ui.html"
        >it’s easier for users to image hiding an ad than completely redesigning a
        UI</a
      >.)
    </p>

    <p>
      Negative space is hard concept to love, but it turns out that most people
      demonstrate an intuitive grasp of negative space in the context of their own
      homes. In home after home, you can observe that the occupants have very
      carefully hung pictures or paintings on the wall so as to give each piece
      space to breathe. You will rarely see a bunch of paintings crammed together on
      a wall. Most people effectively use negative space with no training beyond the
      casual observations of positive examples in other homes, museums, offices, or
      anywhere art is displayed. At some subconscious level, people must be so
      sensitive to the value of negative space that they are willing to do work to
      preserve negative space in their own surroundings.
    </p>

    <p>
      The defense of the negative space in a user experience, however, is a
      never-ending battle. New proposals to “fill that space in” with a new feature,
      ad, or other element arise on a monthly, sometimes weekly, basis. Defense of
      the open space is wearisome but necessary. Once that’s space is gone, it’s
      usually gone forever.
    </p>
  2011-05-31 Your most recent feature probably should NOT be the most prominent element of your UI.html: >
    
    ---

    title: "Your most recent feature probably should NOT be the most prominent element of your UI"

    date: 2011-05-31

    slug: your-most-recent-feature-probably-should-not-be-the-most-prominent-element-of-your-ui

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/05/your-most-recent-feature-probably-should-not-be-the-most-prominent-element-of-your-ui.html

    ---


    <p>
      A colleague once showed me the main toolbar for an app they worked on, and
      offered an archeological exposition of when and why each button had been
      added. The first three buttons represented the app’s core functionality, and
      had been on the toolbar since the app’s first release. All the other toolbar
      buttons had been added in successive releases. Each time one of those features
      were added, it had been deemed vitally important to give the feature prominent
      placement on the toolbar. There those buttons had remained to the present day.
      But when the team monitored click-through across all toolbar buttons, the
      first three buttons accounted for nearly all user clicks. Those other buttons
      were permanent meaningless clutter, doomed to forever confuse and distract
      users from the first three, meaningful buttons.
    </p>

    <p>
      When adding a new feature to an app, there’s an almost irresistible tendency
      to put that new feature front and center in the UI. After all:
    </p>

    <ul>
      <li>Your customers may have been begging for it for months, or years.</li>
      <li>
        You and the entire product team have been actively thinking about, and
        working on, that big new feature non-stop for many months.
      </li>
      <li>You are all proud of the new feature.</li>
      <li>
        Your team may be convinced this feature represents the difference between
        business success and failure.
      </li>
      <li>
        You don’t want existing users to overlook this much-requested feature when
        it’s finally available.
      </li>
    </ul>

    <p>
      But, wait—is this new feature really so important that it should now be the
      dominant element in your UI?
    </p>

    <ul>
      <li>
        It’s unlikely that <em>in the user’s mind</em> your new feature is more
        important than the app’s core function. You most likely established that
        core function of your app very early on, probably in the very first release.
        It’s unlikely that you want to <em>decrease</em> the chance that users
        successfully find and use that function.
      </li>
      <li>
        Once users learn how to find your new feature now, they’ll still expect to
        be able to find it that way a year from now—when you’re trying to release
        the <em>next</em> new big feature. What are the odds that, at that time, the
        feature that’s new today will still be so vitally important?
      </li>
      <li>
        It’s incredibly hard to muster the will to
        <a
          href="http://miksovsky.blogs.com/flowstate/2011/04/start-with-a-stripped-down-visual-design-and-slowly-add-elements-back-in.html"
          >strip out a UI element</a
        >.
      </li>
    </ul>

    <p>
      It’s appropriate to make a new feature visible; just make sure that, from a
      user perspective, the prominence of the entry point for the feature
      corresponds to its priority in the updated app’s overall functionality.
    </p>
2011-06:
  "2011-06-27 If a person talked to you the same way user interfaces talk, you'd ignore them too.html": >
    
    ---

    title: "If a person talked to you the same way user interfaces talk, you'd ignore them too"

    date: 2011-06-27

    slug: user-interface-text-empathy

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/06/user-interface-text-empathy.html

    ---


    <p>
      A standard trope in software is that, “Users don’t read”. This claim is often
      made after someone observes a user blow straight through an “Are you sure you
      want to do&#0160;<em>X</em>?” dialog without reading it (possibly with some
      catastrophic result). There’s plenty of usability research showing that users
      do indeed&#0160;<a href="http://www.useit.com/alertbox/whyscanning.html"
        >scan text instead of reading it</a
      >, which has resulted in some good recommendations for&#0160;<a
        href="http://www.useit.com/papers/webwriting/"
        >writing for the web</a
      >. But I think most of that discussion overlooks the fact that much UI text is
      almost pathological in its lack of empathy, failing to consider the situation
      from the user’s perspective.
    </p>

    <p>
      Let’s consider some situations you might encounter in UI text, then consider
      how you would view similar behavior in a human conversational counterpart.
    </p>

    <ul>
      <li>
        UI text is highly redundant. A page or dialog may&#0160;<a
          href="http://miksovsky.blogs.com/flowstate/2005/08/make_every_piec.html"
          >state its main question or point multiple times</a
        >. If a person stated the same point to you three different ways, you’d
        either think they were stupid, or conclude they
        thought&#0160;<em>you&#0160;</em>were stupid.
      </li>
      <li>
        UI text can be highly predictable. Suppose an app displays a confirmation
        dialog every single time you perform a common action, perhaps an act that is
        universally confirmed. A typical example might be a dialog intended
        to&#0160;<a
          href="http://miksovsky.blogs.com/flowstate/2006/02/some_basic_ui_p.html"
          >prevent accidental deletion</a
        >. A person who asks you such a near-pointless question signals a lack of
        interest in the interaction, and in you as a person generally. (How did you
        feel when airline ticket agents used to ask questions whether you were
        carrying weapons or whatever?)
      </li>
      <li>
        UI text doesn’t address questions from the perspective of the your task. If
        an app, say, focuses on some technological detail rather than the user’s
        goal, the app sounds more interested in itself than in you or your goal.
        This sort of behavior in people is characterized as narcissistic.
      </li>
      <li>
        UI text uses jargon. By using words you are unlikely to know, the app
        signals more than disinterest in you, it places itself in a superior
        position as it pushes you down. In a human conversational counterpart, this
        behavior can be placed on some continuum between obtuse and elitist.
      </li>
      <li>
        UI text may&#0160;<a
          href="http://miksovsky.blogs.com/flowstate/2007/06/dont-bury-the-l.html"
          >bury the lede in a UI interaction</a
        >, that is, fail to draw your attention to the larger point. Someone who
        claims to give you the information you asked for, but deliberately
        obfuscates the crux of the matter, could be viewed as passive-aggressive.
      </li>
      <li>
        UI text can be abrupt and negative. The canonical example here might be form
        validation feedback that rejects your attempt to enter data: “Error: Invalid
        email address” or such like. There are nearly always softer terms that could
        convey the same meaning as harsh terms. If a person deliberately uses
        negatively charged words like “invalid”, “incorrect”, “missing”, or “failed”
        to discuss you, your goals, or your acts, you could reasonably assume they
        felt disappointed or disgusted with you.
      </li>
    </ul>

    <p>
      Everyone, whether speaking with you, or writing to you through UI text, gets
      to choose their words. The existence of that choice allows you to infer the
      emotional state and intent of your conversational counterpart. While it’s
      impossible for an app today to “speak” with the same understanding of the
      situation as a person, or to accurately reflect that understanding through the
      nuances of its words, it is nevertheless eminently possible to improve a user
      interaction by writing UI text with more empathy for the user.
    </p>

    <p>
      Again and again, my standard UI text exercise is to envision those words
      arising in conversation between two people. If I’m playing the role of the
      app, and the words I’m saying sound obtuse, insulting, superior, or
      disinterested, then those words must be rewritten, or the UI refactored to
      avoid the need for them.
    </p>
2011-07:
  2011-07-05 A simple experiment to judge the quality of your link text make the surrounding text invisible.html: >
    
    ---

    title: "A simple experiment to judge the quality of your link text: make the surrounding text invisible"

    date: 2011-07-05

    slug: a-simple-experiment-to-judge-the-quality-of-your-link-text-make-the-surrounding-text-invisible

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/07/a-simple-experiment-to-judge-the-quality-of-your-link-text-make-the-surrounding-text-invisible.html

    ---


    <p>
      While reviewing UI text recently, a question arose regarding exactly which
      words in a sentence should be used as a hyperlink. My standard tactic to cut
      through this design problem is to ask: what if your user were blind? Assume
      they have a screen reader that, by default, is going to let them tab through
      just the links on the page and read the link text aloud to them. Which link
      text would produce the best experience?
    </p>

    <p>
      At Microsoft I was first exposed to the proposition that creating products
      with universal access in mind (i.e., making the product’s features accessible
      to users who were visually impaired, hearing impaired, motion impaired, etc.)
      would also produce benefits for all users. I’d love to see a rigorous defense
      of this proposition from an economic point of view: could resources invested
      toward universal access have produced better products if those resources have
      been invested elsewhere? But even without that defense, I do believe this
      mindset opens up new ways of looking at design problems.
    </p>

    <p>
      Although the W3C published its
      <a href="http://www.w3.org/TR/WCAG10-HTML-TECHS/"
        >guidelines for creating accessible web content</a
      >
      in 2000, including the specific admonition that
      <a href="http://www.w3.org/TR/WCAG10-HTML-TECHS/#link-text"
        >“click here” is a bad link choice</a
      >, it’s nevertheless common to find this still done over a decade later.
      Here&#39;s a random news article:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e201538f92b6d6970b-pi.png"
        alt="Huffington Post"
      />
    </p>

    <p>&#0160;</p>

    <p>
      To get an approximate sense of how this page might appear to a blind user (via
      the default screen reader experience) you can remove all the text that
      surrounds the links. You can easily do this on almost any web page by using
      your browser’s developer tools to change the body and paragraph text color to
      match the background color:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e201538f92b6fa970b-pi.png"
        alt="Huffington Post (white text)"
      />
    </p>

    <p>&#0160;</p>

    <p>
      With the body text rendered invisible, the use of the link text “here” in
      “Click <span>here</span> to see a sample of the new Calendar redesign” jumps
      out. If the link text had been written without depending on the surrounding
      text, perhaps better link text might have been selected: e.g., “See a
      <span>sample of the new Calendar design</span>”. The link text “wrote” could
      be similarly improved.
    </p>

    <p>
      I think it’s striking that, even when one tries <em>very hard </em>to focus on
      just the link text in the first image, you still don’t get the same experience
      as the second image. The second image makes it impossible for your eyes to
      grab a little bit of context from the surrounding text.
    </p>

    <p>
      Perhaps the persistence of weak link text can be partially attributed to the
      assumption that web usability guidelines for, say, visually impaired users,
      apply only to companies or organizations that focus on those users. In this
      case, following the guidelines for link text (and using link titles that
      appear on hover, etc.) can benefit all your users.
    </p>

    <p>
      I can’t pretend to understand or fully appreciate the user experience of blind
      users. I can speak to the question of what a typical user does when scanning
      UI text: they tend to focus on the links. Writing as if the surrounding body
      text were going to be invisible can help guide you in the selection of good
      link text.
    </p>
  2011-07-11 Celebrating 100 posts and 6 years of UI design craft on flowstate.html: >
    
    ---

    title: "Celebrating 100 posts and 6 years of UI design craft on flow|state"

    date: 2011-07-11

    slug: 100th-post

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/07/100th-post.html

    ---


    <p>
      This post marks my 100th post on flow|state. My
      <a href="http://miksovsky.blogs.com/flowstate/2005/07/cant_sleep.html"
        >first post</a
      >&#0160;was on July 11, 2005, so by pure coincidence this milestone comes
      exactly on the blog’s birthday. There was a 1½ year blogging hiatus in 2009-10
      (because 1 startup + 3 little kids = 0 discretionary time), so I’ve done about
      4½ years of actual blogging. This works out to a post roughly every two weeks.
    </p>

    <p>
      I’m still passionate about learning and teaching the craft of user interface
      design. When I started this blog, I thought I would focus exclusively on
      client-side app UI, but I shifted my attention to the web when my company,
      Cozi, did so in 2008; later my interests extended to mobile UI as well.
    </p>

    <p>
      I’ve tried to focus on my own direct personal experiences as a UX designer,
      with an eye towards sharing practical knowledge to people in the industry, or
      conveying a sense of the designer’s work to a general audience. I generally
      prefer to write about the products I know best: the ones I’ve worked on. In
      cases where I critique other products to make a point, I try to concentrate on
      the nitty-gritty details of a UI that may go overlooked by users, but which
      nevertheless affect the user experience.
    </p>

    <p>
      This focus is borne out in this list of the most popular posts on flow|state,
      either having driven the biggest transient spikes in traffic or for driving
      the most visits over time.
    </p>

    <ol>
      <li>
        <a href="http://miksovsky.blogs.com/flowstate/2005/10/the_fractal_nat.html"
          >The fractal nature of UI design problems</a
        >
      </li>
      <li>
        <a href="http://miksovsky.blogs.com/flowstate/2008/04/using-a-grid-of.html"
          >Showing the complete range of choices in a grid</a
        >
      </li>
      <li>
        <a href="http://miksovsky.blogs.com/flowstate/2008/04/fit-and-finish.html"
          >Cozi calendar UI overhaul</a
        >
      </li>
      <li>
        <a
          href="http://miksovsky.blogs.com/flowstate/2010/09/every-app-has-a-scary-basement.html"
          >Every app has a scary basement</a
        >
      </li>
      <li>
        <a
          href="http://miksovsky.blogs.com/flowstate/2010/09/form-validation-feedback-be-slow-to-complain-and-quick-to-forgive.html"
          >Form validation feedback: Be slow to complain, and quick to forgive</a
        >
      </li>
      <li>
        <a href="http://miksovsky.blogs.com/flowstate/2007/08/openid-great-id.html"
          >OpenID: Great idea, bewildering consumer experience</a
        >
      </li>
      <li>
        <a href="http://miksovsky.blogs.com/flowstate/2008/01/facebook-applic.html"
          >Looking forward to seeing Facebook apps drop their pointless mystery</a
        >
      </li>
      <li>
        <a href="http://miksovsky.blogs.com/flowstate/2008/01/zune-a-fine-mus.html"
          >Zune: a fine music subscription device</a
        >
      </li>
      <li>
        <a
          href="http://miksovsky.blogs.com/flowstate/2010/10/reconsidering-stock-controls-to-create-an-optimized-user-experience.html"
          >Reconsidering stock controls to create an optimized user experience</a
        >
      </li>
      <li>
        <a
          href="http://miksovsky.blogs.com/flowstate/2011/01/speed-up-routine-animations-once-theyve-made-their-point.html"
          >Once a routine animation has made its point, speed it up</a
        >
      </li>
    </ol>

    <p>
      One thing I’ve missed over the past year is more engagement with you, the
      readers. A while back I tried to ward off comment trolls and spam by turning
      on the requirement that commenters must be signed in. This kept away trolls
      and spam—and everyone else. On the suggestion of a friend, I’m giving unsigned
      <em>moderated </em>comments a try to see that encourages more discussion.
    </p>

    <p>
      In that spirit, I’d love to hear from you about this blog, especially the
      sorts of posts you’ve found most helpful or interesting. Leave a comment or
      send email via the About page.
    </p>

    <p>Thanks for reading!</p>
2011-08:
  "2011-08-22 Ways to handle text that's too long clipping, ellipsis, fading, and selective condensing.html": >
    
    ---

    title: "Ways to handle text that's too long: clipping, ellipsis, fading, and selective condensing"

    date: 2011-08-22

    slug: handling-long-text

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/08/handling-long-text.html

    ---


    <p>
      Every UI that renders textual data has to cope with the question of what to do
      when text is too long to fit in the space allocated for it in the UI. Here are
      some basic approaches:
    </p>

    <p>
      <strong>Clipping.</strong> This is straightforward to do, and the result looks
      clean. If the text gets clipped in the middle of a word or, ideally, a letter,
      it will be obvious to a user what’s happened. In some cases, a column of
      clipped letters can create a virtual border, avoiding the need for an explicit
      border. (See this
      <a
        href="http://miksovsky.blogs.com/flowstate/2011/04/start-with-a-stripped-down-visual-design-and-slowly-add-elements-back-in.html"
        >discussion of Cozi’s Month view</a
      >.) The biggest risk is that text will get clipped at a word boundary, and the
      user will be unaware (or unsure) there is more content.
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e2015390d37887970b-pi.png"
        alt="Long Text - Clipped"
      />
    </p>

    <p>&#0160;</p>

    <p>
      <strong>Ellipsis. </strong>The traditional client OS solution is to remove the
      last character or two that would have fit, and replace those with an ellipsis
      (…). The user is easily made aware of missing text. This strategy requires the
      ability to quickly measure the width of text runs at runtime—an ability
      current browsers lack—to determine where the ellipsis should go.
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e2015434a6f093970c-pi.png"
        alt="Long Text - Ellipsis"
      />
    </p>

    <p>
      One minor disadvantage of this technique is that, even when this approach is
      possible, it can lead to visual clutter if many lines of text will be so long
      that they require ellipsis. One variant of the ellipsis technique is employed
      by OS/X’s Finder and various IDEs, using ellipsis in the <em>middle </em>of a
      text run. This is particularly useful when showing long URLs or file paths,
      where the final page or file name is probably more interesting than a long
      list of directories in the middle. As a side benefit, this also reduces visual
      clutter in cases where many lines of text require ellipsis.
    </p>

    <p>&#0160;</p>

    <p>
      <strong>Fading.</strong> This strategy employs an alpha-blended gradient on
      the right edge (or, for blocks of text, on the bottom) to make the text appear
      as if it has faded out. This technique, which looks quite clean, is beginning
      to get more popular as modern browsers support alpha-blended gradients. (See
      the QuickUI
      <a href="https://quickui.org/gallery/default.html#page=FaderAbout">Fader</a>
      control for sample code.)
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e2015390d37898970b-pi.png"
        alt="Long Text - Faded"
      />
    </p>

    <p>&#0160;</p>

    <p>
      <strong>Selective condensing.</strong> This tactic can be combined with any of
      the above techniques. Long strings are rendered with tighter kerning or in a
      condensed font variant, permitting extra characters to be shown which would
      have otherwise not been visible. If this effect is handled carefully, users
      may not even be aware of it. Like ellipsis, condensing requires the ability to
      measure text length. This is still not trivial in a web browser, which will
      generally require text to be added to the DOM before its width can be
      measured, but can be done by rendering text in an element with “visibility:
      hidden”. (See the sample QuickUI
      <a href="https://quickui.org/gallery/default.html#page=TextCondenserAbout"
        >TextCondenser</a
      >
      control.)
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e2015390d378a7970b-pi.png"
        alt="Long Text - Condensed"
      />
    </p>
  2011-08-29 Indefinitely postponing really great feature suggestions is one of the toughest tasks in UX design.html: >
    
    ---

    title: "Indefinitely postponing really great feature suggestions is one of the toughest tasks in UX design"

    date: 2011-08-29

    slug: indefinitely-postponing-really-great-feature-suggestions-is-one-of-the-toughest-tasks-in-ux-design

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/08/indefinitely-postponing-really-great-feature-suggestions-is-one-of-the-toughest-tasks-in-ux-design.html

    ---


    <p>
      This past week I had the occasion to reflect upon the towering list of
      fantastic feature suggestions people have contributed for Cozi which I’ve had
      to keep <em>out</em> of the product. I regularly hear good—sometimes
      brilliant—ideas for Cozi&#39;s product, but I’m generally forced to say,
      “Maybe later”, to nearly all of them.
    </p>

    <p>
      One core aspect of software’s nature which shapes the user experience design
      discipline is the inherently iterative and <em>additive</em> nature of the
      publicly visible output. UX design shares this iterative trait with fields
      like urban planning and certain types of performance (e.g., stand-up comedy)
      where the artist is constantly tweaking what people see and hear. Those
      fields, however, are often zero-sum: a new downtown building replaces what was
      there before, and a new joke pushes an older joke out of the routine.
    </p>

    <p>
      In contrast, there&#39;s a nearly irresistible tendency for software features
      to accrete:
    </p>

    <ul>
      <li>
        A user who has found something they like will scream bloody murder if that
        feature is taken away, and it turns out that every feature will always have
        at least <em>some</em> passionate adherents.
      </li>
      <li>
        Removing a feature that affords access to previously-entered user data would
        effectively maroon it, a nearly unforgivable transgression. You’d have to
        first create some way of getting that data out, which is extra work, which
        means time, which you don’t have.
      </li>
      <li>
        If you remove a feature, it will almost certainly be perceived as if you’re
        lowering your value proposition. Even if you hope the increase in usability
        will eventually allow you to deliver a better experience in the long run,
        that’s a pretty hard argument to sell to a customer.
      </li>
      <li>
        Someone who worked hard to bring the feature into existence may still be
        around and defend it vigorously (perhaps failing to recognize the market has
        changed).
      </li>
      <li>
        Or, on the other extreme, your team may have forgotten the feature exists.
      </li>
      <li>
        Or, your team knows the feature exists, but may have forgotten
        <em>why</em> it exists. No one wants to pull the plug on something in case
        it turns out to be critical. Surely someone important needs it, right?
        Better to be safe and leave it there.
      </li>
      <li>
        Given all the above, at any given decision point, the cost to keep an old
        feature working often seems pretty low compared to the cost of retiring it.
      </li>
    </ul>

    <p>
      So the number of features tends to monotonically increase, which generally
      means complexity does as well. This fact is so universal that
      <a
        href="http://miksovsky.blogs.com/flowstate/2010/08/ios-4-home-button-double-tap-rare-case-of-retiring-a-behavior-preference.html"
        >it’s notable when a product team removes a feature</a
      >.
    </p>

    <p>
      The catch is this:
      <em>not all those features will retain their relevance over time</em>. The
      world will change, user priorities will evolve, and your business goals will
      shift. A feature that was deemed vital when introduced may lapse into
      persistent clutter in your user interface or a persistent drag on your
      operation.
    </p>

    <p>
      Here’s a common situation: we’re working hard on a pending release, and
      there’s a feature just out of reach; it’s not going to make it into the
      release. It’s painful to defer working on it, because we’re certain it’s very
      important. Then, when the pending release is finally finished, and we finally
      have time to do that important thing — no one’s really that excited about it.
      In the few weeks that have passed, we’ve learned something new that has
      convinced something <em>else</em> is more important. The earlier idea, which
      has previously seemed mission-critical, never ships. And—<em>whew</em>—that’s
      a good thing. We came this close to adding new clutter to our product that we
      can (obviously, in hindsight) live without.
    </p>

    <p>
      Some people say you need to say, “No”, to ideas to keep a product clean and
      simple. But that makes it sound like you can make one decision and be done
      with it. You just never know; the feature you’re saying “No” to might turn out
      to be important after all. I think maybe it’s more correct to say, “Maybe
      later.” A good idea (or a clear user need) will be persistent, and over time
      will keep knocking at you until, one day, something clicks and you realize how
      you can address it and three other things at the same time, in a much better
      way than you could have if you’d plunged in right away. During this long
      period of consideration, the idea has aged and matured until it’s time has
      finally come.
    </p>

    <p>
      This can only happen if one adopts a deliberately slow pace of idea adoption.
      Ultimately, I think being able to say, “Maybe later”, to a really great idea
      is a hallmark that distinguishes an experienced UX designer from a novice.
    </p>
2011-09:
  2011-09-12 And now for something completely different moving on to other design challenges.html: >
    
    ---

    title: "And now for something completely different: moving on to other design challenges"

    date: 2011-09-12

    slug: and-now-for-something-completely-different-moving-on-to-other-design-challenges

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/09/and-now-for-something-completely-different-moving-on-to-other-design-challenges.html

    ---


    <p>
      I recently stepped back from day-to-day work at
      <a href="http://www.cozi.com">Cozi</a>, the family-focused startup I cofounded
      with Robbie Cape in early 2005. The past six and half years were a marvelous
      education for me: Cozi was my first startup, and Robbie and I had the great
      luck (and perhaps a little insight) to stake out what has proved to be
      incredibly fertile product territory. It’s been gratifying to design something
      from the ground up, and also rewarding to contribute to the formation of a
      wonderful company culture. The company’s business has never been stronger, so
      from a business perspective, this year’s been quite an exciting time.
    </p>

    <p>
      Still, what draws me to the office ach morning isn’t business success, it’s
      working on challenging user experience design problems. And it’s turned out to
      be harder to find fresh challenges in a project that’s heading for its seventh
      birthday. I think a designer who works indefinitely in the same product space
      may run the risk of becoming dogmatic in their response to new design
      problems, which potentially limits the ability to respond to users and dilutes
      the satisfaction of designing. Although I’d intended to stay with the startup
      for as long as it exited, over the past year I found my imagination sparked
      less and less by work, and more and more by personal projects. Robbie and I
      spent a long time talking this over, and ultimately concluded the company and
      the product were strong enough that other designers could pick up where I’m
      leaving off.
    </p>

    <p>
      I remain extremely bullish about the product’s future, and am still retaining
      a hand in shaping the evolution of Cozi as a board observer and an adviser to
      its design team. But I’m no longer going into the office. For now, I’m using
      this opportunity to focus my attention on developing and promoting QuickUI,
      which I’ve now been working on for almost four years. (Among other things,
      I’ll be giving a talk on <a href="http://www.quickui.org">QuickUI</a> at
      <a href="http://events.jquery.org/2011/boston/">jQuery Boston 2011</a> on
      October 2nd.) I’m really curious to see whether it’s possible to create a rich
      ecosystem of UI controls for the web built on an easy-to-use design and
      development framework. I’ll likely post more about that work as time goes on.
    </p>

    <p>
      This is actually the third time in my life I’ve made a break from my work, and
      each time I’ve made the break without any definite plan of what would come
      next. Each time, I’ve not only enjoyed the sabbatical from work and happily
      pursued independent projects, but ultimately found myself very happy with
      where I landed. We’ll see what comes up next.
    </p>
2011-10:
  2011-10-10 Announcing a UI control catalog and this week's Control of the Week Apple-style SlidingPagesWithDots.html: >
    
    ---

    title: "Announcing a UI control catalog and this week's Control of the Week: Apple-style SlidingPagesWithDots"

    date: 2011-10-10

    slug: slidingpageswithdots

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/10/slidingpageswithdots.html

    ---


    <p>
      I think the web UX field would benefit from having access to an open,
      comprehensive catalog of working, ready-to-use user interface controls. All
      programming platforms provide class libraries replete with hundreds of base
      classes, which are both standard implementations and starting points for
      custom work — but when it comes to user interface libraries, most provide
      something like a dozen very basic controls: a Button, a ListBox, a SpinBox, a
      Slider, etc. There’s also always a DatePicker, and it usually represents the
      pinnacle of complexity for the UI library. That’s about it. Everything else —
      i.e., much of the UI components a design team needs — has to be custom made
      from scratch.
    </p>

    <p>
      This is incredibly inefficient, and a state of affairs tolerated perhaps in no
      other branch of software development. Few people seem to realize that a
      solution is even possible. I think at least one key reason for that is that
      most UI frameworks don’t define the semantics of specialization (subclassing)
      by which one person can take another person’s component and specialize both
      the component’s appearance <em>and behavior</em> to their needs. With such
      semantics in hand, it should be possible to build a much richer ecosystem for
      UI components.
    </p>

    <p>
      A core purpose for the <a href="https://quickui.org/">QuickUI</a> framework is
      to address exactly that need: let people build robust, solid, well-tested base
      controls that can get quickly specialized for particular needs. To prove that
      is possible, and to verify QuickUI can do that well, I’m starting a project to
      create a large library of UI control base classes. My plan to tackle (first on
      my own, and then hopefully with the help of some of you) as many of the common
      UI controls found around the web as possible. Many of these aren’t even
      recognized as shareable controls; they’re often referred to as “patterns”,
      suggesting there’s no common behavior which could be shared.
    </p>

    <p>
      These controls will get collected into a catalog of live examples and
      ready-to-use source code. Each control in the catalog will be live code: not
      screen shots of examples, not a pattern, not a template for a prototyping
      tool, not a recipe for doing it yourself. Each one should be ready to use in
      your web app. Furthermore, each control should be able to serve as the
      starting point for your own custom refinements. As a side effect, the catalog
      should also be a useful reference for developers building UI in other ways,
      but the biggest benefits should accrue to people who can just pick up the
      working controls and start using them.
    </p>

    <p>
      As a working format for the project, I’ve been inspired by the efforts of
      various artists to create a something-a-day for 365 days (e.g., Noah Scalin’s
      <a href="http://gelconference.com/videos/2009/noah_scalin/">Skull a Day</a>).
      I think a good control implementation might take longer than a day to code and
      write up. I think a control a week is a more reasonable goal.
    </p>

    <p>So here’s my plan for Control of the Week:</p>

    <ol>
      <li>
        Each week I’ll pick a common control to implement (or improve) and discuss.
      </li>
      <li>
        I’ll code up a solution in QuickUI. Each implementation will generally focus
        on doing a single UI task really well.
      </li>
      <li>
        I’ll do my best to verify that the solution works as expected in the major
        browsers: Chrome, Firefox, IE 8+, and Safari. Visuals will be done in CSS3
        whenever possible, so things might look different (clunkier) in IE8, but
        I’ll try to allow for graceful degradation.
      </li>
      <li>
        I’ll add an entry for the control to the
        <a href="https://quickui.org/catalog">QuickUI Catalog</a>. The control’s
        notes may include suggestions on when and how to use the control in a UI.
        The Catalog already contains a number of controls ready to go. Some of those
        will be revisited and spiffed up as part of this project.
      </li>
      <li>
        I’ll post the control’s source code in the
        <a href="https://github.com/JanMiksovsky/quickui-catalog"
          >quickui-catalog repo on GitHub</a
        >. From there the source could get copied into any web app project. For now,
        QuickUI is designed for use with an accompanying markup language, but they
        could fairly easily be invoked from regular JavaScript. I’ll be working on
        better documenting how to do that.
      </li>
      <li>
        I’ll blog about the control here. This will likely include a look at one or
        two examples of sites using the control, and any thoughts on how the control
        came out. Additional related controls (like RotatingPagesWithDots, below)
        may fall out of the week’s work, and as time allows I will write up some of
        those as well.
      </li>
    </ol>

    <p>
      The project format and details will certainly evolve, but rather than plan
      that all out, I want to dive in and get started. So without further ado,
      here’s…
    </p>

    <p><strong>Control of the Week: Apple-Style SlidingPagesWithDots</strong></p>

    <p>
      <a
        href="https://quickui.org/catalog/default.html#page=SlidingPagesWithDotsAbout"
        >SlidingPagesWithDots</a
      >
      presents its content as a horizontal sequence of pages in which navigation
      between pages shows a sliding animation. The classic representation of this
      control is found in the iOS app launcher:
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e2014e8c1fa9bb970d-pi.jpeg"
        alt="iPhone Standard Launch Screen"
      />
    </p>

    <p><strong>Key aspects</strong></p>

    <ul>
      <li>
        This control renders its content as a set of pages, one of which is shown at
        a time.
      </li>
      <li>
        A set of small dots below the pages show the user how many pages there are;
        a highlighted button indicates the current page.
      </li>
      <li>The user can navigate horizontally.</li>
      <li>
        The pages slide left and right to provide a sense of physicality — even the
        unseen pages are conceptually “there”, just not seen.
      </li>
      <li>
        To increase physicality, navigation doesn’t wrap once the user reaches the
        first or last page. Navigating from the last to the first page shows all
        intermediate pages sliding quickly by.
      </li>
    </ul>

    <p>
      In a touch screen implementation like the one above, the user swipes left and
      right to navigate the pages. Apple’s store also uses this device in the “hero”
      element of a product page (e.g., the
      <a href="http://www.apple.com/macbookair/">MacBook Air</a> page) to rotate
      between product shots:
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e2014e8c1fa9c9970d-pi.png"
        alt="Apple Store Sliding Pages"
      />
    </p>

    <p>
      Here the pages automatically rotate once through on a timer; the user can also
      click a dot to navigate to a specific page.
    </p>

    <p><strong>Implementation</strong></p>

    <p>
      Since iOS doesn’t (yet) make swiping easy to implement, for the implementation
      I’ve focused on the Apple Store-style example. The control renders each child
      as a separate page, so their visual treatment and behavior is completely open.
      The dots can be replaced with custom controls. A subclass of
      SlidingPagesWithDots called
      <a
        href="https://quickui.org/catalog/default.html#page=RotatingPagesWithDotsAbout"
        >RotatingPagesWithDots</a
      >
      adds the Apple Store rotation behavior; the rotation interval can be
      customized.
    </p>

    <p>
      As will likely become a common theme, getting this to work in Mozilla and
      WebKit was straightforward, and getting it to work in IE9 wasn’t too bad.
      Getting it to work in IE8 was an enormous pain that necessitated fixing some
      optimistic assumptions deep in the QuickUI framework. Furthermore, IE8&#39;s
      lack of border-radius support means that the circular&#0160;“dots” will
      degrade to squares. This could be addressed by falling back to a sprited image
      on IE8, but as I’d already spent more time than I’d intended on IE8, I’ve
      punted on that for now.
    </p>

    <p><strong>Usage notes</strong></p>

    <p>
      This control seems useful for showing a small set of, say, 3-7 pages. The
      sliding animation is nice, but for high-frequency tasks could become annoying.
      The automatic rotation could be distracting in any situation where the user is
      forced to perform a task while the animation is playing. It seems more
      appropriate for, say, a site’s home page, where it could be used to
      temporarily highlight content in the hopes of showing something that interests
      the user.
    </p>
  2011-10-17 Control of the Week Facebook-style AutoSizeTextBox.html: >
    
    ---

    title: "Control of the Week: Facebook-style AutoSizeTextBox"

    date: 2011-10-17

    slug: autosizetextbox

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/10/autosizetextbox.html

    ---


    <p>
      It’s nice to have multi-line text boxes resize to fit their contents. The
      native HTML &lt;textarea&gt; tag, which creates a multi-line text box, gives
      the text box a fixed height. (Chrome and Firefox will let you manually resize
      a textarea, which helps, but the resizing isn’t done for you.) A fixed height
      text box never feels like it’s the right height: if you don’t have any text to
      enter, a tall box is too big, and if want to actually enter a block of text,
      you always find yourself wishing the box were bigger.
    </p>

    <p>
      Auto-sizing feels like a missing feature of web forms. Many forms need to let
      the user type in lines of text into a text box, and since the size of that
      text can vary, it seems to make sense to start out with a small text box, then
      grow the text box when necessary. HTML has had form support since at least
      HTML 2.0, so it’s surprising this feature is still not standard. For
      comparison, Microsoft Word’s form support has had auto-sizing text boxes for
      years.
    </p>

    <p>
      I think the first solid implementation of a web auto-sizing text box was on
      Facebook, which offers you such a text box to enter a status update:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e201543619f653970c-pi.png"
        alt="Facebook Status Box"
      />
    </p>

    <p>&#0160;</p>

    <p>
      Facebook&#39;s design varies from week to week (and user to user), but at the
      time I took the image above, the text box started out tall enough to contain
      three lines of text. As the user types more, the text box grows in size:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e201543619f65d970c-pi.png"
        alt="Facebook Status Box (with more text)"
      />
    </p>

    <p>&#0160;</p>

    <p><strong>Key aspects</strong></p>

    <ul>
      <li>
        The text box has a minimum height. This can be sufficient for a single line
        of text or (as on Facebook) can be bigger.
      </li>
      <li>
        As the user types, the text box grows. In a normal layout, the text box’s
        increased size will push down any elements below the text box.
      </li>
      <li>
        The height of the text box is sufficient to contain the current text, plus
        an additional blank line. This latter aspect is helpful to let the user know
        that there’s still more room to type — i.e., that they don’t need to stop
        yet.
      </li>
      <li>
        The text box may also have a maximum height. Note that this is different
        than the text box’s maximum <em>length</em>, which establishes how many
        characters can be entered.
      </li>
    </ul>

    <p><strong>Usage</strong></p>

    <p>
      See&#0160;<a
        href="https://quickui.org/catalog/default.html#page=AutoSizeTextBoxAbout"
        >AutoSizeTextBox</a
      >&#0160;in the QuickUI Catalog for a working, reusable implementation.
    </p>

    <p>
      The default height of an AutoSizeTextBox is set to accommodate two lines of
      text. This suggests to the user that they’ll have ample room to type. As they
      begin to type on the second line, a third will automatically be created for
      them. As a result, they’ll never feel like they’re running out of room. In
      tight spaces, this minimum height can be overridden to produce an
      AutoSizeTextBox that’s only one line tall when empty.
    </p>

    <p><strong>Implementation notes</strong></p>

    <p>
      I’m not aware of a pure CSS solution to this problem; the variety of ways to
      implement an auto-sizing text box all require some degree of JavaScript. A
      while back I posted a
      <a
        href="http://stackoverflow.com/questions/7477/autosizing-textarea/2032642#2032642"
        >solution on StackOverflow</a
      >
      that, at its core, leaves most of the layout calculations to the browser. In
      this approach, the textarea and a hidden element are both placed inside a
      containing div. I&#39;d originally used a div for the hidden element, but
      realized that using a &lt;pre&gt; (preformatted) element would automatically
      preserve line breaks and white space.
    </p>

    <p>
      The hidden pre is set to use visibility: hidden, which tells the browser to
      layout the control as normal, but leave the pre invisible.&#0160;When the user
      types in the textarea, a small bit of JavaScript simply copies the contents of
      the textarea into the hidden pre element. As the pre gets bigger, it forces
      the containing div to become bigger, which in turn makes the textarea grow.
      The textarea ends up as big as the hidden copy of the text (plus an extra
      line), which gives us the effect we want.
    </p>

    <p>
      The most finicky bit of the implementation deals with letting the control work
      with different font sizes. During initialization, the font of the overall
      control is copied over to the textarea and hidden pre so that the text metrics
      of the two elements will be the same. This operation has to wait until the
      control is actually in the DOM so that any relevant styles will have been
      applied.
    </p>

    <p>
      Moreover, the initialization logic needs to know the line height of the text
      in the textarea. Unfortunately, if line-height has not been explicitly set,
      WebKit and IE report the line-height as “normal”, instead of giving us an
      actual measurement we can use. So the control calculates an approximate
      line-height by applying a constant factor to font-size. This approximation
      means that the text box height can be off by a pixel or so in WebKit and IE.
    </p>
  "2011-10-24 UI Control of the Week Microsoft Office combo boxes, still better than anything comparable in HTML.html": >
    
    ---

    title: "UI Control of the Week: Microsoft Office combo boxes, still better than anything comparable in HTML"

    date: 2011-10-24

    slug: listcombobox

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/10/listcombobox.html

    ---


    <p>
      Sometimes the important user interface components aren’t the glamorous ones.
      One control the web could really use is a robust, extensible combo box. A
      standard dropdown combo box has been part of the UI lexicon for at least
      twenty years. I think I first heard about them when I was a summer intern at
      Microsoft in 1988 and some application group, perhaps the Microsoft Excel
      team, circulated a memo (on paper!) proposing their creation. (Perhaps there
      are antecedents in earlier platforms as well.) The gist of that memo then is
      the same as the core functionality now: let the user type whatever they want,
      but also offer them a list of choices they can pick from:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20162fbceb409970d-pi.png"
        alt="Excel 2010 Combo Box"
      />
    </p>

    <p>&#0160;</p>

    <p>
      A combo box is one of those controls that seems like it couldn’t be that hard
      to implement, but in reality is ferociously complex.
    </p>

    <p><strong>Key attributes</strong></p>

    <ul>
      <li>
        The user can type arbitrary text into the text box portion of the combo box.
        In some cases (such as the point size combo box directly to the right of the
        font combo box above), the text box performs its own validation (e.g.,
        requiring that the input text be a number).
      </li>
      <li>
        The user can click the arrow button to dropdown the list of choices. When
        the user makes a selection from this list, the dropdown collapses, the
        choice is placed into the text box, and the text is left selected.
      </li>
      <li>
        The list provides AutoComplete behavior, even when the dropdown list is
        collapsed.
      </li>
      <li>
        While the choices in the list ultimately can be represented with a text
        string, the choices may be rendered in richer ways. In the image above, a
        font is represented by an icon (indicating the type of font: TrueType,
        etc.), the font name (rendered in the font itself), and additional
        information on the right in the local language of the culture associated
        with the font. (I have no idea what the examples on the right say in the
        image above, but their English equivalents elsewhere in the list indicate
        the recommended usage for the font: for headings, for body type, etc.
        <strong>UPDATE:</strong>&#0160;Commenter Jonathan indicated that the
        characters next to the Hebrew font are the first several letters of the
        Hebrew alphabet. Presumably the other fonts show similar samples of the
        font’s&#0160;alphabet.)
      </li>
      <li>
        If the current entry in the text box is present in the list, the
        corresponding list item is highlighted.
      </li>
      <li>
        The list provides extensive support for keyboard navigation. The user can
        toggle the list by pressing Alt+Down; they can navigate the list using arrow
        keys, Page Up/Down, Home/End; they can make a selection by pressing Enter;
        etc.
      </li>
      <li>The list is resizable.</li>
      <li>
        By default, the dropdown list is at least as wide as the text box. (This
        behavior is not shown in the image above, but can be found in other combo
        boxes.)
      </li>
      <li>
        The dropdown list is a transient popup that can be dismissed by clicking
        outside it.
      </li>
    </ul>

    <p>
      It’s too bad there’s no support for a solid, extensible combo box in HTML,
      because it’s really quite an elegant control. Many controls on the web are
      described as combo boxes, but in fact are slightly different, or exhibit fewer
      features than standard Microsoft Office combo boxes.
    </p>

    <ul>
      <li>
        A dropdown list box created with a standard HTML &lt;select&gt; tag (without
        the “multiple” option) does have a dropdown list, but does not allow the
        user to type arbitrary text. Moreover, the resulting dropdown list can only
        render choices as plain text.
      </li>
      <li>
        A text box with AutoComplete does save the user some keystrokes, but does
        not give the user a way to see all the choices. The user may inadvertently
        (or intentionally) discover some of the choices through typing, but there’s
        no way to see the complete list.
      </li>
      <li>
        The HTML 5 spec defines a &lt;datagrid&gt; element which browsers can use to
        create a combo box. However, at the time of this writing,
        <a href="http://quirksmode.org/html5/inputs.html"
          >support for &lt;datagrid&gt; is lacking</a
        >, even in the WebKit browsers. Moreover, the existing Mozilla
        implementation doesn’t offer the user a true combo box, but rather a text
        box with AutoComplete, and the choices are only represented in plain text
        (see both of the above points).
      </li>
    </ul>

    <p><strong>Usage</strong></p>

    <p>
      I’ve posted a reusable, extensible
      <a href="https://quickui.org/catalog/#page=ListComboBoxAbout">ListComboBox</a>
      in the QuickUI Catalog. This accepts any array of items which can be rendered
      as choices in the list. By default, choices are rendered as a generic button
      (without borders), but any custom control class could be used as well.
    </p>

    <p>
      As implied above, a combo box is well suited for any situation in which you
      want to allow the user to type arbitrary text, while at the same time offering
      them choices. The ability to render a choice in the list as a custom control
      gives you the option of adding more detail, or otherwise helping the user to
      make a more informed choice. Because a combo box is very compact in its normal
      state, it can be used in almost any place a text box can.
    </p>

    <p>
      Although combo boxes have a long history in user interfaces, I’ve observed
      many usability studies where a user did not actually notice the dropdown
      arrow. This is most likely a result of the arrow’s small size and placement on
      the far right; I expect the problem is a bigger issue in very wide combo
      boxes. Perhaps as a response to this shortcoming, many web sites that have
      hand-rolled combo boxes automatically pop up the list of choices whenever the
      user clicks on the text box or moves the focus into it, rather than requiring
      the user to click the arrow. That actually seems like a reasonable improvement
      on Office’s combo boxes – it doesn’t seem to hurt much to have the list
      available, even if the user doesn’t want to use it – so I’ve included that
      behavior as well, with an option to turn it off.
    </p>

    <p><strong>Implementation notes</strong></p>

    <p>
      ListComboBox derives from the more fundamental base class
      <a href="https://quickui.org/catalog/#page=ComboBoxAbout">ComboBox</a>, which
      is the class that actually binds together a text input control, the dropdown
      button, and the popup containing the choices. ListComboBox happens to render
      the choices as a vertical, single-column list, but it’s easy to create
      controls that drive from ComboBox that present their choices in very different
      ways. (To present an example, I’ll follow up in a later post on how to create
      a traditional date picker by deriving from ComboBox.)
    </p>

    <p>
      As a testament to the complexity of a combo box, I was forced to leave out
      certain aspects of the Microsoft Office example. In particular, full keyboard
      support would have taken to long to implement reliably in the time I allotted
      for this control. Along with keyboard navigation, I’ve postponed working on a
      means to highlight the current item in the list. The list box currently grows
      as tall as necessary to show all the choices; with long lists it would
      obviously be helpful to let the list grow no longer than the bottom of the
      viewport. Finally, the resizability of the list didn’t seem worth the trouble.
    </p>

    <p>
      Per usual, various aspects of the control were much trickier to implement in
      IE. It proved challenging to implement the behavior described above in which
      choosing an item from the list closed the list and left the entire text
      selected. Attempting to affect the selection in IE after the list had been
      closed had the unfortunate side-effect of leaving the list open: programmatic
      inspection revealed that IE claimed the list was now hidden, when in fact it
      was still clearly visible. For now, in IE, when the user makes a choice from
      the list, the full text of their choice is placed into the text box, but is
      not left selected.
    </p>

    <p><strong>Possibilities</strong></p>

    <p>
      With ListComboBox in hand, it’s quite easy to create a new kind of combo box
      that works basically the same way, but uses a custom input area and a custom
      list presentation. In about an hour, I was able to throw together a
      <a href="https://quickui.org/catalog/#page=ColorSwatchComboBoxAbout"
        >ColorSwatchComboBox</a
      >
      that lets the user choose CSS colors by name or value:
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20153927934c4970b-pi.png"
        alt="Color Swatch Combo Box"
      />
    </p>

    <p>
      Both the input area and the list show color swatches next to color names. The
      list of choices is populated simply by feeding the combo box a set of strings
      (the color names). The ComboBox ancestor class puts the input area and the
      list together, along with the dropdown behavior. The ListComboBox parent class
      takes care of rendering of the choices as list items, as well as doing the
      AutoComplete behavior. So most of the behavior of this rather intricate color
      picker is handled by the base classes; the classes specifically associated
      with picking colors are quite simple. It’s this sort of UI factoring that
      should allow people to quickly create much richer web sites than with the raw
      HTML controls, even the ones in HTML 5.
    </p>
  2011-10-31 UI Control of the Week Rendering arbitrary data on a calendar with a Flickr-style CalendarMonthNavigator.html: >
    
    ---

    title: "UI Control of the Week: Rendering arbitrary data on a calendar with a Flickr-style CalendarMonthNavigator"

    date: 2011-10-31

    slug: calendarmonthnavigator

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/10/calendarmonthnavigator.html

    ---


    <p>
      This week’s UI control comes from Flickr, which for a number of years has
      offered a cool way to browse the most interesting user-contributed photos with
      their
      <a href="http://www.flickr.com/explore/interesting/">Interestingness</a>
      calendar:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20154366e83bd970c-pi.png"
        alt="Flickr Interestingness Calendar"
      />
    </p>

    <p>&#0160;</p>

    <p>
      As cool as this is, most of the work to build this specific page was probably
      allocated to reproducing the same aspects of any month calendar built
      anywhere. That is, some Flickr developer spent a long time mucking about with
      date math, writing code that had nothing to do with Flickr. I’m guessing that,
      since the web was first created, the logic to render and navigate a calendar
      for an arbitrary month in HTML like this has probably been written hundreds if
      not thousands of times. And there are probably web sites that would benefit
      from displaying data in a month calendar, but can’t be bothered to make that
      investment.
    </p>

    <p><strong>Key attributes</strong></p>

    <ul>
      <li>The calendar shows a complete month at a time.</li>
      <li>
        The user can navigate to the previous or next month. In Flickr’s case,
        navigation into the future is disabled.
      </li>
      <li>Each month shows 4 to 6 rows of seven days a week.</li>
      <li>
        Days in the previous month (on the first row, to the left of the first day
        of the month) and the next month (in the last row, to the right of the last
        day of the month) are hidden.
      </li>
      <li>
        Given how the photos are selected based on historical data, Flickr only
        shows photos for days in the past. The current date and days in the future
        are grayed out.
      </li>
      <li>
        A given date is represented visually in two ways: 1) as the number for the
        day of the month, and 2) as a photo thumbnail. In this case, the photo is
        the most interesting photo (according to the number of comments, etc.) on
        Flickr for that given day.
      </li>
      <li>
        Clicking a thumbnail pops up more thumbnails of interesting photos on that
        same day. The popup offers links to specific photo pages, or to a more
        complete list of the interesting photos for that day.
      </li>
    </ul>

    <p><strong>Usage</strong></p>

    <p>
      I started by creating a general-purpose
      <a href="https://quickui.org/catalog/CalendarMonthNavigator"
        >CalendarMonthNavigator</a
      >
      to handle the date and navigation logic:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20162fbf06061970d-pi.png"
        alt="CalendarMonthNavigator"
      />
    </p>

    <p>&#0160;</p>

    <p>
      Basic controls like this in the QuickUI catalog deliberately come with very
      generic styling. This allows one to try out the control in a minimalist mode,
      which hopefully makes it easy to see what the control actually does without
      getting distracted by its appearance. The generic styling is automatically
      turned off in a subclass so one doesn’t have to fight much with styles defined
      by the parent classes. The class used to render individual days is intended to
      be overridden, so that arbitrary content can be placed within a day.
    </p>

    <p>
      A month calendar like this is well-suited for displaying date-based
      information using the
      <a
        href="http://www.uxmatters.com/mt/archives/2005/12/small-multiples-within-a-user-interface.php"
        >principle of small multiples</a
      >. This could be done to render historical information (sales data, etc.) as
      Flickr has done here, or to represent information about the future (a weather
      forecast, a calendar of events, etc.). If navigation is not desired — for
      example, if the application wants to fix which month is shown — the
      lower-level
      <a href="https://quickui.org/catalog/CalendarMonthWithHeadings"
        >CalendarMonthWithHeadings</a
      >
      can be used.
    </p>

    <p><strong>Implementation notes</strong></p>

    <p>
      Following the principle of separation of concerns, the base
      CalendarMonthNavigator is comprised of
      <a href="https://quickui.org/catalog/LateralNavigator">LateralNavigator</a>
      and a CalendarMonthWithHeadings, which itself breaks down into a calendar
      control cornucopia:
      <a href="https://quickui.org/catalog/MonthName">MonthName</a>,
      <a href="https://quickui.org/catalog/DaysOfWeek">DaysOfWeek</a>,
      <a href="https://quickui.org/catalog/CalendarWeek">CalendarWeek</a>, and
      finally <a href="https://quickui.org/catalog/CalendarDay">CalendarDay</a>.
    </p>

    <p>
      Once the base CalendarMonthNavigator was finished, creating a custom
      FlickrInterestingnessDay class was quite straightforward, as was styling the
      month navigator. Flickr’s calendar shows the names of the next/previous month
      alongside the next/previous buttons, which wasn’t hard to add. By dropping the
      day class into the month navigator, the FlickrInterestingnessNavigator
      (Update: Now called
      <a
        href="https://quickui.org/catalog/FlickrInterestingNavigator"
        target="_self"
        >FlickrInterestingNavigator</a
      >.)&#0160;fell out cleanly. The result is pretty close to the Flickr
      Interestingness calendar. One might even say it’s interestingnessish.
    </p>

    <p>
      As far as I can tell, Flickr’s API lets you grab interesting photos only for a
      single date per call. Presumably they have an internal API that lets them grab
      the most interesting photo for each day of a given month in a single call, but
      no such call is documented. So this particular calendar is forced to make a
      separate call for each day, which is obviously terrible. Nevertheless, that
      performance seemed acceptable in a calendar intended mostly as a demonstration
      of how to create a custom CalendarMonthNavigator. In a real application, one
      would want to grab all the data in one call at the month level, then apportion
      the data to the corresponding days.
    </p>

    <p>
      Given that performance was already an issue, I chose not to implement the
      popup Flickr shows when you click on a day (which shows additional interesting
      photos for that day). Instead, clicking a day takes you straight to the page
      listing the most interesting photos for a given date.
    </p>

    <p>
      In creating the calendar controls, I was able to make use of the excellent
      jQuery <a href="https://github.com/jquery/globalize">Globalize</a> project,
      which defines culture-specific information like month names and day names for
      a staggering number of cultures. (Thanks are due to Microsoft for contributing
      their vast culture database.) So the subcomponents MonthName and DaysOfWeek
      localize their output to the current culture if the culture has been set via
      Globalize.culture(). Since Globalize also indicates which day of the week
      should be shown as the first day of the week — i.e., in the leftmost column —
      I went ahead and localized that as well. For example, the first day of the
      week will be Sunday in the U.S., but will be Monday in France, or Saturday in
      Saudi Arabia. (Flickr’s own Interestingness calendar localizes the month and
      day names into other languages, but doesn’t correctly adjust the calendar
      presentation to reflect in the local culture’s first day of the week.)
    </p>

    <p>&#0160;</p>

    <p>
      <em
        >Aside: I’ve added a new gallery to the
        <a href="https://quickui.org/catalog" target="_self"
          >main QuickUI Catalog page</a
        >, showing live demos of all the controls in the catalog so far. This is
        only the fourth Control of the Week, but the catalog started out with a
        handful of controls, and most weeks see the addition of multiple related
        controls to the catalog, so there’s about 40 controls there now. Based on
        community feedback, a high priority for the next month or so will be making
        it possible to use the catalog controls in plain JavaScript, without needing
        to know anything about how QuickUI controls are created, and without having
        to use the QuickUI markup language (which is more concise, but entails a
        learning curve).</em
      >
    </p>
2011-11:
  2011-11-07 UI Control of the Week Straight-up DateComboBox (and why your browser won't solve your date picker needs).html: >
    
    ---

    title: "UI Control of the Week: Straight-up DateComboBox (and why your browser won't solve your date picker needs)"

    date: 2011-11-07

    slug: datecombobox

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/11/datecombobox.html

    ---


    <p>
      Once again, it’s amazing how hard it is to get the small stuff right. Building
      on both
      <a
        href="http://miksovsky.blogs.com/flowstate/2011/10/calendarmonthnavigator.html"
        >last week’s CalendarMonthNavigator post</a
      >
      and the
      <a href="http://miksovsky.blogs.com/flowstate/2011/10/listcombobox.html"
        >earlier ComboBox post</a
      >, this week’s control is the standard date picker found in countless web
      sites and applications. Date pickers are generally optimized to pick a date in
      the near future, such as a date of travel or a date for an upcoming
      appointment. Here’s a typical example from Google Calendar:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20154369ce82a970c-pi.png"
        alt="Google Calendar Date Picker"
      />
    </p>

    <p>&#0160;</p>

    <p>Key attributes</p>

    <ul>
      <li>
        The control always includes a text box. In the control&#39;s normal state,
        this may be all that is visible. Generally speaking, clicking in the text
        box or moving focus to it opens the dropdown calendar.
      </li>
      <li>
        The control may include an icon, often a downward-pointing arrow,&#0160;to
        the right side of the text box&#0160;to indicate that the user can interact
        with the control to make a selection from a set of choices (i.e., the popup
        calendar). Some controls that offer an icon will require the user to click
        there to open the calendar, and will <em>not</em> dropdown the calendar when
        the user clicks in the text box.
      </li>
      <li>
        The input portion of the combo box and the dropdown portion are generally
        kept in sync. As the user types, the calendar reflects the new date. As the
        user navigates the calendar, the text box shows the new date.
      </li>
      <li>
        The user is generally expected to enter dates in short date format. In the
        U.S., this is month/day/year.
      </li>
      <li>
        The control validates the user’s typed text to verify it represents a date.
        This validation may occur as the user types, after they move the focus away,
        or when they try to save the form.
      </li>
      <li>
        Some variants of this control (e.g., Expedia’s) show two calendar months at
        a time. This makes it easier to select a date in the next few weeks when the
        current month is almost over.
      </li>
      <li>
        Ideally, the dropdown should implicitly close if the user tabs away from the
        field or switches to a different window.
      </li>
      <li>
        The dropdown calendar may offer a “Today” button that lets the user quickly
        select, or jump back to, the current date.
      </li>
    </ul>

    <p>
      Given the wide variety of implementations, and the complexity of this control,
      it’s not surprising to see wide variation of the quality of implementations.
      Some do a terrible job dealing with loss of keyboard focus, some don’t parse
      dates very well, some can’t keep the text and calendar in sync, and so on.
    </p>

    <p><strong>Commentary</strong></p>

    <p>
      Date pickers seem boring, but I think there’s something quite fascinating
      about them: they may represent a theoretical maximum of complexity possible in
      a monolithic approach to creating user interface elements. Nearly every user
      interface framework will offer a date picker — but they will rarely offer
      something more complex. Why is this?
    </p>

    <ol>
      <li>
        Apps need to let people enter valid dates that a program can understand.
        This means constraining input and/or parsing dates, and usually rendering a
        month calendar — and all these tasks turn out to be pretty hard. The problem
        gets even harder when one wants to handle multiple cultures.
      </li>
      <li>
        The standard combo box solution for a date picker means that, in its normal
        state, the control to look very boring. It’s just a text box. This lets it
        fit in with pretty much any application’s visual style.
      </li>
      <li>
        The popup calendar month navigator may not always look elegant, or fit in
        with the app’s visual style, but since it’s only a transient part of the
        user experience, design teams decide they can live with it — especially when
        confronted with a realistic development cost for something better.
      </li>
      <li>
        The variety of situations that come up when picking a single date in the
        near future is small enough that a monolithic control can handle most of the
        common situations. Suppose you want to constrain the selected date to a
        weekday. You can probably find a date picker that lets you handle that
        specific constraint.
      </li>
    </ol>

    <p>
      The problem is that, once you get outside the narrow set of common scenarios,
      you’re out of luck. Suppose you want to let the user pick <em>two</em> dates
      that are usually close together. In the example above, they want to let the
      user pick the departure and return dates for a trip. But picking a date range
      is beyond the complexity of most date pickers. Even if they wanted to support
      that scenario, the variety of needs would quickly multiple out of control.
      Some apps would want to force the two dates to be within a certain number of
      days of each other, others would want to force the two dates to be a minimum
      number of days apart, and so on. There’s just no way to build a monolithic
      date picker than can handle all the common cases with a big pile of properties
      governing control behavior. So user interface frameworks give up on this
      problem, offer the single-date date picker, and let everyone cobble together
      multiple date pickers to get the desired result.
    </p>

    <p>
      In an extensible user interface framework, you could simply provide all the
      building blocks required to construct a date picker, then let app designers
      snap those together to get the control they want. So if they want a stock
      single-date picker, fine, that’s provided, but the same <em>parts </em>can
      also be snapped together to produce a two-date date picker, or whatever else
      is needed. Those in turn can be offered as reusable user interface controls.
    </p>

    <p><strong>HTML 5 is not going to solve your problem</strong></p>

    <p>
      The HTML 5 spec defines a new “date” input type, allowing the browser to
      provide a standard date picker UI. That effort is laudable, but so far
      inadequate for all but the most basic needs.
    </p>

    <p>
      The stock date picker controls in the mainstream browsers are god-awful. (<a
        href="http://www.w3schools.com/html5/tryit.asp?filename=tryhtml5_form_date"
        >Try your own browser’s date control</a
      >.) Here’s a screen shot of Chrome’s date control:<br />
      <br />
      <img src="/images/flowstate/6a00d83451fb6769e20162fc1eb26b970d-pi.png" />
      <br />
      <br />This is an unadulterated user interface disaster. The format Chrome’s
      decided to support (YYYY-MM-DD) is one that might be helpful to programmers,
      but I expect essentially zero consumers actually use it in their personal
      lives. I can’t think of a single situation in normal life where that format is
      even seen. In the U.S., at least, people expect to enter a short date like
      “11/7/2011”, but this format is rejected by Chrome’s control. So this
      browser’s standard date picker fails to support its home country’s<em
        >&#0160;single most common input format</em
      >. And the little up/down spinner arrows are completely out of place here.
      They only advance the day portion of the date, they’re tiny hit targets, they
      don’t let people think in calendar terms, etc., etc. And let’s not overlook
      the fact that so little attention has been paid to this control that the “up”
      spinner button is missing its top border.
    </p>

    <p>
      If you take a look at
      <a href="http://marxsoftware.blogspot.com/2011/01/html5-date-picker.html"
        >Opera’s date picker</a
      >, it’s more functional (it adds a dropdown arrow, a real calendar navigator,
      etc.) but, visually speaking, it still looks terrible. It’s hard to imagine a
      design team happy including this bit of UI in a consumer-facing application.
    </p>

    <p>
      If these controls represent the sorts of designs which browser creators are
      capable of creating, that doesn’t bode well for the notion that adding
      <em>more</em> semantics to HTML is going to solve any meaningful user
      interface problems. Either the browser designers don’t care about those
      controls, or they don’t have the expertise to design them well, or they don’t
      see a payoff in doing so. It’s worth noting that having the browser try to
      solve everyone’s date picker needs is an even more implausible answer than
      having a monolithic date picker control solve everyone’s date picker needs.
      Browser controls are <em>less </em>flexible than nearly every date picker
      control out there.
    </p>

    <p>
      Whatever the case, in their current state, I wouldn’t advise anyone to use
      these controls on a web site where even modest usability or aesthetics are a
      requirement. For reference: Even Google Calendar doesn’t even use Google
      Chrome’s own date picker.
    </p>

    <p>
      The situation is different on mobile platforms, where the browser can fall
      back to the OS’ native date picker UI. They are generally well-designed, or at
      least have received a considerable amount of design attention (those are
      different statements).
    </p>

    <p>
      On all platforms, it should be observed that there’s nothing that says a
      dropdown combo box is the ultimate UI for picking a date. In fact, in many
      applications, an inline calendar might actually be preferable. If you have a
      page that’s all about getting the user to pick a date in the near future, why
      force them to have to dropdown the calendar first? This is just to say that
      the right control for the job really depends on context. If anyone tells you
      that you <em>must</em> use the stock HTML 5 elements to let users enter data,
      I’d think very hard about whether that person actually has the interests of
      your users (and your business) in mind, or are simply touting a standard
      because it’s a standard.
    </p>

    <p><strong>The DateComboBox control</strong></p>

    <p>
      I’ve posted a
      <a href="https://quickui.org/catalog/DateComboBox">DateComboBox</a> control to
      the QuickUI Catalog. (Taxonomy note: this control is called DateComboBox
      instead of DatePicker to reflect the fact that it’s a combo box, and the fact
      that there are many other UIs possible for picking a date.)
    </p>

    <p>&#0160;</p>

    <p>
      <img src="/images/flowstate/6a00d83451fb6769e20154369ce839970c-pi.png" />
    </p>

    <p>&#0160;</p>

    <p>
      As noted last week, the generic appearance of these controls is minimalist by
      design; they’re meant to be useful and unobtrusive as is, but can also receive
      further styling, subclassing, etc.
    </p>

    <p><strong>Usage</strong></p>

    <p>
      Use DateComboBox in situations where you want to let the user type or choose a
      single date (especially one in the near future) and space is a concern or you
      don’t want to focus too much attention on the date. If picking a date is, in
      fact, the focus of a UI, then it may be more appropriate to use an inline
      calendar, such as a
      <a href="https://quickui.org/catalog/CalendarMonthNavigator"
        >CalendarMonthNavigator</a
      >.
    </p>

    <p>
      Note that, if the user omits a year, the current year will be assumed. In
      applications I’ve worked on that let users enter dates (Microsoft Money,
      Cozi), we always found that users generally expect dates without a year to
      reflect the <em>future</em>. E.g., if it’s November 2011, and a calendar user
      in the U.S. creates an appointment with a date of “2/15”, they expect the
      appointment to end up on February 15, 2012 (in the future) and not February
      15, 2011 (the current year, but in the past). At some point, this might be
      worth fixing in DateComboBox, but for now the control makes the more
      simplistic assumption about current year.
    </p>

    <p>
      DateComboBox uses
      <a
        href="http://miksovsky.blogs.com/flowstate/2010/09/form-validation-feedback-be-slow-to-complain-and-quick-to-forgive.html"
        >asymmetric validation</a
      >, which is to say that it will be slow to complain and quick to forgive. By
      default, if the user types an invalid date, this fact is not reflected
      visually by an error state until the user leaves the field (or, depending on
      the UI, saves the form). However, any error state is removed immediately upon
      the keypress that fixes the error; the user doesn’t have to leave the field to
      see whether their date entry is now acceptable to the app.
    </p>

    <p>
      Because the content of the days in the dropdown calendar can be customized,
      you’re not limited to just showing dates in the calendar. You could show a
      small amount of date-specific information (e.g., room availability) in the
      calendar itself, helping the user make a more informed initial date choice.
    </p>

    <p><strong>Implementation notes</strong></p>

    <p>
      To me, the most interesting aspect of the implementation here is that the
      DateComboBox is assembled by snapping together three main controls, are three
      of which are interesting in their own right:
    </p>

    <ul>
      <li>
        The dropdown portion of the combo box is a
        <a href="https://quickui.org/catalog/CalendarMonthNavigator"
          >CalendarMonthNavigator</a
        >, the exact same control used to create the
        <a href="https://quickui.org/catalog/FlickrInterestingnessNavigator"
          >FlickrInterestingnessNavigator</a
        >
        last week.
      </li>
      <li>
        The input portion of the combo box is a
        <a href="https://quickui.org/catalog/DateTextBox">DateTextBox</a>. This is a
        subclass of
        <a href="https://quickui.org/catalog/ValidatingTextBox">ValidatingTextBox</a
        >, and is responsible for parsing typed dates.
      </li>
      <li>
        The above elements are joined in a
        <a href="https://quickui.org/catalog/ComboBox">ComboBox</a>. This is the
        same parent class which was used to create the
        <a href="https://quickui.org/catalog/ListComboBox">ListComboBox</a> and
        <a href="https://quickui.org/catalog/ColorSwatchComboBox"
          >ColorSwatchComboBox</a
        >
        discussed earlier.
      </li>
    </ul>

    <p>
      Since I already had the first and third controls in the catalog, the bulk of
      the work this week was building a reasonable solid date-parsing text box. The
      hardest part of that work was handling tricky event interactions to ensure,
      among other things, that the user could navigate within a dropped-down
      calendar; that behavior to some extent conflicts with the desire to have the
      dropdown automatically close whenever the user moves the focus away from the
      text box.
    </p>

    <p>
      I was happy I could delegate much of the date parsing responsibility to the
      fantastic jQuery
      <a href="https://github.com/jquery/globalize">Globalize</a> library mentioned
      last time, which covers a huge range of culture-specific date formats. In
      addition to supporting a standard short date format, Globalize also parses a
      number of other date formats, which is nice even if most users won’t ever use
      them. (If the culture is set to English, for example, you can type “January
      2012”, and that will get parsed and shown as 1/1/2012.) If Globalize is not
      present, then the control falls back to a simpler parser that supports
      U.S.-style short dates (e.g., 12/31/2011).
    </p>

    <p>
      I extended the supported abbreviated formats to handle short years (e.g.,
      12/31/11) and missing year (12/31). Those formats come up daily in people’s
      normal lives, so I thought it was important that a date control handle them.
      (It drives users absolutely nuts that, when scheduling a flight or booking a
      hotel, they have to enter a full four digit year. Is there some
      <em>other</em> century they’re going to be traveling in?) The supported
      abbreviated formats are sensitive to the local culture, so in France those
      examples would look like 31/12/11 and 31/12, respectively.
    </p>

    <p>
      This control is designed for full web browsers only. At noted above, mobile
      browsers already provide fairly good date pickers. It should be
      straightforward to create a control that uses the HTML 5 date field on a
      mobile browser and a DateComboBox otherwise.
    </p>
  2011-11-14 UI Control of the Week Facebook-style PersistentPanel keeps important controls from scrolling away.html: >
    
    ---

    title: "UI Control of the Week: Facebook-style PersistentPanel keeps important controls from scrolling away"

    date: 2011-11-14

    slug: persistentpanel

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/11/persistentpanel.html

    ---


    <p>
      Whether or not you’re the type of person that likes the way Facebook is
      evolving their UI, Facebook is certainly leaving no stone unturned in their
      search for possible improvements. In a recent change, they introduced a panel
      on the right side that shows the user’s live activity feed and an ad. This
      side panel is initially a bit below the blue toolbar, and vertically aligned
      with the top of “Recent Stories” on the left:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e2015392eb8bc2970b-pi.png"
        alt="Facebook Side Panel (Initial State)"
      />
    </p>

    <p>&#0160;</p>

    <p>
      Keep an eye on the upper-right corner. When the user starts to scroll the
      page, the left side of the page scrolls out of view, but the right side panel
      bumps up against the toolbar and remains docked there:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e2015436bed84b970c-pi.png"
        alt="Facebook Side Panel (Scrolled)"
      />
    </p>

    <p>&#0160;</p>

    <p>
      It’s hard to see in static images like this, but the right side panel remains
      entirely visible during scrolling, while the main portion of the page scrolls
      away under the blue toolbar.
    </p>

    <p>
      This is a pretty subtle bit of work to finesse the treatment of a small number
      of vertical pixels above the panel. It would be have been much simpler to have
      the panel always docked up right under the toolbar. I’d hazard a few reasons
      Facebook used this technique here. First, they <em>really </em>want to focus
      user attention on the critical “Update status” button at the top. Keeping the
      feed panel below that line creates a nice wide band of white space that puts
      the eye’s focus on the “Update status” button. If the panel were initially
      docked right below the toolbar, that button would be harder to find. At the
      same time, permanently keeping a vertical gap of 30 pixels or whatever between
      the toolbar and the panel wouldn’t be satisfactory either. Facebook users
      spend a lot of time scrolling through this page, and that gap would probably
      stand out once the buttons above the news feed were scrolled away. Finally,
      it’s possible that Facebook had plans to show an ad or other content
      <em>above</em> the panel, and developed this solution for that purpose, then
      later dropped that ad but kept the solution.
    </p>

    <p><strong>Key attributes</strong></p>

    <ul>
      <li>
        The persistent panel can either be to the side of the page content (as in
        the Facebook example above), or can span the width of the page content (as a
        toolbar).
      </li>
      <li>
        In both the side panel and toolbar cases, any content above the panel can
        scroll off, but the panel stays visible. In Facebook’s case, it just happens
        there’s only white space above the panel (and below the blue toolbar). Other
        sites put content above the panel or toolbar that they initially want the
        user to see at least once, but which can later scroll away.
      </li>
      <li>
        As the panel just begins to move out of view (off the top of the viewport),
        there may be a single jerky repositioning of the panel, but otherwise it’s
        quite stable. This is a significant improvement over earlier techniques to
        keep certain page elements visible. Some sites have tried to keep a side
        panel visible by using JavaScript to constantly adjust the panel’s position
        as the user scrolls, but the resulting performance is jerky and distracting.
        Yelp used to do this, for example, and tried to add a
        <a href="http://www.wittycomments.com/map-stay-put">Map, stay put!</a> check
        box that disabled the behavior, but ultimately concluded it was better to
        just drop this repositioning behavior entirely. In contrast, the technique
        here uses JavaScript to flip the document’s CSS position to “fixed”whenever
        the panel would otherwise be scrolled out of the viewport. This may jerk the
        panel into the correct position once, but thereafter the result feels very
        stable.
      </li>
    </ul>

    <p>
      In general, I think this is a technique more sites, particularly
      advertising-funded sites, could productively adopt.&#0160;For example, I’ve
      noticed that Google’s recent app redesigns are leaving them with much thicker
      sets of controls permanently stuck at the top of a page. It’d be nice if at
      least some of those controls could scroll away, leaving only the most
      important there all the time, and giving more room to the document I’m reading
      or editing.
    </p>

    <p><strong>PersistentPanel control</strong></p>

    <p>
      I’ve posted a
      <a href="https://quickui.org/catalog/PersistentPanel">PersistentPanel</a>
      control to the QuickUI Catalog. There are two demos:
    </p>

    <ol>
      <li>
        A demo of a
        <a
          href="https://quickui.org/catalog/PersistentPanel/persistentPanelSideDemo.html"
          >persistent side panel</a
        >
      </li>
      <li>
        A demo of a
        <a
          href="https://quickui.org/catalog/PersistentPanel/persistentPanelToolbarDemo.html"
          >persistent toolbar</a
        >
      </li>
    </ol>

    <p><strong>Usage</strong></p>

    <p>
      Use a PersitentPanel to offer a small number of controls that are so important
      they should always be within quick reach. As shown in both demos, a
      PersistentPanel can be used when some content must initially appear above the
      panel so that it attracts enough attention. If this content can later scroll
      away, a PersistentPanel can ensure that the tools or information below the ad
      can remain visible. Without this requirement (for content to appear above the
      panel), it’s probably simpler to give the toolbar or panel a permanent
      position along the top, side, or bottom of the page.
    </p>

    <p>
      Note: Both demos show an ad scrolling <em>away</em>. Facebook uses the same
      panel concept to keep an ad <em>visible</em>. Which way you go depends upon
      how likely it is that your users are going to click ads as soon as they see
      them, or whether you think the additional revenue from persistent ads makes up
      for the permanent clutter.
    </p>

    <p><strong>Implementation notes</strong></p>

    <p>
      The basic strategy here is to have the panel content sit within a placeholder
      element that can occupy the same space as the content whenever the content is
      switched to position: fixed. Without that placeholder, content below the panel
      would reflow in an unacceptable manner whenever the panel pops into and out of
      the normal document flow.
    </p>

    <p>
      This is the first control I’ve done in this blog series that actually worked
      in IE8 without modification. Hooray! I usually start in Firefox, then test in
      Chrome and IE9. (I rarely test in Safari, as I’ve yet to create something that
      works in Chrome but not in Safari.) Then I take a deep breath, open the demo
      in IE8, and brace for some weird bugs. But this time IE8 played nice and
      everything worked. Good IE! Sit. Stay.
    </p>

    <p>
      Although I’ve never seen a PersistentPanel dock against the bottom of the
      viewport, that case wasn’t hard to handle, so I added support for that as
      well.
    </p>

    <p>
      In both the toolbar and side panel demos, I wanted to block out the space for
      an IAB universal ad unit, so I created a general
      <a href="https://quickui.org/catalog/AdPlaceholder">AdPlaceholder</a> control
      for that purpose. Now I’ve got a control I can use to quickly say, “Leave room
      for a Leaderboard here”, which is nice. This is one case where I’m thinking
      the control’s generic style should be a bit more colorful and distracting, to
      better approximate the visual noise of a page with ads.
    </p>

    <p>&#0160;</p>

    <p>
      <em
        >Extra: In response to feedback, I&#39;ve begun investing in documentation
        for using the QuickUI framework in plain JavaScript. People are often
        intrigued by the framework, but put off by idea of having to use a
        proprietary markup language (however elegant and efficient it may be).
        Everything in QuickUI, including all the catalog controls, is already
        accessible in plain JavaScript, although there&#39;s yet sufficient
        documentation for how to do this. So, in parallel with these control posts,
        I&#39;m also working on documentation that addresses that gap. The first
        piece in that series is a list of the </em
      ><em
        ><a
          href="https://quickui.org/docs/principles.html"
          target="_self"
          alt="core principles"
          >core principles</a
        >&#0160;which serve as the framework&#39;s foundation.</em
      >
    </p>
  2011-11-21 UI Control of the Week HighlightEffects to expand a highlighted item without affecting layout.html: >
    
    ---

    title: "UI Control of the Week: HighlightEffects to expand a highlighted item without affecting layout"

    date: 2011-11-21

    slug: highlighteffects

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/11/highlighteffects.html

    ---


    <p>
      Johannes Tonollo’s excellent
      <a href="http://www.ui-transitions.com">Meaningful Transitions</a> site does a
      thorough job cataloguing animated transitions that can be used to convey
      specific messages to a user. One animation I’ve always liked was expanding an
      element on hover, as in this screen within Windows Media Center:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20153931b3bac970b-pi.png"
        alt="Media Center Movie Guide"
      />
    </p>

    <p>&#0160;</p>

    <p><strong>Key attributes</strong></p>

    <ul>
      <li>
        When the mouse hovers over a list item (or the keyboard focus moves to it),
        the item becomes highlighted.
      </li>
      <li>
        The highlighted item animates in size, expanding in every direction. It
        covers the adjacent items. The other items (the ones which are not
        highlighted) retain their position.
      </li>
      <li>
        Bringing the highlighted item forward conveys the feeling that the item is
        ready for use or instruction, like a volunteer in a line of people stepping
        forward. In this case, the highlighted movie is brought forward to indicate
        that it’s ready to be played.
      </li>
      <li>
        When the highlight moves to another item, the previously-highlighted item
        animates back to its original state in parallel with the highlight animation
        being played on the new item.
      </li>
    </ul>

    <p>
      For more discussion of this specific expand-to-highlight transition and some
      live demos on the Meaningful Transitions site: click
      <a href="http://www.ui-transitions.com/#categories">Categories</a>, then click
      Highlight, then Expand to Highlight.
    </p>

    <p><strong>HighlightEffects</strong></p>

    <p>
      I’ve posted a
      <a href="https://quickui.org/catalog/HighlightEffects">HighlightEffects</a>
      control to the QuickUI Catalog that permits the easy creation of animated
      effects such as expand-to-highlight. Here’s a sample showing the result of
      moving the mouse over the second of five items:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20162fc709956970d-pi.png"
        alt="HighlightEffects"
      />
    </p>

    <p>&#0160;</p>

    <p><strong>Usage</strong></p>

    <p>
      Use HighlightEffects with lists to help the user see which element is
      highlighted, and to suggest that the highlighted item is ready for use. You
      can apply a variety of highlight effects to achieve different results. The one
      shown here – expand to highlight – effectively draws the user’s attention to
      the item without being too distracting.
    </p>

    <p><strong>Implementation notes</strong></p>

    <p>
      I thought it would be elegant to let the UI designer/developer define the
      package of highlight effects as CSS in a JavaScript property map, just as in
      jQuery’s <a href="http://api.jquery.com/animate/">$.animate()</a> function.
      The HighlightEffects control uses this property map to determine which CSS
      rules will need to be <em>un</em>-done when the highlight moves away from an
      item. E.g., if the property map includes background-color, then the element’s
      original background-color is saved; when the highlight is removed, this
      original background-color is restored.
    </p>

    <p>
      The main challenge with the expand-to-highlight effect is keeping the layout
      of the page steady as the highlight moves around. To get the highlighted
      element to pop out, we need to change its size and z-index, and apply absolute
      positioning. Without that, the expanded item would push the other items in the
      list to the sides. However, the use of position: absolute will remove the item
      from the layout flow. To keep things from moving around, we can empty the same
      technique
      <a href="http://miksovsky.blogs.com/flowstate/2011/11/persistentpanel.html"
        >discussed last week</a
      >
      for <a href="https://quickui.org/catalog/PersistentPanel">PersistentPanel</a>:
      wrap each list item in a placeholder of the item’s normal size. This
      placeholder remains in the layout flow even when the item is highlighted, so
      nothing behind the highlighted element will move around.
    </p>

    <p>
      In playing around with various animation effects, it was clear that some
      arrangements animate more smoothly than others. For example, I originally
      tried to keep the text of the elements centered, but the repositioning of the
      text during resize was a bit jittery. Animations which change size, position,
      and color all seem to behave fairly smoothly on the devices and browsers I’ve
      got. It turns out that jQuery’s built-in $.animate() function doesn’t support
      color animations out of the box, but that ability can be supplied with a
      plugin like
      <a href="http://plugins.jquery.com/project/color-animation">Color Animation</a
      >.
    </p>

    <p>
      As was the case when writing the
      <a href="http://miksovsky.blogs.com/flowstate/2011/10/listcombobox.html"
        >post on ListComboBox</a
      >, I left out keyboard support, so this currently only works with a mouse (and
      touch, although the effect isn’t as nice). My plan is to follow up with a
      ListBox control that can handle moving a selection with a keyboard, then
      update HighlightEffects to work with that.
    </p>
  "2011-11-28 UI Control of the Week basic ListBox, and how keyboard navigation is never as simple as you think.html": >
    
    ---

    title: "UI Control of the Week: basic ListBox, and how keyboard navigation is never as simple as you think"

    date: 2011-11-28

    slug: listbox

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/11/listbox.html

    ---


    <p>
      The standard list box is such a pervasive element of traditional client GUIs
      that it’s surprising how hard it is to find a good list box implementation on
      the web. A typical Windows example:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20154373efea2970c-pi.png"
        alt="Windows Screen Resolution List Box"
      />
    </p>

    <p>&#0160;</p>

    <p>
      Your browser will probably render a standard HTML &lt;select&gt; tag as a
      <em>dropdown </em>list box, but as far as I know, there’s no standard way to
      get a <em>in-line </em>list box that supports single selection. (You will get
      a list box if you set the select tag’s “multiple” attribute, but then it will
      let the user select multiple items, which may not be what you want.) And all
      browser list elements can only render list items as plain text; as in the
      <a href="http://miksovsky.blogs.com/flowstate/2011/10/listcombobox.html"
        >earlier discussion of combo boxes</a
      >, none of the standard web list boxes support a rich presentation for a list
      item. Most sites create their own “list box” elements as divs with clickable
      inner elements. This usually means they end up without good keyboard support:
      e.g., you can’t move the selection up or down with the Up and Down arrow keys.
    </p>

    <p><strong>Key attributes</strong></p>

    <ol>
      <li>
        In the most basic type of list box, zero items or one item can be selected
        at a time. It’s always possible to change which item is selected, but once a
        selection has been made, it’s often not possible to revert to the state
        where no item is selected. There are other types of list boxes that support
        multiple selection.
      </li>
      <li>
        When the list box has focus, pressing the Up key moves the selection to the
        previous item.
      </li>
      <li>Pressing Down moves the selection to the next item.</li>
      <li>Pressing Home (Fn+Up on the Mac) selects the first item.</li>
      <li>Pressing End (Fn+Down) selects the last item.</li>
      <li>
        Pressing Page Up (Option+Up) scrolls up a page. Or does it? See below.
      </li>
      <li>Pressing Page Down (Option+Down) scrolls down a page.</li>
    </ol>

    <p>
      Pop quiz: Off the top of your head, do you think you can describe exactly how
      Page Up and Page Down should work?
    </p>

    <p>
      You’d think they would just scroll the viewport by one page height in the
      indicated direction. That’s the basic idea. However, the actual behavior of
      these keys in a list box is more intricate. Consider Page Down. On Windows, if
      the currently-selected item is somewhere in the middle of the viewport, then
      hitting Page Down selects the control currently visible at the bottom of the
      viewport. That is, the first press of the Page Down key in a list generally
      doesn’t scroll the list at all! It’s only once the selection is
      <em>already</em> at the bottom of the viewport that the list scrolls by one
      page. Page Up works the same, only in the opposite direction. On the Mac, the
      standard behavior is different: Page Up and Page Down scroll the viewport by a
      full page, regardless of selection position, but these operations don’t move
      the selection. (I’m not sure why. To me, at least, the Windows behavior feels
      more useful.)
    </p>

    <p>
      Another complexity of keyboard navigation is tracking whether the list
      actually did anything in response to a key press. If it did, the list box
      needs to stop propagation of the keyboard event. But if the list box
      <em>didn’t</em> do anything with the key (say, the user hit the Down key, but
      the selection was already sitting on the last item), then the event should
      bubble up and, for example, scroll the entire page instead of just scrolling
      the list box.
    </p>

    <p>
      Finally, following any keyboard navigation, the list may need to adjust its
      scroll position to ensure that the currently-selected item is completely
      visible.
    </p>

    <p>
      I think it’s safe to say that keyboard navigation is a good and desirable
      thing: it can make certain tasks easier and faster, and it makes a UI more
      accessible. I can’t see a significant downside to letting a user navigate a
      list with a keyboard, as the UI doesn’t get in the way of mouse or touch
      users. So how come more sites don’t have list boxes? It’s a bit of work to
      handle the keyboard, but not <em>that</em> much work. I think one problem is
      that <em>it’s not free</em>. If someone’s on deadline to produce a list of
      items for a web page, even supporting the selection and navigation described
      above is going to take them some time, and maybe they’re not going to get any
      immediate credit for going that extra mile. This is one reason I’m hoping a
      good UI framework will help make basic usability improvements in controls
      easier for any site to pick up.
    </p>

    <p><strong>ListBox</strong></p>

    <p>
      I’ve posted a basic, single-selection, in-line
      <a href="https://quickui.org/catalog/ListBox">ListBox</a> control to the
      QuickUI Catalog:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20153936b4f0c970b-pi.png"
        alt="ListBox"
      />
    </p>

    <p>&#0160;</p>

    <p>
      This ListBox control is also used as the dropdown portion of a
      <a href="https://quickui.org/catalog/ListComboBox">ListComboBox</a>.
    </p>

    <p>
      Usage: Use an in-line ListBox in situations where picking a single item from a
      list is a significant part of the UI’s task. A list box will consume more real
      estate than a combo box, but also requires one less click to select an item. A
      list box also makes at least some of the choices visible to the user without
      forcing them to first interact with the control; this can make the task of
      selection more approachable. A standard list box doesn’t allow the user to add
      a choice of their own; for that, a combo box is the standard answer.
    </p>

    <p><strong>Implementation notes</strong></p>

    <p>
      As might have been expected from the above discussion, the trickiest aspect of
      this control was the keyboard navigation, especially the behavior of Page Up
      and Page Down. For now, at least, I’ve let Page Up and Page Down work the same
      on the Mac as on Windows. (If anyone can explain to me a common situation
      where the Mac’s standard viewport-scrolling behavior is better than the
      Windows behavior, please let me know!)
    </p>

    <p>
      On the plus side, now that the QuickUI Catalog finally has a rudimentary
      ListBox control, I was able to drop a ListBox essentially unmodified into the
      ListComboBox control to give the latter basic keyboard support. ListComboBox
      originally used the more primitive
      <a href="https://quickui.org/catalog/List">List</a> control, which simply
      renders a JavaScript array as a set of controls. ListBox builds on List, so it
      also has the ability to render array items as controls; to this it adds the
      concepts of single selection and keyboard navigation. A core promise of a
      control framework is code reuse. In this case, there was no need to reproduce
      single selection and keyboard navigation again in ListComboBox, since ListBox
      already provided it. It’s wonderful when that object-oriented promise can
      actually be realized.
    </p>

    <p>
      One thing I left off this time around is making it easy to have a ListBox be
      an integral number of lines tall. If you look carefully at the bottom of the
      above ListBox shot, the bottom row is just a bit clipped. It would look better
      if the list box were just a bit taller, so that an integral number of lines
      could be completely visible. I also began experimenting with a
      multiple-selection list box, but that’s a fairly intricate bit of work all on
      its own.
    </p>

    <p>&#0160;</p>

    <p>
      <em
        >Thanks to those of you who wrote expressing interest in using QuickUI with
        plain JavaScript (i.e., without markup). I’m continuing to work on that, and
        hope to have some basic documentation in place by year’s end. Stay
        tuned.</em
      >
    </p>
2011-12:
  2011-12-05 UI Control of the Week a PanelWithOverflow to create toolbars with overflow menus and maximum layout efficiency.html: >
    
    ---

    title: "UI Control of the Week: a PanelWithOverflow to create toolbars with overflow menus and maximum layout efficiency"

    date: 2011-12-05

    slug: panelwithoverflow

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/12/panelwithoverflow.html

    ---


    <p>
      Applications with toolbars should generally give the user access to all
      toolbar commands, even when the window isn&#39;t large enough to show all of
      them. Wrapping a toolbar&#39;s contents is one possibility, but this is
      usually avoided because it begins to steal too much space away from the
      application&#39;s main content area. The standard technique is to have the
      commands which can&#39;t fit horizontally <em>overflow</em> into a dropdown
      menu.
    </p>

    <p>
      This technique is used, for example, in the Bookmark (or Favorite) toolbar in
      every mainstream web browser. Here&#39;s Safari:
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e2015393d1510b970b-pi.png"
        alt="Safari Bookmark Bar"
      />
    </p>

    <p>
      When the user makes the window too small to see all the bookmark buttons, the
      buttons which don’t fit overflow into a dropdown menu:
    </p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e20162fd26ba3c970d-pi.png"
        alt="Safari Bookmark Bar with Overflow"
      />
    </p>

    <p><strong>Key attributes</strong></p>

    <ul>
      <li>The toolbar contents (usually buttons) are arranged horizontally.</li>
      <li>
        Items which don&#39;t fit are clipped entirely; no item (e.g., Bookmark 5 in
        the toolbar of the second image) is ever shown partially visible.
      </li>
      <li>
        If there are any items which don&#39;t fit, an overflow menu button appears.
        The standard is for the button to show a pair of right-pointing chevrons
        (»).
      </li>
      <li>
        Clicking the menu button produces a dropdown menu containing the items which
        don’t fit in the toolbar.
      </li>
      <li>
        Items may appear slightly differently in the menu than they appear in the
        toolbar. In the Safari example above, plain-looking toolbar buttons become
        vertically-oriented menu items with icons. Beyond the change in appearance,
        the items generally behave the same in the menu as they do in the toolbar.
      </li>
      <li>
        As the user resizes the window, the control recalculates whether an overflow
        menu (and therefore a menu button) is necessary.
      </li>
    </ul>

    <p>
      This overflow pattern is apparently so successful that the
      <em>exact same user interface</em> — down to the use of right-pointing
      chevrons to indicate overflow — is used by Chrome, Firefox, and Internet
      Explorer. The funny thing is, each of these other browsers fumble one small
      aspect of the behavior: determining whether or not to allocate room for the
      menu button.
    </p>

    <ul>
      <li>
        Google Chrome always allocates room for the menu button, even when the
        button isn’t visible. This means there are cases where the toolbar button
        would have fit, but the invisible menu button is still taking up room, which
        forces overflow to be triggered a bit earlier than strictly necessary. For
        comparison, in the top screen shot, Safari can fit the button for “Bookmark
        6”, but in the same situation, Chrome will force that button to overflow.
        Effectively the user has something like 10-20 pixels or so
        <em>less</em> room in Chrome for their browser bookmarks.
      </li>
      <li>
        Mozilla Firefox is a bit smarter, but inconsistent. It doesn&#39;t allocate
        room for the menu button if the menu button&#39;s not currently visible, so
        Firefox can squeeze in an extra bookmark in cases where Chrome drops it.
        However, once the menu button is visible, the menu button takes up room —
        even when hiding the menu button would now leave enough room to show the
        last bookmark!
      </li>
      <li>
        Internet Explorer 10 gets things right — but get points off for incessantly
        flickering the menu button during a window resize. Presumably on any window
        resize, IE is <em>always </em>hiding the menu button, then re-showing it if
        it’s needed. This doesn&#39;t feel nearly as solid as Safari’s treatment,
        which smoothly moves the menu button left and right as the window resizes.
      </li>
    </ul>

    <p>
      These are all small points, and I doubt most users of these browsers have ever
      noticed them. Still, this is not ideal. I think this is what happens when
      designers and developers, even those on huge software teams, are forced to
      roll their own solution to a common problem. Either they don&#39;t notice the
      issue or, if they do, don&#39;t feel like it&#39;s worth taking the time to
      fix.
    </p>

    <p>
      And here we&#39;re talking about large, production web browsers built upon
      rich client-side UI frameworks. Many web sites aren’t building on a rich UI
      framework, so they’re forced to code everything by hand. The result is that
      web application toolbars are typically far clunkier. They often blithely
      assume the user’s window will be wide enough to show all the commands, and
      clip or wrap the buttons when the window is narrow.
    </p>

    <p>
      A correct, solid implementation (like Safari’s) should be available to any
      site that wants it — by coding the correct solution in a reusable component.
      By treating something as basic as overflow as a component in its own right, it
      suddenly becomes worth lavishing the attention and effort to achieve maximum
      layout efficiency, including properly handling those last 10-20 pixels,
      because lots of users across multiple apps will benefit.
    </p>

    <p><strong>PanelWithOverflow</strong></p>

    <p>
      I&#39;ve posted a basic
      <a href="https://quickui.org/catalog/PanelWithOverflow">PanelWithOverflow</a>
      control to the QuickUI catalog.
    </p>

    <p>
      <img
        alt="PanelWithOverflow"
        src="/images/flowstate/6a00d83451fb6769e20162fd26dcbe970d-800wi.png"
      />
    </p>

    <p>
      As discussed above, use PanelWithOverflow in situations like toolbars where
      you want to constrain the height of a toolbar while simultaneously
      guaranteeing access to all the toolbar&#39;s commands at a wide range of
      window sizes. For a toolbar that docks to the top of the page, nest the
      PanelWithOverflow inside a
      <a href="https://quickui.org/catalog/PersistentPanel">PersistentPanel</a>.
    </p>

    <p><strong>Implementation notes</strong></p>

    <p>
      The simplest way to implement this behavior in a web control seems to be to
      force the control’s contents to appear on the same line (white-space: nowrap),
      then calculate which items completely fit. The ones that don&#39;t are
      explicitly made invisible (using visibility: hidden) to avoid a
      partially-clipped item.
    </p>

    <p>
      In coding this, it became obvious why Chrome and Firefox browsers display the
      layout oddities they do. To decide whether the <em>nth</em> item can fit, you
      need to know how much room is available for it, which depends on whether or
      not the menu button is going to be needed — which in turn may depend on
      whether the next item to the right (item <em>n</em>+1) will fit. The layout
      logic gets much simpler, however, by applying the expedient of looping over
      the control&#39;s contents <em>from right to left</em>. If item <em>n</em>+1
      is going to overflow, you know for sure that you need to allocate room for the
      menu button when considering item <em>n</em>.
    </p>

    <p>
      Just because this QuickUI control avoids a small layout bug in the various
      browser toolbar implementations above doesn&#39;t mean it’s necessarily better
      than those implementations. Those toolbars have many more features (e.g.,
      customization), and surely have received much more testing overall. Still, I’d
      argue that the QuickUI implementation is a reasonably solid start on an open,
      component-based solution.
    </p>
  "2011-12-08 The web could benefit from a control panel for cross-app settings (eg, for sounds).html": >
    
    ---

    title: "The web could benefit from a control panel for cross-app settings (e.g., for sounds)"

    date: 2011-12-08

    slug: the-web-could-benefit-from-a-control-panel-for-cross-app-settings

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/12/the-web-could-benefit-from-a-control-panel-for-cross-app-settings.html

    ---


    <p>
      I think many web sites could benefit from the thoughtful use of sounds in
      their UI, but they avoid sound because the cost of doing so becomes too great.
      Client apps on Windows and OS/X get some degree of sound support for free with
      the operating system, as do mobile apps. In all cases, the OS provides a
      control panel that lets the user control whether sounds play for various
      events, and which sounds to use. Here’s the venerable Sounds tab of the
      Windows Sound control panel, virtually unchanged since something like Windows
      95:
    </p>

    <p>&#0160;</p>

    <p>
      <img src="/images/flowstate/6a00d83451fb6769e2015437feb0ec970c-pi.png" />
    </p>

    <p>&#0160;</p>

    <p>
      For each standard UI event capable of generating a sound, the user can turn
      the sound off, or map the event to various sound files. Other sound control
      panels work similarly: the OS/X one is, by comparison, more limited, but the
      iOS Sound page in Settings has a substantial list of UI events which can be
      mapped to sounds (or vibration).
    </p>

    <p>
      With this in mind, consider the work a web team has to do just to support
      sound. To support a pre-HTML 5 browser, they have to select from several
      different sound-playing technologies; in HTML 5 they can at least use the
      standard &lt;audio&gt; tag. Since many users won’t want sounds, they have to
      provide a Settings area within their app where the user can adjust settings.
      Maybe their app doesn’t even <em>have</em> a Settings area yet, so they’ll
      have to create a new one from scratch. Then they have to do some real sound
      design, to come up with a set of sounds that are: a) pleasing to a wide range
      of users, b) high quality, c) appropriate for the UI context, and d) very,
      very cheap. They’ll also have to do some work to ensure that sounds on their
      pages don’t bog down web site performance, e.g., by delaying the loading of
      the sound files, and being careful about which sound files are loaded and
      when.
    </p>

    <p>
      For years, I’ve been a passionate believer in the use of sounds for
      <em>positive </em>reinforcement in a UI. That is, sounds can and should be
      used to let the user know when something has gone <em>right</em>, as opposed
      to when something’s gone wrong. The canonical example I offer is the
      satisfying sound of a car door closing: even when walking away from a car, you
      can hear when the door’s closed correctly. Even if you never consciously pay
      attention to that sound, the <em>absence</em> of that door-closing sound lets
      you know the door isn’t completely closed, and you turn around and walk back
      to close it again.
    </p>

    <p>
      User interfaces can similarly benefit from the use of sounds for positive
      reinforcement. Not negative reinforcement; observe above what proportion of
      sound events in Windows are different flavors of, “Something’s gone horribly
      wrong.” I think many people in the software community, and many users, have a
      strong bias against sound because sound has been used so poorly in the past.
      The very best designers of sounds in UI are probably game designers, because
      they work so hard to make sound an integral and emotionally satisfying part of
      the game experience. The web at large could learn a lot from game sound
      designers.
    </p>

    <p>
      With that in mind, I pushed hard at <a href="http://cozi.com">Cozi</a> to get
      sounds into our web app. Cozi’s web product has only two sounds:
    </p>

    <ol>
      <li>
        A “Message Sent” sound used whenever the service successfully transmitted a
        message to an external destination: e.g., a shopping list was sent via SMS
        to a family member’s phone.
      </li>
      <li>
        A “Got it!” sound played by the app whenever the client had successfully
        saved user data (e.g., a new appointment) on the server.
      </li>
    </ol>

    <p>
      These sounds were tightly mapped to the UI, helping to subtly confirm to the
      user that some desirable thing had just gone as expected. A musician and sound
      designer created the sounds for us, taking care to make sure the sounds fit
      the application aesthetic, were suggestive of the event in question, and were
      not intrusive. With all that work, I think the sounds worked really well,
      helping to round out the application user experience and gave the product some
      dimensionality.
    </p>

    <p>
      And despite claims from some people that, “No one likes web sites that play
      sounds”, I never heard complaints about these. Most people didn’t even notice
      them — which is just what was intended. Just like the car door-closing sound,
      these sounds perform their work at a subconscious level. Still, it would have
      been great to offer the user a way to turn sounds on and off, and potentially
      let them change which sounds played. Unfortunately, it was hard to justify the
      additional investment in doing that.
    </p>

    <p>
      To that end, I’m hoping that someone will eventually create a shared sound
      control panel for the web. This could offer sound storage, sound mapping UI
      (such as the above), and easy sound integration for third-party web sites.
      This could work something like
      <a href="http://www.gravatar.com">Gravatar</a> (from Automattic, the folks
      behind WordPress.com), which lets <em>other </em>web sites offer
      user-customizable “avatars”. These are really just glorified profile pictures,
      but such pictures do serve a useful role on sites in bringing a community of
      users to life. A site like <a href="http://www.github.com">GitHub</a> can use
      Gravatar as a complete solution for user-customizable profile pictures at a
      trivial development cost.
    </p>

    <p>
      I think Gravatar is an example of what could be possible with shared cross-app
      control panels: small bits of utility that let a user customize some settings
      they can carry with them to other sites. Facebook and Google are obviously
      already players in that game, but the stakes are all wrong. A site that wants
      to integrate with Facebook just to get a user profile picture is both making a
      substantial commitment to an entity whose behavior is sometimes threatening
      <em>and</em> the site must force its users to entangle themselves in
      Facebook’s plans — something a substantial number of people are loathe to do.
      I like Facebook, but if I’m just looking for someone to store a profile
      picture, frankly I trust Gravatar for that purpose more than I do Facebook.
    </p>

    <p>
      There’s no great revenue model for a settings site like Gravatar, so
      presumably most of them would exist as public services provided by larger
      entities like Automattic. Hopefully more people will follow their lead, and
      build out some of the web’s missing control panels.
    </p>
  2011-12-12 UI Control of the Week standard Collapsible panel for content that can be put away.html: >
    
    ---

    title: "UI Control of the Week: standard Collapsible panel for content that can be put away"

    date: 2011-12-12

    slug: collapsible

    originalUrl: https://miksovsky.blogs.com/flowstate/2011/12/collapsible.html

    ---


    <p>
      It&#39;s fairly common for a UI to present some content whose value to the
      user may be unknown or may change over time. To avoid permanently distracting
      the user, the app can show the content in a panel the user can collapse.
      Consider the following two gadgets from Google’s Gmail client, the first
      expanded, the second collapsed:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e2015437fc2752970c-pi.png"
        alt="Gmail Gadgets"
      />
    </p>

    <p>&#0160;</p>

    <p>
      Perhaps the user leaves the calendar gadget open because they find the
      considerable clutter it adds is worth its informational value. The “Invite a
      friend” gadget, however, isn’t worth much to them, so they collapse it and
      leave it that way. In the rare event they&#39;re suddenly inspired to invite a
      friend, it&#39;s easy enough to re-expand that panel to bring the UI back.
    </p>

    <p><strong>Key attributes</strong></p>

    <ul>
      <li>
        Clicking anywhere in the heading collapses the panel&#39;s content, leaving
        only the heading visible.
      </li>
      <li>
        The heading generally reacts to mouse-over by changing the cursor to a hand.
        The heading may also react in other ways, e.g., its background color may
        change.
      </li>
      <li>
        In many cases, including the above example, the heading includes a small
        button element on the far right. Clicking this button has the same effect as
        clicking the heading itself, but the button offers a more obvious affordance
        of interactivity.
      </li>
      <li>
        If present, the button&#39;s icon or contents generally reflect the
        panel&#39;s collapsed or expanded state. The button may show plus and minus
        signs or down- and up-pointing arrows. The icon usually suggests what will
        happen if you click it (e.g., if you click the plus, you’ll get
        <em>more </em>UI), rather than indicating the current state.
      </li>
      <li>
        The transition between the expanded and collapsed state is usually animated
        to suggest that the content is rolling up into the heading, where it will be
        stored until the user decides to retrieve it again.
      </li>
      <li>
        Many applications save the collapsed/expanded state for future sessions. In
        effect, the collapsible panel is offering a persistent user-configurable
        option, without any of the overhead of a separate Settings or Preferences
        area.
      </li>
    </ul>

    <p><strong>Collapsible and CollapsibleWithHeadingButton</strong></p>

    <p>
      I&#39;ve posted a
      <a href="https://quickui.org/catalog/Collapsible">Collapsible</a> control to
      the QuickUI Catalog that offers the bare-bones functionality. Because the
      pattern of including a little button on the heading’s right is so common, I
      also added a subclass called
      <a href="https://quickui.org/catalog/CollapsibleWithHeadingButton"
        >CollapsibleWithHeadingButton</a
      >:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        src="/images/flowstate/6a00d83451fb6769e2015437fc2758970c-pi.png"
        alt="CollapsibleWithHeadingButton"
      />
    </p>

    <p>&#0160;</p>

    <p>
      Use these Collapsible classes to confer a limited degree of customizability to
      a home page or information pane on the side. If most users are likely to want
      the information most of the time, collapsible panels might not be necessary.
      However, in cases where there&#39;s a fairly even split between users that
      want a given type of information and those that don&#39;t, such a panel can be
      a reasonable compromise. Similarly, if there are situations where an
      individual user may change their mind about whether they want the information
      (because it&#39;s useful) or not want the information (because it&#39;s
      distracting), consider a collapsible panel.
    </p>

    <p><strong>Implementation notes</strong></p>

    <p>
      To avoid requiring lots of graphic resources, for many of these controls I use
      text glyphs as button icons. Here a plus sign (“+”) is used in the collapsed
      state to indicate the content can be expanded, and a minus sign (“−”) is used
      when the content can be collapsed. I&#39;ve seen some sites that, perhaps
      unintentionally, use a hyphen (“-”) instead of a minus sign. A hyphen is too
      narrow, and ends up feeling like a weak counterpart to the plus sign. (Google
      avoids this by using a bitmap image, probably for tighter control over the
      final result across different browsers.)
    </p>

    <p>
      One thing that feels a bit unresolved about gadgets like Gmail&#39;s, which
      offer a heading button on the right, is that the button and the heading text
      both do the same thing, but that shared behavior&#0160;is not obvious until
      you click.&#0160;My general feeling is that multiple controls that respond the
      same way to a click should respond the same way on hover. In this case, I
      arranged for mousing over the heading text to force the application of the
      button’s hover effect, even if the mouse isn’t actually over the button, as an
      extra cue that clicking either UI element will accomplish the same result. See
      <a
        href="http://miksovsky.blogs.com/flowstate/2011/05/where-should-the-hit-target-boundaries-for-ui-elements-go.html"
        >Where should the hit target boundaries for UI elements go?</a
      >
      for more thoughts on reflecting hit target boundaries.
    </p>

    <p>
      The animation effect includes a combination of a slide and a fade: the
      contents fade out during collapse, and fade in during expansion. To me, this
      enhances the effect of the content rolling away and unrolling again.&#0160;The
      fade effect is more pronounced when there’s a large block of content.
    </p>

    <p>&#0160;</p>

    <p>
      <em
        >Aside: I&#39;ve invested work in reducing the number of files necessary to
        use controls in the QuickUI Catalog. It used to be the case that several
        files were required to use all the controls, but the whole catalog has been
        consolidated into just one pair of files: quickui.catalog.js and
        quickui.catalog.css. As described on
        <a href="https://quickui.org/catalog/usingCatalog.html"
          >How to use these controls</a
        >, </em
      ><em
        >you can include that pair of files directly. You can also follow the
        instructions for cloning the quickui-catalog repo and choosing the specific
        controls you want. Among other things, this makes it easier to try out the
        controls. For example, here&#39;s a
        <a href="http://jsfiddle.net/quickui/krubE/"
          >jsFiddle that uses the QuickUI catalog</a
        >
        (including, for the time being, the CollapsibleWithHeadingButton control
        shown above).</em
      >
    </p>

    <p>
      <em
        >flow|state will off for the next few weeks for the end-of-year holidays.
        See you next year!</em
      >
    </p>
2012-01:
  "2012-01-23 UI Control of the Week Google-style TransientMessage to show quick, modeless progress or confirmation.html": >
    
    ---

    title: "UI Control of the Week: Google-style TransientMessage to show quick, modeless progress or confirmation"

    date: 2012-01-23

    slug: transientmessage

    originalUrl: https://miksovsky.blogs.com/flowstate/2012/01/transientmessage.html

    ---


    <p>
      Sometimes an application has to deliver to the user a brief, non-vital
      message. A number of sites, including Google’s app suite, show such messages
      in a transient popup that presents a small bit of information for a second or
      two, then disappears on its own. Here’s a typical “Loading…” message, which
      appears over the standard Google toolbar:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        alt="Google Docs Loading Indicator"
        src="/images/flowstate/6a00d83451fb6769e20162ffbedcc5970d-pi.png"
      />
    </p>

    <p>&#0160;</p>

    <p>
      An earlier generation of client applications might have shown such information
      in a status bar. One disadvantage of a status bar is that it’s always there,
      which not only takes up room, but can inure a user to its presence; they might
      easily overlook a message that appears there briefly. In contrast, the very
      appearance of Google’s “Loading…” message over the top of the toolbar helps
      draw attention to the message.
    </p>

    <p>
      The “Loading…” message above obviously disappears when the loading operation
      has completed. In other cases, the message is used to confirm the successful
      completion of an operation. For example, if you use
      <a href="http://www.cozi.com">Cozi</a> to send a shopping list to a family
      member’s mobile phone, a transient message lets you know the list has been
      sent successfully. In these cases, a message typically remains visible for
      about two seconds before fading away, in order to give the user enough time to
      read it. This sort of message UI may be preferable to a traditional modal
      confirmation dialog in cases like these where because the information is not
      vital. If the user happens to look away while the message is visible, they can
      nevertheless assume the operation worked; the message is just providing
      explicit confirmation. The fact that the message fades away on its own avoids
      forcing the user to take a second to dismiss it manually.
    </p>

    <p><strong>Key attributes</strong></p>

    <ul>
      <li>
        The message goes away on its own, either when an operation completes or when
        sufficient time has passed to let the user read the message.
      </li>
      <li>
        It’s not absolutely essential that the user see the message. Hence, the app
        doesn’t require that the user acknowledge the message.
      </li>
      <li>
        The message content is fairly short, perhaps one medium-length sentence at
        most. Since reading speeds vary, the longer the text is, the longer
        variation you’ll have in how long users need to read it. Even if the message
        is not essential, it would nevertheless be disconcerting to a user for the
        message to disappear before they could finish reading it.
      </li>
      <li>
        The message often visually appears docked to the top of the page (as shown
        above) or centered vertically.
      </li>
    </ul>

    <p><strong>TransientMessage</strong></p>

    <p>
      I’ve posted a
      <a href="https://quickui.org/catalog/TransientMessage">TransientMessage</a>
      control to the QuickUI Catalog. As you’ll see on that page, I’m experimenting
      with the impressive, embeddable
      <a href="http://ajaxorg.github.com/ace/">ACE</a> code editor from Ajax.org to
      let you experiment with controls directly within the Catalog documentation. If
      this works out, I’ll look at rolling it out to the rest of the Catalog.
      <em
        >(Known issue: The page with the code editor doesn&#39;t work in IE8
        yet.)</em
      >
    </p>

    <p>
      As usual, the generic styling of the message can be changed to suit an
      application’s visual aesthetic.
    </p>

    <p>
      Use a TransientMessage to deliver a short message, e.g., as a modeless
      indicator of a short operation (the loading example above) or as a
      confirmation of an operation that has just completed. If the message text is
      more than a simple sentence, or if it’s critical that the user acknowledge the
      message, consider a standard JavaScript alert or a
      <a href="http://quickui/catalog/Dialog">Dialog</a> instead.
    </p>

    <p><strong>Implementation notes</strong></p>

    <p>
      This control is built on top of the general-purpose
      <a href="https://quickui.org/catalog/Popup">Popup</a> base class, making
      implementation relatively straightforward. One side effect of this
      implementation is that any click the user makes while the message is displayed
      will dismiss the message. In future versions, it might be nice to let the user
      continue to interact with the UI during the short period while the message is
      visible.
    </p>
  2012-01-30 QuickUI 088 released.html: >
    ---

    title: "QuickUI 0.8.8 released"

    date: 2012-01-30 18:18:05

    slug: quickui-0-8-8-released

    originalUrl: http://blog.quickui.org/2012/01/30/quickui-0-8-8-released/

    ---


    <p>A small breaking change in this release:</p>

    <ul>
      <li>
        The "name" attribute on top-level &lt;Control&gt; tags has been changed to
        "className". Before:
      </li>
    </ul>

    <blockquote>&lt;Control name="MyControl"&gt;</blockquote>

    <p>Now:</p>

    <blockquote>&lt;Control className="MyControl"&gt;</blockquote>

    <p>
      This change allows some consistency with the run-time function className(),
      and also reduces the chances for confusion if a Control class itself wants to
      define a "name" property. This is a breaking change, so markup users will need
      to download/build the latest qb tool, and force a rebuild of their project.
    </p>
  2012-01-30 UI Control of the Week Coding a ListInlay pattern that lets user expand list items in place.html: >
    
    ---

    title: "UI Control of the Week: Coding a ListInlay pattern that lets user expand list items in place"

    date: 2012-01-30

    slug: listinlay

    originalUrl: https://miksovsky.blogs.com/flowstate/2012/01/listinlay.html

    ---


    <p>
      I think the concept of a
      <a href="http://en.wikipedia.org/wiki/Pattern_language">pattern language</a>
      is a useful lens with which to consider interface design, but we don’t have to
      settle for patterns as static, textual descriptions. The first pattern
      language was grounded in the domain of physical architecture, and while the
      concept was deeply insightful, many people have applied it to the domain of
      software user interface design without, I believe, recognizing that the
      constraints of building architecture don’t apply to software design. Given a
      properly expressive UI framework, many UI techniques described as patterns can
      be implemented in code.
    </p>

    <p>
      I’ve been a fan of attempts to catalogue UI patterns since I first came across
      Jenifer Tidwell’s
      <a href="http://www.mit.edu/~jtidwell/common_ground.html">Common Ground</a>.
      Tidwell’s latest work is presented in her recent second edition of
      <a href="http://amzn.to/xIUjDY">Designing Interfaces</a>. Many of the patterns
      it describes contain some non-trivial element that can be given a functional
      manifestation in code. To use an analogy from programming languages, UI
      patterns are somewhat similar to abstract base classes. Such a class defines
      some, but not all, of the behavior necessary to create a useful result. In my
      mind, the more interesting a UI pattern is, the more likely it is that some
      aspect of the textual description can be identified and coded in a reusable UI
      control.
    </p>

    <p>
      Take, for example, the&#0160;<a
        href="http://designinginterfaces.com/patterns/list-inlay/"
        >List Inlay</a
      >&#0160;pattern, in which a list lets the user expand an item to see more
      detail in place. Tidwell points to Amazon’s mobile review UI as one example:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        alt="Amazon Mobile Reviews (Collapsed)"
        src="/images/flowstate/6a00d83451fb6769e20163003f079a970d-pi.jpeg"
      />
    </p>

    <p>&#0160;</p>

    <p>
      Each list item shows a capsule review. Tapping a review expands the item in
      place to show the full review text and some additional details:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        alt="Amazon Mobile Reviews (Expanded)"
        src="/images/flowstate/6a00d83451fb6769e20168e635c3c6970c-pi.jpeg"
      />
    </p>

    <p>&#0160;</p>

    <p><strong>Key attributes:</strong></p>

    <ul>
      <li>All list items are typically collapsed by default.</li>
      <li>
        Clicking a list item expands it to reveal more information about that item,
        possibly including interactive controls. Clicking an item which is already
        expanded generally collapses it.
      </li>
      <li>
        The list may either allow multiple items to be expanded simultaneously, or
        may permit only a single item to be expanded at a time.
      </li>
    </ul>

    <p>
      A List Inlay can also be used to implement the common “Accordion” user
      interface pattern as well. As far as I can tell, there’s not much hard
      difference between these two patterns. A List Inlay is essentially an
      Accordion which shows live data, whereas the UI elements described as
      Accordions tend to have static headings that have been hand-authored to
      summarize their contents. Beyond that, to me these two patterns seem nearly
      the same.
    </p>

    <p><strong>ListInlay control</strong></p>

    <p>
      Here, the above attributes of the List Inlay pattern are fairly
      straightforward to code.&#0160;With those requirements in mind, I’ve created a
      <a href="https://quickui.org/catalog/ListInlay">ListInlay</a> control for the
      QuickUI Catalog:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        alt="ListInlay"
        src="/images/flowstate/6a00d83451fb6769e20168e635c444970c-pi.png"
      />
    </p>

    <p>&#0160;</p>

    <p>Usage: Tidwell suggests using a List Inlay when…</p>

    <blockquote>
      <p>
        <em
          >Each item has interesting content associated with it, such as the text of
          an email message, a long article, a full-size image, or details about a
          file’s size or date. The item details don’t take up a large amount of
          space, but they’re not so small that you can fit them all in the list
          itself. </em
        ><em
          >You want the user to see the overall structure of the list and keep that
          list in view all the time, but you also want her to browse through the
          items easily and quickly.</em
        >
      </p>
    </blockquote>

    <p>
      In contrast, if the item details are complex, or offer substantial editing
      capabilities, it may be more appropriate to navigate to the details in a
      separate window or dialog, or show the details in a separate detail pane,
      rather than expanding them inline.
    </p>

    <p>
      The ListInlay class permits a single item to be expanded at a time, so
      clicking a new item to expand it will collapse any previously-selected item.
      I’ve also created a multiple-select variation called
      <a href="https://quickui.org/catalog/MultiListInlay">MultiListInlay</a> that
      permits multiple items to be expanded at once.
    </p>

    <p>
      Caution: Some applications use a variation of this UI for navigation, e.g., as
      an accordion pane on the left side of an app window. It’s not uncommon for
      such apps to dock the list items to the top or bottom of the navigation pane
      (with the selected item filling the remaining space in the middle). I believe
      such a UI is likely to exhibit usability problems: at large window sizes, a
      user looking at the navigation items docked to the top of the pane could
      easily overlook additional items docked to the bottom.
    </p>

    <p><strong>Implementation notes</strong></p>

    <p>
      This control was a pleasure to code up. A ListInlay is just a subclass of the
      previously-discussed
      <a href="http://miksovsky.blogs.com/flowstate/2011/11/listbox.html"
        >ListBox</a
      >
      meta-control that, by default, uses a
      <a href="http://miksovsky.blogs.com/flowstate/2011/12/collapsible.html"
        >Collapsible</a
      >
      to represent list items. Combining these two controls worked right away, and
      from there it was simply a matter of customizing how ListInlay renders a list
      item’s selected state. Instead of just adding a CSS “selected” class, the list
      also needs to invoke the Collapsible’s collapsed() property. (I.e., when an
      item is selected, it’s collapsed property should be set to false.)
    </p>

    <p>
      The real treat was that basing this control off of ListBox means that, with no
      additional work, ListInlay offers basic keyboard navigation. The control’s
      generic appearance doesn’t show the selected state, but once the list has
      focus, you can navigate the list with the Up and Down keys. It was a pleasant
      surprise to see that the navigation UI played well with the expand/collapse
      animation; score one for Separation of Concerns.
    </p>

    <p>
      It’s hard to describe, but this sort of coding reminds me a lot of coding in
      Lisp. In Lisp you can make use of higher-order functions like mapcar to
      concisely express complex calculations. In the same vein, coding in QuickUI
      often entails using a meta-control like ListBox to quickly create the
      reasonably complex behavior of something like ListInlay.
    </p>

    <p>
      Of course, the point of a control like ListInlay isn’t that it’s a polished,
      production-ready result in its own right. As with an abstract base class, what
      makes it useful is that it could form the <em>basis </em>of something
      interesting. As I’m going through “Designing Interfaces”, it’s possible to
      pick out those patterns whose interaction details are consistent or specific
      enough that they could similarly be translated directly to code. I’m adding
      the most interesting such patterns to the QuickUI road map for future work.
    </p>

    <p>&#0160;</p>

    <p>
      <em
        >I&#39;ll be traveling this week to Dublin, Ireland, for the Interaction
        2012 conference. If you&#39;ll be there, please drop me a line!</em
      >
    </p>
2012-02:
  2012-02-01 Updated tutorial for JavaScript-only QuickUI development.html: >
    
    ---

    title: "Updated tutorial for JavaScript-only QuickUI development"

    date: 2012-02-01 16:00:00

    slug: updated-tutorial-for-javascript-only-quickui-development

    originalUrl: http://blog.quickui.org/2012/02/01/updated-tutorial-for-javascript-only-quickui-development/

    ---


    <p>
      The new <a href="https://quickui.org/tutorial/">QuickUI Tutorial</a> shows you
      how to use QuickUI in plain JavaScript, without the need for a proprietary
      markup language or client-side compiler.
    </p>

    <p>
      The tutorial is divided into two sections: the first shows how you can use
      QuickUI controls in your site (e.g., one mostly constructed via some other
      tool), and the second shows how to create your own QuickUI controls. The
      tutorial is built around small interactive coding exercises, each of which
      demonstrates some aspect of the framework. Due to current limitations of the
      code editor, the tutorial is not functional in IE8 and Safari. It works fine
      in Chrome, Firefox, and IE9.
    </p>

    <p>
      The existing markup tutorial has been moved to a new
      <a href="https://quickui.org/markup/">Markup</a> section that also now hosts
      the Downloads page for the client-side compiler. This reorganization helps
      emphasize the fact that the use of QuickUI markup is an optional, somewhat
      advanced mode of use; markup is no longer required to use or create QuickUI
      controls.
    </p>

    <p>
      This tutorial represents the first of several forthcoming steps to make
      QuickUI more appealing to a wider JavaScript audience.
    </p>
  2012-02-01 Using QuickUI controls in plain JavaScript.html: >
    ---

    title: "Using QuickUI controls in plain JavaScript"

    date: 2012-02-01

    slug: using-quickui-controls-in-plain-javascript

    originalUrl: https://miksovsky.blogs.com/flowstate/2012/02/using-quickui-controls-in-plain-javascript.html

    ---


    <p>
      I’ve heard from people who are interested in using QuickUI (including the
      controls I’ve been discussing here in Control of the Week posts), but who want
      to do so in pure JavaScript. If this sounds like you, I have good news:
    </p>

    <ol>
      <li>
        The framework has received a number of updates over the past two months such
        that it is now practical to use QuickUI in pure JavaScript and CSS.
      </li>
      <li>
        I’ve put together an
        <a href="http://wp.me/p2aeAX-e">interactive tutorial</a> that shows you how
        to do this.
      </li>
    </ol>

    <p>
      Until now, it’s been easiest to develop in QuickUI using a proprietary
      HTML-like markup language which, though nice and compact, also necessitates
      the need for a client-side compiler. Now that the markup requirement has been
      removed, you should be able to use any of the QuickUI controls described here
      in any web app.
    </p>

    <p>
      By the way, the above link will take you to a new, separate QuickUI blog
      that’s intended as a more technical resource for people already using the
      framework. I intend to keep the flow|state blog here as a separate venue for
      discussing UI design topics. Posts here may touch on QuickUI (given my current
      work), but my goal is that those posts will still be interesting and relevant
      to an audience of designers who don’t code or aren’t interested in coding.
    </p>

    <p>
      I&#39;d just like to offer thanks to the individuals who have provided me with
      feedback on the evolving shape of QuickUI. Your thoughtful commentary has been
      invaluable!
    </p>
  2012-02-06 UI Control of the Week TabSet for traditional tabbed pages.html: >
    
    ---

    title: "UI Control of the Week: TabSet for traditional tabbed pages"

    date: 2012-02-06

    slug: ui-control-of-the-week-tabset-for-traditional-tabbed-pages

    originalUrl: https://miksovsky.blogs.com/flowstate/2012/02/ui-control-of-the-week-tabset-for-traditional-tabbed-pages.html

    ---


    <p>
      This week&#39;s control is the standard tabbed page UI found throughout client
      apps and web sites. Here&#39;s a typical example, from iTunes Preferences:
    </p>

    <p>
      <img
        alt="ITunes Preferences"
        src="/images/flowstate/6a00d83451fb6769e20163007b71aa970d-pi.png"
      />
    </p>

    <p><strong>Key attributes</strong></p>

    <ul>
      <li>
        The tabs typically represent different aspects of a single object, or
        different areas at the same navigational depth in a hierarchy.
      </li>
      <li>
        There&#39;s one button for each tab. Clicking a button selects the
        corresponding tab.
      </li>
      <li>
        The button for the active tab is always visually highlighted in some way.
        Often the active tab is shown on a surface contiguous with that of the
        active page. (iOS tabs don&#39;t do this.)
      </li>
      <li>
        The tab button are usually arranged horizontally across the top, but may
        also appear arranged along the left or, more rarely, the bottom.
      </li>
      <li>
        All tabs share the same width, and usually the same height as well. This
        consistent size probably was originally intended to reflect the consistent
        physical size of the atavistic tabbed paper folders that inspired
        this&#0160;UI representation, but even now the consistent size is useful in
        helping the user recognize all the tabs as related aspects of some single
        thing.&#0160;(Exception: On the Mac, a tabbed Preferences dialog like the
        one above, in which the window holds nothing but the tab set, will change
        size as the user changes tabs.)
      </li>
      <li>
        There&#39;s usually just one row of tabs. (Multiple rows are clunky: they
        prevent the active button from being adjacent to its corresponding tab, or
        else force tab rows to switch places.) This generally means the number of
        tabs is usually low, typically in the 3<span>–</span>9 range.
      </li>
    </ul>

    <p><strong>TabSet control</strong></p>

    <p>
      I&#39;ve posted a
      <a href="https://quickui.org/catalog/TabSet">TabSet</a> control in the QuickUI
      Catalog that manages a set of tabs:
    </p>

    <p>
      <img
        alt="TabSet"
        src="/images/flowstate/6a00d83451fb6769e20168e6727e9d970c-pi.png"
      />
    </p>

    <p>
      The pages within the TabSet can be any type of element or control, although
      for convenience a&#0160;<a href="https://quickui.org/catalog/Tab">Tab</a>
      control is provided to make it easy to set the page&#39;s descriptive label.
    </p>

    <p>
      Usage: Use a TabSet when you need to fit a large number of controls into a
      comparatively small space, and the controls can be grouped into meaningful
      tabs with clear labels. The controls in each tab should generally only have
      local effects within that tab&#39;s UI; it would be extremely confusing if
      checking a box in one tab disabled some control on a different tab.
    </p>

    <p>
      A scrolling page may often be a simpler alternative to a tabbed UI. One
      advantage tabs do have is that the labeled tab buttons provide a summary; they
      help give the user an overview of what object properties, navigational areas,
      etc., are available. To the extend the tab labels are meaningful and clearly
      reflect the tab&#39;s contained controls, this labeled structure may
      accelerate a user&#39;s search for a particular control.
    </p>

    <p><strong>Implementation notes</strong></p>

    <p>
      I&#39;ve built TabSet top of a more primitive control called&#0160;<a
        href="https://quickui.org/catalog/Switch"
        >Switch</a
      >. Switch acts as a container for other elements, and will only show one of
      those elements at a time. (The &quot;Switch&quot; name is inspired by the
      &quot;switch&quot; statement in&#0160;programming languages like C and
      JavaScript.) There are actually plenty of cases where a UI will contain a
      mutually-exclusive set of elements, and not all of these cases happen to look
      like tabs, so upon reflection it&#39;s somewhat surprising to me that more UI
      toolkits don&#39;t offer something like a Switch control.
    </p>

    <p>
      In this case, the TabSet wraps a Switch, adding a&#0160;<a
        href="https://quickui.org/catalog/List"
        >List</a
      >
      of buttons and populating them with the description() property of the
      corresponding tabs.
    </p>

    <p>
      The trickiest part of TabSet turned out to be handling the common case in
      which the TabSet itself should be as tall as its tallest tab (regardless of
      the individual tab heights). This allows for a consistent border or
      background, which helps the user interpret the disparate tabs as being closely
      related; it also avoids potential document reflow when the user switches tabs.
      The standard ad hoc solution in a case like this is to force all the elements
      to a known height (e.g., in pixels), but hard-coding element sizes seems like
      a cop-out if one&#39;s goal is to create a flexible control that handle a wide
      range of content. It seems like TabSet (or, actually, Switch) should be able
      to inspect the height of its contained elements and automatically resize
      itself to be as tall as the tallest contained element. This gets tricky
      because Switch normally hides all pages except the one which is active, and
      the height of an element hidden with display: none is reported as zero. To
      work around this, the underlying Switch class has been modified so that, in
      the auto-maximizing case like this, Switch hides the inactive pages with
      visibility: hidden instead (which lets the elements report their correct
      height), then uses absolute positioning to superimpose and top-align the
      pages.
    </p>

    <p>
      A related complexity arose in the case shown in the TabSet demo: the height of
      a tab may change based on asynchronously loaded content (e.g., an image). So
      the update of any tab&#39;s content, even one which isn&#39;t currently
      visible, may potentially force the TabSet to resize. Unfortunately, there
      isn&#39;t a standard DOM resize event for elements other than elements the
      <em>user</em> can resize (such as the window). So QuickUI controls have to
      make do by raising a custom event when they resize, allowing controls like
      Switch to adjust their height accordingly.
    </p>

    <p>
      It&#39;s boring details like resizing that forces most designers to throw up
      their hands and resort to hard-coded pixel dimensions, but UI controls that
      can flexibly handle dynamic content are ultimately far easier to use and work
      with as a design evolves.
    </p>
  "2012-02-13 UI Controls of the Week Quickly fill up a UI mockup with photos, placeholder text, and ads.html": >
    
    ---

    title: "UI Controls of the Week: Quickly fill up a UI mockup with photos, placeholder text, and ads"

    date: 2012-02-13

    slug: placeholders

    originalUrl: https://miksovsky.blogs.com/flowstate/2012/02/placeholders.html

    ---


    <p>
      When you’re designing a new UI, you often need to experiment with a variety of
      UI layouts in advance of having content that’s representative of what your UI
      will eventually display. This is a good thing — you don’t want to be burdened
      with the task of creating meaningful content when you’re focused on layout and
      navigation flow. In the exploratory stages of design work, it’s also important
      for you, or your design’s reviewers, to not get caught up too much in the
      generation of sample content.
    </p>

    <p>
      This is why designers have long used
      <a href="http://en.wikipedia.org/wiki/Lorem_ipsum">Lorem Ipsum</a> placeholder
      text to fill up a design. It looks like real text (which would not be the case
      if you simply mashed the keyboard), and you can
      <a href="http://www.lipsum.com/">generate an infinite amount of it</a> to fill
      up any design you’re working on. Most designers also have a collection of
      placeholder images or advertisements they can use to fill up a design mockup.
      One service will dynamically serve up
      <a href="http://placekitten.com/">placeholder photos of kittens</a>, although
      I’d imagine the conspicuous presence of zillions of kittens will be highly
      distracting for most web site designs.
    </p>

    <p>
      Although end users never see these sorts of placeholders, they’re nevertheless
      an essential element in the software development process. I’ve yet to see
      placeholder components included in a UI library, but it seems eminently
      reasonable for these placeholders to be packaged up as reusable controls.
      Anything that cuts down on design time is money in your company’s pocket.
    </p>

    <p>
      With that in mind, the QuickUI library now has several placeholder controls:
    </p>

    <p>&#0160;</p>

    <p><strong>LoremIpsum</strong></p>

    <p>
      The <a href="https://quickui.org/catalog/LoremIpsum/">LoremIpsum</a> control
      generates an arbitrary number of paragraphs of Lorem Ipsum text. You can
      control number the number of sentences per paragraph. By default, the first
      sentence of the first LoremIpsum control starts with “Lorem ipsum dolor sit
      amet…”, but you can control that as well.
    </p>

    <p><strong>FlickrInterestingPhoto</strong></p>

    <p>
      The
      <a href="https://quickui.org/catalog/FlickrInterestingPhoto/"
        >FlickrInterestingPhoto</a
      >
      control grabs a photo from Flickr’s
      <a href="http://www.flickr.com/explore/interesting/">Interestingness</a>
      collection for the previous day. You can pick one of Flickr’s standard image
      sizes, or you can use CSS to scale the photo to an arbitrary size.
    </p>

    <p>
      I use Flickr for this control because it’s free, has a good API, has
      high-quality images, and the images will change each day. It’d be pretty
      straightforward to adapt the control to another photo service.
    </p>

    <p><strong>AdPlaceholder</strong></p>

    <p>
      Finally, the
      <a href="https://quickui.org/catalog/AdPlaceholder/">AdPlaceholder</a> control
      creates a rectangle the size of any
      <a href="http://www.iab.net">IAB</a> standard ad unit, or you can specify an
      arbitrary size.
    </p>

    <p>
      I’ve looked for a server that would serve up meaningful ad images, but haven’t
      found one. Some sites will give you a small set of ad placeholders, but
      they’re too boring to be convincing, and the small size of the sample set
      means you get too much repetition. An ad placeholder service would be quite
      useful. It would give advertisers free exposure, although the ad server would
      need to be rigged to <em>not</em> count such impressions as meaningful. All
      this means that it’s hard to provide a general-purpose ad placeholder control.
      It would be quite easy, on the other hand, to create an ad placeholder control
      that worked against a specific ad server and ad account.
    </p>

    <p>&#0160;</p>

    <p>
      Using placeholders like these let you quickly fill up a mockup. E.g., the
      <a
        href="https://quickui.org/catalog/PersistentPanel/persistentPanelSideDemo.html"
        >demo</a
      >
      for the
      <a href="https://quickui.org/catalog/PersistentPanel/">PersistentPanel</a>
      control uses all three types to block out a fairly interesting layout on the
      fly:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        alt="PersistentPanel (side)"
        src="/images/flowstate/6a00d83451fb6769e20168e6fdf9fc970c-pi.png"
      />
    </p>

    <p>&#0160;</p>

    <p>
      In practice, I’ve discovered that these dynamic placeholder controls deliver a
      substantial benefit over relying on static content: the random content forces
      me to cope with layout situations I might not expect or encounter until far
      later in the development process. Designers have a innate tendency towards
      perfection, and invariably pick sample content to make a layout look as
      appealing as possible. For example, a design for a window will typically show
      a set of content that perfectly fills the window, but as I noted long ago,
      such a design is
      <a href="http://miksovsky.blogs.com/flowstate/2005/07/if_a_ui_sketch_.html"
        >probably too good to be true</a
      >. Your team will end up evaluating a design according to a degree of
      theoretical perfection that will never be seen in production. By building
      mockups around dynamic content, you force yourself to recognize and adapt to a
      more meaningful range of text run lengths, picture aspect ratios, and so on.
    </p>
  2012-02-14 Catalog control documentation now includes description of control properties and other methods.html: >
    
    ---

    title: "Catalog control documentation now includes description of control properties and other methods"

    date: 2012-02-14

    slug: catalog-control-documentation-now-includes-description-of-control-properties-and-other-methods

    originalUrl: http://blog.quickui.org/2012/02/14/catalog-control-documentation-now-includes-description-of-control-properties-and-other-methods/

    ---


    <p>
      The documentation for the QuickUI Catalog, which now contains 60+ controls,
      has been updated to include documentation of each class' properties and
      methods.
    </p>

    <p>
      Previously, the only way to see how to use a control was to read the original
      control source code on GitHub. Now the descriptions for a class' members are
      extracted from the source, and then used to populate the documentation page
      for that class. For example, the
      <a
        href="https://github.com/JanMiksovsky/quickui-catalog/blob/master/quickui.catalog/ListBox.qui"
        >ListBox source</a
      >
      is parsed to create the
      <a href="https://quickui.org/catalog/ListBox/">ListBox</a> documentation page.
    </p>
  2012-02-20 UI Controls of the Week Making HTML check boxes and radio buttons work the way they should have in the first place.html: >
    
    ---

    title: "UI Controls of the Week: Making HTML check boxes and radio buttons work the way they should have in the first place"

    date: 2012-02-20

    slug: labeledinput

    originalUrl: https://miksovsky.blogs.com/flowstate/2012/02/labeledinput.html

    ---


    <p>
      Here’s the current Sign In UI on a typical e-commerce web site (United
      Airlines, one of the largest airlines in North America) with a minor but
      common user interface bug:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        alt="United Airlines Sign In"
        src="/images/flowstate/6a00d83451fb6769e201630156faf9970d-pi.png"
      />
    </p>

    <p>&#0160;</p>

    <p>
      The bug is this: the “Remember me” check box can only be checked by clicking
      the tiny 13 by 13 pixel square; clicking the text <em>label</em> for the check
      box has no effect. This minor but common bug appears on many web sites because
      an HTML &lt;input&gt; check box on its own can’t define a label. The label can
      only be defined by creating a separate &lt;label&gt; tag. I have no idea who
      came up with this arrangement, and can only imagine that this was intended to
      allow flexibility. It does allow, for example, a check box label to be placed
      above, under, or to the left of, a check box. But this flexibility comes at a
      cost: many web developers aren’t aware of the need for &lt;label&gt; tags, and
      so they end up with check boxes with static, unclickable labels. HTML radio
      buttons suffer from the same issue.
    </p>

    <p>
      Of course, users have been long trained by client OSes that the text next to a
      check box or radio button <em>should</em> be clickable. It makes sense, after
      all, to give the user a large hit area (especially on a touch device). If the
      site above were to correctly define a check box label, the hit target would be
      600% times as large as using the box alone, at no additional cost in screen
      real estate. Furthermore, the UI would be more accessible to a larger
      population, including vision-impaired people using screen readers.
    </p>

    <p>
      The situation is improving, and a quick survey of some highly-trafficked web
      sites shows that many of them do correctly define labels for check boxes and
      radio buttons. But even some popular sites do not, or don’t do so
      consistently. Quantcast estimates the above United Airlines site gets about 1M
      U.S. visitors a month, and it’s fair to guess that some significant portion of
      those people are being driven through the faulty Sign In UI above.
    </p>

    <p>
      The problem persists because here
      <em>it’s harder to create a correct UI than an incorrect one</em>. For the
      correct result here, the developer has to:
    </p>

    <ol>
      <li>Hear about the need for the &lt;label&gt; tag and learn how it works.</li>
      <li>Remember to use a &lt;label&gt;.</li>
      <li>Set an ID on the &lt;input&gt; element.</li>
      <li>Create the &lt;label&gt; element.</li>
      <li>Type in the user-visible text.</li>
      <li>Set the label’s “for” attribute to the input element’s ID.</li>
    </ol>

    <p>
      In contrast, to create this check box the <em>wrong</em> way, the developer
      just has to:
    </p>

    <ol>
      <li>Type in the user-visible text.</li>
    </ol>

    <p>
      A check box created the wrong way looks pretty much like one created the right
      way, so it can be hard for the team creating the UI to spot the bug. And, of
      course, when the problem exists in UI that’s generally shown only to new users
      (like the UI above), team members will rarely be exposed to the bug
      themselves.
    </p>

    <p>
      Usability experts can exhort the correct use of &lt;label&gt; tags until
      they’re blue in the face, but a real fix requires that it be easier to create
      a correct UI than an incorrect UI. Client OSes have made this easy for years,
      and I can probably count on one hand the number of times I’ve seen a check box
      in a client app in which the text was not correctly clickable.
    </p>

    <p>
      Oh, and one more thing. On the web, it turns out that
      <em>even if you do things the way you’re told to</em>, your check box or radio
      button UI may still have a tiny bug. By default WebKit and Mozilla put an
      unclickable 3px margin around the input element. So even if you use a
      &lt;label&gt; tag in the recommended fashion, you still end up with a 3 pixel
      gap (highlighted below in red) between the input element and the label:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        alt="Check Box Label Gap"
        src="/images/flowstate/6a00d83451fb6769e20168e74de1e4970c-pi.png"
      />
    </p>

    <p>&#0160;</p>

    <p>
      Clicks in this gap have no effect! This is a teeny tiny bug that nevertheless
      happens to show up in WebKit and Mozilla on nearly every web site. (IE takes
      care to leave no gap.) This probably means that on any given day thousands of
      users happen to click in that gap, and are puzzled that nothing has happened
      before they quickly click again. I noticed that one site, Gmail, carefully
      works around this very issue by overriding the margins on the check box and
      label to eliminate the gap. Once again, it seems the platform makes it harder
      to create a correct UI than an incorrect one.
    </p>

    <p><strong>CheckBox and RadioButton</strong></p>

    <p>
      I’ve added <a href="http://quickui/catalog/CheckBox">CheckBox</a> and
      <a href="http://quickui/catalog/RadioButton">RadioButton</a> controls to the
      QuickUI Catalog that implicitly associate a label with an input element, and
      close up the gap described above.
    </p>

    <p>
      These aren’t particularly fancy or interesting components, but they’re
      nevertheless simple to use and solve the problem defined above. I wish HTML
      check boxes and radio buttons had always worked like this.
    </p>

    <p><strong>Implementation notes</strong></p>

    <p>
      Both CheckBox and RadioButton inherit from a
      <a href="http://quickui/catalog/LabeledInput">LabeledInput</a> base class that
      creates the automatic link between the label and the input element.
    </p>

    <p>
      I originally implemented the LabeledInput base class as an inline div
      containing an input and a label element, and had some JavaScript explicitly
      link the two elements with a generated ID. But then I noticed something
      interesting on Gmail’s sign in page: the input element is <em>inside</em> the
      label element, right before the static text. I’ve never seen this approach
      documented on pages that describe the use of &lt;label&gt;. Every site seems
      to document the label appearing in the HTML immediately after the input. But
      putting the input inside the label seems to work in all the mainstream
      browsers. The advantage of this approach is that there’s no need to set the
      “for” attribute on the label; the label automatically binds to the input
      element it contains.
    </p>

    <p>
      Taking another hint from Gmail, the LabeledInput class also sets margins so as
      to leave no gap between the input element and the adjacent text.
    </p>

    <p>
      Finally, as an extra bonus, the RadioButton control solves an annoyance
      specific to HTML radio buttons. An HTML developer must manually designate an
      internal radio button group name for each radio button in the group that
      should work together (i.e., which should be mutually exclusive). This isn’t
      hard to do, but it’s still an extra step, and more work than should really be
      necessary. So, by default, if you don’t explicitly put a RadioButton into a
      group, it will automatically group itself with any siblings (with the same DOM
      parent) that are similarly ungrouped.
    </p>
  2012-02-27 UI Control of the Week Repeater control generates multiple copies of UI elements.html: >
    
    ---

    title: "UI Control of the Week: Repeater control generates multiple copies of UI elements"

    date: 2012-02-27

    slug: repeater

    originalUrl: https://miksovsky.blogs.com/flowstate/2012/02/repeater.html

    ---


    <p>
      User interfaces invariably entail a certain degree of repetition; they’re
      filled with vertical or horizontal sequences of UI elements that behave
      identically are are styled identically. Sometimes the elements in such a
      sequence vary only in their label, and sometimes even that doesn’t vary; the
      controls really are all exactly the same. As an example, if we go back to the
      first post in this series on UI controls, we find that Apple’s
      <a
        href="http://miksovsky.blogs.com/flowstate/2011/10/slidingpageswithdots.html"
        >sliding pages with dots</a
      >
      control contains a horizontal sequence of little dot buttons. The variant of
      this control on Apple’s web Store uses blue dots:
    </p>

    <p>
      <img
        alt="Apple Store Sliding Pages"
        src="/images/flowstate/6a00d83451fb6769e2014e8c1fa9c9970d-pi.png"
      />
    </p>

    <p>
      Those little dots along the bottom don’t contain any data, and so their DOM
      representation of each is essentially identical. (The blue selected state
      comes from a style applied with a class.) Sequences of completely identical UI
      elements like this are relatively rare in a production UI. During design and
      development, however, it’s pretty common to want to throw a bunch of
      placeholder controls into the UI. Early in the design process, a prototype’s
      toolbar might have buttons labeled, “Button 1”, “Button 2”, “Button 3”, and so
      on, until the team can work out exactly what commands they want to offer users
      there.
    </p>

    <p>
      But, despite the repetition, creating a collection of buttons like that is
      generally a manual process: the designer or developer must manually create a
      set of buttons, and carefully give them each a unique, placeholder name.
      Alternatively, one writes a bit of throwaway script to generate a given number
      of controls, although that can take a few minutes to work up.
    </p>

    <p>
      The
      <a href="http://miksovsky.blogs.com/flowstate/2012/02/placeholders.html"
        >recent post on placeholder controls</a
      >
      pointed out that it can be worthwhile to have a UI control even if it’s only
      used during the design process; anything that saves time helps. Here, I think
      it’s interesting to have a control specifically for the task of generating
      repetitions in a UI. As with the
      <a href="http://miksovsky.blogs.com/flowstate/2011/11/listbox.html"
        >previously-discussed</a
      >
      <a href="https://quickui.org/catalog/ListBox/">ListBox</a>, this is
      effectively a higher-order meta-control: a control that creates or manipulates
      other controls. This can be useful for mocking things up during design. And,
      per the Apple example above, it might even be useful in production UI.
    </p>

    <p><strong>Repeater</strong></p>

    <p>
      The QuickUI Catalog contains a
      <a href="https://quickui.org/catalog/Repeater/" target="_self">Repeater</a>
      control. Given a control class and a number, it will create that many
      instances of that class. If you create a Repeater and give it a dot button
      class and a count of 5, you’ll get:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        alt="Repeater Dots 5"
        src="/images/flowstate/6a00d83451fb6769e201676283ee12970b-pi.png"
      />
    </p>

    <p>&#0160;</p>

    <p>
      With that in hand, you can easily bump the count up or down to get whatever
      number you need. If you want to see what things look like with 20 copies of
      the dot control, instead of doing a cut-and-paste of your UI code, you can
      just change the desired count to 20:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        alt="Repeater Dots 20"
        src="/images/flowstate/6a00d83451fb6769e20163018ec55c970d-pi.png"
      />
    </p>

    <p>&#0160;</p>

    <p>
      If you give the Repeater some content, each generated copy of the control will
      end up with that content. Here a Repeater has been told to create 5 instances
      of a simple button class and set their content to the text, “Button”:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        alt="Repeater Buttons 5"
        src="/images/flowstate/6a00d83451fb6769e201676283ee25970b-pi.png"
      />
    </p>

    <p>&#0160;</p>

    <p>
      For a bit of variety, you can also ask the Repeater to append an incrementing
      integer to the content:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        alt="Repeater Buttons 5 with Increment"
        src="/images/flowstate/6a00d83451fb6769e20163018ec568970d-pi.png"
      />
    </p>

    <p>&#0160;</p>

    <p>
      This is another one of those controls that, now that I have it, I end up using
      quite a bit. When poking around with a layout idea, it’s great to be able to
      fill up the UI quickly with a sequence of elements.
    </p>

    <p><strong>Implementation notes</strong></p>

    <p>
      It’s easy enough to create a one-off bit of JavaScript that creates an
      arbitrary number of controls, but why rewrite that code every time you need
      it? By investing just a bit of time in creating a reusable component, even
      that simple bit of code has already been written for you.
    </p>

    <p>
      The implementation of Repeater has become simpler over time as the QuickUI
      framework has gotten better at supporting the creation of meta-controls. These
      controls generally have one or more properties that accept a control class as
      a value. Creating such a property is easily done in a single line using a
      <a href="https://quickui.org/docs/control-class-methods.html#property-class"
        >Control.property()</a
      >
      declaration. A recent update to the QuickUI runtime makes it also possible to
      pass in arbitrary UI in
      <a href="https://quickui.org/docs/control-JSON.html">Control JSON</a> format,
      so you can use the Repeater control to generate <em>n</em> copies of some
      brand-new UI fragment containing a mixture of other controls.
    </p>

    <p>
      As suggested above, a Repeater is incorporated into the implementation of the
      Catalog’s
      <a href="https://quickui.org/catalog/SlidingPagesWithDots/"
        >SlidingPagesWithDots</a
      >
      and
      <a href="https://quickui.org/catalog/RotatingPagesWithDots/"
        >RotatingPagesWithDots</a
      >
      (which adds automatic rotation) controls. Once the number of children (pages)
      is known, the control can simply pass that number to the Repeater’s count()
      property to generate the required number of dot buttons.
    </p>
2012-03:
  2012-03-12 Control of the Week Pinterest-style PackedColumns efficiently fills space with tiles of varying heights.html: >
    
    ---

    title: "Control of the Week: Pinterest-style PackedColumns efficiently fills space with tiles of varying heights"

    date: 2012-03-12

    slug: packedcolumns

    originalUrl: https://miksovsky.blogs.com/flowstate/2012/03/packedcolumns.html

    ---


    <p>
      Image-sharing site <a href="http://pinterest.com">Pinterest</a> is the current
      darling of the social media world, and the core of its user experience is its
      attractively-designed home page:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        alt="Pinterest"
        src="/images/flowstate/6a00d83451fb6769e20163027f804d970d-pi.png"
      />
    </p>

    <p>&#0160;</p>

    <p>
      This page takes good advantage of available window real estate. As the user
      makes the window wider, the page re-lays out the columns of image tiles (or
      “pins”, in the parlance of the site) to take advantage of the extra width:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        alt="Pinterest (Wider)"
        src="/images/flowstate/6a00d83451fb6769e201676373f8a6970b-pi.png"
      />
    </p>

    <p>&#0160;</p>

    <p>
      The page must accommodate a wide range of tile heights, as the photos have
      different aspect ratios, and the number of comments per pin can vary. If the
      page simply laid out the tiles in a strict grid, it would waste a great deal
      of space. To use the space more efficiently, the page employs a “packed
      columns” layout.
    </p>

    <p><strong>Key attributes</strong></p>

    <p>The packed columns layout algorithm is straightforward:</p>

    <ol>
      <li>
        Divide available width by the standard item width to determine how many
        columns can fit.
      </li>
      <li>Make all columns initially empty.</li>
      <li>
        For each item in turn, add the item to the column which is currently
        shortest.
      </li>
    </ol>

    <p>
      The simplicity of this algorithm is such that it’s been independently
      recreated multiple times. The algorithm has some nice properties:
    </p>

    <ul>
      <li>It’s fast.</li>
      <li>
        As much horizontal space is used as possible (while still showing entire
        items). If a user gives the site more width, they’re rewarded with more
        information.
      </li>
      <li>The arrangement is visually interesting.</li>
      <li>The positions of the first few items are stable.</li>
      <li>
        At any given page width, the overall heights of the columns will be roughly
        equivalent. If the user scrolls to the bottom, they won’t find an unbalanced
        amount of space under any particular column.
      </li>
      <li>
        The relative vertical position of any two items is preserved across resize
        operations. If item A appears above item B at one window size, then item A
        will always be above (or on the same row) as item B at any other window
        size. The user doesn’t need to understand this; it just means that if some
        interesting item is “near the top” before a resize, then after the resize
        the same interesting item will still be “near the top”.
      </li>
    </ul>

    <p>
      The last point speaks to another benefit of the algorithm which doesn’t show
      up in Pinterest, but does show up in other applications: the consistent
      relative positions of items means you can offer users the ability to specify
      an order or prioritization for the items that affects (but doesn’t completely
      determine) where items end up. I used this years ago in the design for a home
      page for Microsoft Money, a personal finance application whose home page
      included a user-customizable set of home page modules. A Settings dialog let
      the user specify the priority of those modules by dragging the modules within
      a one-dimensional list. While the ultimate two-dimensional position of the
      modules depended on the window width and the modules’ current heights, the
      priority of any given module determined how close to the top of the page that
      module would end up. This limited degree of customization was sufficient to
      meet many users’ needs without having to create a full-blown customizable
      layout UI.
    </p>

    <p><strong>PackedColumns</strong></p>

    <p>
      I’ve added a
      <a href="https://quickui.org/catalog/PackedColumns">PackedColumns</a> control
      to the QuickUI Catalog. There’s a link to a
      <a href="https://quickui.org/catalog/PackedColumns/demo.html">demo</a> that
      simulates the general appearance of Pinterest’s home page. (I initially
      centered the items in the demo the way Pinterest does, but turned centering
      off to make it easier to observe the layout behavior.)
    </p>

    <p>
      Usage: Use PackedColumns to arrange a collection of child elements whose
      widths are fixed but whose heights vary substantially. If the heights are
      relatively consistent, users will likely find a traditional grid presentation
      easier to interpret and use.
    </p>

    <p><strong>Commentary</strong></p>

    <p>
      Given the simplicity of the algorithm, this wasn’t all that hard to code
      up.&#0160;I expect it’s not necessarily the actual cost of a layout like this
      that deters sites from adopting it. Rather, it’s the current need to
      independently discover or reverse-engineer behavior like this that most
      inhibits its adoption. As design knowledge gets coded into controls, however,
      such UI should become more pervasive.
    </p>

    <p>
      In essence, an ability to easily create and adopt create web components will
      lead to a commodification of user interface elements. Today Pinterest’s
      insight and ability to create a packed columns layout may confer a slight
      competitive edge, but someday commodification will quickly eliminate such
      edges. This will be true not just for UI elements that can easily be
      independently created, but for nearly anything. The day after a new site
      launches with a cool new UI trick, that trick will be copied and packaged up
      as an openly available and readily adoptable UI control anyone can use.
    </p>
  2012-03-14 Like snapping together a skyscraper Web components will catalyze a completely new ecosystem for creating UI.html: >
    
    ---

    title: "Like snapping together a skyscraper: Web components will catalyze a completely new ecosystem for creating UI"

    date: 2012-03-14

    slug: snapping-together-a-skyscraper

    originalUrl: https://miksovsky.blogs.com/flowstate/2012/03/snapping-together-a-skyscraper.html

    ---


    <p>
      In just a few years, the ecosystem in which we create UI&#0160;will change so
      dramatically that it will be hard to remember how we did things way back in
      2012.
    </p>

    <p>
      For a sense of perspective,&#0160;consider a similar change that transpired
      over a much longer period of time in a different industry: home construction.
      If you were building a house hundreds of years ago, you might have directly
      built or overseen most of the elements that went into your house: the framing,
      the hearth, the chimney, the roof, the windows, doors, you name it. You built
      nearly everything yourself — there were hardly any
      <em>components</em>.&#0160;Depending on where you lived, the only pre-built
      components you might have used would have been small and simple: glass from a
      glazier, bricks from a brickmaker, hardware from a blacksmith, and pipes or
      tiles from a ceramist. Even a glass window would have its surrounding parts —
      the case or sash, the wooden frame, the sill — measured, cut, and assembled on
      site and for a specific window. If you hired a craftsman like a carpenter or
      mason, everything they built for you would have been created on site
      specifically for your house.
    </p>

    <p>
      Now build a house&#0160;in a modern economy. The majority of your home’s
      elements are components assembled elsewhere by specialists and shipped to your
      construction site ready for final installation. When you design a house, you
      now spend a lot of your time looking through catalogs of these
      components.&#0160;Most of those components come in standardized dimensions or
      configurations. Many are quite complex. You can buy an intricate multi-part
      casement window in a variety of window configurations as a single, complete
      unit that includes wood, metal, multiple layers of glass, glass treatments,
      hinges, locks, screens,&#0160;and other hardware. You can find a similarly
      dizzying selection of pre-built roof joists, plumbing fixtures, or light
      sconces, or other components. If you want a component that someone doesn’t
      already offer for sale, you are either visionary or insane.
    </p>

    <p>&#0160;</p>

    <p>
      <img
        alt="Window Styles 1"
        src="/images/flowstate/6a00d83451fb6769e20168e89dee22970c-pi.jpeg"
      />
    </p>

    <p>
      <img
        alt="Window Styles 2"
        src="/images/flowstate/6a00d83451fb6769e20167639cdd70970b-pi.jpeg"
      />
    </p>

    <p>
      <span
        ><em
          >A tiny handful of configurations for window components (source:
          <a href="http://www.windowexpress.co.uk/double_glazed_windows.html"
            >Window Express</a
          >)</em
        ></span
      >
    </p>

    <p>&#0160;</p>

    <p>
      The componentization of the building industry means you can get a lot more
      house for a lot less money, and the resulting home can be better suited to
      your needs. Most of the factory-made components will be of better quality than
      what any one individual could make themselves on site. (It’s the site-built
      skylights that leak, not the factory-made ones.) And not only is the resulting
      building different; the component ecosystem brings about myriad new roles and
      industries.
    </p>

    <p>
      Now consider software, where&#0160;we’ve labored for years hand-crafting every
      element of the user experience like a medieval builder. The browser or OS
      gives us a tiny number of simple UI primitives; we must write nearly
      everything else in the UI by hand. For simple designs that are essentially
      fancy documents, one can use a visual editor of the Adobe DreamWeaver ilk, but
      you still have to roll up your sleeves. And any UI that affords any
      significant degree of interactively is created substantially in code on either
      the back end or front end. To the extent that UI code is “shared”, most often
      it’s actually copied and then hacked to fit, rather than implemented with a
      truly shareable component. If you did static analysis of the UI code for the
      100 most popular web apps, I’ll bet you’d find that only a tiny percentage of
      that UI code&#0160;is actually shared with another organization.
    </p>

    <p>
      If only there were some standard for composing and extending web UI
      components, we’d be able to unleash a UI ecosystem that would transform the UI
      world as thoroughly as the physical building component ecosystem has changed
      home construction.
    </p>

    <p>
      The UI field may actually undergo&#0160;a <em>bigger</em> transformation,
      because the software world isn’t subject to the same constraints as the
      physical world.&#0160;It is possible to create responsive UI components that
      change based on the device context, meta-controls that generate UI from more
      basic controls, adaptable components that change based on the user’s abilities
      and experience, and components that directly exploit third-party services.
    </p>

    <p>
      With such tools in hand, it should be possible to create huge, complex
      interfaces in a fraction of the time it currently takes, and for far less
      money. You’ll be able to assemble the UI of a significant application very
      quickly, and get something interesting that in many ways actually
      <em>works</em>. It will be like snapping together building parts to create a
      skyscraper.
    </p>

    <p>
      This transformation is still in the future, but it’s coming. One important
      step here is Google now taking the lead on a spec for web components that will
      standardize how components are defined and interact. A good summary can be
      found in
      <a
        href="http://dvcs.w3.org/hg/webcomponents/raw-file/tip/explainer/index.html"
        >Web Components Explained</a
      >. (Years ago, Microsoft tried to promulgate a standard for
      <a href="http://en.wikipedia.org/wiki/HTML_Components">HTML Components</a>,
      but it never caught on.) While closure on the web component spec is still off
      in the future — and broad availability is, of course, even further
      away&#0160;— this new world is&#0160;coming.
    </p>

    <p>
      This can’t happen soon enough. It will finally free us from having to waste
      such an ungodly amount of time attending to the design, coding, and testing of
      common user interface patterns, and let us move our attention up the value
      ladder to focus more on our own products’ domains.
    </p>

    <p>
      This development will ultimately commoditize some large portion of the
      industry’s UI output. As with the building industry, commoditization of UI
      elements will catalyze the creation of new roles in the UX industry:
      specialists who create components, component integrators, component testing
      labs, standards groups, and many more people in more organiziations creating
      better UI because they can start with solid, usable components addressing many
      of their needs.
    </p>

    <p>
      I’m excited by what this will mean for the QuickUI control framework. Google’s
      web component spec will eventually let the browser natively&#0160;address the
      lowermost functions which QuickUI must currently perform in JavaScript. This
      will enable much better performance, better isolation and modularity, and
      faster adoption. It’s too early to say how QuickUI evolve in this regard, but
      I want to direct its evolution such that it will transition smoothly to the
      standard web component foundation when that becomes widely available. Among
      other things, I’d looking at how to evolve the open
      <a href="https://quickui.org/catalog">QuickUI Catalog</a> of common UI
      controls so that they can someday be delivered as web components on the
      standard foundation. The goal is that someone using QuickUI controls today
      will find their investment preserved and profitable when the component future
      arrives.
    </p>

    <p>
      If you’re interested in tracking Google’s work on the topic, they are posting
      announcements on Google+ on the
      <a href="https://plus.google.com/103330502635338602217">Web Components</a>
      page.
    </p>
  2012-03-17 QuickUI 089 released.html: >
    ---

    title: "QuickUI 0.8.9 released"

    date: 2012-03-17

    slug: quickui-0-8-9-released

    originalUrl: http://blog.quickui.org/2012/03/16/quickui-0-8-9-released/

    ---


    <p>A minor update.</p>

    <ul>
      <li>
        To facilitate controls that want to perform their own layout, controls can
        bind to a new
        <a href="https://quickui.org/docs/control-events.html#layout">layout</a>
        event. Catalog controls like HorizontalPanels, VerticalPanels,
        PanelWithOverlfow, and PersistentPanel use this to recalculate the layout of
        their contents in response to a change in window size.
      </li>
      <li>
        A companion event called
        <a href="https://quickui.org/docs/control-events.html#sizeChanged"
          >sizeChanged</a
        >
        can be triggered by a control that wants to cooperatively let its parents
        know about a change in the control's size.
      </li>
      <li>
        A helper Control method called
        <a
          href="https://quickui.org/docs/control-prototype-methods.html#checkForSizeChange"
          >checkForSizeChange()</a
        > can be called if a control has updated its contents and there's the
        possibility that its size has changed. The helper records the control's last
        known size and, if the size has indeed change, raises the aforementioned
        sizeChanged event.
      </li>
    </ul>
  2012-03-19 Controls of the Week HorizontalPanels and VerticalPanels for basic CSS3 flexbox layouts today.html: >
    
    ---

    title: "Controls of the Week: HorizontalPanels and VerticalPanels for basic CSS3 flexbox layouts today"

    date: 2012-03-19

    slug: simpleflexbox

    originalUrl: https://miksovsky.blogs.com/flowstate/2012/03/simpleflexbox.html

    ---


    <p>
      It’s really, really common in UI to place a panel on one or both sides of a
      main content area, on the left and right or on the top and bottom:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        alt="HorizontalPanels"
        src="/images/flowstate/6a00d83451fb6769e2016763d7f924970b-pi.png"
      />
    </p>

    <p>&#0160;</p>

    <p>
      <img
        alt="VerticalPanels"
        src="/images/flowstate/6a00d83451fb6769e20168e8d88a68970c-pi.png"
      />
    </p>

    <p>&#0160;</p>

    <p>
      As ubiquitous as these layouts are, until recently it wasn’t easy to create
      them in HTML and CSS alone. You were either forced to hard-code the heights or
      widths of the panels, which is gross and hard to maintain — measuring the
      rendered dimension of a UI element is a task best left to the browser. You
      could write JavaScript to calculate the dimensions at runtime, but that’s a
      bunch of work many have avoided.
    </p>

    <p>
      The
      <a href="http://www.w3.org/TR/css3-flexbox/">CSS Flexible Box Layout Module</a
      >, a.k.a. “flexbox”, is intended to address layouts like the ones above. For a
      general introduction to flexbox layout, see
      <a
        href="http://coding.smashingmagazine.com/2011/09/19/css3-flexible-box-layout-explained/"
        >CSS3 Flexible Box Layout Explained</a
      >. This feature hasn’t gotten as much use as it could; as shown on
      <a href="http://www.caniuse.com/#feat=flexbox">When can I use</a>, it’s not
      supported on the current (as of this writing) versions of Internet Explorer.
      Moreover, the flexbox spec changed a while back; only Chrome supports the
      final spec.
    </p>

    <p>
      To address older browsers, it’s possible to use a
      <a href="http://en.wikipedia.org/wiki/Polyfill">polyfill</a> to support new
      CSS features. In this case, I wanted to create QuickUI controls to serve as a
      polyfill for flexbox layout. That is, these should take advantage of flexbox
      on browsers that support it. On older browsers, they should fall back to
      simpler flexbox-less CSS in cases where that is sufficient, and otherwise fall
      back to JavaScript-based layout.
    </p>

    <p><strong>Key attributes</strong></p>

    <p>
      The flexbox layout module can handle many layouts and needs beyond the two
      shown above, but the two above are common enough that they represent a good
      starting point.
    </p>

    <ul>
      <li>Each layout has a stretchable main content panel.</li>
      <li>
        A horizontal layout can have a panel on the left, right, or both. Similarly,
        a vertical layout can have a panel on the top, bottom, or both.
      </li>
      <li>
        The control needs to be able to handle arbitrary content in the panels. If
        the content changes, the layout should adjust in response.
      </li>
      <li>
        Each layout comes in two forms: one with a constrained height (in which the
        content is generally scrollable) and one with no height constraint (i.e.,
        grows as tall as necessary). In practice, the unconstrained form comes up
        much more often in the horizontal layout. (In the vertical case, the
        unconstrained form is really just a stack of divs, so no special layout is
        necessary. However, controls such as
        <a href="https://quickui.org/catalog/TabSet/">TabSet</a> come in both
        height-constrained and unconstrained forms, and it’d be nice to be able to
        position the tabs using a vertical layout in either case. So even the
        unconstrained vertical layout comes up in some, albeit rare, situations.)
      </li>
    </ul>

    <p><strong>HorizontalPanels and VerticalPanels controls</strong></p>

    <p>
      I’ve posted
      <a href="https://quickui.org/catalog/HorizontalPanels/">HorizontalPanels</a>
      and
      <a href="https://quickui.org/catalog/VerticalPanels/">VerticalPanels</a>
      controls that address the layouts described above. They can each handle up to
      one panel on either side of the content area.
    </p>

    <p>
      As browser implementations come up to snuff, the components can be updated to
      take advantage of native CSS flexbox support (including, eventually, the new
      syntax). You can build a UI using these layout components that will work today
      (as far back as IE 8), knowing that your UI will capitalize on flexbox support
      as it become more available.
    </p>

    <p><strong>Implementation notes</strong></p>

    <p>
      The HorizontalPanels and VerticalPanels controls derive from a base class
      called <a href="https://quickui.org/catalog/SimpleFlexBox/">SimpleFlexBox</a>,
      which sniffs out support for display: box and its variants. In testing, it
      seemed only WebKit’s flexbox implementation is worth using today. As of this
      writing, the Mozilla implementation seems too flaky overall to depend upon.
      And even on WebKit, I hit what looks like a
      <a href="http://code.google.com/p/chromium/issues/detail?id=118004">bug</a>
      preventing the use of automatic scroll bars in a height-constrained flexbox
      panel with horizontal orientation, which is a pretty common use case. This
      means HorizontalPanels can’t always use flexbox layout, even on Chrome. And
      while I’m interested in testing these controls on IE 10, Microsoft has tied
      the IE 10 preview to the Windows 8 preview, and I’ve already wasted too much
      of my life fiddling with Windows betas to care about trying Windows 8 before
      it’s ready. (Weren’t all the tying-IE-to-Windows shenanigans supposed to end
      with the DOJ consent decree?)
    </p>

    <p>
      The height-unconstrained cases can be emulated on older browsers using other
      CSS (i.e., without doing layout in JavaScript), so again there’s no price to
      pay unless its necessary. If the only way to perform the layout is JavaScript,
      the control binds to a newly-overhauled pair of events in the QuickUI
      framework. There’s now a general-purpose layout event to which any control
      class can bind if it wants to be notified when the control’s dimensions have
      changed in response to a window resize. There’s a companion sizeChanged event
      a control can listen to for changes in the dimensions of its children. This is
      used by the SimpleFlexBox base class, for example, to listen for any changes
      in the size of controls in its side panels so it can determine whether it
      needs to adjust the size of the center content area. SimpleFlexBox only binds
      to these events in the cases where it needs to manually lay things out, so
      you’re only paying the price of those events when it’s necessary.
    </p>

    <p>
      I did hit a weird cross-browser issue in IE9: when I view the VerticalPanels
      demo in IE9 under Large Fonts, the border for the main content area
      doesn&#39;t quite touch the border for the bottom panel. This can happen in
      IE9 because elements that size to text content can end up with fractional
      pixel heights. Since IE9 doesn&#39;t support flexbox, in the constrained
      height scenario SimpleFlexBox needs to examine the height of the top and
      bottom panels so it can adjust the metrics on the main content area.
      SimpleFlexBox requires on jQuery&#39;s height() function to do this, which
      turns out to always report integral pixel values. Under certain cases, then,
      it&#39;s possible to end up with a sub-pixel gap between the main content area
      and the&#0160;panels&#0160;— and the gap can become visible if the browser or
      display is scaling things up (as with Large Fonts). IE9 can report fractional
      heights via window.getComputedStyle(), but it doesn&#39;t seem worth this
      trouble just to support IE9 under various display edge cases. IE8 reports
      integral heights, and IE10 should support flexbox, leaving only IE9 with this
      issue. A simple workaround would be to avoid setting interior borders on the
      main content area if you&#39;re also setting them on the panels.
    </p>

    <p>
      In any event, it’s nice to be able to wrap up a bunch of browser-dependent
      styling or code into a reusable component that can handle the details so the
      component user doesn’t have to. And, IMO, I’m not altogether sure that
      universal flexbox support will actually eliminate all need for controls like
      HorizontalPanels or VerticalPanels. Use of those controls in your code can
      arguably make it easier to clearly state your <em>intent</em>. While the CSS
      flexbox spec is very, um, flexible, the resulting CSS is not particularly easy
      to read. I preferred the Dock=“Left” syntax of Microsoft’s
      <a
        href="http://msdn.microsoft.com/en-us/library/system.windows.controls.dockpanel.aspx"
        >DockPanel</a
      >
      control to the flexbox syntax, and have tried to mirror the former in
      designing the API for HorizontalPanels and VerticalPanels. Compare: to set the
      content of the left panel of HorizontalPanels control, you can stuff that
      content into a property called “left”. To achieve the same result in CSS3, you
      <em>omit</em> the “box-flex:” property to ensure the panel
      <em>won’t</em> stretch. I think the former is easier to read and maintain.
      Even once everyone has a flexbox-capable browser, these controls might still
      find use as more legible wrappers around the underlying CSS.
    </p>
  "2012-03-26 There must be 50 ways to close a popup menus, dropdowns, tooltips, palettes, dialogs, and more.html": >
    
    ---

    title: "There must be 50 ways to close a popup: menus, dropdowns, tooltips, palettes, dialogs, and more"

    date: 2012-03-26

    slug: popup

    originalUrl: https://miksovsky.blogs.com/flowstate/2012/03/popup.html

    ---


    <p>
      Apps often need to pop up something over the main UI; common examples would be
      menus and dialogs. Unfortunately, while apps need popups,
      <em>documents</em> don’t, and until recently HTML was relentlessly
      document-focused. It’s frustratingly difficult to do a popup well in a
      contemporary web app, and so it’s not surprising to see so many apps do them
      poorly or inconsistently.
    </p>

    <p>
      As a case in point, consider the ways a user might want to dismiss a UI
      element which has popped up over the main UI. Depending on the specific form
      of popup, there are a surprisingly large number of methods the popup might
      support for leaving it:
    </p>

    <ol>
      <li>
        <strong>Click outside the popup. </strong>This is the most common means to
        dismiss a lightweight popup like a menu. The user is saying, “I see you,
        popup, but don’t want to interact with you; let me get back to the main UI.”
        When the user clicks on the main UI in the background, a key question
        arises: <em>what happens with that click?</em> This isn’t an easy question
        to answer; see below.
      </li>
      <li>
        <strong>Click inside it. </strong>Perhaps the user has hovered into an
        element that’s popped up a tooltip, and maybe the tooltip’s under the mouse.
        If the tooltip is nothing but static content, the user can generally click
        anywhere within the popup to dismiss it.
      </li>
      <li>
        <strong>Make a selection</strong>. This is a special case of the above
        point. If the user’s dropped down a combo box and has clicked in an item in
        the resulting list, they’re not only making a selection,&#0160;they’re also
        saying they’re done with the dropdown.
      </li>
      <li>
        <strong>Click a button</strong>&#0160;that explicitly indicates completion.
        Another special case of point #3. A classic example would be an OK button in
        a modal dialog, which is essentially a heavyweight form of popup.
      </li>
      <li>
        <strong>Click a close box.</strong>&#0160;A modeless dialog or persistent
        palette window often relies on a small “<strong>×</strong>” icon in the
        upper-right corner as the primary means to dismiss it.
      </li>
      <li>
        <strong>Press Esc.</strong> Popups of many flavors can be dismissed by
        pressing the Escape key.
      </li>
      <li>
        <strong>Wait.</strong>&#0160;A tooltip or
        <a href="http://miksovsky.blogs.com/flowstate/2012/01/transientmessage.html"
          >transient message</a
        >
        may go away all on its own after giving the user time to read its contents.
      </li>
      <li>
        <strong>Hover into another control that produces a popup.</strong> The
        classic example here is menu riffing in Windows or OS/X menu bar. The user
        must click a menu to open it, but once that first menu is opened, the user
        can open the next menu simply by hovering into it. (This aspect of menus is
        worth a closer look in a subsequent blog post.)
      </li>
      <li>
        <strong>Move the focus to another window.</strong> Most forms of pop ups are
        temporary enough that the user doesn’t expect them to stick around. If the
        user opens a right-click context menu in Google Docs, and then switches to
        work in a different window, they don’t expect to come back to Google Docs
        later and find the context menu still open.
      </li>
      <li>
        <strong>Press the ALT key.</strong> On Windows, the ALT key or (considerably
        more obscurely) Shift+F10 are used as the keyboard shortcuts to activate the
        menu bar (or, in some cases, the selection’s context menu). If the user
        already has a menu or other popup open, this generally dismisses the popup
        before activating the menu bar.
      </li>
      <li>
        <strong>Scroll the page with the mouse wheel.</strong> Some apps handle
        this, some don’t. But if a tooltip or context menu was invoked from
        something that’s being scrolled out of view, there’s probably no reason for
        the popup to remain open.<br />
        <br /><em
          >[… Are there other ways? There are a wide range of other user actions
          that could dismiss a popup, but the others I can think of close the popup
          as a side effect of a click outside the popup or a loss of window
          focus</em
        ><em>.]</em>
      </li>
    </ol>

    <p>
      Most web apps that create popups seem to consider only a small fraction of
      these cases. For example, it’s common to have a web app’s menu stay open even
      when the Escape key is pressed (point #6 above) or the tab or window has lost
      focus (#9 above).
    </p>

    <p>
      Some of the above cases have complexities that get overlooked. Point #1 above
      — handling a click outside the popup — raises the question of what should
      happen with that outside click. The choices are: a) absorb the click so that
      it has no effect other than closing the popup, or b) let the click affect as
      usual whatever element outside the popup the user clicked on. On the web, the
      latter choice can be easier to handle, but this raises a significant usability
      risk: if the user clicks outside a menu, and just so happens to do so by
      clicking on a link, do they really intend to trigger the link’s normal
      navigational response?
    </p>

    <p>
      As an illustration, suppose a Facebook user has dropped down the menu on the
      right side of their current toolbar, and then they decide to close the menu by
      clicking outside it:
    </p>

    <p>&#0160;</p>

    <p>
      <img src="/images/flowstate/6a00d83451fb6769e201676427a92c970b-pi.png" />
      <br /><em>Careful!</em>
    </p>

    <p>
      That click outside the menu isn’t just going to dismiss the menu—the click is
      also going to activate the partially obscured “app request” link. If the mouse
      were just a few pixels lower, the user would end up launching the process to
      create an ad.
    </p>

    <p>
      Most OSes and client apps will absorb a click made outside a popup like a menu
      so that the user doesn’t accidentally trigger an unintended action. Web apps
      usually <em>don’t</em> absorb the click. It’s hard to know whether this is
      intentional or not. I think it’s simply a reflection of the fact that
      absorbing the outside click in a web app takes more effort. I personally think
      that effort is worth the trouble to avoid usability issues that can arise if,
      in the course of dismissing a popup, the user ends up accidentally triggering
      a background UI element. I think that work is even more worthwhile if it can
      be folded into a shareable component so that most designers and developers
      don’t have to ever think about this issue.
    </p>

    <p>
      Related to the concept of a popup is that of an overlay. To help the user see
      a heavyweight popup like a modal dialog, many web apps display a “lightbox
      effect” or other visual treatment. This layer sits visually behind the popup
      but <em>over</em> the main UI in the background. This overlay is really a
      distinct UI element, albeit one whose existence is probably seldom noticed.
      The overlay may not even be visible — it may be entirely transparent! But a
      transparent overlay is precisely the means one would typically use to absorb
      clicks outside a popup: a click on the overlay prevents the click from
      reaching a UI element in the background.
    </p>

    <p><strong>The Popup control and its related classes</strong></p>

    <p>
      Over the past week, I’ve overhauled the
      <a href="https://quickui.org/catalog/Popup">Popup</a> base class as part of
      work towards a new Menu control. One of my goals was to create a base class
      that handled more of the cases above automatically. For example, I wanted a
      Popup to absorb outside clicks by default so that most designers won’t have to
      even think about this, while still leaving the option of letting the outside
      click go through if the designer really wants that behavior. Similarly, I
      wanted the various Popup subclasses (like
      <a href="https://quickui.org/catalog/Dialog">Dialog</a>) and related classes
      to handle their respective situations better so that anyone using them has an
      edge in producing UI with good usability.
    </p>

    <p>
      The base Popup class now gives the designer and developer the ability to
      smoothly handle many of the dismissal cases above: outside click, inside
      click, loss of window focus, pressing Esc, etc. Special cases like menu bar
      hover behavior can be addressed in subclasses (like the forthcoming Menu
      control).
    </p>

    <p>
      A Popup control will normally create a companion overlay control to absorb
      outside clicks. This overlay is generally an instance of the&#0160;<a
        href="https://quickui.org/catalog/Overlay"
        >Overlay</a
      >&#0160;class. By default, the first click on an overlay dismisses the popup
      and removes the overlay. A subclass called
      <a href="https://quickui.org/catalog/ModalOverlay">ModalOverlay</a> can be
      used for modal dialogs that want to absorb <em>all </em>outside clicks (not
      just the first), so as to force the user to explicitly dismiss the dialog. The
      generic appearance of the ModalOverlay class includes a basic lightbox effect.
      A Popup can also be created with no overlay in situations where it’s important
      to let outside clicks have their normal effect.
    </p>

    <p>
      A related class called
      <a href="https://quickui.org/catalog/PopupSource">PopupSource</a> is available
      for the common case where a persistent UI element (a button, say) invokes an
      attached popup. PopupSource takes care of positioning the popup in relation to
      the button which invokes the popup. If space allows, the popup is shown below
      the button and left-aligned, but if this would cause the popup to extend
      beyond the viewport, the popup may appear above the button or right-aligned as
      necessary. PopupSource is used as the base class for
      <a href="https://quickui.org/catalog/ComboBox">ComboBox</a>, so a dropdown
      produced by a combo box may actually drop <em>up</em> if there’s more room
      above the combo box and not enough below. This is standard behavior on client
      OSes, but rare in web sites that have created their own combo box-like
      elements.
    </p>

    <p><strong>Implementation notes</strong></p>

    <p>
      In dealing with popups, one naturally has to dive into the details of how
      browsers render one element on top of the other. In this study I was aided by
      an excellent
      <a href="http://css-discuss.incutio.com/wiki/Overlapping_And_ZIndex"
        >summary of how DOM elements stack</a
      >. Having read that, it now seems likely to me that any occurrence of the CSS
      rule, “z-index: 1000”, can also be read as, “z-index: I don’t really know how
      this works”.
    </p>

    <p>
      Predictably, creating a general-purpose Popup class that works reasonably well
      in a wide variety of configurations on all the mainstream browsers entailed a
      substantial amount of testing and debugging. IE8 was particularly problematic
      in this regard.
    </p>
2012-04:
  2012-04-03 Make web menu bars more usable open a menu on hover only if another menu is already open.html: >
    
    ---

    title: "Make web menu bars more usable: open a menu on hover only if another menu is already open"

    date: 2012-04-03

    slug: menubar

    originalUrl: https://miksovsky.blogs.com/flowstate/2012/04/menubar.html

    ---


    <p>
      The history of user interface design isn’t terribly long, but it’s long enough
      that designers who ignore it do so at their users’ peril. In the transition
      from clients apps to the web, a lot of UI history has been forgotten, ignored,
      or reluctantly set aside because its lessons were too expensive (if not
      impossible) to preserve in early browsers.
    </p>

    <p>
      For example, it’s hard to find a web application with a menu bar as usable as
      the standard system menu bars in OS/X and Windows. Consider the basic tasks of
      opening and closing a menu in a menu bar. Last week’s
      <a href="http://miksovsky.blogs.com/flowstate/2012/03/popup.html"
        >post on popups</a
      >
      listed a number of ways in which a user can cancel a menu: clicking outside of
      it (while <em>not</em> accidentally triggering whatever one clicks on),
      pressing Escape, resizing the window, scrolling, or moving the focus to a
      different window. Web implementations often overlook these aspects of closing
      a menu.
    </p>

    <p>
      If we now turn our attention to the task of <em>opening</em> a menu, we find
      most web apps give this basic act similarly blunt treatment. The choices
      you’ll typically see in web menus are one of these:
    </p>

    <ul>
      <li>
        Menus open when the user <strong>clicks</strong> on a menu title.<strong
        > </strong>This is straightforward for a single menu, but problematic in a
        menu bar with multiple menus. Users need to scan a set of menus if they’re
        exploring their options, or if they’re hunting for a particular command. In
        these situations, having to click on each menu in turn feels clunky. And if
        the menu developer has done the fundamentally right thing in absorbing mouse
        clicks outside the menu (so the user doesn&#39;t accidentally trigger
        something when canceling the menu), the user must click <em>twice</em> to
        open up the next menu.
      </li>
      <li>
        Menus open as soon as the user <strong>hovers</strong> over a menu title.
        This feels responsive, and lets the user quickly scan a set of menus. On the
        downside, it can be incredibly distracting to have menus pop open when
        they’re unwanted. Consider a user who clicks in a text field, and then has
        to move the cursor away from the text field because the cursor doesn’t
        automatically disappear when they start typing.
        <em>(Another bit of UI history that’s been forgotten!)</em> Knocking the
        mouse out of the way, the user happens to end up parking the cursor over the
        menu bar, and now a completely unwanted, giant
        <a href="http://www.useit.com/alertbox/mega-dropdown-menus.html"
          >mega menu</a
        >
        pops up, covering up their work surface. (That menu article suggests using
        careful timing to avoid irritating the user, but to me that seems like a
        band-aid on what’s fundamentally the wrong solution.) Open-on-hover does
        offer the ability to have a click on the menu title perform navigation, but
        as discussed in
        <a
          href="http://uxmovement.com/navigation/why-hover-menus-do-users-more-harm-than-good/"
          >Why Hover Menus Do Users More Harm Than Good</a
        >, users may not discover that they can click on the title like a link — if
        hovering into the title popped it up, then the user can easily conclude that
        the menu has already performed the only job it’s there for.
      </li>
    </ul>

    <p>
      The odd thing is that a completely smooth way to finesse the problems of both
      these methods is right in front of the designer and developer, in the very
      same OS/X and Windows client applications they are likely using to design or
      code one of these problematic approaches.
    </p>

    <p><strong>Key attributes of menu riffing behavior</strong></p>

    <p>For ages both OS/X and Windows have used the following menu behavior:</p>

    <ol>
      <li>
        When no menu is open, hovering over a menu title can provide hover feedback
        on the title (Windows does this), but does <em>not</em> pop up the menu.
      </li>
      <li>
        Clicking a menu opens it. This required click prevents accidental menu
        invocation.
      </li>
      <li>
        Once a menu is open, hovering into the title of another menu closes the
        previous menu and implicitly opens the new one. This lets the user quickly
        <em>riff</em> through a menu bar’s menus to familiarize themselves with
        their contents or to find a specific command.<br /><br /><em
          >[Update: A commenter correctly points out that client OSes actually open
          menus immediately on mouse&#0160;down, instead of waiting for mouse up.
          This makes it possible to riff through menus with the mouse down. If I
          recall, Mac OS menus originally only worked on mouse down; letting go of
          the mouse while over a menu title closed the menu. Windows, in contrast,
          would keep the menu open even after the user released the mouse button,
          which was easier to use. The user didn&#39;t have to hold the mouse down
          throughout the whole menu exploration and command selection operation.
          This approach was eventually adopted by the Mac OS. But both Windows and
          OS/X still support mouse down opening and riffing of menus.]</em
        >
      </li>
    </ol>

    <p>
      To me, this resolution seems about perfect, and I wish all web app menus
      worked this way. In contrast, how often have you used one of the clunky
      always-click-to-open or twitchy open-on-hover web menu implementations and
      said to yourself, “I wish all my OS/X (or Windows) apps worked this way!”?
    </p>

    <p>
      To be fair, simply knowing the UI history (or being very observant) isn’t
      enough — there’s still the question of cost. One could argue that Apple and
      Microsoft have greater control over the environment than a web site within the
      constraints of the browser, which is true, but I think that explanation falls
      short. The fundamental problem seems to be the economics of homegrown UI: for
      most companies, it’s hard to justify the return on investment to get these
      details right in order to make a really usable menu bar. (Which, if they get
      it right, their users won’t even notice.) Apple and Microsoft can each build a
      perfect menu bar once that many developers can benefit from, so it’s worth
      their taking the time to get it right.
    </p>

    <p>
      Google Docs is one web app that has taken the time to sweat the details. Their
      document editing suite carefully follows the same menu riffing behavior
      described above: you open the first menu with a click, and subsequent menus
      with hover:
    </p>

    <p>
      <img src="/images/flowstate/6a00d83451fb6769e201676472dce5970b-pi.png" />
    </p>

    <p>&#0160;</p>

    <p>
      I’m not sure if Google acquired this finely-tuned menu through Writely or one
      of the other predecessors to Google Docs, or if they’ve more recently decided
      that a good way to displace with Microsoft Office is with great usability at a
      much cheaper price. Either way, it’s details like this that make Google Docs
      feels like such a reasonable replacement for a desktop application suite.
      (Thought not perfect yet: Google Docs gets the menu open behavior right, but
      gets points off for menu <em>closing</em> behavior because they don’t absorb
      background mouse clicks. And, as referenced above, it doesn’t hide the mouse
      when you start to type, the way most client text editors or word processors
      do.)
    </p>

    <p><strong>MenuBar control</strong></p>

    <p>
      I’ve added a <a href="https://quickui.org/catalog/MenuBar">MenuBar</a> control
      to the QuickUI Catalog, along with the usual companions of
      <a href="https://quickui.org/catalog/Menu">Menu</a>,
      <a href="https://quickui.org/catalog/MenuItem">MenuItem</a>, and
      <a href="https://quickui.org/catalog/MenuSeparator">MenuSeparator</a> classes.
      A Menu can be used on its own, or as part of a MenuBar. When placed inside a
      MenuBar, the menus will exhibit the riffing behavior described above.
    </p>

    <p>
      I like the way Google’s visual style puts both the menu title and an open menu
      on the same seamless surface to visually connect the two regions, so I’ve used
      that style for a Menu’s generic appearance (the one you get if you don’t want
      to do any of your own styling).
    </p>

    <p>
      Although the MenuItem and MenuSeparator classes assume a traditional
      vertically-oriented list of commands, use of those classes isn’t required, and
      the Menu class could just as easily be used to present commands in multiple
      columns or any other arrangement.
    </p>

    <p><strong>Implementation notes</strong></p>

    <p>
      The tricky bit here was making the entire MenuBar and its menus accessible to
      the mouse, while simultaneously absorbing any background mouse click outside
      the menu bar or its menus. By default, an individual Menu control supplies its
      own Overlay so that a Menu can be used on its own or in some other menu
      bar-like UI construct. The problem is that an Overlay behind a single Menu
      control will prevent the user from hovering into other menus in the menu bar.
      So the MenuBar creates its own
      <a href="https://quickui.org/catalog/Overlay">Overlay</a> control, and turns
      off the Overlays of the individual Menu controls. The result is the entire
      menu bar and its menus sit above a shared overlay. The user can hover from one
      menu to the next, and any clicks on the background overlay are absorbed and
      cancel the currently-opened menu.
    </p>

    <p>
      As always, it’s my hope that delivering this behavior in an open, reusable
      component can eventually change the economics of web usability so that anyone
      can benefit from the UI design history baked into a component — whether they
      realize that history is there or not.
    </p>
  2012-04-05 From MacPaint to FiftyThree's Paper Someday all our apps will be this great.html: >
    
    ---

    title: "From MacPaint to FiftyThree's Paper: Someday all our apps will be this great"

    date: 2012-04-05

    slug: someday-all-our-apps-will-be-this-great

    originalUrl: https://miksovsky.blogs.com/flowstate/2012/04/someday-all-our-apps-will-be-this-great.html

    ---


    <p>
      Imagine, for a moment, that you’re living way back in the early 1980s, maybe
      1984. You have access to a computer, and on that computer,&#0160;you use a
      top-end DOS app like Lotus 1-2-3:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        alt="Lotus 1-2-3"
        src="/images/flowstate/6a00d83451fb6769e20168e99b1982970c-pi.png"
      />
    </p>

    <p>&#0160;</p>

    <p>
      Then, one day, you see a marketing campaign for a new computer. Your eye
      catches on this image:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        alt="MacPaint"
        src="/images/flowstate/6a00d83451fb6769e2016303a54464970d-pi.png"
      />
    </p>

    <p>&#0160;</p>

    <p>
      Your mind is <em>completely blown</em>. The user interface for this
      application, which you learn is called MacPaint, seems utterly unlike any
      application you’ve ever seen. In fact, the entire premise of this image speaks
      to a proposition that’s never before even occurred to you:
      <em>a computer can be used to create art</em>.
    </p>

    <p>
      <span>•&#0160;•&#0160;•</span>
    </p>

    <p>
      Looking back, it’s hard to convey now how stunning both this image and that
      proposition were at the time. When the original Macintosh was released, this
      was probably the first vaguely art-like computer-rendered illustration most
      people had ever seen. Before that moment, when (or if) the average person
      thought about a computer, they considered it a tool for crunching numbers or
      typing documents.
    </p>

    <p>
      In retrospect, this Japanese woodcut was probably the most sophisticated
      illustration most people ever saw on an original Macintosh. As groundbreaking
      as the application was, it was simply&#0160;impossible for the average user,
      even a fairly artistic person, to create something of this quality with a
      mouse. Drawing with a mouse in MacPaint was said to be, “like drawing with a
      bar of soap”. If you tried to create something like the above yourself, the
      results were laughable.&#0160;You could indeed create interesting works in
      MacPaint, but only by relying on text, lines, polygons, and those paint bucket
      textures along the bottom. That is, you got the most interesting results with
      tools that were well-suited to software implementation and which produced
      effects you couldn’t easily achieve on paper.
    </p>

    <p>
      The designer behind this image,&#0160;<a href="http://kare.com/">Susan Kare</a
      >, discussed it in an
      <a href="http://library.stanford.edu/mac/primary/interviews/kare/trans.html"
        >interview</a
      >:
    </p>

    <blockquote>
      <p>
        With the Japanese lady, [Apple developer] Bill Atkinson was experimenting
        with scanning, and Steve [Jobs] brought in an actual woodcut that he had
        bought: it was big and colorful, and that was one of the first things that
        we scanned. And I took the scan, which was kind of rough, and refined it to
        make the final illustration. It looks so crude now — in terms of scanning
        technology — but it seemed amazing at the time that you could get a “real”
        image into your computer.
      </p>
    </blockquote>

    <p>
      The fact that this image started from a scan was both a surprise and something
      of a disappointment. Ah, no wonder we never saw illustrations like this —
      fundamentally, this was marketing! Not to detract from the groundbreaking
      impact of this work, but this image was clearly meant to suggest to users that
      they could <em>create </em>art freehand, using only the tools in MacPaint.
    </p>

    <p>
      Nevertheless, MacPaint represented a watershed in application user interfaces
      that had broad impact far beyond its users or market. When such an event
      occurs, it’s possible to look at the app and say something remarkable:
      <em>Someday all<strong> </strong>our apps will be this great</em>.
    </p>

    <p>
      The only reason the MacPaint woodblock image is no longer jaw-dropping to us
      today is because, within a relatively short time, nearly every application
      acquired a user interface that in many ways looked and worked as as well as
      (or, eventually, better than) the interface in MacPaint. Apps simply had to
      improve to stay competitive, and users everywhere reaped the benefits.
    </p>

    <p>
      <span>•&#0160;•&#0160;•</span>
    </p>

    <p>
      Such a moment has now happened again — or at any rate, it has now happened
      again to me. The moment came when I saw a post on
      <a
        href="http://beautifulpixels.com/ipad/paper-bring-out-the-creative-genius-in-you/"
        target="_self"
        >Beautiful Pixels</a
      >
      about&#0160;<a href="http://www.fiftythree.com/paper">Paper</a>, an app by a
      company called FiftyThree:
    </p>

    <p>&#0160;</p>

    <p>
      <img
        alt="Paper"
        src="/images/flowstate/6a00d83451fb6769e2016303a5450a970d-pi.png"
      />
    </p>

    <p>&#0160;</p>

    <p>
      Paper is beautiful, and I find it a joy to use.&#0160;Like MacPaint before it,
      I think Paper represents a new watershed in user interfaces.
    </p>

    <p>
      Earlier I’d tried
      <a href="http://itunes.apple.com/us/app/adobe-ideas/id364617858?mt=8"
        >Adobe Ideas</a
      >, a vaguely similar sketch pad app. It’s a fairly typical touch-enabled iPad
      application, and follows many (but not all) iPad conventions. Judging by app
      store reviews of Adobe Ideas, some of its users love it, and find it very
      useful. I myself was underwhelmed. Adobe Ideas feels utilitarian, like a dead
      thing. Using it to create a sketch feels like work. After a few attempts, I
      stopped using Adobe Ideas.
    </p>

    <p>
      Paper, in contrast, feels like something tangible and alive. It’s delightfully
      <em>fun.</em> Since I installed Paper, I look forward to using it every
      day.&#0160;Paper’s interface is beautiful at every level. Zooming out from a
      drawing (above) shows a sketchbook (below left) containing multiple drawings,
      and zooming out further shows your collection of sketchbooks (below right):
    </p>

    <p>&#0160;</p>

    <p>
      <img
        alt="Paper Sketchbook"
        src="/images/flowstate/6a00d83451fb6769e20167649a0194970b-pi.png"
      />
      &#0160;
      <img
        alt="Paper Sketchbooks"
        src="/images/flowstate/6a00d83451fb6769e20167649a0278970b-pi.png"
      />
    </p>

    <p>&#0160;</p>

    <p>
      A stunning amount of detail has gone into every aspect of Paper’s design. Just
      a sampling of the tiny details I’ve noticed:
    </p>

    <ul>
      <li>
        The “paper” background of a sketch isn’t pure white; it’s very slightly
        off-white. This lets the pure white ink and paint appear extra bright.
      </li>
      <li>
        If you’re in the middle of drawing and drag your finger (or stylus) over the
        tool palette, the palette automatically drops out of the way so you can
        continue your line into the space the palette had just been occupying.
      </li>
      <li>
        You can paint with white watercolor to lighten things. While Paper carefully
        models the physics of real inks and paints, in various places it breaks with
        those limitations to let you do things which useful but not possible in the
        real world. This seems to be done judiciously; the drawing tools still feel
        very much like their physical analogues.
      </li>
      <li>
        The tools respond to the speed of your movement — but not always the same
        way. The pen gets thinner the faster you go, which makes physical sense, but
        the calligraphy pen gets <em>thicker</em>&#0160;when you go fast.&#0160;This
        is another case in which the physical metaphor has been judiciously broken.
        I’m not sure of the precise rationale behind these differences, but the
        result feels right.
      </li>
      <li>
        As you flip through a sketchbook, not only do the pages animate in 3D, their
        shadows do as well. Paper is built on the OpenGL 3D library, but it
        probably&#0160;still was a lot of work to get these effects to look this
        good and this smooth.
      </li>
    </ul>

    <p>
      Surprisingly, Paper actually delivers on the original MacPaint premise:
      <em>you can create beautiful art. </em>I’m no artist, but I was able to
      quickly sketch the still life with fruit shown above, and the cat in the
      smaller image. It turns out you can add watercolors to pretty much any pen or
      pencil drawing in Paper and get something that looks pretty good. My children
      think so too — yesterday evening I had to read the Kindle edition of
      <em><a href="http://amzn.to/HVMAcr">Angelmaker</a></em> on my phone because I
      couldn’t pry the iPad away from my four year-old.
    </p>

    <p>
      (Aside: Paper is free, but you’ll have to pay to get the watercolors. You
      should just bite the bullet and buy all the tools — you will in the end,
      anyway. I think Paper’s pricing model is as clever as their interface design.)
    </p>

    <p>
      As amazing as the artistic results are, I don’t think they represent Paper’s
      greatest accomplishment. At the highest level, I think the best thing Paper
      has really done is <em>let you feel like an artist. </em>I haven’t regularly
      sketched anything since Drawing 101 in college, and now I find I’ve bought an
      iPad stylus so I can do more with Paper.
    </p>

    <p>
      FiftyThree carries this message throughout out the Paper app, as well as
      through their site and brand. Everything about this product is designed to
      lead you to believe, “I am the kind of cool latter-day renaissance person who
      carries around a Moleskine notebook because my free aesthetic soul may
      encounter a beautiful scene I want to render as art. I am
      <em>that</em>&#0160;awesome.” This is, in fact, the very image in the Paper
      promotional video: a guy wandering around New York City sketching stuff. The
      video is shot from first-person perspective. That guy is <em>you</em>.
    </p>

    <p>
      I think the term “user experience design” is often&#0160;overblown puffery —
      when I get to observe someone working through an app design problem, they’re
      usually focused on the feature set and interface. I rarely witness someone
      actually thinking directly about the <em>experience</em> their user will have.
      But with Paper, I think “experience design” is an apt term for what they’ve
      done. Maybe even that term sells it short. It could be called something like
      “self-conception design”.
    </p>

    <p>
      But, wait! Here’s the best part.
      <em>Someday all our apps will be this great.</em>
    </p>

    <p>
      Think about that. In the not-too-distant future, every bit of software you
      currently use (and maybe swear at) — an online store, the Settings area for
      your latest device, a random tool from an IT department, the production app
      you spend your workday in — all those things will someday be as beautiful to
      look at and joyful to use as this Paper app.
    </p>

    <p>
      And those apps will make you <em>feel </em>great. When send a message, you
      will feel like a great communicator (or socialite). When you follow a treasure
      map to an out-of-the-way restaurant in a new town, you will feel like a great
      explorer. When you follow a recipe, you will feel like a great chef. And when
      you create a bit of software, you will feel like a great designer.
    </p>
  2012-04-15 QuickUI 09 a significant update.html: >
    ---

    title: "QuickUI 0.9: a significant update"

    date: 2012-04-15 17:32:51

    slug: quickui-0-9-a-significant-update

    originalUrl: http://blog.quickui.org/2012/05/15/quickui-0-9-a-significant-update/

    ---


    <p>
      QuickUI 0.9 has been released. This is a major update which includes a number
      of changes that make it easier than ever to create reusable, extensible web
      user interface components.
    </p>

    <ul>
      <li>
        The means by which classes are defined has been substantially simplified,
        which means that QuickUI is doing a lot less work when a class is defined.
        One result is that the previous Control.subclass() method has been replaced
        with a simple jQuery.sub() call. An overload still permits one to pass in a
        JavaScript object defining the class, but now everything in that object is
        simply copied over to the new class’ prototype. A new “inherited:” key now
        holds the Control JSON used to render the control; see the
        <a href="https://quickui.org/docs/control-JSON.html">docs</a> for more
        details.
      </li>
      <li>
        The way you refer to an element within a control’s DOM has changed.
        Previously, you set an ID on an element in Control JSON using an “id:” key.
        Under the covers, this set an ID on the HTML element. As of QuickUI 0.9, to
        refer to an element in code, the Control JSON should include a “ref:” key.
        (See the
        <a href="https://quickui.org/tutorial/element-reference-functions.html"
          >tutorial example</a
        >.) Under the covers, this will set a CSS class on the element. As before,
        this also implicitly creates an element reference function you can use to
        get that element through code: e.g., setting ref: “foo” on an element lets
        you get back to that element with the element reference function $foo().
      </li>
      <li>
        A control’s initialize() method now implicitly invokes the initialize()
        methods of its base classes. Previously, you had to remember to have
        initialize() invoke this._super(), which was error prone. Failure to invoke
        this._super() would often mean that a base class’ event handlers didn’t get
        wired up, which could lead to bugs which were difficult to track down.
      </li>
      <li>
        CoffeeScript support,
        <a
          href="http://blog.quickui.org/2012/05/07/quickui-now-supports-coffeescript/"
          >announced earlier</a
        >, has been folded into the core quickui.js runtime.
      </li>
    </ul>

    <p>
      While the above work was underway, the QuickUI source code was substantially
      overhauled:
    </p>

    <ul>
      <li>
        The aforementioned support for creating QuickUI controls in CoffeeScript has
        gone so well that QuickUI’s own runtime has now itself been ported to
        CoffeeScript. This does <em>not</em> mean that QuickUI developers need to
        use CoffeeScript; QuickUI supports plain JavaScript development and
        CoffeeScript development equally well. For people using QuickUI, this simply
        means that a number of planned improvements to QuickUI (including those
        listed above) could more easily be tackled.
      </li>
      <li>
        The quickui.js runtime file itself is now built with Ben Alman’s handy
        <a href="https://github.com/cowboy/grunt">Grunt</a> build tool.
      </li>
      <li>
        The optional QuickUI markup compiler has been moved into a separate GitHub
        repo, quickui-markup.
      </li>
    </ul>

    <p>Please take a look!</p>
  2012-04-16 vision for coevolving QuickUI and the emerging Web Components standard.html: >
    
    ---

    title: "vision for coevolving QuickUI and the emerging Web Components standard"

    date: 2012-04-16

    slug: a-vision-for-coevolving-quickui-and-the-emerging-web-components-standard

    originalUrl: http://blog.quickui.org/2012/04/16/a-vision-for-coevolving-quickui-and-the-emerging-web-components-standard/

    ---


    <p>
      This post is the first in a series looking at the relationship between QuickUI
      and Web Components. This post will kick things off by laying out some basic
      points of a vision for how these two technologies might co-evolve.
    </p>

    <p>
      The Web Components effort spearheaded by Google is a vital effort towards
      promoting component-based user interface design for web-based apps.
      Componentized user interfaces may
      <a
        href="http://miksovsky.blogs.com/flowstate/2012/03/snapping-together-a-skyscraper.html"
        >radically transform the web industry</a
      >. It will take some time for the spec to be finished and agreed upon, and
      then still more time for the technology to make its way into users’ hands. It
      is hoped that QuickUI can serve as a bridge to the world of Web Components,
      act as a reference point for work on the emerging spec, and provide services
      and component libraries that speed the creation of Web Component-based apps.
    </p>

    <h1>QuickUI and Web Components have the same goal</h1>

    <p>
      Both frameworks address the same fundamental objective: let web designers and
      developers create better applications faster through the creation and use of
      modular, reusable, and extensible user interface elements. QuickUI calls such
      elements “controls” and the Web Components spec calls them “components”, but
      in this context the terms are essentially interchangeable.
    </p>

    <p>
      There are obviously differences in approach. QuickUI is built on JavaScript
      and jQuery, while Web Components is native code and browser- and
      library-agnostic. The Web Components framework, by virtue of being part of the
      browser, can do many things which a JavaScript library like QuickUI cannot.
      There are some obvious performance benefits to doing things in native code.
      It’s also possible for the browser to enforce a high degree of component
      isolation by preventing a Web Component’s host from knowing what’s going on
      inside the component. Such isolation is crucial for a component platform,
      because it leads to a proper
      <a href="http://en.wikipedia.org/wiki/Separation_of_concerns"
        >separation of concerns</a
      >. A component author can make many modifications to the inner workings of a
      component without fear that hosts of that component are inappropriately
      depending on a particular implementation. QuickUI can only maintain such
      separation of concerns by convention and by proffering services that make it
      easier for developers to use controls in a modular way than not.
    </p>

    <p>
      Despite their differences, fundamentally these two web user interface
      frameworks are more compatible than not. This opens up the possibilities which
      follow.
    </p>

    <h2>QuickUI and Web Components should be interoperable</h2>

    <p>
      Based on the current Web Components spec, in theory it should be
      straightforward for a QuickUI control to host a Web Component, and vice versa.
      That can provide a degree of future-proof resiliency to a team that wants to
      build with QuickUI today. But it should be possible to do better than that…
    </p>

    <h1>
      QuickUI itself will someday be built on top of the Web Components foundation
    </h1>

    <p>
      Given the performance and modularity benefits of Web Components, and the
      reasonably close alignment of goals, it appears that it should be possible to
      eventually have QuickUI controls <em>be </em>Web Components.
    </p>

    <p>
      Currently, the lowest levels of the quickui.js runtime provides services such
      as creating control subclasses and instantiating controls. These low-level
      services would be provided by a Web Components-enabled browser instead. The
      QuickUI runtime could potentially detect whether the user’s browser supports
      Web Components and, if so, create controls as Web Components wrapped by
      jQuery. On legacy browsers (all today’s released browser versions, going back
      to IE 8), the QuickUI runtime would continue to create controls as regular DOM
      elements wrapped by jQuery.
    </p>

    <h1>
      QuickUI can provide useful features beyond those which have been standardized
    </h1>

    <p>
      Standards, by their nature, advance slowly. Even once QuickUI is built on top
      of Web Components, QuickUI can continue to evolve at a faster pace to meet the
      needs of web designers and developers. QuickUI can be the “running code” in
      the maxim that Internet standards evolve from
      <a href="http://en.wikipedia.org/wiki/Rough_consensus"
        >Rough consensus, running code</a
      >.
    </p>

    <p>
      QuickUI is also designed explicitly for jQuery developers, whereas the Web
      Components spec must be library-agnostic. In the same way that jQuery
      developers currently find it much easier to write an interactive UI in jQuery
      than by doing direct DOM manipulation, they will also find creating controls
      (components) easier in QuickUI than using only the low-level services offered
      by the browser. For example,
      <a href="https://quickui.org/tutorial/inherit-from-jQuery.html"
        >a QuickUI control is already a jQuery instance</a
      >, so a developer can immediately and directly manipulate a control using all
      the facilities in jQuery. As another example, QuickUI’s services for creating
      properties generate jQuery-style getter/setter functions which are
      automatically chainable, and can be applied to a collection of elements in a
      single call.
    </p>

    <h1>QuickUI may serve as a reference for work on Web Components</h1>

    <p>
      As a 4+ year-old web user interface framework, there’s already a considerable
      degree of hard-earned knowledge baked into the QuickUI framework. These
      lessons can be considered as the various parties working on Web Components
      flesh out the details of that spec. It’s in this role of QuickUI as a
      reference point that some of the important lessons from QuickUI will be
      covered in future posts on this blog.
    </p>

    <h1>QuickUI lets teams create componentized web user interfaces today</h1>

    <p>
      Many of the benefits of building a user interface with components can be
      achieved by a team using QuickUI today. As summarized on the
      <a href="https://quickui.org">QuickUI home page</a>, those benefits include
      the abilities to:
    </p>

    <ul>
      <li>Better organize and maintain UI code.</li>
      <li>
        Use custom controls to provide optimized user interactions or a particular
        visual aesthetic.
      </li>
      <li>
        To begin developing, in the course of one project, a library of reusable UI
        that can accelerate a team’s future projects.
      </li>
      <li>
        Share common UI solutions across teams and organizations so those solutions
        don’t need to be created from scratch each time.
      </li>
    </ul>

    <h1>
      Investment in QuickUI apps today can be preserved when Web Components arrive
    </h1>

    <p>
      This is a <em>vision</em>, not a legal commitment. The Web Components spec is
      still in flux and evolving entirely outside the control of anyone working on
      QuickUI, so it’s impossible to promise how things will work in the future.
      Still, it’s plausible that a team could begin creating a web user interface in
      QuickUI today, and as Web Component-enabled browsers arrive and gain use, the
      team could automatically (or, at least, easily) transition to that better
      foundation to improve the performance and reliability of their apps.
    </p>

    <h1>
      The QuickUI Catalog will evolve into the web’s best open library of reusable
      user interface components
    </h1>

    <p>
      To an extent, the <a href="https://quickui.org/catalog">QuickUI Catalog</a> of
      common, ready-to-use controls is somewhat independent of the underlying
      QuickUI foundation. At the most abstract level, these are user interface
      patterns that can be found in many applications on many platforms. Even if
      obstacles prevent QuickUI controls from being built as Web Components, the
      existing JavaScript code base for the Catalog would give one a huge headstart
      in creating an equivalent library of Web Components. And if the vision
      outlined here comes to pass, the Catalog’s collection of components — and user
      interfaces built with them — should be able to transition smoothly to a Web
      Components foundation.
    </p>

    <h2></h2>

    <h1>Next steps: investigation of framework differences</h1>

    <p>
      While the above points lay out a vision for the coevolution of QuickUI and Web
      Components, many details remain which must be investigated before such a
      vision can come to pass. While the goals of the two frameworks are generally
      aligned, the design principles underlying the two have significant
      differences. For example, QuickUI’s
      <a href="https://quickui.org/docs/principles.html">core design principles</a>
      seem to place greater emphasis on extensibility — creating a new control class
      by extending an existing class — than does the current Web Components spec.
      Such differences could lead to irreconcilable incompatibilities, which would
      represent lost opportunity.
    </p>

    <p>
      The hope is that any issues can be teased out of the Web Components spec early
      enough and either worked around or submitted for consideration so that they
      may hopefully be addressed. Some key issues warranting further investigation
      are:
    </p>

    <ol>
      <li>
        A significant fraction of QuickUI controls override their base class’
        content() property setter function in order to perform work when a host sets
        a control’s content. This is done for a variety of reasons: to partially
        fill in a component’s DOM tree (a sort of user interface
        <a href="http://en.wikipedia.org/wiki/Currying">currying</a>); to transform
        content before displaying it; to recalculate layout; or to perform other
        operations dependent upon the content. This is not currently supported in
        the Web Components spec. An analysis of the QuickUI Catalog controls on this
        topic is underway to produce a set of common use cases.
      </li>
      <li>
        A QuickUI subclass maintains an is-a relationship with its base class. The
        &lt;shadow&gt; element in the Web Components spec may lead to subclasses
        that effectively maintain more of a has-a relationship with their parent
        class. It’s not immediately clear, for example, how one could define a base
        class and a subclass that meet all these conditions: a) both use the same
        root element (e.g., &lt;button&gt;), b) both are independently instantiable,
        c) the subclass can host base class elements (e.g., via &lt;shadow&gt;), and
        d) the subclass is a JavaScript instanceof (is-a) of the base class. These
        conditions often arise when extending an existing control class, and QuickUI
        control classes can meet all of them.
      </li>
      <li>
        The Web Components proposal minimizes the impact on the HTML language
        itself, but one repercussion of this appears to be that component classes
        can’t define custom properties that can be set through markup. As currently
        understood, the spec calls for hosts to pass values to components
        exclusively through a single content tree. The component class must then
        prise apart this content through a “select=” attribute so that it can
        incorporate content subelements into different parts of the component.This
        is roughly analogous to the way command-line apps must parse their text
        arguments, with both the flexibility and the potential for great
        inconsistency that go with that. In this context, such flexibility may
        create significant complications for the creation and maintenance of
        subclasses, as varying levels of the class hierarchy impose different
        demands on the content. Overall, this doesn’t feel as specific or clean as
        the compound property syntax in a language like XAML (or
        <a href="https://quickui.org/markup/">QuickUI Markup</a>), in which a
        control class can define custom properties that may be set as string
        attributes, through nested subelements, or through property setter
        functions.
      </li>
    </ol>

    <p>
      As these issues are investigated more deeply, the results of those
      investigations will be posted here.
    </p>
  2012-04-27 How QuickUI controls use code to specialize the handling of their content (in ways that might not be supported by Web Components.html: >
    
    ---

    title: "How QuickUI controls use code to specialize the handling of their content (in ways that might not be supported by Web Components"

    date: 2012-04-27

    slug: how-quickui-controls-use-code-to-specialize-the-handling-of-their-content-in-ways-that-might-not-be-supported-by-web-components

    originalUrl: http://blog.quickui.org/2012/04/27/how-quickui-controls-use-code-to-specialize-the-handling-of-their-content-in-ways-that-might-not-be-supported-by-web-components/

    ---


    <p>
      As indicated in the earlier overview comparing
      <a
        href="http://blog.quickui.org/2012/04/16/a-vision-for-coevolving-quickui-and-the-emerging-web-components-standard/"
        >QuickUI and Web Components</a
      >, one significant difference between the two frameworks is that QuickUI
      allows code to run when a control’s content() property is set, while the Web
      Components spec does not currently allow for this. This post will attempt to
      begin making the case for the need for this feature, starting with an analysis
      of how that feature is used in QuickUI controls today.
    </p>

    <p>
      The largest public body of QuickUI controls is
      <a href="https://quickui.org/catalog">QuickUI Catalog</a>, which as of this
      writing includes 76 open source controls that handle a variety of common user
      interface tasks or serve as demonstrations of how to achieve common behaviors
      in controls. Of the 76 published controls:
    </p>

    <ul>
      <li>
        32 controls include code that runs when their content() property is set.
        Since the base Control class already provides a default content() property,
        these controls are overriding that base implementation. (In some cases, like
        <a href="https://quickui.org/catalog/PopupSource">PopupSource</a>, the
        class’ content() property override is itself overridden by a subclass like
        <a href="https://quickui.org/catalog/ComboBox">ComboBox</a>.)
      </li>
      <li>
        Of the above 32 controls, 23 use their content() property override to
        delegate content to a sub-element. This is the standard approach in QuickUI
        for a control to incorporate content from its host. (For a working example,
        see this <a href="http://jsfiddle.net/quickui/ys2JQ/">jsFiddle</a>, in which
        a UserTile control delegates its content to a span inside the control. This
        topic is also covered in the second portion of the QuickUI JavaScript
        <a href="https://quickui.org/tutorial">tutorial</a>.) This is roughly
        analogous to what Web Components spec accomplishes with the proposed
        &lt;content&gt; element.
      </li>
      <li>
        12 controls (of the 76 in the catalog) are text box variations that delegate
        their content() property to a text box: either an &lt;input&gt; element of
        type “text” or a &lt;textarea&gt;. For example, the content() of a
        <a href="https://quickui.org/catalog/ListComboBox/">ListComboBox</a> will be
        placed inside an &lt;input&gt;. Historically, HTML input fields have
        insisted on handling the field’s value through a string “value” property,
        whereas an element’s content is a DOM subtree. Despite the difference in
        data type, in many cases the distinction between “value” and “content” feels
        somewhat arbitrary. The convenience of a content property is just as
        interesting to a control that wants to render that content in a text box.
        For example, if a combo box is going to hold a list of animal names, it’s
        nice to be able to set the default content of that combo box in markup
        as:&lt;ListComboBox&gt;Dog&lt;/ListComboBox&gt;. Naturally, this translation
        is lossy: if one passes a DOM subtree into such a control’s content()
        property, it’s to be expected that it will only preserve the subtree’s text.
        Nevertheless, it is highly useful to be able to define controls that render
        their primary content in text boxes.
      </li>
      <li>
        20 of the controls override their content() property to perform work
        whenever the content changes. The following table summarizes these 20 cases:
      </li>
    </ul>

    <table width="585" border="0" cellspacing="0" cellpadding="0">
      <tbody>
        <tr>
          <td valign="top" width="32"></td>
          <td valign="top" width="175"><strong>Control</strong></td>
          <td valign="top" width="376">
            <strong>When content() property is set, the control…</strong>
          </td>
        </tr>
        <tr>
          <td valign="top" width="32"></td>
          <td valign="top" width="175">
            <a href="https://quickui.org/catalog/AutoSizeTextBox"
              >AutoSizeTextBox</a
            >
          </td>
          <td valign="top" width="376">
            Recalculates its own height to match that of the content.
          </td>
        </tr>
        <tr>
          <td valign="top" width="32"></td>
          <td valign="top" width="175">
            <a href="https://quickui.org/catalog/ColorSwatchButton"
              >ColorSwatchButton</a
            >
          </td>
          <td valign="top" width="376">
            Transforms a string color name/value into a color.
          </td>
        </tr>
        <tr>
          <td valign="top" width="32"></td>
          <td valign="top" width="175">
            <a href="https://quickui.org/catalog/ColorSwatchTextBox"
              >ColorSwatchTextBox</a
            >
          </td>
          <td valign="top" width="376">
            Transforms a string color name/value into a color.
          </td>
        </tr>
        <tr>
          <td valign="top" width="32"></td>
          <td valign="top" width="175">
            <a href="https://quickui.org/catalog/HighlightEffects"
              >HighlightEffects</a
            >
          </td>
          <td valign="top" width="376">Recalculates its height/width.</td>
        </tr>
        <tr>
          <td valign="top" width="32"></td>
          <td valign="top" width="175">
            <a href="https://quickui.org/catalog/HintTextBox">HintTextBox</a>
          </td>
          <td valign="top" width="376">Shows hint text if the content is empty.</td>
        </tr>
        <tr>
          <td valign="top" width="32"></td>
          <td valign="top" width="175">
            <a href="https://quickui.org/catalog/Menu">Menu</a>
          </td>
          <td valign="top" width="376">
            Recalculates the width of a subelement (a “shield” element that must be
            exactly as wide as the content to achieve a particular visual effect).
          </td>
        </tr>
        <tr>
          <td valign="top" width="32"></td>
          <td valign="top" width="175">
            <a href="https://quickui.org/catalog/PackedColumn">PackedColumns</a>
          </td>
          <td valign="top" width="376">Recalculates its layout.</td>
        </tr>
        <tr>
          <td valign="top" width="32"></td>
          <td valign="top" width="175">
            <a href="https://quickui.org/catalog/PanelWithOverflow"
              >PanelWithOverflow</a
            >
          </td>
          <td valign="top" width="376">Recalculates its layout.</td>
        </tr>
        <tr>
          <td valign="top" width="32"></td>
          <td valign="top" width="175">
            <a href="https://quickui.org/catalog/PersistentPanel"
              >PersistentPanel</a
            >
          </td>
          <td valign="top" width="376">
            Checks to see whether the panel should be docked or not.
          </td>
        </tr>
        <tr>
          <td valign="top" width="32"></td>
          <td valign="top" width="175">
            <a href="https://quickui.org/catalog/PopupButton">PopupButton</a>
          </td>
          <td valign="top" width="376">
            Adjusts its layout if the content is not empty.
          </td>
        </tr>
        <tr>
          <td valign="top" width="32"></td>
          <td valign="top" width="175">
            <a href="https://quickui.org/catalog/Repeater">Repeater</a>
          </td>
          <td valign="top" width="376">
            Copies the content into the array of repeated sub-controls.
          </td>
        </tr>
        <tr>
          <td valign="top" width="32"></td>
          <td valign="top" width="175">
            <a href="https://quickui.org/catalog/SearchBox">SearchBox</a>
          </td>
          <td valign="top" width="376">
            Enables its search icon if the content is not empty.
          </td>
        </tr>
        <tr>
          <td valign="top" width="32"></td>
          <td valign="top" width="175">
            <a href="https://quickui.org/catalog/SlidingPages">SlidingPages</a>
          </td>
          <td valign="top" width="376">Recalculates its height/width.</td>
        </tr>
        <tr>
          <td valign="top" width="32"></td>
          <td valign="top" width="175">
            <a href="https://quickui.org/catalog/SlidingPagesWithDots"
              >SlidingPagesWithDots</a
            >
          </td>
          <td valign="top" width="376">
            Updates the number of page buttons to match the number of pages (i.e.,
            child nodes) in the content.
          </td>
        </tr>
        <tr>
          <td valign="top" width="32"></td>
          <td valign="top" width="175">
            <a href="https://quickui.org/catalog/Switch">Switch</a>
          </td>
          <td valign="top" width="376">
            Determines which child should be visible.
          </td>
        </tr>
        <tr>
          <td valign="top" width="32"></td>
          <td valign="top" width="175">
            <a href="https://quickui.org/catalog/Tab">Tab</a>
          </td>
          <td valign="top" width="376">
            Lets the parent tab set know the tab’s size may have changed.
          </td>
        </tr>
        <tr>
          <td valign="top" width="32"></td>
          <td valign="top" width="175">
            <a href="https://quickui.org/catalog/TabSet">TabSet</a>
          </td>
          <td valign="top" width="376">Creates a tab button for each tab page.</td>
        </tr>
        <tr>
          <td valign="top" width="32"></td>
          <td valign="top" width="175">
            <a href="https://quickui.org/catalog/TextBox">TextBox</a>
          </td>
          <td valign="top" width="376">Generates a programmatic “change” event.</td>
        </tr>
        <tr>
          <td valign="top" width="32"></td>
          <td valign="top" width="175">
            <a href="https://quickui.org/catalog/TextCondenser">TextCondenser</a>
          </td>
          <td valign="top" width="376">
            Determines whether the text should appear condensed to help it fit.
          </td>
        </tr>
        <tr>
          <td valign="top" width="32"></td>
          <td valign="top" width="175">
            <a href="https://quickui.org/catalog/ValidatingTextBox"
              >ValidatingTextBox</a
            >
          </td>
          <td valign="top" width="376">Validates the contents.</td>
        </tr>
      </tbody>
    </table>

    <p>
      To summarize, these controls are doing the following types of work when their
      content changes:
    </p>

    <ul>
      <li>
        Adjust its dimensions or the dimensions of some subelements (e.g.,
        AutoSizeTextBox, Menu).
      </li>
      <li>
        Layout contents to achieve results not directly supported in HTML and CSS
        (e.g., PackedColumns, PanelWithOverflow).
      </li>
      <li>
        Transform or manipulate the content before rendering it (e.g., Repeater,
        ColorSwatch).
      </li>
      <li>
        Update its own subelements based on the content (e.g., TabSet,
        SlidingPagesWithDots).
      </li>
      <li>
        Validating content (e.g., ValidatingTextBox, and its subclasses like
        <a href="https://quickui.org/catalog/DateTextBox/">DateTextBox</a>).
      </li>
    </ul>

    <p>
      Such controls represent a significant percentage of the QuickUI Catalog —
      approximately 25% — and it’s very likely that similar results would be found
      in other QuickUI-based projects. And in addition to the scenarios listed
      above, other scenarios likely exist in which a control wants to perform work
      when its content changes.
    </p>

    <p>
      Overall, this pass through the QuickUI Catalog suggests that many interesting
      user interface components have a need to perform work when their content is
      set — to do something more than passively hold the content they’re passed. At
      this point, it’s not exactly whether the aforementioned QuickUI controls could
      be successfully ported to Web Components as the spec currently stands, which
      would be unfortunate. (As stated in the previous post, a long-term vision for
      the QuickUI framework is that controls created in QuickUI can be transitioned
      to a Web Components foundation in the future.)
    </p>

    <p>
      It’s possible that a component could use forthcoming support for DOM mutation
      observers could be used to track changes to its own content, but whether this
      would work, or work well, is not yet known. A control could also force its
      host to invoke some method on the control whenever the host changes the
      control’s content, but that would be unfortunate; it would place extra work on
      the developer, and a host’s failure to properly notify the control that its
      contents have changed could lead to subtle bugs.
    </p>
2012-05:
  2012-05-07 QuickUI now lets you create user interface controls in CoffeeScript.html: >
    
    ---

    title: "QuickUI now lets you create user interface controls in CoffeeScript"

    date: 2012-05-07

    slug: quickui-now-supports-coffeescript

    originalUrl: http://blog.quickui.org/2012/05/07/quickui-now-supports-coffeescript/

    ---


    <p>
      QuickUI now supports the use and creation of web user interface controls in
      <a href="http://jashkenas.github.com/coffee-script">CoffeeScript</a>, a
      language that adds many useful features to the JavaScript language. Through
      its compiler, CoffeeScript can be easily used as a replacement for JavaScript
      in many web projects.
    </p>

    <p>
      QuickUI turns out to be a natural fit for CoffeeScript. One of the nice
      features in CoffeeScript is that you can create classes with the language’s
      built-in “class” syntax. You can take advantage of that syntax to create new
      QuickUI control classes, simply by extending the base Control class or any
      other control class:
    </p>

    <pre>

    # A simple button class in CoffeeScript

    class window.HelloButton extends BasicButton
      constructor: -&gt; return Control.coffee()
      inherited:
        content: "Hello, world!"
      genericSupport: true</pre
    >

    <p>
      QuickUI control classes are subclasses of jQuery, so one of the key features
      in QuickUI’s new support for CoffeeScript is actually being able to create
      jQuery subclasses in CoffeeScript. CoffeeScript generates a prototype-based
      class that is similar to the classes produced by jQuery’s
      <a href="http://api.jquery.com/jQuery.sub/">$.sub()</a> feature (a core part
      of jQuery that will be moved to a plugin in jQuery 1.8), but jQuery’s classes
      require a rather Byzantine construction sequence. This is handled through the
      boilerplate constructor shown above. When Control.coffee() is called, it fixes
      up the CoffeeScript class so that it conforms to jQuery’s notion of how its
      class constructors should work.
    </p>

    <p>
      With this in place, it’s now possible to create QuickUI controls in
      CoffeeScript with significantly less source code than the equivalent plain
      JavaScript. This is an overall win for web UI developers. If your team hasn’t
      already taken a look at CoffeeScript, now might be a good time.
    </p>

    <p>
      Creating QuickUI controls in CoffeeScript currently requires a plugin, but the
      plan is to fold CoffeeScript support directly into the quickui.js runtime.
      Read the
      <a href="https://quickui.org/docs/CoffeeScript.html"
        >documentation for QuickUI support of CoffeeScript</a
      >
      for more details.
    </p>
  2012-05-15 Some observations on porting the QuickUI runtime from plain JavaScript to CoffeeScript.html: >
    
    ---

    title: "Some observations on porting the QuickUI runtime from plain JavaScript to CoffeeScript"

    date: 2012-05-15 21:55:29

    slug: porting-quickui-to-coffeescript

    originalUrl: http://blog.quickui.org/2012/05/15/porting-quickui-to-coffeescript/

    ---


    <p>
      This post shares some highlights of the experience porting a non-trivial
      library from plain JavaScript to CoffeeScript in case other parties are
      considering a similar transition.
    </p>

    <p>
      Yesterday's
      <a href="http://blog.quickui.org/2012/05/15/quickui-0-9-a-significant-update/"
        >announcement of QuickUI 0.9</a
      >
      mentioned that the framework source code has now been ported to CoffeeScript.
      The QuickUI framework is intended for plain JavaScript development as well;
      nothing in the change of source language changes that. But experimentation
      with the CoffeeScript language suggested there were enough advantages to the
      language that, going forward, it would be worth porting the runtime from plain
      JavaScript to CoffeeScript.
    </p>

    <p>
      Overall, the port from plain to JavaScript to CoffeeScript went rather
      smoothly, and the bulk of it took about two days. The QuickUI runtime,
      quickui.js, is a reasonably complex JavaScript library, which is to say that
      it's not a toy or trivial sample application. The last plain JavaScript
      version of the QuickUI runtime, quickui-0.8.9.js, was about 7700 lines of
      plain JavaScript (including comments), or about 60K, developed over the course
      of four and a half years.
    </p>

    <h2>Automatic translation with js2Coffee</h2>

    <p>
      The handy <a href="http://js2coffee.org/">js2coffee</a> conversion tool was
      used to kickstart the port. Kudos to Rico Sta. Cruz for this great tool.
    </p>

    <ul>
      <li>
        The automatically translated CoffeeScript immediately passed 97% of the
        QuickUI unit test suite. The remaining 4 broken tests were do to a single
        <a href="https://github.com/rstacruz/js2coffee/issues/138">issue</a> related
        to translation of the "instanceof" keyword, which was easy enough to work
        around.
      </li>
      <li>
        The one thing js2coffee doesn't translate (yet) are comments, so these had
        to be copied over by hand. Tedious, but straightforward.
      </li>
      <li>
        Similarly, the js2coffee output sometimes produced long lines that needed to
        be hand-broken for legibility. Again, a bit tedious but straightforward.
      </li>
      <li>
        Once all unit tests passed, the unit tests themselves were ported to
        CoffeeScript by the same process.
      </li>
    </ul>

    <p>
      After about a morning of work, a CoffeeScript-based quickui.js was functional.
      It passed all unit tests, and could actually be used to drive a non-trivial
      QuickUI-based body of code like the
      <a href="https://quickui.org/catalog">QuickUI Catalog</a>.
    </p>

    <h2>Towards idiomatic CoffeeScript</h2>

    <p>
      After the mechanical port with js2coffee, various CoffeeScript idioms were
      applied incrementally to replace the standard JavaScript idioms with their
      more concise CoffeeScript versions. This took another day and half or so.
    </p>

    <ul>
      <li>
        There was occasion to use pretty much all of CoffeeScript's syntactic sugar.
        References to Foo.prototype.bar() were replaced with the more concise
        Foo::bar(). Closure variables to hold "this" for use in an event handler
        were replaced with CoffeeScript's "=&gt;" syntax. Etc., etc.
      </li>
      <li>
        Because CoffeeScript can wrap a body of code in a single function closure,
        this no longer needed to be done by hand. A wrapping closure like that can
        complicate the management of a pile of plain JavaScript files. The closure
        will typically have to be created through a build process that includes a
        JavaScript fragment (to start the closure) before the real JavaScript files,
        and another fragment (to end the closure) afterwards. (The jQuery
        <a href="https://github.com/jquery/jquery/blob/master/Makefile">Makefile</a>
        does this, for example.) CoffeeScript's built-in support for a closure that
        spans multiple files finally made it easy enough to break up the quickui.js
        runtime from a single monolithic JavaScript file into a much saner and more
        manageable collection of CoffeeScript files. That is, while the same degree
        of manageability could have been achieved in plain JavaScript, CoffeeScript
        made it simple enough that it actually got done.
      </li>
      <li>
        The QuickUI runtime itself doesn't create many classes, but in some cases
        (e.g., the unit test suite), classes could be created via CoffeeScript's
        concise class syntax. This took advantages of QuickUI's new support for <a
          href="https://quickui.org/docs/CoffeeScript.html"
          >creating web user interface controls using CoffeeScript class syntax</a
        >.
      </li>
      <li>
        JavaScript "for" loops were replaced with CoffeeScript list comprehensions.
      </li>
    </ul>

    <h2>Idiomatic CoffeeScript iteration over jQuery objects</h2>

    <p>
      Speaking of "for" loops, it turns out that a good deal of the QuickUI runtime
      deals with looping over jQuery objects. QuickUI controls are a subclass of
      jQuery object, and when looping over them in plain JavaScript, it's often
      convenient to use jQuery's $.each() function. For example, this function
      invokes foo(), a jQuery method or plugin, on each element in a jQuery object:
    </p>

    <pre>

    var $elements = $(".someClass");

    $elements.each( function( index, element ) {
        $( element ).foo();
    });</pre

    >

    <p>
      Note that $.each() gives the callback the plain DOM element, so you have to
      wrap that element with $(element) to get a jQuery object you can then
      manipulate. To simplify that, QuickUI's runtime has long had a helper function
      called eachControl() that gives the callback the element as a wrapped jQuery
      object. (In QuickUI's case, it also ensures the control's particular subclass
      of jQuery is used, so that you can directly manipulate the control with that
      control's own specific API.) E.g.:
    </p>

    <pre>

    var $buttons = $(".BasicButton");

    $buttons.eachControl( function( index, $button ) {
        $button.foo();
    });</pre

    >

    <p>
      To take best advantage of CoffeeScript's supports for looping constructs, a
      simple jQuery plugin was created to create an array that can directly be used
      by CoffeeScript's "for" loop and list comprehensions. This plugin, called
      Control.segments(), converts a jQuery object that holds a number of elements
      into an array of jQuery objects that each hold a single (wrapped) element. The
      definition of segments() in CoffeeScript is trivial:
    </p>

    <pre>

    Control::segments = -&gt;
      ( @constructor element for element in @ )</pre
    >


    <p>
      QuickUI defines segments() on the Control class so as not to pollute the
      general jQuery plugin namespace, but the above definition could just as easily
      be done as jQuery::segments to create a plugin that worked with any jQuery
      object. In any event, the result of applying segments() to a jQuery object is
      an array that can be directly iterated over, while at the same time preserving
      type information.
    </p>

    <pre>$button.foo() for $button in Control(".BasicButton").segments()</pre>

    <p>
      Here, the looping variable $button ends up holding an instanceof BasicButton
      (which is also an instanceof jQuery), so $button.foo() invokes
      BasicButton.prototype.foo().
    </p>

    <p>
      This "for" loop feels more direct and idiomatic in CoffeeScript than the
      standard $.each() approach. (In fact, it'd be nice if $.each() were extended
      so that, if invoked without arguments, it returned an array just like
      segments() does here.) This segments() call can also be used in CoffeeScript
      list comprehensions, thereby replacing many situations in which $.map() is
      currently used. A
      <a href="http://jsperf.com/each-vs-conversion-to-array-and-then-loop"
        >jsperf experiment</a
      >
      suggests the segments() approach performs roughly as well as the standard
      $.each(). The generated JavaScript for segments() does build a temporary array
      of results, but it avoids the need for the callback function and the
      accompanying closure.
    </p>

    <h2>Impressions</h2>

    <p>
      The new, CoffeeScript-based QuickUI source code gets compiled to a plain
      JavaScript file that's essentially the same size as the handwritten JavaScript
      (61K vs 60K). The new runtime appears to perform and function just as well as
      the earlier plain JavaScript one, so QuickUI developers shouldn't notice any
      difference. At the same time, the new CoffeeScript source code
      <em>feels</em> a lot tighter and easier to read and maintain.
    </p>

    <p>
      This ability to write tighter code has already invited the successful
      implementation of a number of long-planned improvements to the runtime. It's
      hard to say how many of those improvements were easier to tackle because of
      advantages in the CoffeeScript language itself, and how many were tackled just
      because CoffeeScript is a shiny, new tool. But as a general rule, it seems
      that CoffeeScript permits a programmer to more directly express their
      intention than one can do in JavaScript — and any language that can do that is
      a step forward.
    </p>

    <p>
      Best of all, using any language like CoffeeScript that compiles to plain
      JavaScript enables a developer to finally break a hard dependence between
      language choice and the user's browser. Now that QuickUI itself is written in
      CoffeeScript, it can take immediate advantage of improvements in CoffeeScript
      the day they appear, instead of waiting years for incremental JavaScript
      improvements to make their way through committee, into browsers, and into
      users' hands.
    </p>
  2012-05-22 Update.html: >
    ---

    title: "Update"

    date: 2012-05-22

    slug: update

    originalUrl: https://miksovsky.blogs.com/flowstate/2012/05/update.html

    ---


    <p>
      For the past two months or so, I’ve left off from my weekly blogging habit
      here to focus on some behind-the-scenes aspect of QuickUI. I post about those
      updates on the separate QuickUI blog. That blog is more technically-oriented,
      but I though it was worth sharing a roundup of those posts here:
    </p>

    <ul>
      <li>
        I’ve made a number of improvements to the QuickUI runtime, including a
        <a
          href="http://blog.quickui.org/2012/05/15/quickui-0-9-a-significant-update/"
          >significant version update</a
        >. One interesting new feature is support for creating UI in CoffeeScript
        (in addition to plain JavaScript).
      </li>
      <li>
        A developer asked for sample application code showing how to use QuickUI as
        the “View” in an application with an MVC (Model-View-Controller)
        architecture. That’s a great idea, and to date I haven’t had such a sample I
        could offer. Cozi’s
        <a href="http://www.cozi.com/Meal-Planner.htm">Meal Planner</a> is actually
        a Model-View-Presenter that uses QuickUI for the View, but the source for
        that application is proprietary. It’ll be useful to have an interesting
        MVC/MVP sample application that shows off how to use QuickUI; I’ll post back
        here when I have something worth looking at. Thanks for the suggestion,
        Chris!
      </li>
      <li>
        I continue to be interested in making sure the emerging Web Components spec
        is well-suited to the scenarios routinely faced by UI designers and
        developers, and have articulated a vision for
        <a
          href="http://blog.quickui.org/2012/04/16/a-vision-for-coevolving-quickui-and-the-emerging-web-components-standard/"
          >how QuickUI and Web Components could co-evolve</a
        >. This has included some time
        <a
          href="http://blog.quickui.org/2012/04/27/how-quickui-controls-use-code-to-specialize-the-handling-of-their-content-in-ways-that-might-not-be-supported-by-web-components/"
          >analyzing the QuickUI Catalog controls</a
        >
        in light of the Web Components spec. On that note, I’m looking forward to a
        meeting with the spec’s author, Dimitri Glazkov, later this week.
      </li>
      <li>
        A designer friend suggested creating a new QuickUI screencast. The few
        QuickUI screencasts I’ve done in the past are now out-of-date, and my ideas
        about how to explain the value of component-based UI development have
        evolved, so it’s a good time for a new one.
      </li>
      <li>
        Along those lines, I’ve invested some time improving the framework
        documentation, including an
        <a href="https://quickui.org/docs/rendering.html"
          >overview of how QuickUI controls render themselves</a
        >.
      </li>
      <li>
        I also continue to improve the
        <a href="https://quickui.org/catalog">QuickUI Catalog</a> controls, although
        at a slower pace. The above work on the fundamentals and explaining them is
        taking precedence for the time being.
      </li>
    </ul>

    <p>
      Thanks to those who have shared suggestions with me — they’re very helpful. If
      you take a look at any of the above and have feedback, please let me know.
    </p>

    <ul></ul>
2012-06:
  "2012-06-07 How jQuery instantiates objects as jQueryfninit, and what that means if you want to subclass jQuery.html": >
    
    ---

    title: "How jQuery instantiates objects as jQuery.fn.init, and what that means if you want to subclass jQuery"

    date: 2012-06-07 18:51:51

    slug: jquery-fn-init

    originalUrl: http://blog.quickui.org/2012/06/07/jquery-fn-init/

    ---


    <p>
      In order for the
      <a href="http://blog.quickui.org/2012/06/07/quickui-0-9-1-released/"
        >recent release of QuickUI 0.9.1</a
      >
      to support concise creation of control classes in CoffeeScript, it was
      necessary to go deep into the bowels of jQuery’s class constructor to
      determine how it worked. Those findings are documented here in case others
      have a similar need to subclass jQuery, or would like to address the same need
      that drove jQuery to its current implementation.
    </p>

    <p>
      The jQuery class constructor can be found in
      <a href="https://github.com/jquery/jquery/blob/master/src/core.js">core.js</a
      >:
    </p>

    <pre>

    jQuery = function( selector, context ) {
        // The jQuery object is actually just the init constructor 'enhanced'
        return new jQuery.fn.init( selector, context, rootjQuery );
    }</pre

    >

    <p>
      But the comment doesn't do much to explain why init exists, or how it works.
    </p>

    <p>
      All jQuery developers are familiar with the form $(“div”), which is a
      shorthand for the longer jQuery(“div”). This, we are told, returns a new
      jQuery object. Actually, from the above constructor, we can see that what it
      <em>really</em> returns is an instance of the jQuery.fn.init class. (From here
      on out, we’ll just refer to that class as “init”.) The init constructor is
      defined like so:
    </p>

    <pre>

    jQuery.fn = jQuery.prototype = {
        init: function( selector, context, rootjQuery ) {
            ...
        }
    }</pre

    >

    <p>
      Here, first note that jQuery.fn is just a synonym for jQuery.prototype. Given
      that, we see that the init class constructor hangs off the jQuery prototype.
      Stashing the init class on the jQuery class’ prototype allows the jQuery
      library to avoid polluting the JavaScript global namespace with an extra
      class. (Of course, init could easily have been defined inside the outer
      jquery.js function closure, which would avoid namespace pollution and prevent
      access to it from outside. The init class isn't really referred to elsewhere
      in the jQuery source, so it's not immediately clear why that wasn't done.
      Perhaps the above approach makes for easier debugging.)
    </p>

    <p>
      Further on, we see this init class defined as a subclass of the jQuery class:
    </p>

    <pre>

    // Give the init function the jQuery prototype for later instantiation

    jQuery.fn.init.prototype = jQuery.fn;</pre

    >

    <p>
      Since jQuery.fn is just an abbreviation for jQuery.prototype, the above line
      is really:
    </p>

    <pre>jQuery.prototype.init.prototype = jQuery.prototype;</pre>

    <p>
      This ensures that any instance of init will also be a functional instance of
      jQuery. This can be confirmed in the debugger:
    </p>

    <pre>

    &gt; $e = $("div")

    &gt; $e instanceof jQuery

    true

    &gt; $e instanceof jQuery.fn.init

    true</pre

    >

    <p>
      So all those times when you create an instance of jQuery you are <em
        >actually </em
      >working with an instance of a jQuery <em>subclass</em>.
    </p>

    <p>
      Okay, but why bother? One reason is that jQuery wants to support a static
      constructor form: one you can invoke with needing to specify “new”. Regardless
      of whether you invoke the jQuery() constructor with “new” or not, it’s always
      going to return an instance of the init class. And, because init is a subclass
      of jQuery, you’ll end up with an instance of jQuery, which is what you wanted.
    </p>

    <pre>

    // The following lines are all equal.

    var $e = new jQuery("div");

    var $e = jQuery("div");

    var $e = new $("div");

    var $e = $("div");</pre

    >

    <p>
      So at least one reason init exists is that it serves as a helper class to let
      you write shorter jQuery code. The thing is, supporting instantiation without
      "new" doesn't require defining a separate helper class.
    </p>

    <p>
      The jQuery constructor above is relying upon an oddity in the JavaScript
      language: a constructor can return an object that’s an instance of a class
      other than the class defined by the constructor. The jQuery class could more
      easily use the simpler <a
        href="http://jimmycuadra.com/posts/javascript-factory-constructors"
        >factory constructor</a
      >
      pattern to check to see whether it's been invoked without "new" (in which case
      "this" will be the window) and, if so, just return a new instance of itself.
      That is, in fact, how jQuery worked back in
      <a href="http://code.jquery.com/jquery-1.1.js">jQuery 1.1</a>:
    </p>

    <pre>

    var jQuery = function(a,c) {
        // If the context is global, return a new object
        if ( window == this )
            return new jQuery(a,c);
        ...
    };</pre

    >

    <p>
      By jQuery 1.2, however, the jQuery constructor was using the technique shown
      above. It's hard to tell from the code exactly why the init helper class was
      introduced. One possibility is that init has that extra rootjQuery parameter
      which is for internal use only. Burying that parameter in a helper class
      avoids having to expose the parameter in the jQuery API, where it might
      confuse jQuery developers or, worse, encourage them to create code that
      depends upon that parameter.
    </p>

    <strong>Subclassing jQuery</strong>

    <p>
      One cost of jQuery’s class scheme is that it makes it much harder for
      <em>you</em> to subclass jQuery. One reason you might want to do this is to
      provide scoping for your own jQuery plugins. If you want to add a lot of
      plugins to jQuery’s prototype (which, as indicated above, is what you’re doing
      when you add something to jQuery.fn), you could potentially pollute the jQuery
      namespace and run into conflicts with other plugins. By subclassing jQuery,
      and working strictly with instances of your subclass, you hide all your
      plugins from anyone who’s directly instantiating the plain jQuery class.
    </p>

    <p>
      Unfortunately, because of this init helper class, the normal JavaScript
      prototype-based subclassing scheme won’t work with jQuery. To make your
      subclass jQuery-like, you end up needing to replicate jQuery’s complex helper
      class arrangement: create a subclass of jQuery <em>and</em> a companion init
      helper class, derive your helper class from your actual jQuery subclass, and
      ensure your subclass’s constructor actually returns an instance of your init
      class.
    </p>

    <p>
      The mind-breaking pain of all that is presumably what led to the creation of a
      jQuery function called
      <a href="http://api.jquery.com/jQuery.sub/">$.sub()</a>. That function does
      exactly what’s described above: it defines a new subclass of jQuery and a
      companion init helper class.
    </p>

    <p>
      The $.sub() plugin doesn’t seem to be used much, perhaps because its benefits
      and reason for existence aren’t well-documented. The announced plan is that
      $.sub() will be removed from the core jQuery library in version 1.8, and
      transition to become an official plugin. As a result, $.sub() is deprecated as
      a <em>native </em>jQuery feature, but $.sub() and its technique will continue
      to be useful, so it’s still worth understanding and considering it.
    </p>

    <p>
      QuickUI relies upon the $.sub() technique to make its base Control a subclass
      of jQuery. This is what lets you use any jQuery feature with QuickUI controls
      directly: you can bind events to them with $.on(), you can style them with
      $.css(), and so on. That’s because your control class derives from Control,
      and so ultimately derives from jQuery.
    </p>

    <p>
      You can
      <a href="https://quickui.org/tutorial/creating-control-class.html"
        >create a new QuickUI control class in JavaScript</a
      >
      by invoking Control.sub(). And, with QuickUI 0.9.1, you can now create
      subclasses of Control (and, therefore, jQuery )
      <a href="https://quickui.org/docs/CoffeeScript.html"
        >using CoffeeScript’s built-in class syntax</a
      >, which is concise and highly legible. In either language, you can easily
      create your own reusable web user interface components that have direct access
      to all the power of jQuery.
    </p>
  2012-06-07 QuickkUI 091 released.html: >
    ---

    title: "QuickkUI 0.9.1 released"

    date: 2012-06-07 17:28:08

    slug: quickui-0-9-1-released

    originalUrl: http://blog.quickui.org/2012/06/07/quickui-0-9-1-released/

    ---


    <p>QuickUI 0.9.1 contains two changes:</p>

    <p>
      First, it’s now even easier to create web user interface components in
      CoffeeScript. When CoffeeScript support in QuickUI was
      <a
        href="http://blog.quickui.org/2012/05/07/quickui-now-supports-coffeescript/"
        >first announced</a
      >
      a month ago, you had to include a boilerplate constructor. This was required
      to work around a limitation in CoffeeScript, in which CoffeeScript’s default
      constructor for a class didn’t return a value. (See
      <a href="https://github.com/jashkenas/coffee-script/issues/1966"
        >a good summary of the issue here</a
      >.) That issue has now been
      <a href="https://github.com/jashkenas/coffee-script/pull/1970">fixed</a> in
      CoffeeScript 1.3.3. With a considerable degree of rework in the base Control
      class, you can now create a new user interface control in a single line of
      CoffeeScript:
    </p>

    <pre>control window.MyButton extends BasicButton</pre>

    <p>
      The QuickUI
      <a href="https://quickui.org/docs/CoffeeScript.html"
        >documentation for creating controls in CoffeeScript</a
      >
      has been updated to reflect this.
    </p>

    <p>
      Second, QuickUI 0.9.1 has a simplified model for generic styling. The QuickUI
      Catalog controls define generic styles that allow them to function without you
      needing to provide styling for them. You can easily turn off a base class’
      generic style by setting the subclass’
      <a href="https://quickui.org/docs/control-prototype-methods.html#generic"
        >generic()</a
      >
      property to false.
    </p>
  2012-06-18 Sample Contacts applicatiousing Backbone and QuickUI.html: >
    
    ---

    title: "Sample Contacts applicatiousing Backbone and QuickUI"

    date: 2012-06-18

    slug: sample-contacts-application

    originalUrl: http://blog.quickui.org/2012/06/18/sample-contacts-application/

    ---


    <p>
      Back in April, someone evaluating QuickUI made the completely reasonable
      request to see a complete sample application created in QuickUI. More
      specifically, they were interested in seeing a demonstration of how to use
      QuickUI as the View in an MVC (Model-View-Controller) application, ideally
      using the popular
      <a href="http://backbonejs.org/">Backbone.js</a> library. QuickUI is well
      suited to fill that role, and a sample application has now been created to
      show off how to do exactly that.
    </p>

    <img src="https://quickui.org/docs/images/Contact%20Card.png" alt="" />

    <p>
      The result is a
      <a href="https://quickui.org/docs/contacts.html"
        >sample Contacts application</a
      >
      built in QuickUI. The sample takes advantage of QuickUI’s support for
      CoffeeScript, which turns out to be an elegant language to express both
      Backbone and QuickUI classes. Read the sample’s documentation for more details
      of its construction.
    </p>
  2012-06-19 Evidence suggesting more than half of web app UI code is reinventing results already achieved many times before.html: >
    
    ---

    title: "Evidence suggesting more than half of web app UI code is reinventing results already achieved many times before"

    date: 2012-06-19

    slug: reinventing-the-ui-wheel

    originalUrl: https://miksovsky.blogs.com/flowstate/2012/06/reinventing-the-ui-wheel.html

    ---


    <p>
      Web app designers and developers spend a staggering amount of time recreating
      common effects and behavior that have already been done many times before on
      other sites, or within their own organization, or in their own code on
      previous projects, or — worse yet — in their <em>own</em> code on the
      <em>same </em>project. You may spend days and days carefully reproducing
      common UI behavior that can readily be found in other apps: menus, dialogs,
      in-place editing, progress feedback, and on and on. The web wasn’t built to
      solve those problems, so <em>you </em>have to solve them — over and over
      again.
    </p>

    <p>
      This situation is already at least partially avoidable with current web
      frameworks that permit the creation of reusable UI components. As a case in
      point, I recently created a
      <a href="https://quickui.org/docs/contacts.html"
        >sample Contacts application</a
      >
      in the <a href="https://quickui.org">QuickUI</a> framework. The app sports a
      reasonably interesting user interface, but the bulk of its behavior is driven
      by shared components from the
      <a href="https://quickui.org/catalog/">QuickUI Catalog</a> that provide
      layout, visual effects, editing behavior, list management, and keyboard
      navigation.
    </p>

    <p>
      Having built a handful of web apps in QuickUI now, there’s a pretty clear
      pattern to the <em>balance</em> of UI components used in these apps: about
      half of the UI code is comprised of components directly from the Catalog or
      from previous projects. And, in every case, the project itself has generated
      new, sharable UI components.
    </p>

    <p>
      Look at your app’s UI elements — at every scale, from page, to region, to
      widget, to tiny little visual element — and ask yourself: has anyone done this
      before? Will someone do it again? If this were a component, could I be sharing
      it with someone down the hall, or at another company? In asking these
      questions, you’ll generally need to scrape away purely stylistic attributes
      such as color and typography, and focus more closely on behavior.
    </p>

    <p>
      As you consider these question of UI reusability, it becomes apparent that the
      <em>audience</em> for a reusable UI element varies in size, depending on the
      degree to which the UI is solving a problem that comes up in other contexts.
      Some UI is completely specific to the context of a single feature, while some
      UI patterns are extremely general and come up everywhere.
    </p>

    <p>
      It’s possible to categorize your UI elements according to this aspect of
      context-specificity. Having created a half dozen or so web apps of reasonable
      complexity in the component-orient QuickUI framework, the proportional
      breakdown across these categories has been very consistent. This leads me to
      hypothesize that the general proportions of these categories are roughly
      consistent across most web apps.
    </p>

    <p>&#0160;</p>

    <h3>Categories of reusable user interface components across apps</h3>

    <p>
      Such a breakdown might look like this, ordered from most context-specific to
      most general:
    </p>

    <p>
      <img
        alt="UI Component Layers (Reduced)"
        src="/images/flowstate/6a00d83451fb6769e2016306b4f1d9970d-pi.jpeg"
      />
    </p>

    <ul>
      <li>
        <strong>30% Feature-specific UI. </strong>These are elements you create to
        define the UI for a specific feature: an Update Account Settings page in a
        web app, or a custom popup that applies to just one list. You take more
        basic controls (usually drawn from the categories below), compose them
        together in a unique combination, and wire them up with context-specific
        interactivity to achieve a specific task. By definition, this category of UI
        code is <em>not </em>reusable. If you find an opportunity for reuse here,
        you can factor that code out, but then you should group it one of the other
        categories.
      </li>
      <li>
        <strong>10% App-specific UI.</strong> Any app with more than one feature
        will have UI elements which are consistent across those features, and those
        consistencies can be implemented as reusable components. UI elements you
        might use across multiple features within a given app might be: page
        templates, templates or controls for table or list elements, a custom type
        of touch menu used in multiple situations, and so on. You can think of this
        set of UI as your app’s design language: a more focused expression of your
        organization’s overall design language (below).If you work on a good team,
        it should be straightforward to find and take advantage of such
        opportunities.
      </li>
      <li>
        <strong>10% Company-specific UI.</strong> Everything your company or
        organization does has <em>some </em>(maybe not enough?) consistency in its
        user interfaces. Perhaps you all follow a convention for app home pages, or
        a standard way to handle user commenting, or maybe your company prefers
        using multi-step wizards for complex tasks. These are the UI elements that
        distinguish your company’s output from that of other companies working in
        your industry. That is, this category defines your company’s design
        language: the UI solutions that make your apps recognizable to your users.
        (If your company makes only one app, then you can lump this category
        together with the App-specific UI category above.) While in company leaders
        may assume that everything in this category should be freely leveraged
        across the company as a strategic advantage, in practice this category often
        presents the most vexing practical challenges to reuse: office politics,
        conflicting project schedules, and a lack of way to secure or account for
        funding on shared work.
      </li>
      <li>
        <strong>20% Domain-specific UI.</strong> Everyone working in your industry
        works in the same problem domain. If you’re struggling to figure out the
        best way to visually represent a complex data set, or to get a credit card
        number from a customer, then others in your industry are too. You may be
        lucky enough to work in a cooperative domain, but chances are, those other
        people will be your competitors, and so for business reasons your company
        may not be inclined to share implementations, and may in fact fight
        tooth-and-nail to avoid their replication in competitive products. If you’re
        in that boat, then this category of UI code can effectively be combined with
        the Organization-specific UI category above. That is, your company will end
        up with private implementations of solutions that could be shared in theory,
        but in practice is company-specific. But occasionally even competitors may
        recognize the value of sharing work. For example, a shared solution might
        benefit your industry’s <em>customers</em>, and the result payoff for all
        your companies may be great enough to overcome corporate resistance to
        sharing.
      </li>
      <li>
        <strong>30% General purpose UI.</strong> These are the common UI patterns
        that <em>everyone </em>spends time coding up today: context menus, paginated
        search results, docking toolbars, and so on. Very few companies
        <em>want</em> to spend time on this stuff, because it’s just too far removed
        from any company’s core competencies. Everyone wants to focus on the
        categories above; no company believes they are going to beat their
        competitors with their excellent implementation of tab buttons. So most
        companies rush through the creation of these components, getting many of the
        details wrong. This UI category contains everything that
        <em>should </em>have been baked into the web, if only the web had been
        designed for creating real applications instead of sharing scientific
        research documents. As browsers evolve, the set of shared solutions here is
        expanding, but only at a glacial pace. In the meantime, we all have this
        chunk of UI problems to solve, and there is an enormous opportunity to share
        UI code here. At the same time, the broad set of possible consumers of any
        given UI component implies a significant challenge in establishing
        consensus. The UI code in this category should be written <em>once</em> (or
        maybe, because we could never get everyone to agree on anything, written a
        tiny handful of times) and never written from scratch again.
      </li>
    </ul>

    <p>&#0160;</p>

    <p>
      The percentages I’ve given above are rough, but drawn from examining the UI
      code in apps I’ve written over the last few years. Those apps were already
      carefully componentized, and focused on code reuse, so I expect a more
      thorough analysis of more web apps would confirm that the numbers above are
      conservative. That is,&#0160;the actual degree of unnecessary reimplementation
      in a typical web application is probably far higher.&#0160;Without a component
      foundation, the most expedient way to replicate a given behavior is often to
      cut-and-paste it from somewhere else in the app’s source, then hack on the
      result to fit the new context. The app may not only be reinventing the UI
      wheel, but doing so multiple times in the same codebase.
    </p>

    <p>
      If the above breakdown is even roughly correct, then consider a new web
      company entering an existing market who writes their app UI entirely from
      scratch. Even if it were extremely well-factored, 50% of all the UI code they
      write would be reinventing the wheel, solving domain-specific or general
      purpose UI problems which have already been solved before. While that sounds
      extreme, it’s probably not that far off the mark for most companies. While
      most apps consume at least some third-party UI elements (to implement a
      Facebook “Like” button, say), in many cases the typical company is just
      nibbling at the edges of the problem. And, if we assume that office politics
      and other factors prevent them from sharing code internally, the percentage of
      unnecessary re-invention may be much higher.
    </p>

    <p>
      No matter how you slice it, chances are that&#0160;<em
        >most app teams are writing way too much UI code</em
      >.&#0160;Because the web lacks a real component model, most companies write
      reams and reams of non-modular, non-reusable UI code. If they were to build
      their apps on a UI framework that let them use and extend components, they
      could probably avoid writing much of the UI code they write today. To put this
      in business terms: if they were to componentize their UI effectively, they
      could get the same amount done in half the time or with half the resources.
      Obviously adopting a component strategy and reusing components have costs of
      their own, but I expect those are dwarfed by the mind-numbing scale of solving
      the same problems again and again.
    </p>

    <p>
      There already are component frameworks for developing web app user interfaces.
      I’m obviously heavily invested in QuickUI, but you can find others out there
      as well. Given the huge savings they can make possible, they’re worth a look.
    </p>
2012-07:
  "2012-07-02 The Web Components spec should add support for multiple, named, DOM-valued properties.html": >
    
    ---

    title: "The Web Components spec should add support for multiple, named, DOM-valued properties"

    date: 2012-07-02

    slug: web-component-properties

    originalUrl: http://blog.quickui.org/2012/07/02/web-component-properties/

    ---


    <p>
      At last week's Google I/O 2012 conference, Chrome engineers Alex Komoroske and
      Dimitri Glazkov gave a talk called, <a
        href="https://www.youtube.com/watch?v=2txPYQOWBtg"
        >The Web Platform’s Cutting Edge</a
      >, a good overview of Web Components and <a
        href="http://www.w3.org/TR/components-intro/#custom-element-section"
        >custom elements</a
      > in particular. The demo code shown in that presentation does point to an
      issue with the current Web Components spec that could seriously constrain the
      ease with which components can be written and shared. I’ll lay out the case
      here in hopes this problem can be fixed at an early stage.
    </p>

    <h2>But first: A word of appreciation</h2>

    <p>
      Authoring a spec for a new standard like Web Components is generally a
      thankless task, as is the tireless work of promulgating the standard through
      presentations like the one at Google I/O. So, before saying anything else: a
      big
      <strong>Thank You</strong> to Alex and Dimitri for their work on HTML
      Templates, Custom Elements, and Shadow DOM. Everything which follows is meant
      to support your work, not put it down.
    </p>

    <h2>Background of the problem</h2>

    <p>
      As I’ve blogged about before, I’m a passionate fan of web UI components and
      <a
        href="http://miksovsky.blogs.com/flowstate/2012/03/snapping-together-a-skyscraper.html"
        >believe they will transform UI development</a
      >. The ability to define new elements for HTML is something designers and
      developers have long wanted but, until now, could only dream about. In the
      demo, Alex and Dimitri use Chrome’s early implementation of the proposed spec
      to create custom elements. They elegantly combine these elements to produce a
      custom UI component for a user poll:
    </p>

    <img
      src="/images/quickui/web-component-poll_thumb.png"
      alt="Web Component Poll"
    />

    <p>
      This poll user interface is a large component comprised of sub-components for
      accordions (or, later in the demo, tabs) and the big iconic choice buttons in
      the poll for “Semantics”, “Offline &amp; Storage”, etc. All these components
      are defined with declarative markup.
    </p>

    <p>
      I enthusiastically agree with the presenters that declarative HTML, including
      the ability to define custom elements, results in UI code that can be easier
      to read than a comparable imperative solution in JavaScript. And to its
      credit, most of the demo code shown in the presentation is self-explanatory.
    </p>

    <p>
      However, one aspect of the code really jumped out at me as a serious
      limitation of the current spec: a component host can only pass a single DOM
      content subtree to the component. As I’ll try to show, I believe that could
      seriously limit the degree to which a component can expose a meaningful API.
    </p>

    <p>
      Consider the markup behind those big “choice” buttons. Each choice component
      includes an icon, a short text summary used as a label, and longer descriptive
      text that appears in a tooltip on hover. You can think of that per-choice data
      as, in effect, three public properties of the choice component:
    </p>

    <pre>

    &lt;element name=”x-choice” extends=”div” constructor=”ChoiceControl”&gt;

        &lt;template&gt;

            &lt;div id=”choice”&gt;

                &lt;div id=”icon” class=”mask”&gt;&lt;/div&gt;

                &lt;content select=”h3:first-of-type”&gt;&lt;/content&gt;

                &lt;aside&gt;

                    &lt;content select=”*”&gt;&lt;/content&gt;

                &lt;/aside&gt;

            &lt;/div&gt;

        &lt;/template&gt;

        …

    &lt;/element&gt;</pre

    >

    <p>
      The code above makes use of the proposed &lt;content&gt; element to select
      specific portions of the DOM tree (using CSS selectors) and incorporate them
      into the component’s shadow DOM. With that in place, the code for the overall
      poll component (i.e., the choice host) can instantiate choice buttons with the
      following markup:
    </p>

    <pre>

    &lt;x-choice value=”semantics”&gt;
        &lt;h3&gt;Semantics&lt;/h3&gt;
        &lt;p&gt;Giving meaning to structure, semantics are front and…&lt;/p&gt;
    &lt;/x-choice&gt;

    &lt;x-choice value=”offline-storage”&gt;
        &lt;h3&gt;Offline &amp; Storage&lt;/h3&gt;
        &lt;p&gt;Web apps can start faster and work even if there is no…&lt;/p&gt;
    &lt;/x-choice&gt;

    …</pre

    >

    <p>
      So the first code fragment effectively defines a choice component with three
      public properties (although these aren't actually class properties). The
      second code fragment shows the creation of two instances of that choice
      component, filling in two of the three choice properties. It’s not shown where
      the icon property is filled in, but it’s presumably done through styling.
    </p>

    <p>All looks fine so far, but there are some serious issues lurking here.</p>

    <h2>Problems</h2>

    <p>
      The root issue here is that, as currently speced,
      <em
        >Web Components can only accept a single DOM-valued content property via
        markup</em
      >. This leads to a profusion of problems:
    </p>

    <ol>
      <li>
        <h2>
          Asking developers to tease apart component content will mean work for
          devs, and produce inconsistent results.
        </h2>
        Why, exactly, is the choice component using the &lt;h3&gt; tag to specify
        the text label for the button? Because this component has two textual
        properties, and the current Web Components spec only lets the developer pass
        <em>one</em> DOM content subtree to a component. So the component's author
        developer has to somehow let the component's users pack more than one
        property into the content, and then the dev has to crack that content to
        extract those properties. The question of <em>how</em> to crack that single
        content subtree into multiple properties is left entirely up to the
        developer. The tool given to the developer for this purpose is CSS
        selectors, which at first glance seems powerful. Unfortunately, it’s also a
        recipe for inconsistency. Every developer will have the freedom—and chore—to
        approach this problem their own way, guaranteeing the emergence of a handful
        of different strategies, plus a number of truly bizarre solutions. It’s as
        if you were programming in a system where functions could only accept a
        single array. As it turns out, we already have a good, common example of a
        such a system: command line applications. Every command-line application has
        some main() function that’s handed a single array of command line options,
        and the application has to decide what to do with them. Although conventions
        eventually arose with respect to the order and meaning of arguments, there’s
        still a wide variety of approaches. Some apps rely on argument position,
        some rely on single-letter flags (“-a”), some rely on full-word named
        parameters (“--verbose"), some have idiosyncratic microgrammars (e.g., chmod
        permissions), and many applications support a rich combination of all these
        approaches. Parsing arguments is tedious, boring work. In the early days, a
        developer throwing an app together might do the absolute minimum work
        necessary. The result was often inconsistent or incomplete argument support.
        The dev might eventually be forced to hack on their app until they finally
        had a roughly functional command line parser. These days, developers can
        rely on language features, or libraries like Python’s argparse, to “crack”
        the argument array into a meaningful structure which can be more easily
        inspected. In particular, it’s invaluable to a developer to be able to
        directly inspect specific arguments by <em>name</em>. The use of CSS
        selectors does remove some of this tedium, but it still leaves devs without
        a consistent way to refer to component properties by name, thereby leaving
        the door wide open for inconsistency. A dev might decide to use DOM
        structure, HTML tags, element classes, or a combination of all of these to
        demarcate properties. This will make it much harder for devs to share
        components, to swap out one component for another, and so on. It would be
        better if we could learn from the command-line argument example now and head
        off this inconsistency.
      </li>
      <li>
        <h2>
          HTML semantics are nearly meaningless when used to identify parameters.
        </h2>
        In the Google I/O demo, the developer of the choice component elected to use
        HTML tags within the single content subtree to identify properties. In this
        case, they decided that the first &lt;h3&gt; element in the content would
        identify the summary text, and everything else would be used as the longer
        text description. But why use &lt;h3&gt; for this purpose? The W3C <a
          href="http://www.w3.org/TR/1999/REC-html401-19991224/struct/global.html#h-7.5.5"
          >spec</a
        >
        says a heading tag like &lt;h3&gt; should be used to, “briefly describe the
        topic of the section it introduces”. These choices aren't introducing
        sections, so that can't be the the case here. Neither is this &lt;h3&gt;
        being used to reflect the rank of an element in a hierarchical document
        structure. In all likelihood, the &lt;h3&gt; is used here, as it often is in
        practice, to mean something like, “somewhat prominent, but not
        <em>too</em> prominent”. Visually this usually translates to, “bold text, a
        little bigger than the body text”. At least, that seems to be how &lt;h3&gt;
        is being used in this component. There's nothing really wrong with that, but
        it's clearly arbitrary. Other developers might easily make a different
        decision. Later, in the very same demo, the code for the poll component
        accepts the text label for a different Voting button through the use of a
        &lt;label&gt; element. So in one place in this app, a button’s label is
        specified with an &lt;h3&gt;, but elsewhere <em>in the same app</em>, a
        button’s label is specified with a &lt;label&gt;. I don’t think this
        reflects any particular negligence on the part of the demo’s developers. I
        think it’s a latent issue in any scheme that relies on HTML elements for
        something than the original purpose. Perhaps the code' s developers did have
        some reason in mind for using &lt;label&gt; in one place and &lt;h3&gt; in
        another, but the point is that the reason is not obvious to another party
        looking at the code. The same arbitrary nature of tag choice here applies to
        use of the &lt;aside&gt; tag to identify the choice description. Try this:
        show the poll screen shot above to 3 web developers, and ask them which HTML
        tag they would use to specify the tooltip that should appear when the user
        mouses over a choice button. I’d be surprised if even <em>one</em> of them
        picked the &lt;aside&gt; tag. Is the tooltip content here really, as the
        <a href="http://www.w3.org/wiki/HTML/Elements/aside">W3C description</a>
        says for the &lt;aside&gt; element, “tangentially related to the content
        around the aside element, and which could be considered separate from that
        content”? Well, not really. But, maybe; that’s a debatable point. The fact
        it’s debatable is what’s at issue here. In contrast, here’s a tautological
        statement which <em>wouldn’t</em> generate debate: the choice description in
        the tooltip is the choice description in the tooltip. The
        <em>local</em> semantics here aren’t in question. So it’s a shame the
        property can’t be described in contextual terms like “description”, or
        “tooltip”. The fact that the component is using HTML elements to identify
        arguments appears sensible, but in practice will be nearly meaningless.
        Every single time a dev needs to create a new component property, they’ll
        pick from the 100-odd HTML elements. Their selection may depend on their
        experience, their mood, the phase of the moon, and which handful of HTML
        elements they haven’t already used for <em>other</em> properties on the same
        component. It's highly likely a different developer (or the same developer
        on a different day) would make a different selection of HTML elements for
        the same properties. Imagine an object-oriented programming language that
        forced you to give class properties one of 100 sanctioned property names:
        “index”, “count”, “name”, etc. Evereyone’s classes would
        <em>look</em> consistent, but it would be an utterly false consistency.
        That’s effectively what we’ll get if component authors are forced to choose
        HTML tags to identify component properties.
      </li>
      <li>
        <h2>
          Use of CSS selectors hinders a developer’s ability to add new properties.
        </h2>
        Suppose the author of this component needs to add a new property to this
        choice component. Maybe they want to add a “More about this choice” link to
        each choice; this link should navigate to another page with more details on
        that poll choice. Following the example of the &lt;h3&gt; for the choice
        summary, they decide to define this link property by extracting the first
        &lt;a&gt; tag in the content to be the link to the “More about this choice”
        page. Perhaps, following their use of the “h3:first-of-type” selector above,
        they decide to pick out this &lt;a&gt; tag with the similar CSS selector
        “a:first-of-type”. If they do so, this component author will inadvertently
        screw up any component user who happened to include an &lt;a&gt; tag
        somewhere in the description. Suppose a user of this component has
        <em>already</em> created some code for a choice like this:
        <pre>
    &lt;x-choice value=”semantics”&gt;
        &lt;h3&gt;Semantics&lt;/h3&gt;
        &lt;p&gt;
            Semantics in &lt;a href=”…”&gt;HTML5&lt;/a&gt; applications…
        &lt;/p&gt;
    &lt;/x-choice&gt;</pre
        >
        The “a:first-of-type” selector for the “More about this choice” link will
        accidentally pick up the existing link, thereby breaking this use of the
        component. The component author could issue a “Breaking Change” notice,
        warning everyone to include an &lt;a&gt; tag before the choice description.
        But even that wouldn’t help someone who, for whatever reason, needed to
        embed an &lt;a&gt; inside of the &lt;h3&gt;. The use of selectors here could
        be made more robust by using the child selector "&gt;", as in "&gt;
        h3:first-of-type". But this gets verbose, and again, isn't likely to be a
        universal convention, and inconsistent use of the child selector will only
        add to the confusion. The fundamental problem is that using CSS selectors
        for this purpose is inherently fragile.
      </li>
      <li>
        <h2>Arbitrary parameter structure is brittle.</h2>
        The fragility of using CSS selectors remains even if one tries to avoid the
        use of arbitrary HTML elements. Suppose you decide to use element
        <em>position </em>to identify components. You’ll still up a component which
        is hard to update. Here, a relevant case study is the existing of positional
        function parameters in most programming languages. To take just one example,
        consider JavaScript functions. Suppose you’ve defined a function with three
        parameters: “function foo(a, b, c) {…}”. If you now want to add a new
        parameter “d”, you have to add it to the end of the argument list to avoid
        breaking existing users of your function. This can easily produce a function
        whose parameter order feels unnatural. And to use the new “d” parameter, a
        function caller <em>must </em>supply the intermediate arguments a, b, and c,
        even if those are irrelevant to the function call at hand. To avoid these
        problems, programming languages tend to eventually evolve named function
        parameters. Functions with named parameters are inherently more future-proof
        and, importantly, allow callers to only specify the parameters they care
        about. The lesson of positional function parameters applies to trying to
        parse component properties out of the DOM content subtree. Having learned
        this lesson in countless programming languages, it would be nice to just
        jump straight to a reasonable solution which allowed for named component
        properties. While CSS selectors represent a powerful parsing tool, much of
        that power is completely unnecessary in this context — and some people will
        inevitably put that extra power to poor use.
      </li>
      <li>
        <h1>Subclasses will compete for parameters with their base classes.</h1>
        The above situations quickly deteriorate further when one envisions
        extending an existing component via subclassing. Subclassing is a crucial
        means of efficiency in component development, in which the behavior of one
        component can be specialized for new purposes. As just one case, over 33% of
        the controls in the
        <a href="https://quickui.org/catalog">QuickUI Catalog</a> are subclasses of
        other Catalog controls. For example, both
        <a href="https://quickui.org/catalog/DateComboBox">DateComboBox</a> and
        <a href="https://quickui.org/catalog/ListComboBox">ListComboBox</a> extend
        <a href="https://quickui.org/catalog/ComboBox">ComboBox</a>, which itself
        extends <a href="https://quickui.org/catalog/PopupSource/">PopupSource</a>.
        This separation of concerns is vital to keep the code clean, organized, and
        maintainable. Such subclasses would likely become unworkable as Web
        Components, because each level of the class hierarchy will be competing with
        its ancestors and descendants as they all tried to extract properties from
        the single DOM content subtree permitted by the Web Components spec. If the
        choice class extracts an &lt;h3&gt; element from the content, then that
        element is effectively<em> invisible </em>to the &lt;content&gt; selectors
        of its subclasses. (Or, if you let subclasses have first shot at the
        content, then the elements they pull out are effectively invisible to their
        base classes.) This significantly complicates point #3 above (using CSS
        selectors to pull out properties from the DOM content subtree makes it hard
        to add new properties). Consider a subclass of the choice component above
        called, say, special-choice. Perhaps the author of special-choice has
        decided to use the HTML &lt;h4&gt; element to identify a particular
        property. Now the author of the base choice component decides to add a new
        property, and elects to use &lt;h4&gt; for this purpose themselves. This has
        the effect of breaking the special-choice subclass. Obviously, such naming
        conflicts can arise in regular OOP classes, but here the likelihood of
        conflict is much greater because of the highly constrained vocabulary of
        HTML elements. Using DOM structure to select properties (point #4, above) is
        even <em>more</em> brittle when one considers subclasses. If a component
        class decides to use DOM element position to select content for a given
        property, and someone creates a subclass that likewise uses element
        position, the original base class’ API is effectively frozen. Suppose the
        base class defines a &lt;content&gt; element with selector “:nth-child(3)” ,
        and the subclass goes ahead and uses a &lt;content&gt; with selector
        “:nth-child(4)”. How is the base class supposed to add support for a new
        property now? They can’t use position 4, because a subclass is already using
        that. The situation could be worked around by requiring not just specific
        tags, but also specific class names, but this has problems of its own (see
        below). As currently drafted, the Web Components spec seems highly likely to
        close off the possibility of rich component hierarchies. Most component
        developers will probably elect to just copy-and-paste useful code from other
        developers, rather than subclassing them, to preserve the ability to modify
        their components in the future.
      </li>
      <li>
        <h2>
          Class names could help identify properties, but will probably just
          complicate everything.
        </h2>
        One way to skirt the problems above is to use HTML element classes to
        identify properties by class name, and reference these classes in the CSS
        selectors. If you gave up on specific HTML tags, and just used a &lt;div&gt;
        and a named element class for all properties, the second code fragment above
        could look like this:
        <pre>
    &lt;x-choice value=”semantics”&gt;
      &lt;div class=”summary”&gt;Semantics&lt;/div&gt;
      &lt;div class=”description”&gt;Giving meaning to structure…&lt;/div&gt;
    &lt;/x-choice&gt;

    &lt;x-choice value=”offline-storage”&gt;
        &lt;div class=”summary”&gt;Offline &amp; Storage&lt;/div&gt;
        &lt;div class=”description”&gt;Web apps can start faster…&lt;/div&gt;
    &lt;/x-choice&gt;

    …</pre
        >
        This could potentially work if everyone agreed to <em>always</em> using an
        element class name to identify a property, and consistently applied those
        classes to a single element type (likely &lt;div&gt;) which everyone agreed
        upon would stand for “parameter”. Unfortunately, the more likely result is
        that throwing element class names into the mix will just complicate
        everything further. Some devs will write their components that way, but
        others will insist the use of HTML elements as shown above. Some will
        require the use of both specific HTML elements <em>and</em> specific class
        names. E.g., the choice component’s summary property will be forced to be
        identified with &lt;h3.summary&gt; to avoid possible conflicts with other
        &lt;h3&gt; elements in the content. This would be verbose and, worse, as a
        component user you'd have to remember and specify <em>two</em> things, when
        one should be sufficient.
      </li>
      <li>
        <h2>
          Invisible component APIs foreclose the possibility of inspection and
          reflection.
        </h2>
        The choice component in this example effectively presents its hosts with an
        external API that allows the host to fill in two text properties.
        Unfortunately, that API is <em>implicit</em> in the design of the
        &lt;content&gt; elements and their selectors. That makes it hard to
        programmatically understand what a component is doing. At design time,
        there’s no easy way to statically analyze the code to inspect what those
        &lt;content&gt; elements are actually being used for. You could potentially
        parse the HTML to find the &lt;content&gt; elements, then parse their CSS
        selectors, but that still wouldn't give you any hints as to what those
        &lt;content&gt; elements were being used <em>for</em>. At least a formal
        property name gives you a real idea as to its purpose. And at runtime, there
        would be no easy way to ask a choice component instance questions about
        which properties it supports: “How many properties do you have?”, or “Do you
        have a ‘description’ property?” Such run-time inspection of a component’s
        API (also known as reflection) can be a powerful tool. In this very
        presentation, Google’s developers point toward the benefits of programmatic
        inspection when they observe that giving web developers the ability to
        create new custom elements (via the &lt;element&gt; tag) will open new
        possibilities in researching possible improvements to HTML itself. For
        example, researchers could statically inspect Web Components actually used
        by production web sites to determine, for example, the names of the most
        common custom elements. That in turn could help guide the formal adoption of
        new HTML elements in future versions of the language itself. That’s just one
        example of what’s possible when APIs are explicit. Such explicitness should
        be extended beyond component names to cover component property names as
        well.
      </li>
    </ol>

    <h2>
      A proposal to fix this: Support multiple, named, DOM-valued component
      properties
    </h2>

    <p>
      All the issues above could be eliminated or dramatically improved if the Web
      Components spec were amended to let developers create components that accept
      multiple, named, DOM-valued properties. (Presumably, this support would
      actually be added to HTML Templates, used by both &lt;element&gt; and
      &lt;decorator&gt; elements.)
    </p>

    <p>Here are some possible syntax suggestions:</p>

    <ul>
      <li>
        <h2>Proposal A: Use a consistent tag for component properties.</h2>
        A convention of using &lt;div&gt; elements to hold properties (see point #6
        above) is a bit odd, because the &lt;div&gt; tag is used simply as a
        placeholder. The convention could be improved by formalizing a new element
        specifically for this purpose. Perhaps the existing &lt;param&gt; tag,
        currently limited to use within &lt;object&gt; elements, could be given new
        life by being repurposed for use within components. Its definition would
        need to be extended to support a closing &lt;/param&gt; tag form that could
        encapsulate a DOM subtree:
        <pre>
    &lt;x-choice value=”semantics”&gt;
        &lt;param name=”summary”&gt;Semantics&lt;/param&gt;
        &lt;param name=”description”&gt;Giving meaning to …&lt;/param&gt;
    &lt;/x-choice&gt;

    &lt;x-choice value=”offline-storage”&gt;
        &lt;param name=”summary”&gt;Offline &amp; Storage&lt;/param&gt;
        &lt;param name=”description”&gt;Web apps can start …&lt;/param&gt;
    &lt;/x-choice&gt;

    …</pre
        >
        If &lt;param&gt; can’t be redefined this way, then a new tag like
        &lt;property&gt; could be created. If HTML semantics zealots insist on
        mapping component content to HTML elements, it’d be possible to let define a
        component author identify a <em>backing</em> HTML semantic tag that should
        be used to treat the property’s content for search and other purposes. E.g.,
        syntax within the &lt;element&gt; definition would indicate that the
        “summary” property should be backed by an &lt;h3&gt; element. This is
        exactly the way that the &lt;element&gt; tag’s “extends” attribute is
        already spec’ed to work. The author indicates that an &lt;x-choice&gt;
        element is backed by a &lt;div&gt;. In the exact same way, the author could
        indicate that a &lt;param&gt; (or &lt;property&gt;) of name=”summary” should
        be backed by an &lt;h3&gt;. As noted above, the particular choice of backing
        HTML element might be inconsistent or meaningless, but at least use of a
        backing element confines the problem to a much smaller audience. That is,
        the component <em>users</em> shouldn’t need to know that summary property
        behaves like an &lt;h3&gt;, just like they don’t have to know that an
        &lt;x-choice&gt; behaves like a &lt;div&gt;. Rather, that would be something
        only the component author would need to concern themselves with.
      </li>
      <li>
        <h2>Proposal B: Expand data- attributes to support data- elements</h2>
        HTML developers can already attach arbitrary string data to HTML elements as
        data- attributes (that is, element attributes prefixed with “data-”). Web
        Components could build on this precedent to allow data-
        <em>elements</em> that specify DOM subtrees nested within the component's
        content. For example:
        <pre>
    &lt;x-choice value=”semantics”&gt;
        &lt;data-summary&gt;Semantics&lt;/data-summary&gt;
        &lt;data-description&gt;Giving meaning to …&lt;/data-description&gt;
    &lt;/x-choice&gt;

    &lt;x-choice value=”offline-storage”&gt;
        &lt;data-summary&gt;Offline &amp; Storage&lt;/data-summary&gt;
        &lt;data-description&gt;Web apps can start …&lt;/data-description&gt;
    &lt;/x-choice&gt;

    …</pre
        >
        In the case where the property values are pure text, a &lt;data-foo&gt;
        element could be interchangeable with the corresponding data-foo attribute
        within the component tag. So one could also write:
        <pre>
    &lt;x-choice value=”semantics” data-summary=”Semantics”&gt;
        &lt;data-description&gt;Giving meaning to …&lt;/data-description&gt;
    &lt;/x-choice&gt;

    &lt;x-choice value=”offline-storage” data-summary=”Offline &amp; Storage”&gt;
        &lt;data-description&gt;Web apps can start …&lt;/data-description&gt;
    &lt;/x-choice&gt;

    …</pre
        >
        The data- element form would only need to be used when specifying a real DOM
        subtree with subelements; otherwise, the data- attribute form could be used.
      </li>
      <li>
        <h2>
          Proposal C (preferred): Let developers define custom property elements
        </h2>
        The above approach could be tightened further by dropping HTML’s historic
        obsession with restricting the set of tags. By dropping by the “x-“ in the
        custom element tag, and the “data-“ in the custom property tag, we end up
        with something much cleaner:
        <pre>
    &lt;choice value=”semantics”&gt;
        &lt;summary&gt;Semantics&lt;/summary&gt;
        &lt;description&gt;Giving meaning to structure, …&lt;/description&gt;
    &lt;/choice&gt;

    &lt;choice value=”offline-storage”&gt;
        &lt;summary&gt;Offline &amp; Storage&lt;/summary&gt;
        &lt;description&gt;Web apps can start faster …&lt;/description&gt;
    &lt;/choice&gt;

    …</pre
        >
        As with the data- element approach above, this custom property element
        approach could also support the use of a data- attribute on the element tag
        itself when specifying a simple string property value. The cleanliness of
        the code above comes at the cost of an ambiguity: if you can define your own
        element tags and property tags, how does the parser know which is which? In
        the code above, is &lt;summary&gt; a property of &lt;choice&gt;, or is it a
        custom element in its own right? One resolution would be a precedence rule,
        e.g., if &lt;summary&gt; is a child of a parent that has a summary property,
        then treat it as a property, otherwise instantiate it as a custom element.
        Another resolution would be to follow what Microsoft did with XAML's <a
          href="http://msdn.microsoft.com/en-us/library/ms788723.aspx#property_element_syntax"
          >property element syntax</a
        >: allow (or require) the property to be written as &lt;choice-summary&gt;.
        As noted above, if HTML powers that be insist on mapping component content
        to a fixed set of HTML elements, that could  be handled by letting a
        component author indicate the HTML element which should be used to back each
        property. Again, that would relegate the problem to something that only the
        component author would have to worry about. The writer of the code above
        that hosts the choice component wouldn’t have to obsess over the question of
        why &lt;aside&gt; was picked instead of &lt;label&gt;; that detail would
        only be visible by reading the code for the choice component. The host
        author only has to deal with &lt;summary&gt;, which has local meaning. In
        any event, the above code sample is clean, and should serve as a goal. Such
        code would be a joy to write — and read. It moves HTML definitively towards
        the creation of domain-specific languages, which is where it should go. It’s
        somewhat absurd that we can only define markup terms according to global
        consensus. That’s like waiting for a programming language committee to
        approve the names of your classes. The web will move forward at a
        <em>much</em> faster pace if we can let individual problem domains (online
        stores, news sites, social networks, games, etc.) define their own tags,
        with semantics they care about and can agree upon. As the aforementioned
        uses of &lt;aside&gt; and &lt;label&gt; illustrate, forcing developers to
        use HTML elements may give the appearance of consistent semantics, but that
        consistency is merely a facade. In contrast, letting polling organizations
        define the meaning of a &lt;summary&gt; property for a &lt;choice&gt;
        component could produce meaningful consistency within that industry.
      </li>
    </ul>

    <h2>There’s still time to fix this</h2>

    <p>
      In their presentation, Alex and Dimitri indicated that their goal is not to
      spec out a complete replacement for web UI frameworks. Rather, the goal of
      their work is to lay a solid foundation on top of which great web UI
      frameworks can be built by others. In this light, it is hoped that the Web
      Components spec can be amended to support multiple, named, DOM-valued
      properties — because that’s exactly the foundation a great web UI framework is
      going to need.
    </p>

    <p>
      The QuickUI framework, at least, is more expressive with regard to component
      content than is possible within the current Web Components spec. That is to
      say, the existing Catalog of QuickUI controls (and the many others controls
      written in the service of specific QuickUI-based applications) could not be
      ported to the current Web Components spec. Or, perhaps, those controls
      <em>could</em> be ported — but then, for the reasons given above, the
      collection would then become so brittle that its evolution would come to a
      halt. That would be a shame.
    </p>

    <p>
      To be sure, the Google team, and the others working on Web Components, are
      smart folks, and it’s likely they’ve already given at least some thought to
      the problems raised in this post. But more input, particularly when informed
      by real application experience by potential users of a standard, is always
      valuable in weighing decisions about what should go into the standard. And
      it's in that spirit that this post is written.
    </p>

    <p>
      If you yourself have worked with component frameworks, and have experiences
      that bear on this issue, please share them with the folks at Google. A good
      forum for feedback might be the
      <a href="https://plus.google.com/103330502635338602217/posts"
        >Web Components page on Google+</a
      >. (Be sure to thank everyone for their work!)
    </p>
2012-08:
  2012-08-06 QuickUI 092 released.html: >
    ---

    title: "QuickUI 0.9.2 released"

    date: 2012-08-06

    slug: quickui-0-9-2-released

    originalUrl: http://blog.quickui.org/2012/08/06/quickui-0-9-2-released/

    ---


    <p>
      Version 0.9.2 is primarily a bug-fix release. Beyond a variety of minor fixes,
      there are just a couple of notable changes:
    </p>

    <ol>
      <li>
        Using $.control( element ) on an existing element to cast the element to the
        correct subclass of Control now returns null (instead of undefined) if the
        given element is not a control.
      </li>
      <li>
        A bug has been fixed which prevented quickui.js from loading in IE8. Thanks
        to QuickUI user Toussaint for reporting this bug and helping to test the
        fix!
      </li>
    </ol>

    <p>
      The release of 0.9.2 coincides with the release of version 0.9.2 of the
      QuickUI Catalog, which includes the following:
    </p>

    <ol>
      <li>
        Modes now derives from a new base class called Sequence, a general-purpose
        class for any linear sequence of elements that can be navigated via a next()
        and previous() method. Modes now focuses on showing just one element of a
        Sequence at a time. As part of this change, Modes.activeChild() has been
        renamed to Modes.activeElement().
      </li>
      <li>
        SlidingPages has been renamed SlidingPanels (since its contained elements
        aren’t necessarily pages). The class now also derives from Sequence.
        Finally, SlidingPanels has been updated to take advantage of CSS transitions
        on browsers that support them, falling back to a jQuery animation on older
        browsers.
      </li>
      <li>
        LateralNavigator has been refactored to handle two general cases: first,
        navigating through a Sequence of elements, and second navigating through an
        abstract axis like time. The former case is specifically addressed with a
        new class called SequenceNavigator. The latter case is used in
        CalendarMonthNavigator.
      </li>
      <li>
        An issue that prevented CalendarMonthNavigator from correctly vertically
        aligning its heading elements has been fixed. CalendarMonthNavigator now
        also uses a new class, MonthAndYear, to show both the month and year instead
        of just the month name.
      </li>
      <li>
        A new VerticalAlign class handles the general problem of vertically aligning
        child elements in older browsers.
      </li>
      <li>
        A new Carousel class derives from SequenceNavigator, and uses a
        SlidingPanels class to provide a sliding transition between elements in the
        sequence.
      </li>
      <li>The TabSet class has been renamed to Tabs.</li>
    </ol>

    <p>
      This release is also notable as the first one in which Catalog controls have
      been written (and, some cases, rewritten) in CoffeeScript.
    </p>
2012-09:
  2012-09-17 An axiomatic approach to defining user interface elements building complex elements from simple ones.html: >
    
    ---

    title: "An axiomatic approach to defining user interface elements: building complex elements from simple ones"

    date: 2012-09-17

    slug: axiomatic-user-interface-framework

    originalUrl: https://miksovsky.blogs.com/flowstate/2012/09/axiomatic-user-interface-framework.html

    ---


    <p>
      Just as geometry builds up complex results from simple axioms, and programming
      languages build up complex constructs from simple primitives, it should be
      possible to create complex user interface elements from simple elements. But
      the lack of great building blocks for web user interface components causes
      people to waste a colossal amount of time reproducing common behaviors or,
      worse, forces them to settle for something quick but suboptimal.
    </p>

    <p>
      Take something as basic as tabs. Every web UI package includes a widget or
      component that produces a set of tabs, such as the typical example from
      <a href="http://jqueryui.com">jQuery UI</a>:
    </p>

    <p>&#0160;</p>

    <p>
      <img src="/images/flowstate/6a00d83451fb6769e2017d3bf49d7d970c-pi.png" />
    </p>

    <p>&#0160;</p>

    <p>
      While a tab set may seem to be an irreducible unit of user interface
      complexity, we can actually decompose its behavior into smaller, simpler
      chunks:
    </p>

    <ol>
      <li>
        <strong
          >Ensuring a single element within a set is “active” at any given
          time.</strong
        >&#0160;Here, only one of the tab buttons is in the active state. There are
        many other manifestations of this behavior. Single-selection list boxes, for
        example, also have a notion that a single item in the list is active.
      </li>
      <li>
        <strong>Showing a single element a time. </strong>The main region of the tab
        set shows a single page which corresponds to the active tab button. The
        active page is the only one that’s shown; the non-active pages are hidden.
        This behavior comes up in situations other than tabs. For example, photo
        “carousel” controls let a user page through photos one at a time, generally
        with previous/next buttons instead of a tab strip.
      </li>
      <li>
        <strong
          >Showing a set of identical elements that correspond to items in a list. </strong
        >The strip of tab buttons across the top has an internal consistency: every
        tab button is represented with the same type of button.
      </li>
      <li>
        <strong
          >Positioning one collection of elements directly above another.</strong
        >
        Here, the strip of tab buttons is stacked on top of the tabbed pages. This
        kind of layout seems so simple as to not deserve consideration. However, in
        current web browsers, this can be frustratingly difficult to achieve in the
        common cases where the size of the tab set is flexible. Suppose you want the
        tab set to fill the viewport, or a region of the viewport. The tab strip
        should consume a given height (which for a variety of reasons should not be
        fixed beforehand in, say, pixels), and the remainder of the space given over
        to the tabbed pages. This type of layout can be achieved with a
        <a href="http://www.w3.org/TR/css3-flexbox/">CSS flexbox</a>, but at least
        for a little while longer, many app developers will need to support older
        browsers (i.e., IE).
      </li>
      <li>
        <strong>Giving UI elements a description which can shown elsewhere.</strong>
        The pages shown within the tab set are rectangular regions, but the
        <em>name</em> of the tab is shown outside. It’s fairly common to want to
        give a UI element a user-friendly name like this.
      </li>
      <li>
        <strong>Letting a user tap or click a button to achieve a result.</strong>
        That is, the elements in the tab strip behave like buttons.
      </li>
    </ol>

    <p>
      It should be possible to create UI classes that implement each of these more
      fundamental behaviors or aspects. It should then be possible to exploit these
      behaviors on their own, or recombine them with other behaviors to produce
      other recognizable user interface controls. In effect, we should be able to
      arrive at fundamental behaviors that behave like the axioms in a mathematical
      domain or, alternatively, like atoms in a physical system of elements.
    </p>

    <p>
      The domain of computer science has much to say on the topic of axiomatic
      design. Programming languages are often predicated on the notion that you can
      boil down everything you’d want to do in the language to a tiny set of
      primitive functions. It’s only this small set of primitives which
      <em>must </em>be written in a lower-level language (e.g., a machine language).
      Everything else can be built up in the language itself. This not only keeps
      things clean, it ensures the language’s popularity and survival by
      facilitating the porting of the language to new platforms — only the
      primitives must be rewritten, and all the remaining code built on top of the
      primitives can be used as is. The original example of this axiomatic principle
      in language design was Lisp, whose story Paul Graham recounts in his article
      <a href="http://www.paulgraham.com/rootsoflisp.html">The Roots of Lisp</a>.
      (The full article is available on his site in the
      <a href="http://lib.store.yahoo.net/lib/paulgraham/jmc.ps"
        >original Postscript version</a
      >, or in various
      <a href="http://www.scribd.com/doc/45120227/jmc">converted PDF versions</a>.)
      From his article:
    </p>

    <blockquote>
      <p>
        In 1960, John McCarthy… showed how, given a handful of simple operators and
        a notation for functions, you can build a whole programming language.
      </p>
      <p>
        [McCarthy’s] ideas are still the semantic core of Lisp today. It’s not
        something that McCarthy designed so much as something he discovered. It’s
        not intrinsically a language for AI [artificial intelligence] or for rapid
        prototyping, or for any other task at that level. It’s what you get (or one
        thing you get) when you try to axiomatize computation. … By understanding
        [Lisp] you’re understand what will probably the main model of computation
        well into the future.
      </p>
    </blockquote>

    <p>
      Can we determine a similar axiomatic deconstruction of user interface
      elements? That’s a topic I’m acutely interested in, and I believe the answer
      is yes. Even through graphical user interfaces span a range of devices,
      platforms, and frameworks, the underlying collection of distinct user
      interface behaviors is quite consistent: clicking one thing something makes
      something else appear; items in lists are given consistent representations and
      behavior; modes (for both better and worse) constrain the user’s attention and
      powers; and so on. It should be possible to boil those consistent behaviors
      into reusable code.
    </p>

    <p>
      The result of this decomposition is a set of UI primitives which is
      significantly bigger than the canonical tiny set of user interface controls: a
      push button, a radio button, a check box, a text box. Of all the aspects
      numbered above, only #6 (push buttons) are available as a native browser
      control. Web developers are generally forced to recreate all the other aspects
      through combinations of CSS and JavaScript. That&#39;s inefficient and
      error-prone. As noted above, even something as seemingly straightforward as
      stacking two regions on top of one another can prove unexpectedly complex.
    </p>

    <p>
      The actual set of web UI primitives is probably an order of magnitude larger
      than what browsers expose as interactive UI controls. At the same time, the
      set of really general purpose contemporary UI (see this article for
      <a
        href="http://miksovsky.blogs.com/flowstate/2012/06/reinventing-the-ui-wheel.html"
        >a breakdown of UI elements by context-specificity</a
      >) is not so large it can&#39;t be enumerated or understood. For today’s
      typical mobile or web application, I believe a reasonably comprehensive
      collection of UI primitives would number in the 100 – 200 range.
    </p>

    <p>
      What would those primitives be? My work on the
      <a href="http://quickui/catalog">QuickUI Catalog</a> is an attempt this
      question. It’s a work in progress, and is by no means complete. It currently
      includes controls which shouldn’t be there (they’re really just sample uses of
      an underlying component), and on the other hand doesn’t (yet) include enough
      controls for common situations like mobile. Nor is the set of controls
      completely stable yet. I occasionally realize two controls exhibit similar
      behavior whose implementation should (or shouldn’t) be shared, which results
      in both minor and major refactorings. Nevertheless, the Catalog already
      represents a highly useful starting point for creating application UIs.
    </p>

    <p>
      Let’s return to the tab set example above. The QuickUI Catalog includes a
      <a href="https://quickui.org/catalog/Tabs">Tabs</a> control for this purpose,
      which can be used as is. But that Tabs control is simply a combination of
      lower-level components corresponding to the attributes listed above:
    </p>

    <ol>
      <li>
        A <a href="https://quickui.org/catalog/Sequence">Sequence</a> base class. A
        Sequence control keeps track of which one (and only one) of its children is
        currently active.
      </li>
      <li>
        A <a href="https://quickui.org/catalog/Modes">Modes</a> control. Extends the
        Sequence class to hide everything but the active child.
      </li>
      <li>
        A <a href="https://quickui.org/catalog/List">List</a> control. Maps an array
        of internal data items to an array of user-visible controls.
      </li>
      <li>
        A
        <a href="https://quickui.org/catalog/VerticalPanels">VerticalPanels</a>
        control. Stacks things vertically. This inherits from
        <a href="https://quickui.org/catalog/SimpleFlexBox">SimpleFlexBox</a>, a
        user interface
        <a href="http://en.wikipedia.org/wiki/Polyfill">polyfill</a> which uses a
        CSS flexbox for layout on modern browsers, and a manual engine for layout on
        older browsers.
      </li>
      <li>
        A <a href="https://quickui.org/catalog/Tab">Tab</a> control. Associates a
        description property with an arbitrary block of content. It&#39;s this
        description the Tabs control displays in a List of buttons across the top.
      </li>
      <li>
        A <a href="https://quickui.org/catalog/BasicButton">BasicButton</a> control.
        This wraps the browser’s native &lt;button&gt; as a component. Among other
        things, this allows a BasicButton to be used to render items in the List
        (above) to create the strip of tab buttons.
      </li>
    </ol>

    <p>
      All these derive from a common
      <a href="https://quickui.org/catalog/Control">Control</a> base class.
    </p>

    <p>
      We can show the relationships between all these classes in a graph, where a
      solid line represents an “is a” relationship (one class derives from another)
      and a dotted line shows a “has a” relationship (one class makes use of
      instances of another class):
    </p>

    <p>
      <img
        alt="Tabs"
        src="/images/flowstate/6a00d83451fb6769e2017744a4ea90970d-800wi.png"
      />
    </p>

    <p>
      This arrangement entails a lot more pieces than a typical web user interface
      platform.&#0160;The browser itself only provides a native button. Most
      existing web user interface frameworks provide some button class wrapper (such
      as BasicButton here) and a tab set class (Tabs). They may or may not expose a
      general purpose UI component base class (here, Control). The tab set class is
      typically fixed in a monolithic implementation, and can only be modified via
      parameters the framework designers have anticipated beforehand.
    </p>

    <p>
      Traditional client-side UI frameworks (e.g., Windows Presentation Foundation)
      do have rich class hierarchies, although even their UI primitives tend to be
      too course-grained. And&#0160;contemporary web UI frameworks rarely have good
      building blocks. (Some people claim the
      <a href="http://www.sencha.com">Sencha</a> framework does, but it&#39;s
      unfortunately encumbered with developer licensing fees, and requires you to
      build your app on top of a proprietary substrate. To me, that&#39;s moving in
      the exact opposite direction of web development trends.)
    </p>

    <p>
      The main obstacles to UI like this on the web may have multiple causes,
      including the fact that the web&#39;s primary client-side programming language
      JavaScript, still has no native support for traditional object-oriented
      classes. Moreover, the browser doesn&#39;t yet expose a model for modular
      component composition, which creates a lot of work for a UI framework&#39;s
      creators.
    </p>

    <p>
      In the above implementation of a tab set, all the lower-level pieces are
      directly available to the user interface designer and developer. These can be
      used on their own, or combined with other types of elements to create other
      user interface elements. And, significantly, new elements constructed with
      this approach are, by default, extensible and recombinable in their own
      right.&#0160;In a subsequent post, I plan to show some of the other sorts of
      UI controls which can be created by combining some of the pieces above in
      different ways.
    </p>

    <p>
      As noted above, this Catalog implementation isn’t perfect. Among other things,
      there are inherent limitations on what you can achieve with a classic single
      inheritance hierarchy. But, overall, this feels like a promising direction,
      and in practice is a highly efficient way to create web apps. Above all, this
      axiomatic approach feels like the right <em>paradigm</em> for building UI.
    </p>

    <p>
      McCarthy&#39;s big advance with Lisp wasn&#39;t to create programming language
      primitives — all programming langauges have primitives. His insight was that
      the primitives in programming languages of the time&#0160;<em
        >weren&#39;t primitive enough</em
      >. Instead, you should break a language into irreducible axioms, and let
      people combine those axioms to create any new language functions they need.
      The functions you create with those Lisp primitives are just as powerful as
      any pre-packaged functions created with those same primitives by the
      language&#39;s designers. That is, there&#39;s nothing special the language
      designer can do you which you cannot also do.
    </p>

    <p>
      Similarly, a UI platform should give you a powerful set of axiomatic
      appearances and behaviors and a means to combine them to create new elements
      which are every bit as powerful as those elements that come bundled with the
      platform. This is why attempts to build a tiny handful of new controls into
      web browsers &#0160;is almost completely uninteresting to me. A new date
      picker in the browser, to take just one example, is just&#0160;<a
        href="http://miksovsky.blogs.com/flowstate/2011/11/datecombobox.html"
        target="_self"
        >never going to solve your date picker needs</a
      >. It&#39;s like the FORTRAN committee adding yet another hard-baked statement
      to the language. What&#39;s infinitely more interesting is a UI platform that
      gives you the building blocks you need to build a date picker of your own
      that&#39;s as powerful as anything in the browser itself.
    </p>
2012-11:
  2012-11-13 Designing by Making your process for arranging furniture can point toward a good process for UI design.html: >
    
    ---

    title: "Designing by Making: your process for arranging furniture can point toward a good process for UI design"

    date: 2012-11-13

    slug: designing-by-making

    originalUrl: https://miksovsky.blogs.com/flowstate/2012/11/designing-by-making.html

    ---


    <p>
      The last time you had to arrange the furniture in your home — did you create a
      design first? No. You had a design <em>idea,</em> and then immediately jumped
      into implementing your idea by moving the sofa and table around until the
      result felt good.
    </p>

    <p>&#0160;</p>

    <p>
      <img
        alt="Moving Furniture"
        src="/images/flowstate/6a00d83451fb6769e2017ee505cde5970d-pi.jpeg"
      />
      <br /><em><span>Hmm… let’s try putting this over here…</span></em>
    </p>

    <p>&#0160;</p>

    <p>Consider these attributes of the typical process for arranging furniture:</p>

    <ol>
      <li>
        You do it yourself. If you have enough money, you might tell movers where to
        put the heavy things first, but you’re still directly involved, and you’ll
        end up pushing things around yourself before it’s all over.
      </li>
      <li>
        You work directly with the furniture and the space, without recourse to a
        single design artifact. Think about it: in the time it would take to create
        a scale model of a room and the furniture to sufficient accuracy that it
        could actually inform your decisions, you can finish the task of moving the
        real furniture into place.
      </li>
      <li>
        You can never predict whether a layout will completely work until you’ve
        actually gotten things in place. Once the pieces are in place, you
        <em>always</em> discover something unexpected. You move your desk so it
        faces the door, then sit in the desk chair and realize you can’t see the
        view out the window. So you turn the desk around to face the window, then
        get a creepy feeling that someone might sneak in the door and creep up
        behind you without your knowledge. Each layout you try teaches you
        something.
      </li>
      <li>
        The process is inherently iterative. You start with an idea, and iterate
        through various layouts until you converge on an acceptable result (or
        you’re tired of moving stuff around).
      </li>
    </ol>

    <p>You can design software user interfaces this way too.</p>

    <p>
      I had a chance to speak about my own design process at a talk I gave last
      month at the California College of the Arts in San Francisco, to an engaged
      audience of interesting students in the school’s MBA in Design Strategy
      program. There I discussed how my own design process has changed
      substantially&#0160;in the last five years to become something I might call
      designing by making. In this process, the design of a software experience is
      inseparable from the coding of that experience. In this regard, the process
      has a lot in common with arranging furniture.
    </p>

    <p>
      Many contemporary design process artifacts like field interviews, a wall of
      post-it notes, and paper prototypes reflect an increasingly antiquated
      premise: that building a real thing is much more expensive than producing a
      design. Historically, it has been true that designing software with a complex
      user interface was a minor cost compared to the labor of actually writing the
      code. In my early days at Microsoft, one might have seen a ratio of one
      designer to five to eight engineers (developers and testers), because even
      primitive tasks like obtaining user input or positioning interface controls in
      a window entailed such extensive, labor-intensive coding. It seemed sensible
      to invest considerable thought and time in the design phase because it could
      be many months before the designer would get to experience the actual product
      for the first time. Unfortunately, that moment of enlightenment often didn’t
      come until the fully-functional pre-beta builds arrived roughly two-thirds of
      the way through the product cycle. At that point, when the designer inevitably
      has new insights into the best design, any big design changes would often
      needed to be deferred until the next version.
    </p>

    <p>
      Much software is still designed this way, even though the economics of user
      interface implementation have changed radically. The effort required to create
      useful, functional, beautiful, reliable, and performant software application
      user interfaces has been dropping for years, and this trend will continue for
      the foreseeable future. About five years ago, the technology reached the point
      where it became possible for me to create web applications directly. Rather
      than working in Photoshop, Microsoft Word, or a prototyping tool as before,
      and handing these designs off to an engineer, I can now directly create the
      user interface design in code myself.
    </p>

    <p>
      This is roughly as expensive as the old way of doing things, but with the
      significant advance that I am now working with a functional artifact — a
      working user interface — from the very beginning. This turns out to be a
      transformative difference. Just as you can never predict all the ramifications
      of a particular furniture layout, you can never fully predict the strengths
      and weaknesses of a UI design.
    </p>

    <p>
      Instead, I currently believe it’s best to design something by making
      it.&#0160;This means it’s generally not worth a great deal of time to consider
      the hypothetical implications of a theoretical design. (“Will the user find
      this clear?”, “Will this meet the user’s needs?”) It’s faster to just build
      something that actually works, then immediately <em>observe</em>&#0160;whether
      it is good or not. Instead of viewing design as a predecessor to making, this
      is designing by making. The process looks just like the process above:
    </p>

    <ol>
      <li>Do both the design and coding yourself.</li>
      <li>
        Work directly in code, without recourse to other design artifacts. If you’re
        working with good tools, in the time it would take to create an accurate
        static image of what you want, with all the specs that would go along with
        that, you can instead create a functional design that actually does what you
        want.
      </li>
      <li>
        Know that you will be unable to predict whether a design will completely
        work until you actually having a working interface.
      </li>
      <li>
        Build your schedule around iteration. You start with an idea, and iterate
        through various approaches until you converge on an acceptable result (or
        you’re tired of moving stuff around).
      </li>
    </ol>

    <p>
      This process isn’t for everyone. There are software domains that don’t entail
      a user interface (Mars landers, say), where a traditional, process-heavy
      design phase obviously holds true. And not all designers can code, nor can all
      coders design. But I believe that designing by making does allows someone who
      can do both well to iterate much faster from an idea to a usable interface
      than a designer who is forced to rely on someone else to write the code.
    </p>

    <p>
      I believe that in the near future, most software application design will look
      like this. The trends simplifying the coding of user interfaces will continue
      and accelerate, as better design/coding tools permit the construction of
      better design/coding tools.
      <a
        href="http://miksovsky.blogs.com/flowstate/2012/09/axiomatic-user-interface-framework.html"
        >Component-oriented user interface frameworks</a
      >
      will allow people to spend less time designing and coding the details of
      common patterns.
    </p>

    <p>
      Furthermore, companies with experience in creating tools like Adobe are now
      waking up to the realities of a post-Flash world, in which the open web is the
      real application platform to focus on. (Microsoft is also slowly waking up to
      the prospect of a post-Windows client world, although that change will take
      much longer, and I’m not sure they’ll be able to change fast enough to stay
      relevant.)&#0160;Generally speaking, I have high hopes for innovation in the
      realm of tools and frameworks, all of which should make it more and more
      practical for someone like you to do both the design and coding yourself.
    </p>

    <p>
      Today, it is already possible to have a design process built around coding
      that is as efficient — or, often, more efficient — than a traditional,
      artifact-heavy, pre-coding design process. What’s more, the tool chain will
      ultimately improve to the point where designing a user interface will be
      <em>as fast as arranging furniture</em>.&#0160;In the time it takes you to
      say, “Let’s try moving the bookcase over there”, and actually move the
      bookcase, you’ll be able to say, “Let’s try a tabbed navigation approach”, and
      actually switch a design to using tabbed navigation. Imagine what it will be
      like to design software like<em> that</em>.
    </p>
2013-01:
  2013-01-12 QuickUI 093 released.html: >
    ---

    title: "QuickUI 0.9.3 released"

    date: 2013-01-12

    slug: quickui-0-9-3-released

    originalUrl: http://blog.quickui.org/2013/01/11/quickui-0-9-3-released/

    ---


    <p>
      This minor release is being made now because it contains a fix for the
      forthcoming release of jQuery 1.9. Changes:
    </p>

    <ul>
      <li>
        A new Control member called Control.browser replicates the behavior of the
        now-deprecated jQuery.browser member. jQuery is quite reasonably trying to
        encourage people to use feature-detection libraries like Modernizr instead
        of looking directly at the user agent to determine behavior, and jQuery 0.9
        is removing support for jQuery.browser. However, in developing the QuickUI
        Catalog controls, minor bugs have been found time and again in specific
        browsers to prevent controls from working correctly. These bugs are the
        sorts of things that will never be detectable with a feature-detection
        library, and hence checking the browser's user agent is the only practical
        way to ensure cross-browser compatibility.
      </li>
    </ul>

    <p>
      The corresponding release of QuickUI Catalog 0.9.3 includes some minor
      enhancements:
    </p>

    <ul>
      <li>
        <span style="line-height: 15px"
          >A new
          <a href="https://quickui.org/catalog/TextBoxWithButton"
            >TextBoxWithButton</a
          >
          control covers the common UI pattern of a text box with an adjacent button
          (often labeled "Go" or something similar). </span
        >The existing SearchBox control has been refactored to derive from
        TextBoxWithButton.
      </li>
      <li>
        A new <a href="https://quickui.org/catalog/Log">Log </a>control handles the
        common need to log text output (e.g., from a background process) to the
        page.
      </li>
    </ul>
  2013-01-16 A 2013 wall calendar optimized for project management discussions.html: >
    
    ---

    title: "A 2013 wall calendar optimized for project management discussions"

    CONVERT BREAKS: 1

    date: 2013-01-16

    slug: a-2013-wall-calendar-optimized-for-project-management-discussions

    originalUrl: https://miksovsky.blogs.com/flowstate/2013/01/a-2013-wall-calendar-optimized-for-project-management-discussions.html

    ---


    <p>
      In many project discussions, it’s been my experience that two calendar-related
      questions constantly arise:
    </p>

    <ol>
      <li>
        On what day of the week will date <em>x</em> fall? Example: We’d like to
        make our next release on or around the 15th of next month. Is that a
        weekend?
      </li>
      <li>
        What is the date of a given day of the week <em>n</em> weeks from now?
        Example: We usually publish releases on Thursdays. If we want to release
        Thursday of next week, what date is that?
      </li>
    </ol>

    <p>
      For several years, I searched for a large wall calendar I could hang in
      meeting rooms used for project discussions, but couldn’t find anything
      suitable. Calendar companies still living in the dark ages make the calendar
      dates unnecessarily small to leave extra room for
      <em>writing information directly on the calendar by hand</em>. That’s useless
      to me. I don’t want to track vital project information on the physical wall of
      a meeting room; I want to track it online where everyone can see it. Nor does
      a meeting room need a calendar decorated with scenic pictures. Finally, a
      giant wall calendar that only shows a month at a time is too limited in scope.
      All I want is a wall calendar that answers the two questions above.
    </p>

    <p>
      If you want to design a calendar with only the above two goals in mind, I
      think the logical conclusions are:
    </p>

    <ul>
      <li>
        The dates should be as large as possible so that they can be read from far
        away. Ideally, it should be possible for someone sitting across the room to
        answer the questions above.
      </li>
      <li>
        A corollary of the above point is that the calendar should have a minimum
        amount of border junk. Borders can be helpful where you’re scrawling
        information onto a calendar, so you can keep track of which notes go with
        which dates, but aren’t necessary if the only information on the calendar is
        the dates themselves.
      </li>
      <li>
        The calendar should display several months at once. Project management
        discussions look beyond the current month, often several months into the
        future.
      </li>
    </ul>

    <p>
      Since I couldn’t find a wall calendar that incorporated these principles, I
      put one together myself:
    </p>

    <p>&#160;</p>

    <p>
      <img
        alt="Wall Calendar 2013"
        src="/images/flowstate/6a00d83451fb6769e2017d400d7165970c-pi.png"
      />
    </p>

    <p>&#160;</p>

    <p>
      I’ve now used such calendars for a number of years, and they work great. It’s
      very easy for anyone in a meeting to quickly answer the key date questions
      above. I also find it handy to keep one at my desk — glancing at the wall is
      faster than launching a calendar gadget.
    </p>

    <p>
      Since other people like these, I thought I’d put these into the public domain.
      If you find them useful as is, great. Otherwise, feel free to remix to suit
      your own needs.
    </p>

    <ul>
      <li>
        <a href="https://docs.google.com/file/d/0B0qD1pAM8eYlMjVWUEZjaTBrMUU/edit"
          >PDF version</a
        >
        (U.S.). For a small room, a standard printer will do fine. If you want to
        use this in a large room, print the PDF at a copy service such as FedEx
        Office which offers poster printing. I’ve printed these at poster size and
        they work great.
      </li>
      <li>
        <a href="https://docs.google.com/file/d/0B0qD1pAM8eYleWpJZ0wtd0R5TVU/edit"
          >Microsoft Word</a
        >
        (U.S.). The gray weekend dates show up in Google Docs’ preview, but they’re
        there if you download the file.
      </li>
    </ul>

    <p>
      The calendars above are U.S.-centric, with the first day of the week on
      Sunday, and with U.S. federal holidays highlighted. A friend asked for an
      international English version, with the first day of the week on Monday, so
      I’ve also created
      <a href="https://docs.google.com/file/d/0B0qD1pAM8eYlbVNMeFNSejVEbkU/edit"
        >PDF</a
      >
      and
      <a href="https://docs.google.com/file/d/0B0qD1pAM8eYlSkdrMjdIb1d1dE0/edit"
        >Microsoft Word</a
      >
      versions of that. These have no holiday highlighting.
    </p>
  2013-01-23 QuickUI Catalog 0931 released.html: >
    ---

    title: "QuickUI Catalog 0.9.3.1 released"

    date: 2013-01-23

    slug: quickui-catalog-0-9-3-1-released

    originalUrl: http://blog.quickui.org/2013/01/23/quickui-catalog-0-9-3-1-released/

    ---


    <p>
      The <a href="https://quickui.org/catalog">QuickUI Catalog</a> has been updated
      to version 0.9.3.1. This is a modest update in terms of functionality, but a
      significant milestone for the catalog — it represents the culmination of an
      effort to port all the Catalog controls to a combination of CoffeeScript and
      LESS.
    </p>

    <p>
      The original QuickUI framework included the use of a local build tool called
      the QuickUI markup compiler. This compiled a markup format that was
      essentially HTML plus the use of custom tags. (In this, the format was
      remarkably similar to the spec'ed format for Web Components.) Because this
      format never got any traction, it was eventually deprecated, although still
      used for the vast majority of the Catalog controls. 2013 has begun with a
      major push to port all these controls to CoffeeScript for content and behavior
      and LESS for appearance.
    </p>

    <p>
      Now that that port has been accomplished, it will be easier to move the
      Catalog forward, including the addition of new controls and some refactoring
      of existing ones. Along with this port, a handful of other controls were added
      to the Catalog:
    </p>

    <ul>
      <li>
        <a href="https://quickui.org/catalog/ToggleButton">ToggleButton</a> is a
        button that can track a selected state. This can be used as is, or as a base
        class for custom toggle classes.
      </li>
      <li>
        <a href="https://quickui.org/catalog/Link">Link</a> wraps a standard HTML
        &lt;a&gt; tag, and can be used as a base class for custom link classes.
      </li>
      <li>
        <a href="https://quickui.org/catalog/TextBox">TextBox</a> wraps a standard
        HTML text input element, and can be used as a base class for custom text box
        classes.
      </li>
    </ul>
2013-02:
  2013-02-11 UI component whiteboard talk The Web Still Needs a Vibrant UI Ecosystem.html: >
    
    ---

    title: "UI component whiteboard talk: The Web Still Needs a Vibrant UI Ecosystem"

    date: 2013-02-11

    slug: the-web-still-needs-a-vibrant-ui-ecosystem

    originalUrl: https://miksovsky.blogs.com/flowstate/2013/02/the-web-still-needs-a-vibrant-ui-ecosystem.html

    ---


    <p>
      I&#39;ve been considering putting together a video screencast sharing some
      thoughts on web UI components, covering the case for why we need them, some
      limited solutions today, the prospects for the Web Components standard, and
      the principles behind my own work on the
      <a href="https://quickui.org">QuickUI</a> web component framework. It&#39;s
      been my experiencing that producing even a very short video takes gobs of
      time, but it occurred to me that I could break up the talk into short
      segments, perhaps 5 minutes or less in length. As an experiment, I created
      this short (4 minute) intro video:
    </p>

    <p>&#0160;</p>

    <p>
      <iframe
        frameborder="0"
        height="315"
        src="https://www.youtube.com/embed/SnwiFWIhqYA?rel=0"
        width="560"
      ></iframe>
    </p>

    <p>&#0160;</p>

    <p>
      WheneverI speak in group settings, I always find myself sketching ideas on the
      whiteboard, so I thought that a whiteboard talk might be a reasonable format
      for a web video – perhaps that can strike a good balance between something
      that&#39;s engaging while also not incredibly time-consuming to produce. In
      the course of considering how to make such a whiteboard talk, I came across an
      interesting iPad app called <a href="https://doceri.com/">Doceri</a> that lets
      you project your iPad sketches onto a desktop computer. Doceri includes its
      own complete screencast production tool, but unfortunately the audio quality
      of an iPad&#39;s built-in mic isn&#39;t great, and editing on an iPad is
      currently cumbersome. I ended up projecting the Doceri project onto a desktop
      window, capturing the window contents with Camtasia, then laying down the
      audio narration in Camtasia and doing final editing there.
    </p>

    <p>
      I hope you find this short video interesting. If this seems worthwhile, I
      might follow up with additional segments on a semi-regular schedule.
    </p>
  2013-02-27 QuickUI breaks with CoffeeScript 15.html: >
    ---

    title: "QuickUI breaks with CoffeeScript 1.5"

    date: 2013-02-27

    slug: quickui-breaks-with-coffeescript-1-5

    originalUrl: http://blog.quickui.org/2013/02/27/quickui-breaks-with-coffeescript-1-5/

    ---


    <p>
      Bad news: this week's release of CoffeeScript 1.5 is incompatible with even
      the current QuickUI release, 0.9.3.
    </p>

    <p>
      QuickUI goes through
      <a href="http://blog.quickui.org/2012/06/07/jquery-fn-init/"
        >significant trouble to subclass jQuery</a
      >
      because of jQuery's complex constructor. jQuery depends on an unusual feature
      of JavaScript called an "other typed" constructor: a class constructor that
      returns something other than a plain instance of the class being instantiated.
      When the CoffeeScript project considered dropping support for such
      constructors, cases were made to keep that feature (see <a
        href="https://github.com/jashkenas/coffee-script/issues/2359"
        >CoffeeScript issue #2359</a
      >, but other people made similar cases on other issues). However, those
      arguments did not carry the day, and as of CoffeeScript 1.5, "other typed"
      constructors are rejected by the compiler. This effectively breaks the
      CoffeeScript source for QuickUI itself as well as for QuickUI Catalog.
    </p>

    <p>
      Possible fixes are being investigated, but this issue runs very deep, and a
      number of straightforward workarounds have already been ruled out. A real fix
      will likely require a substantial change to the way QuickUI instantiates
      controls. For the time being, it is recommended that QuickUI developers use
      CoffeeScript 1.4.0.
    </p>
2013-05:
  2013-05-13 QuickUI 094 released.html: >
    ---

    title: "QuickUI 0.9.4 released"

    date: 2013-05-13

    slug: quickui-0-9-4-released

    originalUrl: http://blog.quickui.org/2013/05/13/quickui-0-9-4-released/

    ---


    <p>
      This release fixes a number of small bugs in both QuickUI and the QuickUI
      Catalog.
    </p>

    <p>
      The most significant change is in the Control constructor. QuickUI previously
      went through a lot of trouble to
      <a href="http://blog.quickui.org/2012/06/07/jquery-fn-init/"
        >subclass jQuery</a
      >. This code involved patching up a class when an attempt was made to
      instantiate it so that the result would be acceptable to jQuery. Specifically,
      the resulting patched-up class could be instantiated without requiring the
      "new" keyword. This code was quite complex and brittle, and was eventually
      <a
        href="http://blog.quickui.org/2013/02/27/quickui-breaks-with-coffeescript-1-5/"
        >broken by a change to the CoffeeScript 1.5 compiler</a
      >. The CoffeeScript folks graciously backed out that change in CoffeeScript
      1.6 so that QuickUI could continue to function.
    </p>

    <p>
      Meanwhile, a workaround had already begun to drastically simplify the Control
      constructor — in exchange for dropping the ability to instantiate a control
      class' constructor without the "new" keyword. As it turns out, QuickUI
      controls are typically instantiated via the framework itself, either
      declaratively through Control JSON or imperatively by invoking
      Control.create(). Only the framework needed to directly instantiate a control
      class, and so the framework source was updated to always make use of the "new"
      keyword.
    </p>

    <p>
      By the time this workaround was ready for deployment, the CoffeeScript 1.6
      change made that workaround unnecessary. However, because the workaround was
      already working, and had significantly simplified the framework source, it was
      decided to keep the workaround. It was probably still correct for CoffeeScript
      1.6 to back out the earlier breaking change to control constructors in CS 1.5.
      As this experience shows, the change not only dictated what CoffeeScript
      developers could do, it prevented or impaired their ability to integrated with
      plain JavaScript libraries which made use of "other typed" constructors.
    </p>

    <p>
      In general, despite this constructor change deep in the framework, QuickUI
      developers should generally observe no changes in framework behavior.
    </p>

    <p>
      The QuickUI Catalog has a few small bug fixes, but the version number has been
      bumped to 0.9.4.0 to keep in sync with the new version number for QuickUI
      0.9.4.
    </p>
2013-06:
  2013-06-03 Quetzal an experimental translation of the QuickUI component model to HTML custom elements.html: >
    
    ---

    title: "Quetzal: an experimental translation of the QuickUI component model to HTML custom elements"

    date: 2013-06-03

    slug: quetzal-an-experimental-translation-of-quickui-component-model-to-html-custom-elements

    originalUrl: http://blog.quickui.org/2013/06/03/quetzal-an-experimental-translation-of-quickui-component-model-to-html-custom-elements/

    ---


    <p>
      I've started an experiment called <a
        href="http://janmiksovsky.github.io/quetzal/"
        >Quetzal</a
      > that considers translating the core concepts from QuickUI to the proposed
      web component standards currently embodied by Polymer.
    </p>

    <p>
      <i
        >[<b>Update</b> June 13, 2014: The Quetzal project has grown into an open
        source project called
        <a href="https://github.com/basic-web-components/components-dev/wiki"
          >Basic Web Components</a
        >. Please take a look!]</i
      >
    </p>

    <p>
      While continuing working on QuickUI, I've been tracking the progress of the
      Google-led efforts on web components: custom elements, Shadow DOM, and related
      advances in the web platform. Those technologies address many of the same
      issues QuickUI addresses, so I've been trying to chart a path by which QuickUI
      and web components could co-evolve.
    </p>

    <p>
      Until recently, those web component technologies were generally available only
      on Google Chrome, which means QuickUI can't rely on them. However, since the
      start of the year I've been watching Google's
      <a href="http://www.polymer-project.org/">Polymer project</a> which, among
      other things, offers a suite of polyfills that allows one to create and use
      components in the
      <a href="http://www.polymer-project.org/compatibility.html"
        >other "modern" browsers</a
      >, including recent versions of Safari, Firefox, and Internet Explorer 10+.
      Polymer offers a fairly compelling story for using those future browser
      technologies today.
    </p>

    <p>
      I've spent a bit of time looking at how to retrofit support for Shadow DOM and
      other aspects of web components into QuickUI. While that's led to some
      progress, I'm not entirely sure that that's the best approach. To ensure this
      is being done the best way, I'd like to try an alternative approach build from
      scratch directly on top of a custom element substrate. That experiment is
      Quetzal.
    </p>

    <p>
      There are a number of aspects of QuickUI that I believe are quite compelling,
      and which are either not easily supported in the proposed web standards, or
      appear under-represented in the current body of web components work. My goal
      in Quetzal is to explore whether those aspects of QuickUI have meaning in the
      world of web components, and what's the best way to bring those benefits
      forward. Some of those aspects of QuickUI I would very much like to see
      carried forward to the world of custom elements are:
    </p>

    <ul>
      <li>
        A focus on subclassing as a means to achieve well-factored code, including a
        good separation of concerns. This includes an approach to populating the DOM
        in which an element class can
        <a href="https://quickui.org/docs/rendering.html"
          >fill in properties and content slots defined by their base classes</a
        >.
      </li>
      <li>
        The ability to concisely define component appearance and behavior in script
        instead of markup. While the &lt;element&gt; syntax is part of the standard,
        and therefore a useful baseline, markup feels limiting compared to what's
        possible in script. A compact JavaScript object format can be at least as
        expressive, and possibly more expressive, than HTML.
      </li>
      <li>
        A convention for
        <a href="http://blog.quickui.org/2012/07/02/web-component-properties/"
          >multiple, named, DOM-valued properties</a
        >.
      </li>
      <li>
        The ability to
        <a
          href="http://blog.quickui.org/2012/04/27/how-quickui-controls-use-code-to-specialize-the-handling-of-their-content-in-ways-that-might-not-be-supported-by-web-components/"
          >run code when an element's contents change</a
        >.
      </li>
      <li>
        Syntactic sugar for quickly defining common types of component properties.
      </li>
      <li>
        Helper functions for tasks that come up often in UI component design. This
        includes, for example, a lightweight model by which an element can respond
        to changes in its size in order to perform custom layout.
      </li>
      <li>
        A significant library of well-designed web user interface components,
        including a large number of useful base classes that people can use directly
        as the starting point for their own work.
      </li>
    </ul>

    <p>
      The Quetzal experiment seeks to preserve the above features, while still
      allowing a designer or developer to create new custom elements which can
      interoperate with custom elements created by any other means (e.g., as Polymer
      elements). Some early technical decisions for Quetzal:
    </p>

    <ul>
      <li>
        <span style="font-style: inherit; line-height: 1.625"
          >I'm leaving jQuery out of Quetzal. I'll go into that decision in
          <a
            href="http://blog.quickui.org/2013/06/04/do-web-component-developers-still-need-jquery/"
            >more detail later</a
          >, but the bottom line is that jQuery no longer seems absolutely necessary
          for web development. When QuickUI began back in 2007, jQuery was a vital
          cross-browser abstraction layer, but browsers have become a lot more
          consistent in the intervening years. If you look at the browsers currently
          supported by Polymer, the core DOM API appears consistent enough that it's
          not overly cumbersome to use directly. And while any custom element
          library should support jQuery use, it would be nice if jQuery weren't a
          requirement.</span
        >
      </li>
      <li>
        For the time being, Quetzal is written in CoffeeScript rather than plain
        JavaScript. I find CoffeeScript much more expressive, more productive, and
        easier to think in than plain JavaScript. As with QuickUI (which is also
        written in CoffeeScript), Quetzal elements can of course be created and
        extended in plain JavaScript. Still, I recognize that using CoffeeScript
        limits one's audience. If Quetzal were to evolve to be a real open source
        project, I might feel the need to back-port it to JavaScript.
      </li>
      <li>
        Quetzal only relies on the lower-level platform.js library created by the
        Polymer project, rather than the higher-level polymer.js library or the
        (higher still) library of Polymer elements. The
        <a href="http://www.polymer-project.org/">Polymer home page</a> currently
        includes an architectural diagram illustrating the relationship between
        these two libraries. Quetzal builds on the lowest, red-colored platform.js
        level, not the higher yellow or green levels. In this regard, Quetzal is
        comparable to Polymer elements. Because both rely on web standards, the
        results should be easily interoperable. As a side effect, Quetzal should
        also help prove out the ability of someone other than Google to build a UI
        component framework on top of platform.js.
      </li>
      <li>
        I'm currently working and testing primarily in Chrome. At various points, I
        check to make sure Polymer is polyfilling everything correctly under other
        browsers, but at this early stage, it's likely stuff will appear wonky in
        other browsers.
      </li>
    </ul>

    <p>
      Quetzal isn't ready for real use yet: it does just a few things at this stage,
      it's not document, it's buggy, it doesn't work cross-browser (even with
      polyfilled custom elements), etc. But I wanted to announce the experiment now
      so that I can follow up here with additional posts as I go along. Work on
      Quetzal is generating questions I want to ask others, and to provide context
      for those things it's going to be helpful to be able to reference Quetzal
      posts here and source code on GitHub. After exploring some ideas, Quetzal's
      useful life may come to an end, or its lessons might get folded back into
      QuickUI, or it may evolve into a library of Polymer elements.
    </p>

    <p>
      If you're interested in following along, subscribe to this blog, and/or follow
      me on <a href="https://twitter.com/JanMiksovsky">Twitter</a> and
      <a href="https://plus.google.com/118102862690539596548">Google+</a>.
    </p>

    <p>Cheers, Jan Miksovsky</p>
  2013-06-04 Do web component developers still need jQuery.html: >
    
    ---

    title: "Do web component developers still need jQuery"

    date: 2013-06-04

    slug: do-web-component-developers-still-need-jquery

    originalUrl: http://blog.quickui.org/2013/06/04/do-web-component-developers-still-need-jquery/

    ---


    <p>
      <em
        >I love you, jQuery. But maybe it's time we started spending some time
        apart.</em
      >
    </p>

    <p>
      Improvements in cross-browser feature set and compatibility are reducing the
      need for jQuery, but more importantly, it turns out that a component-based app
      needs very little jQuery to begin with. These insights led to one of the first
      decisions I hit in
      <a
        href="http://blog.quickui.org/2013/06/03/quetzal-an-experimental-translation-of-quickui-component-model-to-html-custom-elements/"
        >starting Quetzal</a
      >: should it require jQuery? The answer, so far, is no.
    </p>

    <p>
      Since its inception in 2007, <a href="https://quickui.org">QuickUI</a> has
      relied on jQuery as a crucial browser abstraction layer. Without jQuery,
      QuickUI would have never have come to exist. However, the QuickUI runtime
      itself only uses a fairly small set of core jQuery functions, and modern
      browsers now deliver standards-based solutions for those situations. Moreover,
      I've noticed that, when building QuickUI component-based apps, component code
      tends to rarely require sophisticated jQuery.
    </p>

    <p>
      Meanwhile, the web has moved forward. The modern browsers — the latest Chrome,
      Safari, Mozilla, and Internet Explorer 10+ — are all much, much more
      consistent to develop for than browsers were six years ago. Glancing at pages
      on
      <a href="http://www.quirksmode.org/dom/w3c_core.html">QuirksMode</a>, one
      generally sees a see of green compliance, with most of the red markers of
      non-compliance for older versions of IE. And according to
      <a href="http://gs.statcounter.com/">StatCounter</a>, market shares for
      both IE 8 and 9 have now dropped below 10% (each), so it's plausible for
      mainstream organizations to justify ignoring them.
    </p>

    <p>
      Let's break down the things jQuery is good at, and consider how necessary are
      in a <em>web component-based</em> application (specifically) targeting the
      modern browsers:
    </p>

    <ul>
      <li>
        <strong>Handling an array of DOM objects.</strong> It's convenient to be
        able to apply a jQuery function or plugin to a jQuery object containing a
        collection of DOM elements. However, modern web languages (CoffeeScript,
        ES6, etc.) provide syntax for iterating over a collection, substantially
        reducing the need for a special library for this purpose. And, while
        jQuery's array model is easy to consume, it also makes writing components
        harder. QuickUI control classes inherit from jQuery, which means every
        QuickUI class method has to consider the possibility it's being applied to
        multiple objects at a time, not just one. In practice, that's been a
        consistent source of complexity and bugs.
      </li>
      <li>
        <strong>Selectors.</strong> The standard querySelector and querySelectorAll
        functions provide a reasonable way to find matching elements. (I believe
        those functions were at least partially inspired by jQuery.) I've heard that
        jQuery's Sizzle engine provides more power than querySelector, but again, in
        a component-based app, you're rarely doing sophisticated searching of the
        DOM. In practice, when I'm writing an app with QuickUI components, I do
        very, very little searching of the DOM. Every QuickUI component already has
        its own reference to exactly the sub-elements it cares about. Polymer does
        something similar with <a
          href="http://www.polymer-project.org/polymer.html#automatic-node-finding"
          >automatic node finding</a
        >. With such facilities in place, there's no need to grovel around in the
        DOM to find something you're looking for. In fact, with Shadow DOM, the
        things you're probably looking for <em>aren't even findable</em>. This is a
        good thing; encapsulation is preventing you from writing brittle code. Every
        time you do a $("#foo"), you're running the risk of picking up the wrong
        #foo — maybe not today, but tomorrow, when someone else adds a #foo element
        somewhere on the page. In Quetzal or Polymer, you never search for something
        like that; a component already has a direct reference (this.$.foo) to the
        element you want to manipulate. Unlike a DOM search, dereferencing is
        instantaneous and 100% reliable.
      </li>
      <li>
        <strong>Traversing. </strong>Ditto. In practice, component subtrees  — that
        is, the set of elements managed <em>directly</em> by a component — just
        aren't that deep. A deep subtree is, in fact, often an indicator that
        component refactoring is in order. It's exactly analogous to the way a
        deeply-nested set of code blocks (conditionals, loops) within a single
        function usually indicates the function should be refactored. Nearly all the
        time a QuickUI component needs to traverse the DOM, it wants to iterate over
        its own set of children — which, as noted above, can now be easily done in a
        modern language with decent syntax.
      </li>
      <li>
        <strong>DOM manipulation.</strong> As browsers have become more consistent
        in the semantics of DOM operations, jQuery feels less necessary here. And
        much of the jQuery DOM manipulations one sees are a means to set up all or
        part of the DOM. in jQuery, one often sees code like: "Find all the divs of
        class '.menuItem', and wrap them, stuff them, and wire them up so that they
        turn into menu items." The existence of web components provides a
        <em>much</em> better way to accomplish the same result. All the population
        can be done through custom elements that provide a template for their DOM.
        That said, jQuery does provide a useful collection of helper functions. For
        example, to me it feels easier to use jQuery's css() method, which can take
        a JavaScript object as a parameter, than use the raw DOM "style" property
        directly. Generally speaking, the DOM API feels more like an old school C
        API, while jQuery feels like a JavaScript API.
      </li>
      <li>
        <strong>Function chaining.</strong> jQuery chaining lets you concisely apply
        a set of selector, traversal, and manipulation operations. In practice, all
        three of those types of operations come up less often in a web
        component-based app. In particular, one often sees long chains of jQuery
        function calls when populating the DOM, but a &lt;template&gt; is a cleaner
        way to do that declaratively. Over the years, in QuickUI apps, I've noticed
        that I use jQuery chaining less and less often, to the point where I only
        rarely take advantage of it today.
      </li>
      <li>
        <strong>Events.</strong> Microsoft IE 9 finally added support for
        addEventListener, so that it's possible to wire up event handlers in a
        consistent way. I expect there are still many discrepancies lurking in the
        details — when each browser decides to fire an event, for example — that
        might prove tricky to work around without an abstraction layer like jQuery
        that can normalize behavior.
      </li>
      <li>
        <strong>Effects.</strong> CSS transitions and transition events now provide
        an easy, cross-browser way to do many of the same effects jQuery was first
        noted for. For years, the jQuery home page used to have a simple demo which,
        when you clicked a button, made a new DOM element appear with a transition
        effect. Such effects are now easily achievable without jQuery.
      </li>
      <li>
        <strong>Data.</strong> jQuery provided a useful $.data service to associate
        data with DOM elements, because a browser's garbage collector can get
        confused when DOM elements and JavaScript objects reference each other. The
        various browsers also had myriad bugs and inconsistencies with regard to
        extending DOM elements. So UI framework developers like those on Prototype
        <a href="http://perfectionkills.com/whats-wrong-with-extending-the-dom/"
          >gave up on extending the DOM</a
        >. However, as far as I can tell from the way Polymer is tackling things,
        extending the DOM now appears to work (generally) as expected. So perhaps
        $.data is no longer necessary.
      </li>
      <li>
        <strong>Ajax.</strong> I don't write a ton of Ajax code myself, so for
        argument's sake, let's stipulate that jQuery's Ajax wrappers are handier
        than directly working with XMLHttpRequest. In particular, jQuery's use of
        promises as a data type simplify the task of writing async code. Perhaps for
        the time being, this particular aspect of jQuery is worth using on its own.
        A proposed browser standard for
        <a href="http://dom.spec.whatwg.org/#futures">futures</a> may reduce that
        benefit, however.
      </li>
      <li>
        <strong>Plugins.</strong> Many, many of the jQuery plugins that exist today
        essentially create component-like things. These plugins effectively
        constitute a DOM template with some packaged behavior. I'd argue that a web
        component is a clearer, more maintainable way to achieve the same result.
        Encapsulation, in particular, is a huge advance to providing robust
        components. Moreover, many other uses for plugins could now be achieved by
        extending DOM elements directly.
      </li>
    </ul>

    <p>
      Generally speaking, in a component-based app, you want to give each component
      the responsibility for managing its own appearance and behavior. You don't
      want code walking all over the DOM tree and mucking around with things that
      aren't its direct responsibility. Instead, you talk to the component managing
      the part of the DOM you care about, and ask that <em>component</em> to
      manipulate the elements it directly owns. In classic object-oriented
      programming terms, this is an application of the <a
        href="http://en.wikipedia.org/wiki/Law_of_Demeter"
        >Law of Demeter</a
      >.
    </p>

    <p>
      In practice, compartmentalizing things that way leaves each component doing
      very simple manipulations on a comparatively small set of elements:
      instantiating a new element; iterating over its own children; applying or
      removing a style; etc. If a component wants to do something more sophisticated
      to its internals, more likely than not the component should delegate that
      operation to one of its own sub-components. The component's own need to search
      is limited, reducing the need for a powerful selector/traversal engine. And,
      given a reasonably good programming language, simple DOM manipulations can be
      performed effectively — and with better performance — by directly accessing
      the DOM API.
    </p>

    <p>
      I'm no cross-browser DOM API expert, and I've only just started to try to do
      things without jQuery. I could easily hit a landmine tomorrow, tripping
      upon some cross-browser nastiness I've been blithely unaware of, which
      jQuery for years has been invisibly and reliably been protecting me from. That
      said, work on Quetzal is progressing fairly smoothly without jQuery, and a
      week or two into this project, I'm not missing most of jQuery. It
      <em>would</em> be nice to have a much smaller library of helper functions
      which present a more JavaScript-flavored approach to the DOM API, as in
      jQuery's css(), mentioned above.
    </p>

    <p>
      From one standpoint, you could say I've just traded one browser abstraction
      layer (jQuery) for another (Polymer's platform.js). However, platform.js feels
      like a pretty different animal than jQuery:
    </p>

    <ul>
      <li>
        The beauty of Polymer's approach of polyfilling forthcoming web standards in
        older browsers is that you can write code against the abstraction layer
        today that should invisibly start working against native implementations
        where and when those exist. It's still early, and that promise remains to be
        proven — but that's a very compelling promise.
      </li>
      <li>
        Those future standards mean you're working with facilities that someday
        every other developer will have (whether they want them or not). You're
        writing code on top of a library that could get smaller over time, not
        larger.
      </li>
      <li>
        The other difference with platform.js, as far as today's web component
        developers are concerned, is that it's really the only game in town. Unless
        you have the luxury of targeting the latest release of Chrome, you'll need
        to use platform.js (or the complete polymer.js) to run on other browsers.
      </li>
      <li>
        If one's goal is to write components that many people will use, it makes
        sense to reduce the number of additional dependencies. If jQuery's not
        required, then the lack of that dependency to some degree facilitates
        sharing.
      </li>
    </ul>

    <p>
      We'll see how the Quetzal experiment evolves, but so far, writing directly to
      the DOM API is working out okay.
    </p>

    <p>
      <em
        >So, jQuery, maybe we should spend some time apart.<em
          > <em>Maybe we should see some other people. </em>It's not you — it's
          me!</em
        > Don't worry; I might miss you terribly and come running back. Or maybe
        we'll just be friends.</em
      >
    </p>

    <p>
      <em>It's okay. We'll always have IE6.</em>
    </p>
  2013-06-11 Puzzle Define HTML custom element subclasses that can fill in base class insertion points.html: >
    
    ---

    title: "Puzzle: Define HTML custom element subclasses that can fill in base class insertion points"

    date: 2013-06-11

    slug: puzzle-define-html-custom-element-subclasses-that-can-fill-in-base-class-insertion-points

    originalUrl: http://blog.quickui.org/2013/06/11/puzzle-define-html-custom-element-subclasses-that-can-fill-in-base-class-insertion-points/

    ---


    <p>
      This post presents a little web component architectural puzzle which I've come
      across in the early stages of creating <a
        href="http://janmiksovsky.github.io/quetzal"
        >Quetzal</a
      >. The puzzle deals with how Quetzal should best deliver an important
      component service on an HTML custom element substrate, and relates
      specifically to subclassing semantics. Any suggestions or comments would be
      much appreciated.
    </p>

    <h1>Background on the puzzle</h1>

    <p>
      Quetzal is an attempt to deliver key features of the QuickUI component model
      in HTML custom elements. One such feature is that an element subclass should
      be able to easily populate a slot (insertion points, in HTML parlance) defined
      by a base class. In practice, there are many situations in which you want to
      be able to say, "This new UI component should be just like that existing UI
      component, only with some stuff pre-filled in." For example:
    </p>

    <ul>
      <li>
        The QuickUI documentation presents a
        <a href="https://quickui.org/docs/rendering.html"
          >simple page template example</a
        > in which classes in a small page template hierarchy fill in specific bits
        of their parents classes.
      </li>
      <li>
        A <a href="https://quickui.org/catalog/DateComboBox">DateComboBox</a> fills
        in the popup portion of a
        <a href="https://quickui.org/catalog/ComboBox">ComboBox</a>, which in turn
        is filling the content portion of a
        <a href="https://quickui.org/catalog/PopupSource">PopupSource</a>. This same
        facility is also used throughout the QuickUI Catalog. Moreover, it is used
        in many QuickUI apps in which a stock Catalog component is specialized for
        the app's context.
      </li>
      <li>
        Along those same lines, this same issue should crop up in any organization
        that tries to create a library of standard components which implement the
        organization's visual design language. Suppose your site's designer has
        created a cool button class as an HTML custom element, and you have used
        that to create an Add to Cart button. You write some script so the button
        can show <em>inside the button</em> the existing number of items in a
        customer's online shopping cart (to the right of the button label, say). You
        now want to package up the Add to Cart button so that it can be used as a
        component in its own right. For flexibility, you want the button's text
        label to vary in places.
      </li>
    </ul>

    <p>
      Well-defined subclassing semantics are essential for creating a UI component
      library with a good separation of concerns. If you look at the class hierarchy
      depicted for DateComboBox (above), you'll get a sense of the degree to which
      it's possible to portion out specific roles to a small constellation of
      classes, such that each class can focus on just doing one thing really well.
      I'm hoping that it is possible to take advantage of such subclassing semantics
      in HTML custom elements — but it's not proving to be particularly easy.
    </p>

    <h1>The puzzle</h1>

    <p>
      The puzzle is to come up with an architecture for custom element subclasses
      that meets the following design criteria:
    </p>

    <ol>
      <li>
        An instance of a subclass is a proper instance of its base class. All the
        normal JavaScript stuff should work: property/method access should go up the
        prototype chain, and a subclass instance should report that it is
        an "instanceof" the base class. By default, the HTML &lt;element&gt; syntax
        permits an "extends" attribute to identify a base class, but a purely
        script-based solution that sets up the class hierarchy correctly is equally
        valid.
      </li>
      <li>
        A subclass can put stuff into an insertion point defined by the base class.
        That is, the subclass can fill in a slot (or slots) defined by a base class.
        In turn, the subclass should be able to redefine such an insertion point so
        that the subclass itself can be subclassed.
      </li>
      <li>
        Unless overridden, all base class behavior should function properly in an
        instance of the subclass. E.g., if the base class wires up an event handler,
        then this works as expected for subclass instances too.
      </li>
      <li>
        Base class properties/methods can be overridden by the subclass. A subclass'
        property/method implementation should be able to invoke the base class'
        implementation by whatever language means are necessary. (CoffeeScript
        provides sugar for this; plain JavaScript developers have alternate ways of
        achieving the same result.)
      </li>
      <li>
        The base class can be any HTML custom element class; the base class author
        shouldn't<em> </em>have to do special work <em>a priori</em> to enable this
        kind of subclassing. This ensures a Quetzal author can always use someone
        else's element class as a base class — even if that other person has never
        heard of Quetzal.
      </li>
    </ol>

    <p>
      A successful solution needs to meet all five of these criteria. So far, the
      approaches I've tried can satisfy at most four at a time.
    </p>

    <h1>Example</h1>

    <p>
      Let's walk through a example from the small set of custom elements currently
      shown on the <a href="http://janmiksovsky.github.io/quetzal"
        >Quetzal home page</a
      >. This set includes a base element class called quetzal-button that shows its
      content inside a button, and another element class called icon-button which
      adds an icon to the plain-button content. For clarity, here let's just call
      that base class plain-button instead of quetzal-button, since the following
      source won't actually involve Quetzal. In any event, we want markup like this:
    </p>

    <pre>

    &lt;plain-button&gt;Plain button&lt;/plain-button&gt;

    &lt;icon-button icon="document.png"&gt;Icon button&lt;/icon-button&gt;</pre

    >

    <p>… to produce something like this:</p>

    <img alt="Buttons" src="/images/quickui/buttons.png" />


    <p>
      Where icon-button is reusing all the styling and behavior from plain-button;
      it's <em>not</em> duplicating the styling and behavior. The challenge is to
      create the icon-button element so it both inherits (in the class sense) from
      plain-button <em>and</em> extends the visual representation of plain-button.
    </p>

    <h1>A partial solution to filling in base class insertion points</h1>

    <p>
      The first challenge is: how can icon-button add elements to the content shown
      by plain-button? Some approaches:
    </p>

    <ol>
      <li>
        We could try to apply the template for <em>both</em> plain-button and
        icon-button to the same host element. The Shadow DOM spec supports <a
          href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#multiple-shadow-trees"
          >multiple shadow trees attached to the same host</a
        >. This feature alone is insufficient for the above example. Unless one
        shadow tree takes care to incorporate the other somehow, the most
        recently-added shadow subtree wins. If plain-button renders last, we get a
        button but no icon; if icon-button renders last, we get an icon but no
        button.
      </li>
      <li>
        We can include a &lt;shadow&gt; element in the template for icon-button, and
        ensure plain-button renders its shadow subtree first. The &lt;shadow&gt;
        element allows icon-button to effectively include the representation for
        plain-button. Unfortunately, this inclusion effectively <em>wraps</em> the
        base representation, rather than filling it in. An icon-button does get a
        button and an icon, but the icon and content render <em>outside</em> an
        empty button: <img alt="shadow" src="/images/quickui/shadow.png" />
      </li>
      <li>
        We can have icon-button create an instance of its own base class, then have
        that instance contain the icon and the icon-button's own content. (This
        approach is based on a suggestion from Shadow DOM spec author Dimitri
        Glazkov.)
      </li>
    </ol>

    <p>
      Approach #3 does what we want from a strictly visual perspective. (Behavior is
      a separate matter.) The source for a Polymer element version of this approach
      looks something like:
    </p>

    <pre>

    &lt;element name="plain-button" extends="button"&gt;
        &lt;template&gt;
            &lt;button&gt;
                &lt;content&gt;&lt;/content&gt;
            &lt;/button&gt;
        &lt;/template&gt;
        …
    &lt;/element&gt;


    &lt;element name="icon-button" extends="plain-button" attributes="icon"&gt;
        &lt;template&gt;
            &lt;plain-button&gt;
                &lt;img src="{{icon}}"&gt;
                &lt;content&gt;&lt;/content&gt;
            &lt;/plain-button&gt;
        &lt;/template&gt;
        …
    &lt;/element&gt;</pre

    >

    <p>
      See a <a href="http://jsbin.com/unutay/1/edit">live example of this</a>. It
      should work in most browsers, but use Chrome if you want to see it working
      with real Shadow DOM. (Note: a <a
        href="https://code.google.com/p/chromium/issues/detail?id=244869"
        >Chrome bug</a
      > prevents the buttons from responding correctly to mouse interactions. The
      buttons do receive mouse events, but for now it just doesn't look that way.)
    </p>

    <p>
      If you open the example and inspect it in Chrome dev tools, you'll see that an
      icon-button has a shadow subtree containing a plain-button; the plain-button
      contains its own shadow subtree. Content of an &lt;icon-button&gt; element is
      therefore distributed <em>twice</em>: once into the &lt;plain-button&gt;
      element, and then again into the native &lt;button&gt; element. The ability of
      Shadow DOM to distribute nodes multiple times is called
      <a href="http://www.w3.org/TR/shadow-dom/#reprojection">reprojection</a>. (Or,
      at least, it meets the definition of reprojection as I understand it: "when an
      insertion point is a child node of another shadow host".)
    </p>

    <h1><strong>Inheritance versus containment</strong></h1>

    <p>
      Unfortunately, while this approach looks right, it doesn't behave quite right.
      An icon-button here is not only an instance of plain-button, it also
      contains a plain-button. That's problematic.
    </p>

    <ol>
      <li>
        When icon-button instantiates its inner plain-button, the inner button has
        no way to know its relationship to icon-button. Among other things, this
        means icon-button can't easily override behavior defined by plain-button
        (one of the design criteria above). In the JS Bin example, you can turn on
        the Console pane to see debug output. The plain-button element class defines
        a readyCallback (in Polymer, "ready") that invokes a base class method
        called log(). The icon-button class overrides that log() method, but because
        the inner plain-button is just that — a plain-button — its readyCallback
        will invoke the base plain-button implementation of log() instead of
        icon-button's specialized log() implementation. Running the demo invokes
        log() four times, when: 1) creating an instance of plain-button to use as
        the prototype for icon-button, 2) creating the visible plain-button with
        text "Plain button", 3) creating the inner plain-button used by the visible
        icon-button, and 4) creating the visible icon-button with text "Icon
        button". It's #3 and #4 together that are the problem: what we really wanted
        to do is invoke icon-button's log() implementation once.
      </li>
      <li>
        Automatic element references (a la Polymer, and also in Quetzal) aren't
        inherited by default. If plain-button defines an element with id #foo, then
        plain-button methods can access that element via the automatic reference
        this.$.foo. Similarly, we want an icon-button to have access to the same
        reference this.$.foo defined by the base class. (Or, at least, we can debate
        whether such automatic references should be treated as "private" or
        "protected", but it seems to me that "protected" would be useful.) It's
        possible to work around this particular issue for a known set of frameworks
        — that is, Quetzal could workaround this problem for its own classes, and
        perhaps for those defined by Polymer — but it wouldn't work in the general
        case of an unknown framework.
      </li>
      <li>
        It's easy to end up in situations where both icon-button and plain-button
        are duplicating work. Suppose an icon-button method invokes a super-method
        of the same name defined by plain-button, and suppose the base
        implementation of that method performs expensive work or obtains a reference
        to some resource. When the inner plain-button is instantiated, it might do
        that work — and then the same work or allocation might be repeated by the
        outer icon-button when it invokes the super-method. Conventions could be
        established to avoid this, but it would complicate otherwise simple
        situations, and again make it hard to use subclass elements from other
        frameworks.
      </li>
      <li>
        As a common case of the above point, if the inner plain-button wires up an
        event handler, then it's easy to end up in situations where the event is
        bound by both the inner plain-button and the outer icon-button. If the event
        bubbles up from something inside plain-button (a click on the button, say),
        you would end up handling the same event twice.
      </li>
    </ol>

    <p>
      We could try to simplify things by just <em>containing</em> an plain-button,
      and not deriving from it. This forces us to give up one of the original design
      criteria outlined above: an instance of icon-button wouldn't actually appear
      to be an "instanceof" plain-button. Moreover, if plain-button defined some
      attributes ("disabled", say), icon-button would have to explicitly handle
      those too and forward their implementation to the inner plain-button.
    </p>

    <p>
      We could have icon-button create a placeholder element (a &lt;div&gt;, say),
      create a shadow root for it, and populate that root with a copy of
      plain-button's template but
      <em>without</em> actually instantiating that inner element as a real, live
      plain-button. This is the approach that Quetzal currently uses. It solves a
      number of problems, but is dependent on knowing how a given base element class
      works. Quetzal reaches into the base class' implementation to obtain its
      template and then clones it, which might not be possible with other
      frameworks. This violates one of the design criteria above.
    </p>

    <p>
      We could create a temporary instance of plain-button elsewhere, then clone
      just its contents into the icon-button instance. This avoids requiring
      detailed knowledge of what the base class is doing. But it could also result
      in subtle problems. E.g., the base class might not be expecting to have to
      serialize all its state into its shadow subtree, in which case the cloned
      content might not represent a coherent instance of the base class.
    </p>


    <h1>Looking for suggestions</h1>

    <p>
      This post is effectively a form of <a
        href="http://en.wikipedia.org/wiki/Rubber_duck_debugging"
        >rubber duck debugging</a
      >. The simple act of writing this up has forced me to better understand the
      problem, and led to consideration of alternate lines of attack. The puzzle
      remains unsolved, however. Given my understanding of custom elements, and the
      design criteria for the puzzle above, I'm not sure whether a solution exists.
    </p>

    <p>
      It's theoretically possible I've hit some limit in the expressiveness
      permitted to custom elements in their current state. Perhaps that limitation
      could be addressed. If not, I'd  have to write off a big chunk of the
      solutions used by the QuickUI Catalog and QuickUI apps, and find alternate
      ways of meeting the same needs.
    </p>

    <p>
      I'm hoping, however, that I'm just missing something. If you have some passing
      familiarity with HTML custom elements and Shadow DOM, and have ideas about how
      to approach this problem within the existing technology, I'd love to hear
      them!
    </p>
2013-07:
  "2013-07-15 If we created an open library of web components for all general-purpose UI patterns, how many would there be.html": >
    
    ---

    title: "If we created an open library of web components for all general-purpose UI patterns, how many would there be?"

    date: 2013-07-15

    slug: how-many-general-purpose-ui-components

    originalUrl: https://miksovsky.blogs.com/flowstate/2013/07/how-many-general-purpose-ui-components.html

    ---


    <p>
      Wouldn’t it incredibly helpful if we had a library of components providing
      solid implementations for all the common, general-purpose, well-designed user
      interface patterns found in mobile and web apps? In such a library, how many
      components would there even be?
    </p>

    <p>
      Regardless of the exact number, I think it’s clear that a comprehensive set of
      such patterns would be much larger than what’s available in most UI component
      libraries. Why is that are most existing UI libraries so <em>small</em>?
    </p>

    <p>
      There are a few different kinds of UI libraries; let’s look at each in turn.
    </p>

    <h2><strong>Operating system UI libraries</strong></h2>

    <p>
      Every software operating system (Windows, OS X, Android, iOS, etc.) offers a
      library of user interface components. These help the platform’s developers be
      more efficient — but more critically, these libraries establish the visual and
      behavior language for their respective platforms. That is, they provide
      sufficient components such that native and third-party apps can present
      customers a reasonably consistent user experience.
    </p>

    <p>
      OS UI libraries usually aren’t that big, though, often something in the
      neighborhood of 20–40 components. These include components for tried-and-true
      UI patterns: check boxes, radio buttons, combo boxes, tabs, menu bars,
      sliders, progress indicators, and so on.
    </p>

    <p>
      But OS UI libraries seldom go far beyond that. Once the platform has been
      established, the platform vendor has little incentive to invest more work in
      their platform’s UI component library. When my startup began working on an iOS
      app, for example, I was stunned to discover just how few of the conventions of
      that platform were directly facilitated by iOS itself.
    </p>

    <p>
      Even when an innovation such as, say, pull-to-refresh emerges in a mobile app
      like Tweetie and is widely emulated to the point where it becomes a de facto
      mobile UI standard, the UI innovation rarely makes it back into the platform
      itself. If it does make it into the platform, that step usually takes a very
      long time. Tweetie came out in 2008. Apple finally added UIRefreshControl to
      iOS 6 in 2012 — an eon later in mobile Internet time.
    </p>

    <p>
      Another reason why OS libraries may have been so limited historically is that
      theming native UI components has been hard. Many operating systems conflate UI
      component appearance with component behavior, so it’s impossible (or hard) to
      get something that behaves just like a standard toolbar (with docking, etc.),
      but looks significantly different. And once you get much more complex than,
      say, a text box, a designer wants more control over visual appearance. To get
      a visually distinct result, the developer usually have to build something from
      scratch. The web has an advantage here with CSS, which helps separate
      presentation from structure and behavior. So you’d think web UI libraries
      would be bigger — but they’re usually not.
    </p>

    <h2><strong>General-purpose web UI libraries</strong></h2>

    <p>
      Web UI libraries (e.g., jQuery UI) operate under different constraints.
      They’re not really focused on ensuring a consistent user experience; even if a
      library is pretty successful, it’s still unlikely to significantly impact the
      user experience of the web at large. Rather, the primary goal of most web UI
      libraries is increasing developer efficiency. Devs don’t want to spend time
      rewriting modal dialog logic that’s been written many times before; a library
      providing a pre-authored dialog component can help them create dialogs more
      quickly.
    </p>

    <p>
      Curiously, most web UI libraries still still end up with about the same number
      of 20–40 components as platform libraries. Possible explanations:
    </p>

    <ul>
      <li>
        Web libraries follow the example of platform libraries. It is turns out to
        be quite hard to think systematically about a large realm of user interfaces
        and identify the best decomposition of atomic elements that could most
        efficiently recreate it from scratch. It’s easier to emulate a set of
        elements someone else has already worked out in other UI libraries.
      </li>
      <li>
        The limitations of HTML itself and the legacy of browser incompatibility
        have heretofore constrained the set of interesting components which can be
        created and easily integrated into other applications. These limitations
        have dampened the network effects required for a large component collection
        to gain critical mass.
      </li>
      <li>
        The cost of maintaining the existing components increases with the number of
        components. By the time a library approaches a few dozen components, a small
        project’s entire bandwidth may be consumed by ongoing maintenance.
      </li>
      <li>
        It becomes harder to maintain a library’s internal consistency with each
        additional component. A library&#39;s authors want consistent
        implementations and public APIs across all components in the library.
        Occasionally a new component forces reconsideration of the existing
        components, necessitating refactoring. Eventually the cost of adding a new
        component may become prohibitive.
      </li>
      <li>
        Creating solid, general-purpose UI components is unglamorous, tiresome, and
        thankless work. Oh, and unprofitable, too.
      </li>
    </ul>

    <p>
      The answer may be some combination of these factors, but that doesn’t make the
      result any more satisfying. It’s still frustrating that no open web UI library
      is really comprehensive. The last three points, in particular, all apply
      equally well to any open web library operating below the level of the visible
      UI, and many of those have grown quite large.
    </p>

    <h2><strong>Framework sample UI libraries</strong></h2>

    <p>
      Some web UI libraries exist for a different reason: to provide samples of
      components which can be built with a given web framework. Components in such
      libraries effectively serve as framework documentation, and also as test cases
      for the framework. Their ability to simply function is what ensures other devs
      can build interesting, functioning components with the framework. While a few
      people may find the components interesting to use in their own right, that’s
      not really their main purpose.
    </p>

    <p>
      To these ends, sample components tend to be somewhat specialized in their
      purpose. The trouble with creatint really good general-purpose UI components
      as sample is that such components are often fiendishly complex under the hood.
      They must exhaustively cover a wide range of configurations and edge cases,
      and such complexity can obscure or confuse the use of the underlying
      framework, which is the primary goal of the library. The result is that sample
      components tend to look visually interesting, but often aren’t directly
      reusable.
    </p>

    <p>
      In any event, here again we see a fairly small number of components. Once the
      framework developers have delivered 10–20 examples, they may have already
      achieved good coverage of the framework’s features and provided ample sample
      code, so there’s little incentive to invest in creating more components.
    </p>

    <h2><strong>Why can’t we just do all the common UI patterns?</strong></h2>

    <p>
      I think a compelling criteria for a open web UI library would be to say:
      &quot;This library tries to provide all the UI patterns in widespread use on
      the web.&quot; That is, if a UI pattern appears in some reasonably interesting
      percentage of popular apps, then the library should provide a component
      delivering a solid baseline implementation of that UI pattern.
    </p>

    <p>
      A comprehensive web UI component library sounds ambitious, but it’s not crazy.
      It&#39;s probably only an order of magnitude bigger than the tens of
      components in the OS and web UI libraries described above.
    </p>

    <p>
      When I first started on the
      <a href="https://quickui.org/catalog">QuickUI Catalog</a>, my hope was to
      eventually create exactly that: a home for solid implementations of all common
      UI patterns. For a while now I’ve been looking at the emerging collection of
      web component technology standards to see if they can provide a good substrate
      for such a collection. The technologies are still coming together, but it now
      appears likely that a comprehensive UI library could indeed be delivered as
      standard web components. In the short term at least, such a library would need
      to be augmented with Google’s innovative and compelling
      <a href="http://www.polymer-project.org/">Polymer project</a>, which allows
      new web technologies like custom elements to function on older browsers.
    </p>

    <h2><strong>Compiling a comprehensive list of UI patterns</strong></h2>

    <p>
      To help make the case a comprehensive UI library is achievable, I’ve been
      compiling a list of every UI pattern I can find that seems common,
      general-purpose, and well-designed. Some notes on these criteria:
    </p>

    <ul>
      <li>
        Common: the UI pattern has to be something you encounter in multiple
        apps/sites. If a particular app invents some clever bit of UI, but it’s so
        unique to the app’s context that it’s not used (or can’t be used) elsewhere,
        it doesn’t belong in the library.
      </li>
      <li>
        General-purpose: the pattern has to be applicable in multiple contexts and
        interesting in a range of products. Broadly speaking, this criteria
        generally excludes components which are directly bound to a proprietary web
        service. While a Facebook Like button component is certainly interesting and
        common, it’s tied to Facebook’s backend, and hence (in this context) not
        considered general purpose. In contrast, a UI component that shows blog
        headlines via RSS <em>is</em> defined as general purpose, because it can be
        used with any backend supporting RSS.
      </li>
      <li>
        Well-designed. There are some common, general-purpose UI patterns that also
        happen to be terrible. There’s no need to make these more prevalent.
      </li>
    </ul>

    <p>
      Beyond conventional web UI patterns, I want this list to include mobile UI
      patterns, even those typically implemented in native code. My belief is that a
      mobile web app should be able to do anything a native mobile app can do, so
      I’d prefer to include (native) mobile UI patterns from the start.
    </p>

    <p>
      This list comes from direct experience, as well as combing through various
      collections of UI patterns on the web. It’s by no means complete, but I think
      it can already serve to help estimate the initial size of such a library.
    </p>

    <p>Without further ado, the list currently stands as follows...</p>

    <h2>
      <strong>An initial list of common, general-purpose web UI patterns</strong>
    </h2>

    <ol>
      <li>
        Accordion. A list that can have a single item or multiple items expanded to
        show more detail.
      </li>
      <li>
        Alphabetic indices. Renders the characters in a culture’s alphabet in
        standard order (e.g., as a vertical or horizontal strip). If supplied with a
        set of strings, the UI will disable those characters which are not found as
        the initial character of any string.
      </li>
      <li>
        Async operation button. A button whose caption changes to reflect an
        operation in progress (e.g., changing from “Sign In” to “Signing In...”)
        until the operation completes.
      </li>
      <li>
        Auto-complete. A text input field that helps the user quickly enter strings
        from a known list.
      </li>
      <li>
        Auto-format. Applies a collection of heuristics for formatting text: adding
        smart quotes, converts double hyphens to endashes, etc.
      </li>
      <li>Auto-size text box. A text area that expands to contain its text.</li>
      <li>
        Backdrop. Shows a background region of non-interactive elements behind the
        region’s main contents.
      </li>
      <li>Blog. Shows some or all of the entries in the indicated RSS feed.</li>
      <li>
        Blog headlines. Shows the headlines of some or all of the entries in the
        indicated RSS feed as links to the full articles.
      </li>
      <li>
        Breadcrumb bar. Indicates the user’s position in a navigational hierarchy.
      </li>
      <li>
        Browser specific. Conditionally shows contents based on the browser being
        used and/or whether the current browser supports a given feature.
      </li>
      <li>Calendar day. Shows a single day in a calendar.</li>
      <li>
        Calendar month navigator. Lets the user select a date, typically in the near
        future, by navigating through calendar months.
      </li>
      <li>
        Calendar month. Shows a single month from a calendar as a standard
        seven-column table, taking care to reflect a given culture’s preference for
        the first day of the week.
      </li>
      <li>Calendar months. Shows multiple months from a calendar.</li>
      <li>
        Calendar week. Shows a single week from a calendar as seven days in a row,
        taking care to reflect a given culture’s preference for the first day of the
        week.
      </li>
      <li>
        Carousel. Lets user navigate laterally between panels with a sliding
        transition.
      </li>
      <li>
        Central column. A region whose main central column is fixed in width, and
        horizontally&#0160;centered with respect to the viewport.
      </li>
      <li>
        Checked list box. A list box showing a check box next to each item; the user
        can create a multiple selection by checking the boxes.
      </li>
      <li>
        Close box. A platform-sensitive representation of a button that will close
        the current dialog or window.
      </li>
      <li>
        Closeable panel. Shows information (e.g., a warning, or the result of a
        completed operation) that can be dismissed to remove the panel from the
        visible page.
      </li>
      <li>
        Collapsible panel. A region that can be toggled between collapsed and
        expanded states.
      </li>
      <li>
        Color wheel. Lets the user select a color in a variety of color spaces.
      </li>
      <li>
        Combed text box. A text box sporting tick marks or vertical lines to
        visually indicate how many characters should be entered.
      </li>
      <li>
        Content grid. A region which provides a sense of visual organization by
        dividing its width into a number of columns (e.g., 12) which can be variably
        spanned by content panels.
      </li>
      <li>
        Content transition. When supplied with new content, transitions from the
        existing content to the new content using a common animated transition
        (fade, fade through black, slide, wipe, etc.)
      </li>
      <li>
        Content with banner(s), such as toolbar (on top) or status bar (on the
        bottom).
      </li>
      <li>Content with sidebar(s) on the left and/or right side.</li>
      <li>
        Countdown clock. Represents the time (in days/hours/etc.) until a given
        point in time.
      </li>
      <li>
        Credit card. Asks the user to supply a credit card and performs initial
        validation.
      </li>
      <li>
        Date combo box. Lets the user type a date or choose one from a dropdown
        calendar.
      </li>
      <li>
        Date range calendar. Lets the user select a date range, typically in the
        near future.
      </li>
      <li>
        Date text box. Lets the user type a date in several culture-specific
        formats.
      </li>
      <li>
        Days of week. Shows the names of the seven days of the week using a given
        culture’s day names in short/abbreviated/full format.
      </li>
      <li>
        Delimited list. A list of items interspersed with a decorative element
        (bullet, vertical bar, etc.) for cleaner delineation.
      </li>
      <li>
        Device specific. Conditionally shows contents based on the type of device
        being used and/or device capabilities.
      </li>
      <li>Dialog. A popup window, typically modal.</li>
      <li>Editable in place. An element that supports its own in situ editing.</li>
      <li>
        Editable text. A piece of static text data which can be clicked to produce a
        text box that can then be used to edit the data.
      </li>
      <li>
        Expandable summary. A block of content with a “More” link at bottom;
        clicking this reveals the remainder of the content.
      </li>
      <li>
        Fader. Instead of clipping content, it fades out content on the right or
        bottom edge to suggest additional content exists but could not fit.
      </li>
      <li>
        File uploader. Allows the user to click or drag-and-drop to supply a single
        file for upload.
      </li>
      <li>
        Full screen region. A region supporting a mode in which the region will
        expand to fill the entire screen.
      </li>
      <li>
        Full size-able. A region which fills the viewport, independent of the size
        of the page content.
      </li>
      <li>
        Infinite list. A list which asynchronously loads additional contents as the
        user scrolls.
      </li>
      <li>
        Labeled input. An HTML input control (generally a check box or radio button)
        with an associated clickable label.
      </li>
      <li>
        Lateral navigator. A panel with previous and next arrows on either side,
        allowing the user to navigate laterally through a discrete set of states.
      </li>
      <li>
        Link list. Uses a platform-sensitive presentation of a set of links (or
        items that behave like links).
      </li>
      <li>
        List. Renders each item in a heterogenous set as a vertically stacked set of
        elements.
      </li>
      <li>
        List box. A list that supports single selection, including keyboard
        navigation.
      </li>
      <li>
        List combo box. A combo box which presents its choices as a dropdown list.
      </li>
      <li>
        List with detail pane. A list box showing a set of items, paired with a
        means of showing properties of the selected item. These properties are
        either a pane (usually to the right) on desktop or tablet devices, or a
        separate page on mobile devices with smaller screens.
      </li>
      <li>
        Log. Displays a growing text log showing, for example, the output of an
        ongoing process.
      </li>
      <li>Markdown. Renders a block of Markdown as rich text.</li>
      <li>
        Masked text. A text box which only accepts specified input characters.
      </li>
      <li>Menu bar. A row of menus.</li>
      <li>Menu item. A command in a menu.</li>
      <li>Menu separator. A line separating commands in a menu.</li>
      <li>Menu. A popup menu, often in a menu bar.</li>
      <li>
        Mobile date/time picker. Platform-sensitive collection of elements which
        emulate the platform’s native date/time picker.
      </li>
      <li>Modes. Shows exactly one item at a time.</li>
      <li>
        Month and year. Shows the month and year of a given date in a format
        appropriate for a given culture.
      </li>
      <li>
        Month name. Shows a given culture’s name for the month of a given date.
      </li>
      <li>
        Multi list box. A list that supports multiple selection, including keyboard
        navigation.
      </li>
      <li>
        Multiple file uploader. Allows the user to click or drag-and-drop to supply
        multiple files for upload.
      </li>
      <li>
        Number with units. Facilitates entry of a number with units (e.g., “10 in.”,
        “5 minutes”, “60 kg”).
      </li>
      <li>
        Overlay. A transparent or semi-transparent blanket over the entire page
        which absorbs interactions outside a modal element.
      </li>
      <li>
        Packed columns. Packs its children into a dynamic number of columns of
        roughly equal height (e.g., see the Pinterest home page).
      </li>
      <li>
        Page number navigator. Indicates the number of pages, e.g. of search
        results, and also allows navigation to a particular page of results.
      </li>
      <li>
        Palette window. A persistent set of tools adjacent to, or superimposed on, a
        work surface, providing tools for manipulating the information on the
        surface.
      </li>
      <li>
        Panel with overflow. A panel fixed in width or height which allows any items
        which don&#39;t fit to overflow into a dropdown menu.
      </li>
      <li>
        Password strength assessment. Provides a rough assessment of the strength of
        a possible password.
      </li>
      <li>
        Persistent header. A scrolling list in which the header for the group of
        items currently at the top of the visible list remains visible until the
        user scrolls the next group to the top. At this point, the new group header
        pushes the previous group header out of sight.
      </li>
      <li>
        Persistent panel. A panel whose contents will bump up against the top or
        bottom of a scrolling parent so as to remain always visible.
      </li>
      <li>
        Person name. A set of input elements for obtaining all or part of a person’s
        name.
      </li>
      <li>
        Phone number. Allows entry of a phone number for a single locale or a range
        of global locales.
      </li>
      <li>
        Popout. An item that can expand (e.g., on hover) without affecting the
        visual position of surrounding items.
      </li>
      <li>Popup button. A button that produces a popup when clicked.</li>
      <li>Popup source. An element which invokes a popup.</li>
      <li>
        Popup. An element which temporarily pops up over other things. Can be modal
        or modeless.
      </li>
      <li>
        Postal address. Allows entry of a postal address for a single locale or a
        range of global locales.
      </li>
      <li>
        Postal code. Allows entry of a postal code for a single locale or a range of
        global locales.
      </li>
      <li>
        Process steps. Shows a numbered list of steps in a task, disabling steps
        which are not yet available.
      </li>
      <li>
        Progress bar. Indicates the fraction of an operation which has been
        completed.
      </li>
      <li>
        Progress indicator. Platform-sensitive representation of an ongoing
        operation whose expected duration is unknown.
      </li>
      <li>
        Pull to refresh. A region which the user can pull down to reveal a
        platform-sensitive “Pull to refresh” and “Loading” representation.
      </li>
      <li>
        Radio button list. A list box showing a radio button next to each item; an
        alternative way to represent selection in a single-selection list.
      </li>
      <li>
        Repeater. Creates a certain number of instances of another element class.
      </li>
      <li>Ribbon. A space-sensitive presentation of a set of commands.</li>
      <li>
        Rich text editor. Supports the basics: bold, italic, insert link, etc.
      </li>
      <li>
        Rotating panels with dots. Rotates (once or indefinitely) through a sequence
        of horizontally-arranged pages, usually to add visual interest to a home
        page.
      </li>
      <li>
        Search box. A text box with standard decorations (magnifying class,
        customizable “Search” hint) to suggest a search field.
      </li>
      <li>
        Sequence navigator. A lateral navigator that lets the user navigate left and
        right through an ordered sequence of items.
      </li>
      <li>Slider. Accepts a discrete number in a constrained range.</li>
      <li>
        Sliding panels with dots. Sliding panels which add a series of dots to
        navigate its contents.
      </li>
      <li>
        Sliding panels. Arranges a set of items on a horizontally sliding strip;
        only one item can be fully seen at any time.
      </li>
      <li>
        Spin box. Accepts a discrete number, potentially in a constrained range.
      </li>
      <li>
        Splitter. A movable line sitting between two panels which can be dragged to
        change their relative sizes.
      </li>
      <li>
        Sprite. Shows a single image at a time from a strip or grid of images.
      </li>
      <li>
        Stacked navigation pages. As the user navigates deeper in an app, a small
        residual portion of the previous page remains visible (typically on the
        left); the user can swipe away the top page to navigate back to an earlier
        point.
      </li>
      <li>
        Star rating. Lets the user rate something (a restaurant, product, etc.)
        using the conventional star system.
      </li>
      <li>
        Tab strip. A set of tab buttons, typically used to navigate among tabbed
        pages presenting different content, but which can also be used, for example,
        to apply one of a set of filters to a results list.
      </li>
      <li>Tab. A tabbed page which can be hosted in a set of tabs.</li>
      <li>
        Tabs. A set of pages which can be navigated by a set of tab buttons across
        the top.
      </li>
      <li>
        Tag text box. Tokenizes text input into a set of tags, and provides
        auto-completion against a set of existing tags.
      </li>
      <li>
        Text box with button. A control with a content area (usually some form of
        text box) and an associated button (“Go”, “Submit”, etc.).
      </li>
      <li>
        Text condenser. Switches to a condensed font when necessary to squeeze in
        more text.
      </li>
      <li>
        Time combo box. Lets the user type a time or choose one from a dropdown time
        picker.
      </li>
      <li>Timeline. Positions items on a horizontal time axis.</li>
      <li>
        Toggle button. A button the user can click to toggle its selected state.
      </li>
      <li>
        ToolTip. A popup that appears when hovering the mouse over another element,
        providing more detail about that element.
      </li>
      <li>
        Transient message. A message which briefly appears on a page before
        automatically disappearing. Typically used to display feedback after an
        operation has completed (e.g., “Message sent”) without requiring user
        acknowledgement.
      </li>
      <li>
        Tree view. Visually renders a hierarchy of items as a tree whose branches
        can be expanded and collapsed.
      </li>
      <li>
        Validating text box. Verifies that text box content meets some criteria.
      </li>
      <li>
        Vote up/down. A pair of buttons to vote something up or down; can reflect
        the current state of the user’s vote.
      </li>
      <li>Wizard. Steps the user through a task through a small set of pages.</li>
    </ol>

    <h2><strong>This seems totally doable</strong></h2>

    <p>
      Okay, so there’s a little over 100 UI patterns in this list, suggesting that a
      comprehensive, general-purpose web UI library would contain a number of
      components of that order. (Some patterns may require implementation as
      multiple components.) You and I will likely disagree about the correct
      decomposition of a given UI into a set of patterns, or about the best way to
      implement a pattern with components, or about what everything should be
      called, but I’m guessing that debate won’t change the size of the list much.
    </p>

    <p>
      More eyes on the problem — more people looking for common, general-purpose UI
      components — would certainly increase the size of the list, but probably not
      too much. For argument’s sake, let’s assume the list above captures little
      more than half of the general-purpose UI components the library should
      ultimately deliver. That still puts the list at only 200 components. My
      instinct is that any organizational strategy that can produce a library of 100
      components can also produce 200 components.
    </p>

    <p>
      There’s clearly some kind of existing inflection point when a library reaches
      approximately 40 components, or else we would see more libraries with more
      components. But I’m hoping the next inflection point won’t be reached until a
      much higher number of components. Specifically, it’s my contention that the
      apparent barrier of 40 components in a UI library can be breached with network
      effects.
    </p>

    <p>
      That is, a key limiting factor to date which has prevent a comprehensive UI
      library (or marketplace, or ecosystem, whatever) has been the inability for
      one group to benefit from another group’s UI work. I hope web components,
      seeded with efforts like Polymer, will change this dynamic, enabling us to
      blow through this barrier and create easily sharable solutions to common UI
      patterns. As I’ve often said before, that will allow us to stop burning so
      much time reinventing things, and focus more of our precious time on
      delivering value unique to our apps.
    </p>
  "2013-07-17 Quetzal, take 2 creating general-purpose UI components as Polymer elements.html": >
    
    ---

    title: "Quetzal, take 2: creating general-purpose UI components as Polymer elements"

    date: 2013-07-17

    slug: quetzal-take-2-creating-general-purpose-ui-components-as-polymer-elements

    originalUrl: http://blog.quickui.org/2013/07/17/quetzal-take-2-creating-general-purpose-ui-components-as-polymer-elements/

    ---


    <p>
      Just an update to the experimental
      <a href="http://janmiksovsky.github.io/quetzal/">Quetzal project</a> I posted
      about last month. I've learned quite a bit, and have changed course on two
      significant points, and thought I'd share a bit about my experiences with
      others who might be contemplating the creation of a framework or UI component
      library on top of web components.
    </p>

    <p>
      <strong>A limitation of the current web component architecture</strong>
    </p>

    <p>
      So far, the greatest challenge in replicating the range of expression in
      QuickUI's UI components has been the inability to easily <a
        href="http://blog.quickui.org/2013/06/11/puzzle-define-html-custom-element-subclasses-that-can-fill-in-base-class-insertion-points/"
        >define HTML custom element subclasses that can fill in base class insertion
        points</a
      >. To their credit, Google's Blink (rendering engine) and Polymer (web
      component framework) teams have been responsive on that point. In response to
      a Polymer discussion board thread related to that post, a bug has been filed
      to allow one to <a href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=22344"
        >distribute content nodes into a &lt;shadow&gt; insertion point</a
      >. Unless you're already experimenting with Shadow DOM, this entire issue
      undoubtedly seems quite arcane, but rest assured, fixing this one problem
      would open up a lot of important new territory. I'm sincerely hoping this
      proposal is adopted. In the meantime, I've been using a workaround to simulate
      the effects of that proposal. That unfortunately <a
        href="https://github.com/Polymer/polymer/issues/203"
        >broke in a recent Polymer update</a
      >, but such setbacks are to be expected when building on shifting sand.
    </p>

    <p>
      <strong>Trying Polymer elements</strong>
    </p>

    <p>
      I've spent some time experimenting with Polymer's own element layer, and last
      month decided to try adopting it. My first cut at creating custom elements for
      Quetzal was based directly on Polymer's lower levels, which take care of
      polyfilling (emulating) various web component standards. I'm now trying to use
      the higher-level Polymer elements layer, which provides a richer framework for
      creating custom elements, and adds a number of features to simplify common
      component tasks. These features are not part of any web component standard,
      but by virtue of being done by Google, will nevertheless probably become a
      common feature of the web component landscape. There are still a number
      of QuickUI features that have no parallel in standard web components or
      Polymer elements, but most of those missing features appear to be things which
      I could implement on top of Polymer elements. For example, a
      &lt;quetzal-element&gt; base class could provide those missing features,
      making it easy for new element classes to obtain them. Aside from the critical
      limitation mentioned above, it now appears to me that most (hopefully, all) of
      QuickUI could likely be implemented as Polymer elements. With that change, the
      latest Quetzal iteration recreates a handful of <a
        href="https://quickui.org/catalog/"
        >QuickUI Catalog</a
      >
      elements as Polymer elements. So far, this approach feels acceptable, and it
      would obviously be a big advantage to leave most of the heavy lifting to the
      Polymer team, and focus on actually creating new custom elements. Some notes
      on switching to Polymer elements:
    </p>


    <ul>
      <li>
        Using HTML to declare an element template feels quite verbose and cumbersome
        compared to QuickUI's use of CoffeeScript's concise JavaScript object
        format. If you haven't tried CoffeeScript, it improves over plain JavaScript
        object syntax by using indentation instead of requiring tons of curly braces
        and commas. Using HTML feels comparatively ponderous and noisy, and to me
        all that noise makes custom element source files somewhat less
        legible. Still, HTML <em>is</em> the lingua franca of the web, and using a
        standard confers a huge advantage over a proprietary format, however
        efficient it might be. At some point, the Polymer team says they'll support
        an imperative JavaScript means to define custom elements, but for now I'm
        guessing the vast majority of custom elements will use HTML, so that's what
        I want to try.
      </li>
      <li>
        Speaking of standard formats, one aspect of Polymer that's recently changed
        is that the top-level tag used to define a new element is now
        &lt;polymer-element&gt;, instead of the standard &lt;element&gt;. While
        Polymer elements are now just as locked into the Polymer framework as
        before, this change makes it feel like I'm no longer using a web standard —
        it feels like just another proprietary UI framework that happens to use
        XML/HTML as its format. It's surprising what a difference this small change
        makes. Using &lt;element&gt; simply <em>felt</em> better.
      </li>
    </ul>

    <p>
      <strong>Going back to plain JavaScript</strong>
    </p>

    <p>
      Switching the top-level component container to HTML instead of script has also
      prompted me to give up CoffeeScript, at least for now. I actually tried using
      a combination of CoffeeScript and HTML, but it felt like I was working against
      the grain, and I ended up giving up on that approach. Going from CoffeeScript
      back to plain JavaScript is an excruciating experience. Oliver Wendell Holmes
      said, "Man's mind, once stretched by a new idea, never regains its original
      dimensions." I think the programming language analogue here is: once your
      brain has been expanded by a language that lets you more clearly express your
      intensions, trying to cram your brain back into the tiny box of a less
      expressive language is unbelievably painful. Every single time I have to write
      a JavaScript loop instead of a CoffeeScript list comprehension, or type
      "function() {}.bind(this)" instead of just "=&gt;", I physically wince a bit.
      JavaScript just feels gross, it looks gross, it <em>is</em> gross. That said,
      JavaScript is the standard. One thing I've learned from QuickUI is that if
      you're trying to build a community around a common library, creating that
      library in a programming language with a narrow audience dramatically limits
      the rate at which you can grow. One commenter named "jokester" offered on my
      original Quetzal post: "I’ll unfortunately not contribute to a project coded
      in CoffeeScript." Regardless of the advantages I believe CoffeeScript offers
      to developers, I'd rather allow orders of magnitude more people to contribute
      in the standard JavaScript language they're already proficient in. Anyway,
      that's about the state of things. This Quetzal project is still just an
      experiment, and doesn't do much useful yet, but it's proving a good way to
      learn.
    </p>
2013-08:
  2013-08-26 Polymer list box and combo box elements.html: >
    ---

    title: "Polymer list box and combo box elements"

    date: 2013-08-26

    slug: polymer-list-box-and-combo-box-elements

    originalUrl: http://blog.quickui.org/2013/08/26/polymer-list-box-and-combo-box-elements/

    ---


    <p>
      The updated <a href="http://janmiksovsky.github.io/quetzal/">Quetzal</a> home
      page shows off a handful of new elements ported from QuickUI:
    </p>

    <ul>
      <li>
        A quetzal-list-box element that presents its children as items in a list.
        This makes it easy to give any collection of DOM elements the semantics of a
        single-selection list. The actual tracking of the selection is handled with
        Polymer's own polymer-selector element. On top of this, the Quetzal list box
        adds keyboard navigation: the user can navigate the list using the Up/Down
        arrow keys, as well as Home/End and Page Up/Page Down. This keyboard
        navigation follows the Microsoft Windows model, in which navigation keys
        move the selection, which in turn forces the list's scroll position to
        update to show the selected item. This makes it faster to select an item
        with the keyboard. (In Mac OS X, paging up and down does not update the
        selection.)
      </li>
      <li>
        A quetzal-combo-box element ties together a text input element, a popup, and
        a button to invoke or dismiss the popup. See this post on
        <a href="http://miksovsky.blogs.com/flowstate/2011/10/listcombobox.html"
          >the original QuickUI combo box</a
        >
        for details on combo box behavior. Again, a key feature here is keyboard
        support: the Down key invokes the popup (if it's not already open), and the
        Escape key dismisses it. Another feature (inherited from the popup-source
        element) is positioning the popup above or below the text area as room
        allows. This combo box element doesn't provide a specific popup UI. Rather,
        it's intended to be used as a base class for custom combo box elements.
      </li>
      <li>
        A quetzal-list-combo-box element combines the two above elements to create a
        typical combo box which presents choices as a dropdown list box. This
        includes standard auto-complete behavior. In many situations, a combo box
        like this is often a better UI solution than a plain text box with
        auto-complete: the user has a clearly visible button which can be used to
        invoke the complete list of choices. This is more discoverable than
        requiring the user to begin typing to see what the possible choices are. The
        auto-complete behavior matches against the textContent of the elements'
        children, so the list items can be any type of item that has meaningful
        textContent. The sample shown uses a custom element that shows a color
        swatch next to a color name; typing some text will auto-complete against the
        set of color names.
      </li>
    </ul>

    <p>
      These elements still need more work. For example, the combo box needs a stock
      mobile variant in which the element can fill the screen when making a
      selection to provide bigger hit targets and maximize the number of visible
      list choices. Also, at the moment simply tapping a list box element causes the
      Android Chrome browser to crash. This makes it somewhat hard to debug. :(
      Nevertheless, I think these element demonstrate that a good set of UI base
      classes will make it much easier to create custom UI designs as web components
      take hold.
    </p>
2013-10:
  2013-10-01 Amazon Please make better use of cover art to improve the ebook reading experience.html: >
    
    ---

    title: "Amazon: Please make better use of cover art to improve the ebook reading experience"

    convertBreaks: 0

    date: 2013-10-01

    slug: amazon-please-make-better-use-of-cover-art-to-improve-the-ebook-reading-experience

    originalUrl: https://miksovsky.blogs.com/flowstate/2013/10/amazon-please-make-better-use-of-cover-art-to-improve-the-ebook-reading-experience.html

    ---


    <p>
      As we pass through the transition from paper to electronic books, the humble
      book cover seems to have been dropped from important roles in the reading
      experience. I'm generally a huge fan of Amazon's various Kindle devices and
      apps, and love the convenience that goes with them. But I'm finding some
      aspects of the current Kindle reading experience leave me cold, and make
      recalling a book harder than it should be.
    </p>

    <p>
      We usually don't think much about the covers of the books we're reading, but
      each time you reach for a paper copy of a book, you have a chance to see a
      cover:
    </p>

    <p>
      <img
        alt="Paper Book Cover.jpg"
        src="/images/flowstate/6a00d83451fb6769e2019affb30a32970b-pi.jpeg"
      />
    </p>

    <p>
      This cover is hard at work. Before you've even cracked the book, the art and
      typography have played a subtle but useful role in setting the <em>mood</em>
      for the reading experience. Yes, the cover is serving as advertising, but it’s
      also an earnest attempt to visually establish the tone of what follows.
      Details such font choice, text size, color palette, image content, and
      composition, all contribute to provoking an emotional shift before you've even
      reached the primary content. In this light, a cover is something like a
      movie’s opening credits. In both cases, subtracting the aesthetic treatment
      leaves behind bare content that has to work harder to make an emotional
      impact.
    </p>

    <p>
      More lastingly, the cover helps to repeatedly connect the book's title,
      author, and content in your brain. During the course of reading a book, you
      likely see its cover numerous times (even if the cover's only facing up half
      the time). I'd hazard that the cover for a typical paper novel creates
      something on the order of 20–40 visual impressions for the average reader
      between the time they see it in a store and the time they put that book out of
      sight.
    </p>

    <p>
      In contrast, let's quickly consider the use of book cover art in Amazon
      ebooks. When you buy a book on Amazon's Kindle store, you can see a small
      thumbnail of the cover art:
    </p>

    <p>
      <img
        alt="Amazon Search Results.png"
        src="/images/flowstate/6a00d83451fb6769e2019affb30a3f970b-pi.png"
      />
    </p>

    <p>
      You can also see a book's thumbnail in a device or app's the Library view. But
      when you tap on a book to open it, you're brought straight to the first page
      of text:
    </p>

    <p>
      <img
        alt="Kindle Book First Page.PNG"
        src="/images/flowstate/6a00d83451fb6769e2019affb3ad84970d-pi.png"
      />
    </p>

    <p>
      Jumping to the first page of text <em>seems</em> really efficient — but by
      skipping the cover, some things are lost. The title is presented here, but in
      such a subdued way that it’s easy to overlook. The author's name isn't even
      shown in portrait view. (You have to rotate the presentation to landscape,
      two-column view for that.) And, once you've begun a book, when you return to
      the Kindle app or device again, you'll jump straight back to the page you were
      on —&nbsp;skipping even the small cover art thumbnail in the Library view.
    </p>

    <p>
      The digital cover art <em>is</em> typically still there in the ebook content;
      it's just not shown to you by default. And if you explicitly do view the
      cover, you will see an odd thing: the cover art presented as an image sitting
      <em>on </em>one of the book's pages, instead of a cover that's the same size
      as a page. This makes the cover feel less like a cover, and even less
      important than the user interface is already treating it.
    </p>

    <p>
      <img
        alt="Kindle Book Cover.png"
        src="/images/flowstate/6a00d83451fb6769e2019affb31c7c970c-pi.png"
      />
    </p>

    <p>
      Overall, I think Amazon's doing an amazing job with ebooks. I do think the
      cover art could be handled more effectively. As it stands, you can lose out on
      quite a bit as a reader of an ebook:
    </p>

    <ul>
      <li>
        If you can't remember a title or author, you can't easily recommend the book
        to friends. I’ve frequently found myself trying to tell friends about an
        interesting ebook I’m reading —&nbsp;a book I may have been reading for a
        couple of weeks —&nbsp;only to discover I can recall neither the title nor
        the author’s name.
      </li>
      <li>
        If you can't recall an author's name, you yourself might not be able to
        later find more books by the same author. Yes, you could dig up the name
        through your order history, but maybe you're not going to bother. It'd be a
        lot faster if you could just recall the name and type it into a search box.
      </li>
      <li>
        The art probably helps aid the recall of the book's content. Conversely,
        failure to show that cover likely means that information is probably harder
        to recall. I can still remember some covers for books I read decades ago. I
        doubt that persistence will remain true about the ebooks I'm reading today.
      </li>
      <li>
        Everything on the book’s cover, including the artwork and typography, is
        helping to prepare the stage for the reading experience you’re about to
        start (or resume). Leaving that out can make the e-book reading experience
        feel comparatively colder.
      </li>
      <li>
        Without a strong visual distinction between different books, the experience
        of reading ebook after ebook can make those books blur together in your
        mind.
      </li>
    </ul>

    <p>
      Curiously, Kindle devices do show book covers, but
      <em>for the wrong book</em>. When you turn off the device, you'll get an ad
      for some book you don't yet own. I appreciate Amazon's business need to sell
      more books, but this feels rather pathetic. I've never personally found any of
      these recommendations useful, and in any event I already have many ways — and
      better ways — to find recommendations when I visit the Amazon site. Moreover,
      this advertising makes the reading experience so haphazard. Because I get a
      different book cover each time I turn off a Kindle device, the lack of
      persistence makes it even harder to appreciate a multi-day reading process as
      a coherent experience.
    </p>

    <p>
      What might work better? I'm sure the Kindle designers have already given this
      a lot of thought. I'm not an expert in ebook user interfaces, just a reader
      who's been feeling underserved by the current experience, but I think it might
      be reasonable for the Kindle apps and devices to:
    </p>

    <ol>
      <li>
        Flash the book’s cover for second when opening a book for the first time.
      </li>
      <li>
        Flash the book's cover for some shorter time (half a second?) when
        re-opening a book.
      </li>
      <li>
        Skip this cover display if the user goes away and then returns to a book
        within some short interval, say, less than an hour. If they've just flipped
        away to check something and come right back, even a short delay might feel
        obtrusive.
      </li>
      <li>
        Let the user turn off this cover behavior through an option if they're
        really obsessed with getting that second back.
      </li>
      <li>
        On the Kindle devices, the cover of the current book should be shown when
        the device is off. Again, if the user really wants to hide which book
        they’re reading, perhaps the existing behavior could be retained as an
        option.
      </li>
    </ol>

    <p>
      What has your experience been? If you know anyone at Amazon who’s in a
      position to reconsider the current handling of cover art, I'd love it if you
      could please point them at these suggestions.
    </p>
2013-11:
  2013-11-08 Filling in base class slots with the awesome new capability of the shadow element.html: >
    
    ---

    title: "Filling in base class slots with the awesome new capability of the shadow element"

    date: 2013-11-08

    slug: filling-slots-in-shadow

    originalUrl: http://blog.quickui.org/2013/11/08/filling-slots-in-shadow/

    ---


    <p>
      In a
      <a
        href="http://blog.quickui.org/2013/06/11/puzzle-define-html-custom-element-subclasses-that-can-fill-in-base-class-insertion-points/"
        >post a few months back</a
      >, I discussed how custom elements needed an easy way to fill in slots defined
      by their base classes. The capable folks on Google’s Blink team have now fixed
      this problem with a small but critical Shadow DOM change, and I wanted to take
      a moment to walk through an example of how the feature works and explain why
      this is so cool.
    </p>

    <p>
      What does “filling in a slot” mean, and why does it matter? The crux of the
      issue, for us to be able to share web components, I need to be able to create
      a new web component that defines some, but not all, of its appearance. I need
      be able to define certain places that you can fill in with your content. Those
      are the slots: points of visible user interface extensibility.
    </p>

    <p><b>Example: a series of page templates</b></p>

    <p>
      The post linked above offers a simple button example, but let’s walk through a
      more realistic example using a series of page templates. (If you have Google
      Chrome Canary installed, you can follow along with <a
        href="http://jsbin.com/uJuxAzi/1/edit"
        >a live demo</a
      >.) These sample templates will span a range of general-purpose to very
      specific. <span style="font-style: inherit; line-height: 1.625"
        >For the sake of clarity, the examples are overly simple, and are intended
        just to convey a sense of how such templates might be used to build a simple
        online store app. The same principles shown here could easily be extended to
        arbitrarily complex interfaces.</span
      >
    </p>

    <p>
      <img alt="Page Template 1" src="/images/quickui/page-template-1.png" />
      <br />
      <em>A page-with-toolbar</em>
    </p>

    <p>
      <span style="font-style: inherit; line-height: 1.625"
        >We start with a completely general-purpose &lt;page-with-toolbar&gt;
        element that defines a page with a toolbar. For the sake of argument,
        let’s suppose there’s something fancy about the presentation here — perhaps
        the toolbar starts out at one size, and then, as the user scrolls, the
        toolbar becomes smaller and permanently docked at the top of the page.
        Regardless of what exactly makes this interesting, let’s assume that
        interesting stuff entails web ninja tricks the average designer or developer
        doesn’t have the time to learn or implement for themselves. Significantly,
        some aspect of the toolbar behavior requires real code, not just CSS
        styling.This user interface pattern is completely general-purpose, so
        perhaps this template is found in an online library of general-purpose web
        components. The key extensibility feature here is that the element defines
        two slots which consumers of the &lt;page-with-toolbar&gt; element can fill
        in: a toolbar slot at the top, and a main content slot.</span
      >
    </p>

    <p>
      <img alt="Page Template 2" src="/images/quickui/page-template-2.png" />
      <br />
      <em>A store-page partially fills in a page-with-toolbar</em>
    </p>

    <p>
      <span style="font-style: inherit; line-height: 1.625"
        >This second image shows a &lt;store-page&gt; element that forms the
        standard base for all pages in our hypothetical online store. This element
        subclasses (extends) the general-purpose &lt;page-with-toolbar&gt; element
        above, so it automatically picks up the structure defined by that element
        and the fancy toolbar behavior. The designer of the store app can fill in
        some of that structure with elements that should be visible on every page in
        the store, such as a Home button and the story name. That is, the designer
        can partially fill in the slots defined by the base class: after adding the
        standard elements they want on every page, they can define new slots that
        can be filled in by instances or subclasses. The designer can also add
        visual styling and any behavior that should be available on every page in
        the app. When complete, this page both extends the above element, and is
        itself extensible. The element is specific to this company, but could be
        used by any team at the company working on their online store.</span
      >
    </p>

    <p>
      <img alt="Page Template 3" src="/images/quickui/page-template-3.png" />
      <br />
      <em>A product-page partially fills a store-page</em>
    </p>

    <p>
      The third image shows a &lt;product-page&gt; element. This extends the
      &lt;store-page&gt; element above to create a template for any page
      specifically in the app’s Products area. It fills in the toolbar slot with
      buttons that are only available on product pages. It also partially fills in
      the main content slot with a header for the product name. Finally, it adds any
      styling and behavior shared only by pages in the Products area. This product
      page element is still extensible, but an increasing portion of its interface
      and behavior are constrained.
    </p>

    <p>
      <img alt="Page Template 4" src="/images/quickui/page-template-4.png" />
      <br />
      <em>A completed instance of product-page</em>
    </p>

    <p>
      Finally, we have an example of a filled-in &lt;product-page&gt; element.
      Presumably the app fills in the page by obtaining product data and used that
      to populate various elements on the page (e.g., using data binding). Now the
      whole page has been filled in. By factoring our app’s design this way, we’ve
      created a good separation of concerns. The &lt;page-with-toolbar&gt; element
      doesn’t have to know anything about online stores. Conversely, the
      &lt;store-page&gt; element doesn’t have to know anything fancy toolbar
      behavior. The &lt;product-page&gt; designers don’t even need to know where the
      toolbar behavior comes from — all they need to know is that they get it for
      free. If the team at the company that owns the &lt;store-page&gt; element
      later decides to change the toolbar behavior, they can do so without the
      people who own the &lt;product-page&gt; element needing to do anything.
    </p>

    <p><b>How does this work?</b></p>

    <p>
      Until recently, it wasn’t possible for a custom element to fill in slots
      defined by a base class this way. An element’s template could contain a
      &lt;shadow&gt; element to ask its base class to render its stuff, but there
      wasn’t an easy way to pass content to the base class. Over the past couple of
      months, the Blink folks working on Shadow DOM features have just addressed
      this shortcoming with a new feature in the
      <a
        href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html"
        >Shadow DOM spec</a
      > and its Blink implementation. Technically speaking, the spec now allows a
      custom element to distribute nodes into a &lt;shadow&gt; insertion point and
      then reproject those nodes into an older shadow root. To see an example of how
      this works, see <a href="http://jsbin.com/uJuxAzi/1/edit">the live demo</a>.
      At the time of this post, you’ll need to use
      <a href="https://www.google.com/intl/en/chrome/browser/canary.html"
        >Google Canary</a
      >. You’ll also need to open chrome://flags and check "Enable experimental Web
      Platform features". But this feature will likely make its way into production
      Chrome in the not-so-distant future, and get polyfilled by the Polymer project
      for other browsers. You can look through the code for the complete story, but
      the gist is this: if your element puts stuff inside a &lt;shadow&gt;, then
      that stuff will be passed to the base class as content. In our
      &lt;page-with-toolbar&gt; example element, the template contains a bit for the
      toolbar that looks like this:
    </p>


    <pre>

    &lt;polymer-element name=”page-with-toolbar”&gt;

    &lt;template&gt;
      …
      &lt;div id=”toolbar”&gt;
        &lt;content select=”.toolbar”&gt;&lt;/content&gt;
      &lt;/div&gt;
      …
    &lt;/template&gt;

    &lt;/polymer-element&gt;</pre

    >

    That &lt;content select=”.toolbar”&gt; bit creates a slot that can be filled in

    by instances — or by subclasses. When our &lt;store-page&gt; element subclasses

    &lt;page-with-toolbar&gt;, it fills in that slot:

    <pre>

    &lt;polymer-element name=”store-page” extends=”page-with-toolbar”&gt;

    &lt;template&gt;
      &lt;shadow&gt;
        &lt;span class=”toolbar”&gt;
          &lt;button&gt;Home&lt;/button&gt;
          &lt;content select=”.toolbar”&gt;&lt;/content&gt;
        &lt;/span&gt;
        …
      &lt;/shadow&gt;
    &lt;/template&gt;

    &lt;/polymer-element&gt;</pre

    >

    <p>
      Everything inside the store-page’s &lt;shadow&gt; will look to the
      page-with-toolbar base class like regular content. The page-with-toolbar’s
      toolbar slot will grab the span with class=”toolbar”, so the store-page’s Home
      button ends up in the toolbar. This lets store-page fill in the toolbar slot
      defined by page-with-toolbar. So that store-page itself can be extended, it in
      turn redefines that toolbar slot. Any toolbar buttons defined by subclasses of
      store-page (like the Add to Cart and Buy Now buttons in our product-page
      example) will get picked up by store-page’s toolbar slot, which is nestled
      inside page-with-toolbar’s toolbar slot.
    </p>

    <p><b>Conclusion</b></p>

    <p>
      Sometimes tiny differences in fundamental features, like this refinement to
      the &lt;shadow&gt; behavior, can open up new realms of possibility. While it
      doesn’t look like much, when combined with subclassing, you’ve just been given
      a powerful new tool for creating custom web elements. You’ll be able to create
      a wide range of new general-purpose elements that can be filled in by other
      people to suit their needs, and you’ll be able to fill in general-purpose
      elements created by others to suit your own needs. This is a huge step towards
      a
      <a
        href="http://miksovsky.blogs.com/flowstate/2012/03/snapping-together-a-skyscraper.html"
        >vibrant ecosystem of web user interface components</a
      >.
    </p>

    <p>
      <em
        >Beyond the expanded capabilities enabled here, I’m personally excited to
        see this change because I’ve been advocating for it for so long. I made a
        pitch for this on a visit to Google back in May 2012, and have promoted the
        idea in various forums since then. Other people like Scott Miles at Google
        also lobbied for the same thing. Special thanks are owed to Scott and to
        Dominic Cooney for contributing their own weight behind this idea and
        building the momentum required to make it happen; to Blink developer Hayato
        Ito for his work updating the spec and implementing the feature in Blink;
        and to Dimitri Glazkov for his careful oversight of the Shadow DOM spec.
        This is one spec change that was totally worth the trouble!</em
      >
    </p>
  2013-11-26 Ending active development of QuickUI.html: >
    ---

    title: "Ending active development of QuickUI"

    date: 2013-11-26

    slug: ending-active-development-of-quickui

    originalUrl: http://blog.quickui.org/2013/11/26/ending-active-development-of-quickui/

    ---


    <p>
      I’ve decided to end further investment in the development of the QuickUI web
      user interface framework.
    </p>

    <p>
      I’ve spent the past half-year experimentally porting various QuickUI
      components to HTML custom elements under the rubric of a project called
      <a href="http://janmiksovsky.github.io/quetzal/">Quetzal</a>. That project
      makes use of Google’s
      <a href="http://www.polymer-project.org/">Polymer</a> project, which supports
      the deployment of web components to mainstream browsers. While the Quetzal
      element collection doesn’t yet offer the complete set of QuickUI components,
      and working on top of Polymer has been shaky at times, Polymer is becoming
      good enough for real use, and the advantages of building with web standards
      will quickly outweigh any proprietary advantages which QuickUI could offer.
    </p>

    <p>
      I started QuickUI a number of years ago because it seemed clear to me that a
      component-oriented approach to UI design and development would let you create
      better and more maintainable user experiences. I didn't see anyone else
      working on that in an open way, and so began my own effort to make progress in
      that area.
    </p>

    <p>
      The current wave of web component standards embody many of the ideas I was
      pursuing in QuickUI. For fun, I just dug up from my notes the earliest source
      code I could find for the component markup language I thought would be useful
      for creating web components. Here's sample QuickUI markup I wrote at the very
      beginning, probably late 2007:
    </p>

    <pre>

    &lt;control name="taskPage" arguments="name pageTip content"&gt;
      &lt;style&gt;
        h1 { font-face: Arial; }
      &lt;/style&gt;
      &lt;script&gt;
      function foo() { }
      &lt;/script&gt;
      &lt;template&gt;
        &lt;div ...&gt;
          &lt;h1&gt;%name%&lt;/h1&gt;
          &lt;p class="pageTip"&gt;%pageTip%&lt;/p&gt;
          &lt;div id="#content"&gt;
            %content%
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/template&gt;
    &lt;/control&gt;</pre

    >


    <p>
      Here's the corresponding source code in late 2013 for the same custom element
      in Polymer:
    </p>


    <pre>

    &lt;polymer-element name="task-page" attributes="name pageTip"&gt;
      &lt;script&gt;
      function foo() { }
      &lt;/script&gt;
      &lt;template&gt;
        &lt;style&gt;
          h1 { font-face: Arial; }
        &lt;/style&gt;
        &lt;div ...&gt;
          &lt;h1&gt;{{name}}&lt;/h1&gt;
          &lt;p class="pageTip"&gt;{{pageTip}}&lt;/p&gt;
          &lt;div id="#content"&gt;
            &lt;content&gt;&lt;/content&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/template&gt;
    &lt;/polymer-element&gt;</pre

    >

    <p>
      Aside from minor syntactic differences (curly braces are in vogue now instead
      of percent signs; "attributes" instead of "arguments"; the style tag needs to
      be inside the template instead of outside; the element name requires a
      hyphen), the source code is nearly identical. In other words, the source code
      I wanted to be able to write in 2007 is essentially the source code I can now
      write today. Hooray for the open web!
    </p>

    <p>
      Going forward I’ll be using web components for my own work rather than
      QuickUI. If you have been using QuickUI or were interested in QuickUI, I would
      encourage you to look at adopting web components instead, either through the
      Polymer project or through similar projects such as Mozilla’s <a
        style="font-style: inherit; line-height: 1.625"
        href="http://x-tags.org/"
        >x-tags</a
      >.
    </p>


    <p>
      I’ll continue to keep the quickui.org site live for the indefinite future. In
      particular, for the time being I’ll continue to use this blog to post thoughts
      on developing user interfaces, with a focus on using web components. To those
      of you that used QuickUI or provided feedback on it, I’d like to offer my warm
      thanks for all of your support. Best, Jan Miksovsky
    </p>
2013-12:
  2013-12-01 Some lessons from an open source project that never gained critical mass.html: >
    
    ---

    title: "Some lessons from an open source project that never gained critical mass"

    date: 2013-12-01

    slug: some-lessons-from-an-open-source-project-that-never-gained-critical-mass

    originalUrl: http://blog.quickui.org/2013/12/01/some-lessons-from-an-open-source-project-that-never-gained-critical-mass/

    ---


    <p>
      I recently announced that I was
      <a
        href="http://blog.quickui.org/2013/11/26/ending-active-development-of-quickui/"
        >halting development on QuickUI</a
      >, and thought it would be a good idea to do a little post-mortem before
      moving on.
    </p>

    <p>
      The good side: As a framework for web application UI development, QuickUI
      measured up to its design goals. It was useful for creating complex
      application UIs with a good separation of concerns between UI components. The
      core framework was highly reliable with a fairly tight abstraction and
      acceptable performance. QuickUI was used in some companies for real production
      apps with real users. The very small number of developers who actually used
      the framework said they liked it and were impressed by what it could do.
    </p>

    <p>
      The bad side: As an open source project, QuickUI never achieved critical mass.
      QuickUI was my first attempt at kickstarting an open source project to help
      establish an ecosystem for component-based web user interfaces. I’d initially
      held the naive view that simply publishing something as open source (which I
      did in late 2009, two years into QuickUI’s development) would, on its own,
      generate community interest and participation. But the universe of open source
      development projects is vast, and simply making something free doesn’t make it
      popular. Free products still need to appeal to their audience and gain
      adoption through a good feature set, great distribution, and substantial luck.
      Eventually, QuickUI was overtaken by open web component standards (which is a
      good thing), and it no longer made sense to continue investment in QuickUI.
      Before moving on, I wanted to write down some of the lessons the QuickUI
      project held for me.
    </p>


    <ol>
      <li>
        <p>
          <strong
            >People care about the stack of technologies beneath your
            project.</strong
          >
          I used to think that all that mattered is whether a tool worked and was
          easy to use, but most developers make demands the construction of the tool
          itself: programming language, runtime platform, dependent libraries, etc.
          The most common reason someone will offer for this is that they may need
          to diagnose a bug in the code and fix it. That may also be true, but I
          think most people have less glorified reasons for considering the
          technology behind a tool.
        </p>
        <p>
          First, simply understanding the vocabulary associated with a given stack
          requires investment. Occasionally you come across a tool on GitHub whose
          Readme says the tool can be configured via a .foo file, where the location
          and syntax of a .foo file is completely obvious to current users of that
          tool’s stack. If you don’t already know what a .foo file is, you’re less
          likely to adopt that tool.
        </p>
        <p>
          Second, a developer toolchain is a creaky, cantankerous beast, and
          incorporating multiple stacks of tech is a pain. This is less about
          debugging than what Bruce Sterling refers to as the
          <em>wrangling</em> required to get things to work together.
        </p>
        <p>
          Third, you trust tools on stacks that have worked for you in the past, and
          are skeptical that tools on unfamiliar stacks will actually work as
          advertised. For example, I’ve hardly ever used Ruby, and rarely use Ruby
          gems. When I see a tool published via npm, I feel comfortable installing
          and using it, even if I never look at its source, because I’ve used many
          tools that way. If I see a tool that does
          <em>the exact same thing</em> published as a Ruby gem, I view its efficacy
          as black magic.
        </p>
        <p>
          Last, people implicitly trust other people who have selected the same
          technology stack. “If someone has made the same technology choices I have,
          they must be as enlightened as I am!” Conversely, people look askance at
          those who make different choices. A die-hard plain JavaScript coder may
          view the Clojure community are pot-smoking hippies, while the Clojure
          developer may view the original party as a latter-day COBOL dork lacking
          sufficient brainpower and awareness.
        </p>
        <p>
          In the case of QuickUI, when I started on it in late 2007 or so, I was
          most comfortable writing in C#, so when I needed to write a build-time
          compiler for UI markup, I wrote it in C#. Bad idea. Despite the fact that
          there was no run-time need for .NET, and that the compiler ran perfectly
          well on a Mac (under Mono), no one would take it seriously with the taint
          of .NET on it. I was eventually able drop the compiler altogether, and
          rely on a stack of tools which jQuery developers were already familiar,
          but that cost the project time and effort.
        </p>
      </li>
      <li>
        <p>
          <strong
            >Using anything other than native web technologies — plain HTML, plain
            JavaScript, and plain CSS — significantly constrains your
            audience.</strong
          >
          This is similar to the above point, but pertains to your project’s source
          code rather than the stack of technologies supporting that source. Again,
          part of the argument here is that they might theoretically need to dive
          into the runtime source to diagnose a problem, but I think the reaction is
          usually more instinctive than that.
        </p>
        <p>
          At one point in the development of QuickUI I discovered that working in
          CoffeeScript was much more productive for me than in plain JavaScript. In
          short order, I
          <a
            href="http://blog.quickui.org/2012/05/15/porting-quickui-to-coffeescript/"
            >ported the QuickUI runtime to CoffeeScript</a
          >. Switching to CoffeeScript was a huge productivity boost for me — but
          represented a huge reduction on the potential audience for QuickUI.
        </p>
        <p>
          For one thing, it seemed nearly impossible for me to get potential
          developers to ignore the presence of CoffeeScript. CoffeeScript compiles
          to plain JavaScript, but anyone who looked at the QuickUI source repo saw
          “CoffeeScript” listed as the primary language… and walked away. They might
          say, “Your project looks interesting, but I don’t know CoffeeScript.” I’d
          tell them they didn’t need to know CoffeeScript — that was an
          implementation detail — but they’d already decided they were uninterested.
        </p>
        <p>
          Over and over, the general feeling was, “I just don’t want to use
          something that uses something I don’t already know.” And then, of course,
          for most people who really did want to be able to grok the source,
          CoffeeScript was a non-starter.
        </p>
        <p>
          To build a community around a project, you probably want as many people as
          possible to be able to participate. Even if you hate JavaScript, it’s the
          web’s lingua franca. Using any other language for an open web project may
          not be an insurmountable obstacle, but at the very least it’s a
          significant handicap. As much as it pained me, when I started up the
          subsequent
          <a href="http://janmiksovsky.github.io/quetzal/"
            >Quetzal web components</a
          >
          experiments, I did so in plain JavaScript.
        </p>
      </li>
      <li>
        <p>
          <strong
            >Everyone will insist there is one thing you must do that will make your
            library more acceptable — and all those things are different, and all
            those things together are probably still insufficient.</strong
          >
          Over the course of the past few years, I have given many, many QuickUI
          demos, and received feedback on all aspects of the tool, the accompanying
          site at quickui.org, the learning process, etc. Very little of this
          feedback was consistent; everyone fixated on something different. I
          thought, if I just respond to all the feedback, surely at some point the
          barrier to adoption will be low enough that people will start adopting the
          tool.
        </p>
        <p>
          On the basis of such feedback, I spent a huge amount of time improving
          things. Early on, someone said I should move the source to GitHub, so I
          did. Someone said it needed better documentation, so I wrote a lot of
          documentation. As discussed above, numerous people suggested moving away
          from .NET, so I did. Someone suggested having live examples of UI
          components, so I built those. Someone thought a tutorial would be helpful,
          so I made an interactive tutorial. (Which many people complimented. Thank
          you!) One person’s key complaint with the entire framework was that the
          home page didn’t have icons; if the framework was to be successful, the
          home page needed little icons to indicate which browsers were supported by
          the framework. I did that. I received many, many other suggestions, and I
          incorporated almost all of them.
        </p>
        <p>
          None of it mattered. The feedback was actionable, and probably much of it
          was accurate, but even addressing (nearly) all of it wasn’t enough to make
          the project successful.
        </p>
        <p>
          The fact is that most people are unwilling to invest the time to
          understand, analyze, and articulate what’s really wrong with your project.
          Of the people who gave me feedback, few of them actually looked hard at
          it, very few had actually tried it beyond the online tutorial, and very,
          very few were willing to speak directly to their key concerns. This is all
          understandable — people are busy, spending time on a framework of unknown
          value is potentially wasted, and most people want to be nice to you — but
          feedback on a project should be accepted with these phenomena in mind.
        </p>
      </li>
      <li>
        <p>
          <strong>Paradigm shift is prohibitively expensive.</strong> Early on, one
          person told me that building UI in a component-oriented fashion
          represented a significant paradigm shift — and that represented a
          potentially insurmountable obstacle for QuickUI.
        </p>
        <p>
          The problem with a paradigm shift is that it’s hard to even have a
          conversation with someone whose conceptualization of the world doesn’t
          even allow them to recognize the problem they have. I spoke with many
          developers who viewed the undifferentiated pile of JavaScript generating
          their UI as the way things had to be done. They were more concerned with
          getting their UI to work across multiple browsers than to worry about
          componentization — even though a good component library is exactly the
          sort of thing that would have made cross-browser work more manageable.
          (The cross-browser hacks could have been folded into the components,
          allowing them to work at a higher level of abstraction, etc.)
          Interestingly, these same developers would carefully factor their code
          into classes or functions with clear lines of responsibility. They applied
          good factoring to every other thing they coded
          <em>except their web UI</em>.
        </p>
        <p>
          Over the past year or so, Google and others have been evangelizing a
          component-oriented paradigm for web development. At some point, we’ll go
          through some phase-change where that paradigm will suddenly become
          dominant. I’m betting that change will happen before late 2015. By then,
          it will be hard to find a good web UI developer who doesn't think of their
          UI in terms of components.
        </p>
      </li>
      <li>
        <p>
          <strong
            >People are only interested in something if others are already using
            it.</strong
          >
          This is true for both seasoned developers and novice developers — but for
          different reasons. The novice teaches themself jQuery or Backbone or LESS
          because experienced people use those things, which means they’re probably
          interesting and useful. The seasoned developer picks up a new tool that
          others are using because the alternative — using something with a tiny
          user base — represents unacceptable risk.
        </p>
        <p>
          This last point was made to me by the most abrasive person I ever spoke
          with about QuickUI. In fact, I think it’s because they were untroubled by
          politeness that they could speak the truth. They said: “I would love to
          use this, but I can’t. If something were to happen to you, I would be
          stuck having to fix your bugs. I made a bet like this in the past, and was
          stuck supporting someone else’s framework. I won’t do that again. Come
          back when lots of other people are using this.”
        </p>
        <p>
          So this developer had, at some point, found a great piece of technology,
          developed by someone else, and they staked their own reputation on
          adopting this technology, only to have it completely fall apart when the
          other party went away (went bankrupt, was acquired, whatever). It’s
          probably safe to assume that most seasoned developers have had a similar
          experience. For every open library, there must exist some critical mass at
          which the library’s community becomes self-sustaining.
        </p>
        <p>
          At that point, if you find a bug in the library, someone else in the
          community has probably also found the bug, and maybe even fixed it. Enough
          other people are invested in the library that, even if the original
          developer disappears, the remaining investors will keep it going for as
          long as that makes technological sense.
        </p>
        <p>
          I’d be very interested if someone could pinpoint the size of that critical
          mass. I’m guessing the number is pretty small: perhaps 10 active
          contributors might be sufficient to create the perception the library is
          well-maintained and not going away. Whatever that size is, I couldn’t grow
          QuickUI to that size.
        </p>
      </li>
      <li>
        <p>
          <strong
            >Google could publish a JavaScript library for cloud-based ham
            sandwiches and a thousand people would immediately star the repo on
            GitHub.</strong
          >
          For much of my career, I focused my attention almost entirely on the value
          a product created, and gave very little thought to how a product would be
          distributed. Distribution is, in fact, at least as important, and maybe
          more important, than underlying value. That’s certainly true in the short
          term. And, over the long term, well, maybe technology changes quickly
          enough that the long term never comes into play.
        </p>
        <p>
          I’m not saying individuals can’t launch successful open source projects,
          but rather that doing so within the context of a company with name
          recognition and a developer outreach program makes it much, much easier.
          The people working within such a context may not realize it. I once heard
          someone describe people who work at big companies as “basketball players
          on the moon”. Those people can jump very high, but they may not realize
          the extent to which their performance depends on that context.
        </p>
        <p>
          I have deep respect for a person who can launch something entirely on
          their own, without relying on the backing of their company (or industry
          name recognition predicated on work they launched previously at some
          earlier company). If someone can make a disruptive technology successful
          entirely on its own merits, both that tech and that person are impressive
          indeed.
        </p>
      </li>
    </ol>


    <p>
      Ah, well, live and learn. I’m still looking forward to watching the web’s UI
      component ecosystem take shape, because we’ll all get to make awesome stuff
      together.
    </p>
  2013-12-18 Paper can be faster than gadgets a printable 2014 wall calendar for more efficient scheduling discussions.html: >
    
    ---

    title: "Paper can be faster than gadgets: a printable 2014 wall calendar for more efficient scheduling discussions"

    date: 2013-12-18

    slug: paper-can-be-faster-than-gadgets-printable-wall-calendar

    originalUrl: https://miksovsky.blogs.com/flowstate/2013/12/paper-can-be-faster-than-gadgets-printable-wall-calendar.html

    ---


    <p>
      I’ve posted an app that lets you
      <a href="http://janmiksovsky.github.io/printable-wall-calendar"
        >print a free wall calendar</a
      >&#0160;that can make your scheduling discussions go faster.
    </p>

    <p>
      This is based on
      <a
        href="http://miksovsky.blogs.com/flowstate/2013/01/a-2013-wall-calendar-optimized-for-project-management-discussions.html"
        >a printed calendar I created by hand</a
      >&#0160;for some years now. As I noted in that post, most wall calendars
      contain far too much junk. Most professionals I know track future events in an
      online calendar, not a wall calendar, so among other things, you may not
      actually need room to write on a wall calendar these days. But
      it&#0160;<em>is</em>&#0160;handy to be able to quickly answer questions about
      what day of the week a given date falls on, or vice versa. While you can whip
      out a mobile device and answer those questions, this is one case where I
      believe paper is faster than gadgets.
    </p>

    <p>
      <img
        alt="Year Calendar"
        src="/images/flowstate/6a00d83451fb6769e201a3faa3c039970b-pi.png"
      />
    </p>

    <p>
      If you hang one of these on your office or conference room wall, I think
      you’ll find it useful. Each year, the startup I founded continues to print out
      a huge version of this calendar. (Tip: print it as a poster at Fedex). It
      works great for planning agile development sprints.
    </p>

    <h2>Optimizing for text legibility</h2>

    <p>
      I&#39;ve tried to remove everything from this calendar that’s not strictly
      necessary to answer the key day/date scheduling questions. In particular, to
      improve legibility at a distance, I’ve tried to maximize the size of the date
      numbers so they can be read from far away. In the case where a single month
      requires six rows to display, I tuck the name of the month on the same row as
      the first week. Such a week can contain at most two dates on the far right.
      For example, in a typical U.S. calendar, this situation will come up in March
      2014:
    </p>

    <p>
      <img
        alt="Three Months"
        src="/images/flowstate/6a00d83451fb6769e2019b03303468970d-pi.png"
      />
    </p>

    <p>
      This trick lets me save a row for the tall months. Reclaiming that vertical
      space means the dates can be bigger and more legible at a distance.
    </p>

    <h2>A web component wall calendar</h2>

    <p>
      Instead of creating another one-off paper calendar this year, I realized I
      could use web components to create a live app without too much trouble. I
      already had a
      <a href="https://github.com/JanMiksovsky/quetzal-calendar-month-with-headings"
        >month calendar component</a
      >
      (available for your own web components app via Bower). This component handles
      most of the date math, so it was fairly straightforward to just stick twelve
      instances of this component together, then apply some styling and glue logic,
      and end up with a live calendar app.
    </p>

    <p>
      Generally speaking, that process is what I see most web app design and
      development moving toward: 1) a search for the best components, 2) some
      wrangling to glue them together, and 3) the application of styling to achieve
      the desired aesthetic. The core
      <a
        href="https://github.com/JanMiksovsky/printable-wall-calendar/tree/master/elements"
        >.html source for the app</a
      >&#0160;is tiny, weighing in at a little over 13K, and most of that is markup
      or CSS. Looking just at the JavaScript, there are only about&#0160;100 lines
      of code.
    </p>

    <p>
      This web app is slightly unusual in that it focuses on printing, and the web
      isn’t particularly print-friendly. As far as I know, it’s hard to say: “Scale
      this text to be as tall as possible, subject to this layout, and still have
      everything fit on a page.” I ended up having to be most conservative than I
      would have liked, tuning the app for U.S.-centric “Letter” sized paper, which
      is shorter than the A4 paper used nearly everywhere else. Some space goes to
      waste which could have been used for more generous text sizing and spacing.
    </p>

    <h2>Falsehoods designers believe about time</h2>

    <p>
      A while back, Noah Sussman posted a great list of
      <a
        href="http://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time"
        >Falsehoods Programmers Believe About Time</a
      >. Designers make most of the same incorrect assumptions as well. When I read
      a list like this, the lesson I take away is that most people (including me)
      shouldn’t be doing date math or creating UI elements that depend directly on
      it. Instead, they should be building on top of work others have done.
    </p>

    <p>
      In this particular case, I’d already invested a bunch of time doing the work
      to be able to create a month calendar component that can easily be reused in
      other applications. This component avoids at least a few of the Falsehoods
      About Time listed above. E.g., given a date, to calculate the next date it
      doesn’t just add 24 hours, but does some gyrations to handle daylight saving
      time edge cases.
    </p>

    <p>
      A designer or developer can hopefully drop this month calendar component into
      their web app and get a useful result with having to worry about (or even be
      aware of) the edge cases. The component itself undoubtedly has edge cases it
      fails to handle; there are Falsehoods About Time which aren&#39;t addressed
      yet. But the value of doing this as a component is that at least such work is
      spread across applications. Others can pitch in, and we can collaboratively
      work towards a bug-free solution.
    </p>

    <h2>Global support for hundreds of languages/locations</h2>

    <p>
      In past years, people have asked me for “international” versions of the wall
      calendar that have Monday as the first day of the week, instead of Sunday the
      way most Americans prefer it.
    </p>

    <p>
      Since my month calendar component already leveraged the excellent
      <a href="https://github.com/jquery/globalize">Globalize.js</a>&#0160;library,
      it was actually easier for me to just let the user pick the language/location
      they want a calendar instead of having to hard-code support for specific
      formats. To simplify things, I created a component that wraps the Globalize
      list of supported language/location combinations. Then it was just a matter of
      wiring the language/location selector to the calendar, and —&#0160;boom!
      —&#0160;the calendar instantly got basic support for hundreds of
      language/locations.
    </p>

    <p>
      The results are likely imperfect for many places, but for languages and
      locations with small populations, this printable wall calendar might already
      be the best solution out there.
    </p>

    <p>
      If you’re like me, it’s a good five minutes fun to just pick cultures and see
      what their calendars might look like. I knew that cultures in the Americas
      tend to prefer having a calendar start on Sunday, while European cultures tend
      to prefer that weeks start on Monday. This holds true even when the same
      language is spoken in both hemispheres: see English (U.S.) vs English (U.K.),
      or Spanish (Mexico) vs Spanish (Spain). Until I started working with
      Globalize, though, I hadn’t realized that there were cultures that prefer
      weeks start on a Saturday. Here’s how March 2014 looks in three settings,
      English (U.S.), French (France), and Arabic (Saudi Arabia):
    </p>

    <p>
      <img
        alt="US Calendar"
        src="/images/flowstate/6a00d83451fb6769e2019b032f63e4970c-pi.png"
      />
    </p>

    <p>
      <img
        alt="French Calendar"
        src="/images/flowstate/6a00d83451fb6769e201a3faa3c018970b-pi.png"
      />
    </p>

    <p>
      <img
        alt="Arabic Calendar"
        src="/images/flowstate/6a00d83451fb6769e2019b03303414970d-pi.png"
      />
    </p>

    <p>
      The start-of-week day, plus the month and day names, all come for free from
      Globalize. (I don’t actually know if people in Saudi Arabia want their months
      to look like the one above, but couldn’t find conclusive evidence of a single
      preferred style.)
    </p>

    <h2>Localize your UI and get&#0160;fun surprises for free!</h2>

    <p>
      One last bit I thought was funny was rediscovering that, even when building
      atop a localization library or a localization-aware component, there are
      always surprises. I think this can be expressed as a law of UI design:
      <em
        >For any user interface layout that looks good for most cultures, there
        exists a culture that will break that layout.</em
      >
    </p>

    <p>
      Here, the clever packing of the month name into the first row of a six-week
      month (as shown above) looks great in <em>almost</em> all the languages
      defined by Globalize. In that layout, the month name can span up to five
      columns’ worth of width, which is more than enough in most cases. But per the
      above law, there must exist at least one culture for which this layout does
      not work without modification. And such a culture does, in fact, exist:
    </p>

    <p>
      <img
        alt="Sami Calendar"
        src="/images/flowstate/6a00d83451fb6769e201a3faa3c020970b-pi.png"
      />
    </p>

    <p>
      This is the Sami language of northern Scandinavia (“sääm´ǩiõll” in the
      calendar’s language/location list), in which the month of March is called
      “pâ´zzlâšttammään”. In a year like 2014, where March starts on a Saturday, the
      month name will overlap with the date for March 1st. To the 25,000 or so
      speakers of Sami: I’m very sorry about this.
    </p>
2014-04:
  2014-04-30 Component Kitchen preview launched.html: >
    ---

    title: Component Kitchen preview launched

    date: 2014-04-30 22:08

    slug: component-kitchen-preview-launched

    originalUrl: https://component.kitchen/blog/posts/component-kitchen-preview-launched

    ---


    <p>
      Today we’re excited to publicly announce the launch of a preview edition of
      our site at
      <a href="https://component.kitchen"
        ><span class="s1">https://component.kitchen</span></a
      >.
    </p>

    <p>
      At Component Kitchen, we think web components are fundamentally a great way to
      create apps and sites that run across an enormous range of desktop and mobile
      devices. We’re eager to help a mainstream audience learn about this
      technology, and discover for themselves how this technology is going to
      amplify their own creative capabilities as designers, developers, writers,
      students, business people, and more.
    </p>

    <p>
      Earlier this year, we observed that most of the material and tools related to
      web components was intended for a fairly experienced technical audience. We
      feel that, since web components extend what’s possible with plain HTML and
      CSS, web components is actually fundamentally interesting to a much broader
      audience: anyone who is comfortable editing HTML. That’s a lot of people!
    </p>

    <p>
      Additionally, we believe that people creating web components are going to need
      a range of services to help promote and distribute their components to a broad
      audience that includes both hardcore developers and people who work at the
      HTML level.
    </p>

    <p>We’re starting with a few basics:</p>


    <ul>
      <li>
        A
        <a href="https://component.kitchen/components">catalog of components</a>
        which have publicly registered for use. The preview release is quite basic,
        but includes some interesting features such as image previews for many
        components, and an ability to search the catalog.
      </li>
      <li>
        A <a href="https://component.kitchen/feeds/newComponents.xml"
          >New Web Components RSS feed</a
        >. Subscribe to learn about new components as soon as they’re registered.
      </li>
      <li>
        A
        <a href="http://discuss.component.kitchen/"
          >discussion board for talking about web components</a
        >. There are some other public forums for web components, but they focus on
        a highly technical audience. Lots of people will want to use components who
        have never heard of developer hangouts like GitHub or StackOverflow.
      </li>
    </ul>

    <p>We have a number of interesting features ahead:</p>


    <ul>
      <li>
        Live, interactive, configurable component demos. You can see an example on
        the page for the <a
          href="https://component.kitchen/components/basic-web-components/basic-autosize-textarea"
          >basic-autosize-textarea</a
        > component. This lets you play with the component and see how its
        customization options will affect its appearance and behavior.
      </li>
      <li>
        Web component hosting. Many people create HTML in environments like blogging
        platforms or mainstream web hosting platforms that don’t allow complete
        control over the site. If that’s you, we want to allow you to still take
        advantage of web components by hosting the components on Component Kitchen.
        Again, visit the
        <a
          href="https://component.kitchen/components/basic-web-components/basic-autosize-textarea"
          >basic-autosize-textarea</a
        >
        component for an example of component hosting. Click the Copy to Clipboard
        button, then paste the result in any HTML editor or environment. This will
        paste in the &lt;script&gt; and &lt;link&gt; tags that let you use that
        component from its hosted location on Component Kitchen.
      </li>
    </ul>

    <p>
      Our core mission is to help people create great products using web components.
      While we have many ideas for how we can do that, we’re most interested in
      hearing from you. If you have questions or suggestions for our site, let us
      know at <a href="https://twitter.com/ComponentK">@ComponentK</a> on Twitter,
      or on our discussion board.
    </p>

    <p>This is going to be <i>such</i> an exciting time to work on the web!</p>
2014-05:
  2014-05-26 Live demos let people see what a component is all about.html: >
    
    ---

    title: Live demos let people see what a component is all about

    date: 2014-05-26 08:00

    slug: live-demos-let-people-see-what-a-component-is-all-about

    originalUrl: https://component.kitchen/blog/posts/live-demos-let-people-see-what-a-component-is-all-about

    ---


    <p>
      We recently added live demos to the Component Kitchen site for all components
      that define a demo. Components with demos are marked on the
      <a href="https://component.kitchen">home page</a> with a "DEMO" indicator, so
      you can check out all the demos.
    </p>

    <p>
      We always want to make it as easy as possible to find interesting components,
      and demos are obviously the quickest way for someone to really understand what
      a component can do for them. From the beginning of our work on the service,
      we've wanted to host demos <em>in situ</em> on the pages we build for
      components. We want to let a user looking for a component to see the demos
      front and center (without having to link off to another site just to see a
      demo) so they can quickly find what they're looking for.
    </p>

    <p>
      As described in our evolving
      <a href="https://component.kitchen/docs/developers">developer documentation</a
      >, for the time being, you'll need to host the demo at a site you maintain
      (e.g., a GitHub Pages site for your component repository). You can then
      include a @demo line in the comments at the top of your component's main
      source file to indicate where the component is. We've also seen some
      conventions emerge whereby a component can imply the location of a demo, and
      we try to detect when one of those conventions is in use as well, but use of
      the @demo indicator is the clearest way to point to a demo.
    </p>

    <p>
      We host demos within an iframe, but traditional iframes make it hard to
      seamlessly incorporate content from another site, and in particular, the page
      hosting the iframe can't know how <em>tall</em> the framed page is. While it's
      fine for us to define a default height for a framed demo, we really want demo
      authors to be able to control how tall the demo is. Some components, for
      example, are really small, and so it'd be nicer to have the iframe showing the
      demo be exactly the height it needs to be.
    </p>

    <p>
      The standard way to securely communicate across a frame boundary is a facility
      called window.postMessage(). That approach is somewhat cumbersome to use,
      however. What we really wanted was a way to package that communication up. A
      web component was, of course, a great way to do that! We've published our
      solution through our companion of open source project,
      <a href="https://github.com/basic-web-components">basic-web-components</a>.
      There you'll find two components that work together,
      <a
        href="https://component.kitchen/components/basic-web-components/basic-seamless-iframe"
        >basic-seamless-iframe</a
      >, which goes on the <em>framing</em> page, and
      <a
        href="https://component.kitchen/components/basic-web-components/basic-framed-content"
        >basic-framed-content</a
      >, which goes on the <em>framed</em> page. These components cooperatively
      communicate across the frame boundary so that, among other things, the outer
      page can correctly adjust the height of the frame.
    </p>

    <p>
      So, if you'd like to have your demo auto-size when shown on our site, just add
      the basic-framed-content component to your project, and wrap the contents of
      your demo in an instance of &lt;basic-framed-content&gt;. The latter won't
      interfere with anything when someone views the demo on your site, but when
      someone views your component on Component Kitchen, the demo will communicate
      its height to the framing page so that the demo looks just right.
    </p>
2014-06:
  2014-06-16 Deconstructing the standard photo carousel into general-purpose web components.html: >
    
    ---

    title: "Deconstructing the standard photo carousel into general-purpose web components"

    date: 2014-06-16

    slug: deconstructing-the-standard-photo-carousel-into-general-purpose-web-components

    originalUrl: https://miksovsky.blogs.com/flowstate/2014/06/deconstructing-the-standard-photo-carousel-into-general-purpose-web-components.html

    ---


    <p>
      I recently contributed a small handful of web components to the
      <a
        href="https://github.com/basic-web-components/components-dev/wiki"
        target="_self"
        >Basic Web Components</a
      >&#0160;project, and wanted to share some observations on how designing and
      building UI with web components is going to be pretty different from how
      you’ve created UI in the past.
    </p>

    <h2>The basic photo carousel as a component</h2>

    <p>
      The web components I was working on are related to the standard sort of photo
      carousel you see everywhere on the web these days:
    </p>

    <p>
      <img
        alt="Basic-sequence-navigator"
        src="/images/flowstate/6a00d83451fb6769e201a3fd1dbad4970b-500wi.jpeg"
      />
      <br /><br />There are a zillion widgets out there that will create such a
      thing for you, but they generally are connected to a specific web platform
      (WordPress, SquareSpace, etc.) or require the use of JavaScript.&#0160;
    </p>

    <p>
      A carousel web component, on the other hand, lets you construct such a thing
      in HTML alone. Here&#39;s a carousel component called
      basic-sequence-navigator:
    </p>

    <p>
      <span
        >&lt;basic-sequence-navigator&gt;<br />&#0160; &lt;img
        src=”image1.jpg”&gt;<br />&#0160; &lt;img src=”image2.jpg”&gt;<br />&#0160;
        &lt;img src=”image3.jpg”&gt;<br />&#0160; ...<br />&lt;/basic-sequence-navigator&gt;</span
      >
    </p>

    <p>
      You can see a live demo of this component on the Component Kitchen page for
      <a
        href="http://component.kitchen/components/basic-sequence-navigator"
        target="_self"
        >basic-sequence-navigator</a
      >.
    </p>

    <p>
      With a web component like this, you just drop your images (or other elements)
      inside of the component, and you get a carousel. No styling or JavaScript
      required. That’s pretty neat all on its own, but the component’s construction
      is also interesting in its own right.
    </p>

    <h2>Building up from simple pieces</h2>

    <p>
      Existing carousel widgets suffer from trying to present a final solution.
      Someone creates a single widget that handles everything: positioning the
      images, transition effects, Next/Previous buttons, programmatic API, events,
      and more. If there’s anything about that solution you don’t like, you often
      have to reject the whole widget, or else spend time fiddling with widget
      options in hopes of finding a combination of settings that does what you want.
    </p>

    <p>
      Given that web components lets you build bigger things from smaller things, I
      wanted to try to factor the carousel as a user experience into simple pieces
      that you could combine in different ways. Even if you don’t like a specific
      end result, you may nevertheless find some of the building blocks useful in
      constructing your own solution.
    </p>

    <p>
      For starters, consider that the Next/Previous buttons shown above are just a
      specific answer to the general question: how does a user navigate the sequence
      of images? Those buttons aren’t the only answer; there are other common
      answers to this same question. An equally common answer might be putting
      iOS-style dots along the bottom. So it’s silly to inextricably bundle the
      general problem of providing navigation through a sequence with the
      <em>specific</em> solution of Next/Previous buttons.
    </p>

    <p>
      A better answer is to factor the general behavior into one component, and the
      specific UI into a separate component. Accordingly, the
      basic-sequence-navigator component is really based on a more fundamental
      component called basic-sequence. The basic-sequence component handles
      transitional effects like sliding or cross-fading, but
      <em>doesn’t include its own navigation UI</em>.
    </p>

    <p>
      That means you can wire up buttons of your own (or any UI you want) to drive
      an instance of the more fundamental basic-sequence component. A crude example
      of this would be:
    </p>

    <p>
      <span
        >&lt;button
        onclick=&quot;document.querySelector(&#39;#sequence&#39;).previous()&quot;&gt;Previous&lt;/button&gt;</span
      ><br /><span
        >&lt;button
        onclick=&quot;document.querySelector(&#39;#sequence&#39;).next()&quot;&gt;Next&lt;/button&gt;</span
      ><br /><span>&lt;basic-sequence id=&quot;sequence&quot;&gt;</span><br /><span
        >&#0160; &lt;img src=”image1.jpg”&gt;</span
      ><br /><span>&#0160; &lt;img src=”image2.jpg”&gt;</span><br /><span
        >&#0160; &lt;img src=”image3.jpg”&gt;</span
      ><br /><span>&#0160; ...</span><br /><span>&lt;/basic-sequence&gt;</span>
    </p>

    <p>
      You can see a demo of this solution on the page for
      <a href="http://component.kitchen/components/basic-sequence" target="_self"
        >basic-sequence</a
      >. It&#39;s not beautiful, but the point is that&#0160;you can build up your
      own UI from simple pieces. You don’t have to write all the code —&#0160;you
      get things like transition effects for free, for example. At the same time,
      you can create exactly the user experience you want.
    </p>

    <p>
      Maybe you don’t want <em>any</em> visible UI, you just want to show one image
      after another on a timed basis. There’s a separate component called
      <a href="http://component.kitchen/components/basic-slideshow" target="_self"
        >basic-slideshow</a
      >&#0160;that does just that. It uses basic-sequence under the covers, but adds
      the notion of a timer and play/stop semantics:
    </p>

    <p>
      <span>&lt;basic-slideshow effect=”reveal”&gt;</span><br /><span
        >&#0160; &lt;img src=”image1.jpg”&gt;</span
      ><br /><span>&#0160; &lt;img src=”image2.jpg”&gt;</span><br /><span
        >&#0160; &lt;img src=”image3.jpg”&gt;</span
      ><br /><span>&#0160; ...</span><br /><span>&lt;/basic-slideshow&gt;</span>
    </p>

    <p>
      What if you don’t care about transition effects? You can build on top of an
      even simpler component called
      <a href="http://component.kitchen/components/basic-modes" target="_self"
        >basic-modes</a
      >. That just shows one child element at a time. And even that component is
      built from simpler pieces, including
      <a
        href="http://polymer.github.io/core-selector/components/core-selector/"
        target="_self"
        >core-selector</a
      >, a component that just keeps track of which item in a set is selected
      (without defining what selecting means or looks like). And
      <em>that</em> component is built from even simpler one. It’s components, all
      the way down.
    </p>

    <p>
      The idea here is that UI shouldn’t be delivered as a huge, final thing with a
      million knobs on it to cover every conceivable situation. Instead, complex UI
      should be built up from simpler pieces, each of which do a great job at one
      thing.
    </p>

    <h2>Styleability</h2>

    <p>
      Of course, if you do like the general idea of Next and Previous buttons, but
      want them to look different, you can use basic-sequence-navigator, and then
      take advantage of the styleability built into web components. Using CSS rules,
      you can override the default styling to better match your app’s aesthetics and
      brand.
    </p>

    <h2>Get your UI for nothing, and accessibility for free</h2>

    <p>
      The basic-sequence-navigator component has a nice feature most carousels lack:
      keyboard support! If you press the Left or Right key while the component has
      focus, the carousel advances, respectively, to the previous or next image. To
      help make that feature more discoverable, the component sports a focus
      rectangle when it has the focus.
    </p>

    <p>
      It’s kind of appalling the web is chock full of photo carousels that can’t be
      navigated with a keyboard. That not only shuts out a big chunk of people for
      whom a mouse or trackpad is hard to use, it’s also generally inconvenient for
      everyone else. If you have to page back and forth through a sequence of
      images, using Left/Right keys is simply much faster than moving a mouse or
      finger back and forth to hit buttons on either side of the images.
    </p>

    <p>
      Some web sites, generally big ones with large staff, can afford to spend time
      getting accessibility details like keyboard navigation right. But I’m willing
      to bet that the vast majority of photo carousels on the web today aren’t
      accessible. The problem isn’t just awareness —&#0160;the software industry has
      been talking about accessibility for a long, long time. The deeper problem is
      that the economics of implementing accessibility are often terrible. If
      everyone has to implement something like keyboard support on their own, for
      any single team, the predicted return on the investment is just too low to
      pursue.
    </p>

    <p>
      With web components, the economics could improve radically. Once people can
      share UI solutions as components, even small improvements can potentially
      benefit thousands of sites. So someone may find it worth their time to add
      support for keyboard users, or users with low vision, or screen reader users,
      and so on. Even if the original author of a component (say, me) knows just a
      tiny bit about the accessibility implications of ARIA support, perhaps there’s
      someone else out there (you?) who knows ARIA inside and out and can help get
      it right.&#0160;
    </p>

    <p>
      The best part is that, if accessibility can be improved for free, everyone
      benefits
      <em
        >even if most people won’t know they’re making their products more
        accessible</em
      >. Most people aren’t going to adopt a component like
      &lt;basic-sequence-navigator&gt; because it has good accessibility. They’re
      going to adopt it for selfish reasons — it’s going to save them time.&#0160;
    </p>

    <p>
      That’s fine! If someone can just drop in a photo carousel component because it
      saves time implementing a design, they&#39;ll use it, even if they know
      nothing about accessibility. They don’t even need to know that the
      carousel&#39;s built-in accessibility features exist for the component to help
      them support a broader audience of end users.
    </p>

    <h2>Some principles for general-purpose web components</h2>

    <p>
      If you’re interested in this approach, and want to learn more about creating
      general-purpose web components, the Basic Web Components site has a page on
      <a
        href="https://github.com/basic-web-components/components-dev/wiki/Ten-Principles-for-Great-General-Purpose-Web-Components"
        target="_self"
        >10 Principles for Great General-Purpose Components</a
      >. If you’d like to take a shot at contributing to the project, the
      <a
        href="https://github.com/basic-web-components/components-dev/wiki"
        target="_self"
        >home page</a
      >&#0160;provides a long list of components the world could use.
    </p>

    <p>&#0160;</p>
  2014-06-16 General-purpose web components.html: >
    ---

    title: General-purpose web components

    date: 2014-06-16 08:15

    slug: general-purpose-web-components

    originalUrl: https://component.kitchen/blog/posts/general-purpose-web-components

    ---


    <p>
      Component Kitchen founder Jan Miksovsky shares some of his
      <a
        href="http://miksovsky.blogs.com/flowstate/2014/06/deconstructing-the-standard-photo-carousel-into-general-purpose-web-components.html%20"
        >recent experience creating some general-purpose components</a
      >
      over on his user interface design/development blog at flow|state.
    </p>

    <p>
      Creating really good general-purpose components entails more work than
      creating components for a single organization or product. You can find a good
      list of
      <a
        href="https://github.com/basic-web-components/components-dev/wiki/Ten-Principles-for-Great-General-Purpose-Web-Components"
        >principles for great general-purpose components</a
      > on the site for the open source <a
        href="https://github.com/basic-web-components/components-dev/wiki"
        >basic-web-components</a
      >
      project, which is sponsored by Component Kitchen.
    </p>
2014-08:
  2014-08-04 Delegate brain-melting date math and localization to general-purpose calendar web components.html: >
    
    ---

    title: "Delegate brain-melting date math and localization to general-purpose calendar web components"

    date: 2014-08-04

    slug: general-purpose-calendar-web-components

    originalUrl: https://miksovsky.blogs.com/flowstate/2014/08/general-purpose-calendar-web-components.html

    ---


    <p>Which of these month calendars looks correct to you?</p>

    <p>
      <img
        alt="Calendar (English UK)"
        src="/images/flowstate/6a00d83451fb6769e201a511ed85ac970c-800wi.png"
      />
      &#0160;
    </p>

    <p>
      <img
        alt="Calendar (English US)"
        src="/images/flowstate/6a00d83451fb6769e201a73df8bdf5970d-800wi.png"
      />
    </p>

    <p>
      <img
        alt="Calendar (English, starts on Saturday)"
        src="/images/flowstate/6a00d83451fb6769e201a73df8be19970d-800wi.png"
      />
    </p>

    <p>
      One of the calendars will probably look right. The other two will just look
      wrong — like they’re mistakes, or maybe not even calendars. Setting aside the
      basics of which language the words appear in, the simple question of which day
      column should be first is a pretty key thing to get right in a calendar.
      Depending on where you live or grew up, you may prefer that the first column
      of a month calendar be Mondays, Sundays, or Saturdays. (It’s not completely
      clear to me, but it appears there may be a community of people — speakers of
      Dari, a dialect of Persian — who prefer that the first column be Fridays.) In
      some languages, you may want the order of days to go right-to-left as well, in
      which case you might want the first column to be the rightmost instead of the
      leftmost.
    </p>

    <p>
      These are the kinds of detail that are nearly impossible for a small team to
      get right if they’re writing their own calendar from scratch, and yet the
      world is filled with proprietary date picker widgets and calendars. Even if we
      ignore the colossal waste of time represented by all those unnecessary
      reinventions of the calendar, nearly all of those calendar implementations
      will fail to localize basic details (such as the day shown as the first day of
      the week). That is, if your app is using a calendar your team wrote from
      scratch, there is a very good chance that a substantial number of users
      outside your country and language view believe your calendar is just wrong.
      And even if you picked up a calendar widget at some point, and it was pretty
      good to begin with, if you copied that code, you likely haven&#39;t picked up
      any of the bug fixes that were made in it since you made your copy.
    </p>

    <p>
      This is yet another area where a broad web component ecosystem will
      fundamentally change things. As discussed on this blog many times before, the
      economics of user experience design and engineering will of course change. But
      it’s also the case that sharing solid user interface components will finally
      allow a broad swath of the software industry to finally get UI details right
      on tricky things like calendars.
    </p>

    <h2>Open calendar components</h2>

    <p>
      With that goal in mind, I’ve contributed a set of calendar components to the
      open source Basic Web Components project. Rather than producing a monolithic
      monthly calendar component, these components follow the
      <a
        href="https://github.com/basic-web-components/components-dev/wiki/Ten-Principles-for-Great-General-Purpose-Web-Components"
        target="_self"
        >guidelines for general-purpose components</a
      >. Among other things, they are factored into components that each try to do
      just a single thing well:&#0160;
    </p>

    <ul>
      <li>
        <p>
          <a
            href="http://component.kitchen/components/basic-calendar-day"
            target="_self"
            >basic-calendar-day</a
          >. This shows a single day in a week/month/year calendar. It has a date
          attribute indicating which day to show. By default, it just shows the
          number of that day in the month. That is, for August 1, 2014, it just
          shows the text “1”. That’s all it does.
        </p>
      </li>
      <li>
        <p>
          <a
            href="http://component.kitchen/components/basic-calendar-week"
            target="_self"
            >basic-calendar-week</a
          >. This represents a single week. It’s just a collection of 7
          basic-calendar-day components whose date attributes are synced to always
          be one day apart. (The component takes special care to deal with things
          like daylight savings time changes.) Which day of the week is shown first
          can be changed to suit the user’s preferred location/culture (see
          localization, below). By default, the days are shown in a horizontal
          layout. This week is used in the month calendar component described below,
          but could also also be used in other situations, such as an
          infinitely-scrollable calendar.
        </p>
      </li>
      <li>
        <p>
          <a
            href="http://component.kitchen/components/basic-calendar-month-days"
            target="_self"
            >basic-calendar-month-days</a
          >. This shows the days of a single calendar month. This is constructed as
          set of 4 to 6 instances of basic-calendar-week. (The number varies based
          on the length of the month and the day of the week the month starts on.)
          This component does not include any headings. By default, weeks are shown
          in a vertical stack. This is done with default styling using a CSS
          display: table-row-group rule, so that headings for the day columns can
          easily be added and lined up correctly.
        </p>
      </li>
      <li>
        <p>
          <a
            href="http://component.kitchen/components/basic-days-of-week"
            target="_self"
            >basic-days-of-week</a
          >. This just shows the names for the days of the week in a given language
          (see localization, below). The standard CSS styling for this has display:
          table-row-group, so it can easily be matched up with a table-row or
          table-row-group like basic-calendar-month-days. This component (and some
          of the others here) doesn’t have the word “calendar” in its component name
          because there might be some situations in which its useful outside the
          context of a standard monthly calendar. It could serve, say, as a header
          for a table showing weekly specials in a restaurant, or a chore chart of
          kids, etc.
        </p>
      </li>
      <li>
        <p>
          <a
            href="http://component.kitchen/components/basic-month-name"
            target="_self"
            >basic-month-name</a
          >. This shows the name of the month in a given language (see localization,
          below).
        </p>
      </li>
      <li>
        <p>
          <a
            href="http://component.kitchen/components/basic-month-and-year"
            target="_self"
            >basic-month-and-year</a
          >. This shows the name of the month and the year for a given date. The
          order of the month name and year will match the direction of the text in a
          right-to-left language like Arabic or Hebrew.
        </p>
      </li>
      <li>
        <p>
          <a
            href="http://component.kitchen/components/basic-calendar-month"
            target="_self"
            >basic-calendar-month</a
          >. This component puts together the above elements in a typical layout for
          a month calendar. It stacks together headings for basic-month-and-year and
          basic-days-of-week on top of a table of days provided by
          basic-calendar-month-days. Setting the desired language/culture for this
          component updates all the headings as well as the day shown as the first
          day of the week.
        </p>
      </li>
    </ul>

    <p>
      Note that basic-calendar-month just renders a calendar. It doesn’t handle date
      selection, although that could be added through creation of another component.
      The month calendar is inline (directly on the page), but could be incorporated
      into a dropdown for a typical dropdown date picker. Or you could combine
      twelve instances of basic-calendar-month together to create a year calendar,
      etc., etc.
    </p>

    <p>
      Per the guidelines, these components include an absolutely minimal degree of
      styling required to get something useful. You would undoubtedly want to style
      these further to meet your own application’s brand. This should not be too
      difficult, as web components can be styled through CSS.
    </p>

    <h2>Localization</h2>

    <p>
      To easily and accurately localize these calendar web components, they all make
      use of the excellent
      <a href="https://github.com/jquery/globalize" target="_self">Globalize</a>
      project sponsored by jQuery. Globalize supports about 350 different languages,
      locations, and cultures around the world. As it turns out, Globalize already
      defines everything these components need: which day of the week should come
      first, the names of the days, and the names of the months. So you can simply
      tell Globalize to load the settings for a particular language/culture, and
      then hand that pile of settings to the components, and they’ll set themselves
      up appropriately. Here’s basic-month-calendar in Japanese, French (in France),
      and Arabic (in Saudi Arabia):
    </p>

    <p>
      <img
        alt="Calendar (Japanese)"
        src="/images/flowstate/6a00d83451fb6769e201a3fd3db373970b-800wi.png"
      />
    </p>

    <p>
      <img
        alt="Calendar (French)"
        src="/images/flowstate/6a00d83451fb6769e201a73df8be84970d-800wi.png"
      />
    </p>

    <p>
      <img
        alt="Calendar (Arabic, Saudi Arabia)"
        src="/images/flowstate/6a00d83451fb6769e201a3fd3db388970b-800wi.png"
      />&#0160;
    </p>

    <p>
      Note that all text strings here (the month names, and the names for the days
      of the week) are coming from Globalize, not from the application or the
      calendar component. Globalize also supports different formats for the names of
      the days of the week, so you can choose between&#0160;full and abbreviated
      headings.
    </p>

    <p>
      <em
        >[Aside: an open question for me is whether a calendar for a right-to-left
        language should have the order of days go from right-to-left as well. I can
        find some Arabic calendars, for example, that have the first day of the week
        go in the rightmost column —&#0160;but I can also find plenty of examples
        that have the first day of the week in the leftmost column. And all the
        examples of Hebrew calendars I can find have the first day of the week in
        the leftmost column. This just goes to show that localization will always
        surprise you and/or make your head hurt. The Globalize library doesn’t seem
        to include information on the preferred direction of time, so for now these
        components assume that left-to-right is generally acceptable.]</em
      >
    </p>

    <p>
      To simplify the localization of an app using these components, I’ve put
      together a simple
      <a
        href="http://component.kitchen/components/basic-culture-selector"
        target="_self"
        >basic-culture-selector</a
      >
      component that can dynamically load all the necessary settings based on the
      user’s prefered language/culture. (This component can also be used
      behind-the-scenes as a language/culture settings loader.) Components such as
      these calendar components can then obtain the right settings from an instance
      of basic-culture-selector directly through declarative data binding, with no
      scripting required.
    </p>

    <p>
      Reality check: Localization is an incredibly complex topic, and language- and
      culture-aware components are just a part of a solution. To really do justice
      to a global audience, an app team would need to take a comprehensive approach
      to localization. Among other things, an app would need some reasonable way to
      set a default language/culture (based on domain, geolocation, and/or apparent
      IP location), a way to store language/culture preferences with a user account,
      and a UI for switching language/culture. It would also help if browser vendors
      participated in a good standard solution, so users aren’t forced to indicate
      their preferred language/country/etc. on a site-by-site basis. Still, having
      solid, localizable components is a good place to start.
    </p>

    <h2>A calendar as a meta-component</h2>

    <p>
      Many applications want to render data on a calendar: appointments,
      availability, and so on. Most calendar widgets are useless in this regard
      outside a narrowly-envisioned range of scenarios, because they make so many
      assumptions about what data will be shown. Rather than viewing a week or month
      calendar as having a particular visual representation, it seems more helpful
      to consider a calendar as a skeleton or abstract structure capable of holding
      components for each day whose only requirement is that they can accept a date.
      How a day component renders that date is entirely up to them.
    </p>

    <p>
      For this reason, the basic-calendar-month (and -week) components have a dayTag
      attribute that can be used to provide the name of another component class that
      will be used to render the individual days of the month/week. The default
      dayTag value is basic-calendar-day, but this can be changed to any other
      class. The only requirement on the interface of the indicated class is that it
      have a property setter called “date” that accepts a JavaScript Date object.
      This allows one to easily render arbitrary data into the structure of a
      calendar.
    </p>

    <p>
      To show this in action, suppose we want to create a month calendar that shows
      the major phases of the moon (new, first quarter, full, last quarter, or
      nothing special). To keep things well factored, we start by creating a web
      component called
      <a
        href="https://github.com/basic-web-components/basic-calendar-day/blob/master/demo/moon-phase.html"
        target="_self"
        >moon-phase</a
      >&#0160;that just renders the phase of the moon as an icon. It doesn’t shown a
      day number, or anything else, because we just want it to do one thing really
      well.
    </p>

    <p>
      We then create a custom day component, either from scratch or, for simplicity,
      by extending the existing basic-calendar-day component. We drop an instance of
      moon-phase into that class and add a day number so we get both the number and
      the moon icon. Finally, we instantiate a basic-month-calendar and tell it to
      use that class to render the days. Et voilà, with a teeny tiny bit of work, we
      get a perpetual moon calendar. In U.S. English, this would look like:
    </p>

    <p>
      <img
        alt="Calendar (Moon Phase)"
        src="/images/flowstate/6a00d83451fb6769e201a3fd3db566970b-800wi.png"
      />
    </p>

    <p>&#0160;</p>

    <p>
      [See the
      <a
        href="http://component.kitchen/components/basic-calendar-day"
        target="_self"
        >live demo</a
      >]
    </p>

    <p>
      By building on top of basic-month-calendar, this moon calendar not only avoids
      the headaches of date math, it also automatically obtains a high degree of
      localizability provided by the underlying Globalize library. As improvements
      are made in the underlying basic-month-calendar, the moon calendar picks up
      those improvements for free.
    </p>

    <p>
      Here one web component (basic-month-calendar) allows a portion of its UI (the
      rendering of days) to be overridden by accepting a second web component class
      as input (via the dayTag attribute). The calendar is effectively an abstract
      component or meta-component that defines a structure which is completely or
      partially filled in by another class. This UI pattern parallels the use of
      abstract classes in programming languages, and seems generally useful in many
      other component situations.
    </p>

    <p>
      Patterns like this may go a long way toward ensuring web components can really
      be general purpose, and may ultimately be a key part of managing some of the
      date math and localization complexities I’ve touched upon in this post. As
      some of the calendar issues raised here suggest, it’s notoriously difficult to
      do anything with dates and time, especially when one wants to localize a UI
      across a wide range of languages and cultures. The best strategy for ensuring
      that someone, somewhere has sufficient motivation to fix tricky issues is to
      maximize the audience for the component. And one way to increase the size of
      the audience is to make the component as general-purpose as possible. That is,
      creating a wide range of scenarios for a general-purpose component like
      basic-month-calendar seems critical to ensure that the component gets
      sufficient attention to make it reliable in a wide range of circumstances.
    </p>

    <p>&#0160;</p>

    <p>
      <em
        >[Speaking of open source contributions, I wanted to take this opportunity
        to publicly thank a few people who offered early contributions to the
        relatively new Basic Web Components project.
        <a href="https://twitter.com/OliverJAsh" target="_self">@OliverJAsh</a
        >&#0160;filed the first bug report on the project,
        <a href="https://twitter.com/PascalPrecht" target="_self">@PascalPrecht</a>
        &#0160;submitted the first pull request, and
        <a href="https://github.com/daverome" target="_self">Dave Romero</a
        >&#0160;made the first edits to the wiki. Many thanks to the three of
        them!]</em
      >
    </p>
2014-10:
  2014-10-20 google-map — A simple wrapper for maps and driving directions.html: >
    
    ---

    title: "google-map — A simple wrapper for maps and driving directions"

    date: 2014-10-20 08:00

    slug: google-map-a-simple-wrapper-for-maps-and-driving-directions

    originalUrl: https://component.kitchen/blog/posts/google-map-a-simple-wrapper-for-maps-and-driving-directions

    ---


    <p>
      Many companies embed a hard-coded Google Map on their site to show, for
      example, the location of their office. This component allows you to easily
      create more dynamic maps. You could, for example, combine this with
      <a href="https://component.kitchen/components/ebidel/geo-location"
        >geo-location</a
      >
      to show your user's current location.
    </p>

    <p>
      <strong>Likes:</strong>
      You can combine the basic <code>google-map</code> component with the companion
      <code>google-map-directions</code> to provide driving directions from the user
      to your store, office, etc. This points toward a momentous promise: a domain-
      specific markup language for creating interactive maps.
    </p>

    <p>
      <strong>Dislikes:</strong>
      In its current state, this component mostly wraps the Google Maps API, which
      is powerful but rather complex if you're not already familiar with it. In many
      cases (e.g., a driving route with more than one stop), you'll be forced to use
      the more complex underlying API. Given Google's preemince in mapping, we'd
      love to see them push much further with this library of components.
    </p>

    <p>
      <a href="https://github.com/GoogleWebComponents/google-map/"
        >View google-map on GitHub</a
      >
    </p>
  2014-10-27 slide-page — Create basic browser-based presentations in HTML.html: >
    
    ---

    title: "slide-page — Create basic browser-based presentations in HTML"

    date: 2014-10-27 08:00

    slug: slide-page-create-basic-browser-based-presentations-in-html

    originalUrl: https://component.kitchen/blog/posts/slide-page-create-basic-browser-based-presentations-in-html

    ---


    <p>
      There are already a number of web components that wrap existing slide-based
      presentation libraries; slide-page is notable for being written from the
      ground up with web components. The
      <a href="https://github.com/unbug/slide-page/blob/master/slide-page.html"
        >source code</a
      >
      for the core component is little more than a wiring together of existing parts
      in a novel combination. That approach is, in fact, <em>exactly right</em>, and
      component writing at its best! This component mostly adds sequential arrow
      button navigation around Polymer's core-animated-pages component. For the
      buttons, it takes advantage of Google's Material Design theme, specifically
      the Paper floating action button.
    </p>

    <p>
      <strong>Likes:</strong>
      Great use of existing Polymer and Paper components; some keyboard navigation.
    </p>

    <p>
      <strong>Dislikes:</strong>
      The stock appearance shows a "Powered by Polymer" banner that few people are
      going to want. It's possible to turn it off through styling, but we like
      components whose default appearance is the most practical starting point.
    </p>

    <p>
      <a href="https://github.com/unbug/slide-page">View slide-page on GitHub</a>
    </p>
  2014-10-30 A new series of web component reviews with live demos.html: >
    
    ---

    title: A new series of web component reviews with live demos

    date: 2014-10-30 08:00

    slug: a-new-series-of-web-component-reviews-with-live-demos

    originalUrl: https://component.kitchen/blog/posts/a-new-series-of-web-component-reviews-with-live-demos

    ---


    <p>
      We've been eagerly tracking the state of the web components community since we
      started Component Kitchen earlier this year. Over that time, it's been
      exciting to watch the number of web components registered with
      <a href="http://bower.io">Bower</a> grow from about 40 to nearly 500 today.
    </p>

    <p>
      The growth in our component catalog, however, has meant that it's becoming
      harder and harder for someone like you to find interesting components just by
      browsing around. We want to help you find the interesting stuff. To do that,
      we're making three changes to our site:
    </p>

    <ol>
      <li>
        <p>
          We've begun dedicating a portion of our own time to sifting through the
          catalog of web components for components that are notable in some way. We
          want to highlight components that: solve a common user interface design
          problem in a way that can be readily adopted in your own apps, demonstrate
          how to write good web components, or show off what's possible with web
          components.
        </p>
        <p>
          When we find a notable component, we'll write a small capsule review for
          it. Along with the review, we’ll craft our own little demo of that
          component being used in some common way. This demo will let us confirm to
          ourselves that the component works as advertised, and will also give us a
          feel for the component’s strengths and weaknesses. We hope these little
          demos will make it easier for you to see on a small scale what a component
          might do for you.
        </p>
      </li>
      <li>
        <p>
          We've redesigned our home page to feature these component reviews and
          other news (like this post). The home page previously featured a complete
          list of all registered components; that list is now available in the
          <a href="https://component.kitchen/components">Component Catalog</a>
          section of our site.
        </p>
      </li>
      <li>
        <p>
          We've moved our temporary Component Kitchen blog feed in house. To get off
          the ground, we'd hosted our blog on a separate site, but you'll now find
          it here. If you'd like to keep track of what's happening in the world of
          web components,
          <a href="https://component.kitchen/feeds/blog.xml"
            >subscribe to our blog feed</a
          >
          at this new location.
        </p>
      </li>
    </ol>

    <p>
      We'll be scouring the catalog of components for interesting work, but if
      you've seen something you think is worth highlighting, please give us a shout
      at
      <a href="http://twitter.com/ComponentK">@ComponentK</a>!
    </p>
  2014-10-30 voice-elements — Easy access to the Web Speech API (on Chrome).html: >
    
    ---

    title: "voice-elements — Easy access to the Web Speech API (on Chrome)"

    date: 2014-10-30 08:01

    slug: voice-elements-easy-access-to-the-web-speech-api-on-chrome

    originalUrl: https://component.kitchen/blog/posts/voice-elements-easy-access-to-the-web-speech-api-on-chrome

    ---


    <p>
      The voice-elements component gives you easy access to the Web Speech API
      natively supported (as of this writing) only in Chrome. This lets you both
      read text aloud to the user, and perform basic voice recognition. Users can
      quickly tire of repetitive spoken prompts, but voice playback might useful for
      short alerts that incorporate dynamic content such as data coming from your
      app.
    </p>

    <p>
      <strong>Likes:</strong>
      This supports multiple accents!
    </p>

    <p>
      <strong>Dislikes:</strong>
      None of the other browsers — Firefox, Safari, and IE — currently support the
      Web Speech API. We still think components like this are an important
      indication of the sort of power that components can put in anyone's hand.
    </p>

    <p>
      <a href="https://github.com/zenorocha/voice-elements/"
        >View voice-elements on GitHub</a
      >
    </p>
2014-11:
  2014-11-03 x-rating — Simple star rating element that works.html: >
    
    ---

    title: x-rating — Simple star rating element that works

    date: 2014-11-03 08:00

    slug: x-rating-simple-star-rating-element-that-works

    originalUrl: https://component.kitchen/blog/posts/x-rating-simple-star-rating-element-that-works

    ---


    <p>
      Sometimes the simplest approach works best. A number of registered web
      components aim to handle the simple task of showing or soliciting a star
      rating from a user using the now-convential set of 5 stars. On its own, a
      5-star rating system can present serious issues, as users tend to offer
      responses only at the extremes, but when managed well (adding users to add
      comments to explain their response, etc.), such rating systems can be useful.
    </p>

    <p>We tried three star rating components:</p>

    <ul>
      <li>
        <a href="https://component.kitchen/components/dreyescat/rating-element"
          >rating-element</a
        >. We set aside this one aside when we found that it relies on an image
        sprite; in this age of responsive design, using an image sprite feels a bit
        antiquated.
      </li>
      <li>
        <a href="https://component.kitchen/components/manoelneto/star-rating"
          >polymer-star-rating</a
        >. This is the most full-featured of the three components we looked at: in
        particular, it's the only one that lets you can use different symbols for
        each rating, instead of always using a star. We had some difficulties
        getting the component to work in a demo of our own. (We filed a bug.) There
        were some other confusing points as well: the package name (polymer-
        star-rating) doesn't match the element name (star-rating), and the component
        made assumptions about the location of dependencies like polymer.html that
        didn't match up with how we'd set up things. Still, we have high hopes for
        this component.
      </li>
      <li>
        <a href="https://component.kitchen/components/hershmire/x-rating"
          >x-rating</a
        >. This is the simplest component of the lot, but it worked immediately and
        did what we wanted. It uses Unicode code glyphs for the stars, which has the
        advantage of picking up the current text color. The glyph unfortunately
        isn't a parameter you can change, but that's nevertheless fine for the many
        cases in which you might want to just use a standard star.
      </li>
    </ul>

    <p>
      Obviously, with any head-to-head comparison like this, it's hard to say which
      component is really "best" for everyone. But for our quick experiment, we
      found x-rating did the job simply and well, so that's the component we're
      showing in the accompanying demo. Nice work,
      <a href="https://github.com/hershmire">hershmire</a>!
    </p>

    <p>
      <a href="https://github.com/hershmire/x-rating/">View x-rating on GitHub</a>
    </p>
  2014-11-06 akyral-modal – Modal overlay with beautiful demos and documentation.html: >
    
    ---

    title: akyral-modal – Modal overlay with beautiful demos and documentation

    date: 2014-11-06 08:00

    slug: akyral-modal-modal-overlay-with-beautiful-demos-and-documentation

    originalUrl: https://component.kitchen/blog/posts/akyral-modal-modal-overlay-with-beautiful-demos-and-documentation

    ---


    <p>
      We love the elegant demos and documentation
      <a href="https://github.com/filaraujo">filaraujo</a>
      is creating for his collection of web components. His akyral-modal component,
      for example, addresses the common need to have a modal dialog or other UI
      appear in front of other elements on the page. Several other modal components
      exist, but none so nicely documented.
    </p>

    <p>
      <strong>Likes:</strong>
      The author's taken care to give akyral-modal a bare-bones appearance. We find
      often it easier to add our own visual style to a plain component than to try
      to override a complex visual styling baked into a component's default
      appearance. We're also a big fan of interactive demos that can be configured
      on the fly. A demo is worth 10,000 words.
    </p>

    <p>
      <a href="https://github.com/filaraujo/akyral-modal"
        >View akyral-modal on GitHub</a
      >
    </p>
2014-12:
  2014-12-01 ordered-columns — Pinterest-style packed column layout.html: >
    
    ---

    title: ordered-columns — Pinterest-style packed column layout

    date: 2014-12-01 16:00 UTC

    slug: ordered-columns-pinterest-style-packed-column-layout

    originalUrl: https://component.kitchen/blog/posts/ordered-columns-pinterest-style-packed-column-layout

    ---


    <p>
      ordered-columns implements a packed column layout in the style of Pinterest.
      Home pages with cards or modules that vary in height often use this layout to
      pack the cards into columns: cards are assigned in order to whichever column
      is currently the shortest. Such a layout is quick to compute, produces
      visually engaging results, maximizes content that appears above the fold. It's
      a useful responsive design pattern that scales well from small displays to
      very large ones. Many JavaScript libraries exist to implement this pattern,
      but this is a great example of a pattern that can be delivered as a web
      component.
    </p>

    <p>
      <strong>Likes:</strong> Author
      <a href="https://github.com/stevenrskelton">Steven Skelton</a>
      implements this column layout from the ground up as a Polymer web component.
      We see many, many web components that simply wrap an existing JavaScript
      library, and while that's a fine way to start, it can also lead to bloat. He
      also provides good documentation and numerous examples.
    </p>

    <p>
      <strong>Nits:</strong> The component only works with &lt;article&gt; elements
      (or elements with role="article"); it would be nicer if it could work with any
      type of child element. The component also moves all the children from the
      light DOM (the outer page) to the component's own shadow DOM. This effectively
      removes the children from the main page, complicating styling and the handling
      of events generated by the children.
    </p>

    <p>
      Apologies that we were unable to get our demo working in IE. We try hard to
      ensure all demos work in all mainstream browsers, but after spending too much
      time wrestling with IE, we decided we'd rather publish this review than keep
      debugging. Our issue likely had more to do with our own blog-with-demos
      environment than with the ordered-columns component itself.
    </p>

    <p>
      <a href="https://github.com/stevenrskelton/ordered-columns"
        >View ordered-columns on GitHub</a
      >
    </p>
  "2014-12-10 basic-list-box — keyboard-navigable list box, now with ARIA support for better accessibility.html": >
    
    ---

    title: basic-list-box — keyboard-navigable list box, now with ARIA support for better accessibility

    date: 2014-12-10 16:00 UTC

    slug: basic-list-box-keyboard-navigable-list-box-now-with-aria-support-for-better-accessibility

    originalUrl: https://component.kitchen/blog/posts/basic-list-box-keyboard-navigable-list-box-now-with-aria-support-for-better-accessibility

    ---


    <p>
      This review focuses not on a component, but an <em>aspect</em> of a component
      called
      <a
        href="https://component.kitchen/components/basic-web-components/basic-list-box"
        >basic-list-box</a
      >. Component Kitchen released that component under the aegis of the
      <a href="https://github.com/basic-web-components/components-dev/wiki"
        >Basic Web Components</a
      >
      project. In our reviews, we want to avoid focusing too much on our own work,
      but in this case we can happily feature a small but important contribution to
      the project from developer
      <a href="https://twitter.com/marcysutton">Marcy Sutton</a>, a passionate
      advocate for building an accessible web that can be used by everyone.
    </p>

    <p>
      An important goal for Basic Web Components is to make all its components as
      accessible as possible, for several reasons. You can use these components,
      used as is, and reach the broadest possible range of users. You can extend
      these components or incorporate them into your own components, and
      automatically pick up a degree of support for accessibility. And you can refer
      to these components as good examples of how to implement accessibility if
      you’re creating a new component entirely from scratch. This work is just
      beginning, and by no means perfect, but those are the goals. The good news is
      that improvements are made to the components, anyone using those components
      can easily pick up those improvements for free.
    </p>

    <p>
      As a case in point, Marcy recently contributed an enhancement to
      basic-list-box (and a lower-level base class called
      <a
        href="https://component.kitchen/components/basic-web-components/basic-selector"
        >basic-selector</a
      >) that improves a list's accessibility through the use of appropriate
      <a href="http://www.w3.org/WAI/intro/aria">ARIA</a> features on the list
      itself and the individual items in the list. The best part about an
      improvement like this in a fundamental building block like basic-selector or
      basic-list-box means that you can achieve better accessibility simply by using
      those components. Even if you know nothing about ARIA and accessibility
      technologies, using these components makes your app likely to be more
      accessible than one constructed from a undifferentiated pile of divs.
    </p>

    <p>
      <strong>Noteworthy:</strong>
      Support for keyboard navigation, including Up/Down, Page Up/Down, Home/End.
      Appropriate use of ARIA roles and other attributes means that users who are
      blind or visually impaired can more easily identify and navigate a list of
      items.
    </p>

    <p>
      <a href="https://github.com/basic-web-components/basic-list-box"
        >View basic-list-box on GitHub</a
      >
    </p>
  2014-12-21 Print a handy 2015 wall calendar built with web components.html: >
    
    ---

    title: Print a handy 2015 wall calendar built with web components

    date: 2014-12-21 16:00 UTC

    slug: print-a-handy-2015-wall-calendar-built-with-web-components

    originalUrl: https://component.kitchen/blog/posts/print-a-handy-2015-wall-calendar-built-with-web-components

    ---


    <p>
      If you hold or participate in project management discussions, consider
      printing out this handy
      <a href="http://janmiksovsky.github.io/printable-wall-calendar/"
        >Printable Wall Calendar</a
      >
      that was quickly built with web components.
    </p>

    <figure>
      <a href="http://janmiksovsky.github.io/printable-wall-calendar/">
        <img src="/images/ck/Printable Wall Calendar.jpg" style="max-width: 100%" />
      </a>
    </figure>

    <p>
      Jan constructed the original version of this calendar years ago to answer to
      two simple calendar questions that often come up in planning discussions:
    </p>

    <ol>
      <li>
        <strong>On which day of the week will a given date fall?</strong>
        If some asks, "Can you ship this on June 15?", you often want to know,
        "Well, what day of the week is that? Is that even a weekday?"
      </li>
      <li>
        <strong>What's the date of a given day of the week?</strong>
        Maybe your agile development group likes to make big releases on Mondays. If
        you think you might release something two Mondays from now, what date is
        that?
      </li>
    </ol>

    <p>
      You can answer these questions by pulling out your phone, but sometimes paper
      is faster than gadgets. A wall calendar can answer these questions nearly
      instantly — as long as the calendar is well designed for this purpose. The
      problem is that most wall calendars have way too much clutter. They're
      designed for a previous era in which people
      <em>wrote critical scheduling information on a paper wall calendar</em>. No
      one does that now. If instead you just want a calendar to answer the questions
      above, its design can be much simpler. A simpler design means the actual
      calendar dates can be bigger and easier to read across a room.
    </p>

    <p>
      This calendar was built using the
      <a
        href="https://component.kitchen/components/basic-web-components/basic-calendar-month"
        >basic-calendar-month</a
      >
      component, which takes care of all the date math, as well as handling
      localized month and day names for a huge number of languages and regional
      preferences. To build a year calendar was a simple matter of slapping 12 of
      these month calendars together and applying some styling.
    </p>
2015-01:
  2015-01-12 Try our interactive web components tutorial.html: >
    
    ---

    title: Try our interactive web components tutorial

    date: 2015-01-12 16:00 UTC

    slug: try-our-interactive-web-components-tutorial

    originalUrl: https://component.kitchen/blog/posts/try-our-interactive-web-components-tutorial

    ---


    <p>
      We've just posted an
      <a href="/tutorial">interactive web components tutorial</a>
      that teaches the basic concepts with editable live demos. We hope you'll find
      that this tutorial:
    </p>

    <ul>
      <li>Explains the key principles at a quick pace under your control.</li>
      <li>
        Illustrates the principles through engaging, live HTML demos. We think the
        best way to learn a technology is to play with it yourself!
      </li>
      <li>
        Introduces concepts from the perspective of the component user. Most web
        component presentations start with the assumption that you're a developer
        creating a component from scratch. But one of the great things about web
        components is that components can be <em>used</em> by a wider audience than
        the people who can <em>create</em> components.
      </li>
      <li>
        Only requires knowledge of HTML. If you're one of the many people who has
        read or written HTML, but don't consider yourself to be a developer, this is
        the tutorial for you. And if you are a developer, we still think this
        presents the concepts in an approchable and useful manner.
      </li>
    </ul>

    <p>Please check it out, share it, and let us know what you think!</p>
2015-05:
  2015-05-27 The Gold Standard checklist for web components.html: >
    
    ---

    title: The Gold Standard checklist for web components

    date: 2015-05-27 16:00 UTC

    slug: the-gold-standard-checklist-for-web-components

    originalUrl: https://component.kitchen/blog/posts/the-gold-standard-checklist-for-web-components

    ---


    <p>
      For the last few months, we've been excited to help a new open project get off
      the ground: the
      <a href="https://github.com/webcomponents/gold-standard/wiki"
        >Gold Standard checklist for web components</a
      >. The checklist’s goal is to define a consistent, high quality bar for web
      components.
    </p>

    <p>
      We believe web components should be every bit as predictable, flexible,
      reliable, and useful as standard HTML elements. When someone is working in
      HTML, they should be able to work as if all elements work the same. They
      shouldn’t need to learn a special set of constraints or limitations that apply
      to specific custom elements. They already know how standard HTML elements
      behave; new custom elements should behave just like that.
    </p>

    <p>
      The standard HTML elements establish an incredibly high bar for quality. For
      example, you can use the standard elements in any combination, and they’ll not
      only work, the result is usually predictable and reasonable. But, without a
      great deal of care, custom elements don’t support that same degree of
      flexibility by default. It’s all too easy to create a custom element that only
      works when it’s used in a very particular way.
    </p>

    <p>
      The project began by defining what it is that makes a standard HTML element
      <em>feel</em> like a standard HTML element. It seems no one before ever wrote
      down all the criteria that govern the expected behavior of a new standard HTML
      element. We all generally know how HTML elements should behave, and through
      careful design and testing, new standard elements eventually measure up to our
      expectations.
    </p>

    <p>
      You can think of this as a Turing Test for elements: if you were to encounter
      an unfamiliar element in HTML, could you tell whether it was a new standard
      element or a custom element? For most custom elements today, it wouldn’t take
      too long to discover some unexpected quirk or limitation in the element that
      would reveal its custom element nature. This is not for lack of dedication on
      the component author’s part. It could simply be the case that they hadn’t
      considered some aspect of standard element behavior.
    </p>

    <p>
      To address that, the Gold Standard checklist captures the expected behavior of
      a standard HTML element in a form that can guide the creation of new custom
      elements. The checklist covers a wide range of topics, from accessibility to
      performance to visual presentation. A component that meets that quality bar
      should be able to generally satisfy all the expectations of people using that
      component. This will greatly facilitating the component’s adoption and use.
    </p>

    <p>
      A variety of people, particularly from Google, have already contributed to the
      Gold Standard checklist in its draft stages, and continue to make
      contributions to the checklist in its new wiki form. The initial focus of the
      project has been to develop a solid set of top-level checklist items. It’s the
      hope of the project contributors that every item on the list will be backed by
      a detailed explanation of the checklist item: why it’s important, examples of
      what to do or not to do, sample source code, and other resources.
    </p>

    <p>
      If you’re interested in creating or using high-quality components, please take
      a look at the checklist. The project welcomes comments and suggestions as
      issues, or direct contributions through pull requests.
    </p>
2015-10:
  2015-10-19 We’re shutting down our web component catalog.html: >
    
    ---

    title: We’re shutting down our web component catalog

    date: 2015-10-19 16:00 UTC

    slug: were-shutting-down-our-web-component-catalog

    originalUrl: https://component.kitchen/blog/posts/were-shutting-down-our-web-component-catalog

    ---


    <p>
      We launched this Component Kitchen site in April 2014 with a web component
      catalog as its centerpiece. Today we&#39;re shutting down that catalog so we
      can focus on web component consulting and our open web components projects,
      including the
      <a href="https://github.com/webcomponents/gold-standard/wiki"
        >Gold Standard Checklist for Web Components</a
      >
      and the general-purpose
      <a href="https://github.com/basic-web-components/basic-web-components"
        >Basic Web Components</a
      >
      library.
    </p>

    <p>
      Running the component catalog was a great way to learn about building
      production applications using web components and Google&#39;s Polymer library.
      But we&#39;ve come to feel that the catalog&#39;s utility is limited, and it
      no longer makes economic sense to continue it.
    </p>

    <ul>
      <li>
        <p>
          As in any online space, much of what is freely given publicly is,
          unfortunately, junk. Many registered components are &quot;Hello,
          world!&quot;, or trivial wrappers of a third-party library, or utilities
          so specialized as to be useful to no one but their authors. That makes it
          hard to find something worth using.
        </p>
      </li>
      <li>
        <p>
          Even potentially useful components are seldom written at a level of
          production quality. We tried to start a &quot;component of the week&quot;
          blog post series in late 2014. We would sift through a dozen components
          just to find one that even <em>worked</em> outside the narrow confines of
          its demo. This isn&#39;t necessarily the fault of the component authors —
          it&#39;s really hard to write a solid web component today. (That&#39;s one
          reason we believe that establishing a Gold Standard for web component
          quality is a vital project.) We also believe that the web user interface
          framework vendors, such as Polymer and X-Tag, need to invest more heavily
          in making it easy to create components that meet that standard.
        </p>
      </li>
      <li>
        <p>
          Our catalog pages showed GitHub stars, but the direct GitHub metadata for
          projects like web components isn&#39;t all that useful in assessing a
          project&#39;s quality. A GitHub star doesn&#39;t tell you whether anyone
          has actually tried a project, whether they thought it was good, whether
          they used it, or whether they&#39;re still using it. We have some ideas
          for how to compile better indications of a web component project&#39;s
          utility, but they would require a larger investment of our resources than
          we can afford.
        </p>
      </li>
      <li>
        <p>
          People want to see a component project&#39;s own documentation, not a
          third-party repackaging of that documentation. We think that&#39;s true
          for any online catalog, including successful ones like npm. When we find a
          package on npm, we never read the package details there, because we&#39;ll
          have to go to the actual GitHub repository to form an assessment of
          whether it&#39;s worth actually trying the package.
        </p>
      </li>
      <li>
        <p>
          GitHub itself could easily improve its own search and ranking features to
          the point where external catalogs would struggle to add value. We&#39;d
          rather not compete with them.
        </p>
      </li>
      <li>
        <p>
          As a result of the above points, if you want to find a foobar web
          component, it&#39;s easier to google for &quot;foobar web component&quot;
          than to consult a purpose-built catalog. If you follow the search results
          to GitHub, you&#39;ll end up where you wanted to go anyway.
        </p>
      </li>
      <li>
        <p>
          It turns out that a coherent <em>collection</em> of components designed
          and implemented together is more interesting than individual components
          from multiple authors. While we had plans to feature component
          collections, we didn&#39;t think the payoff would be high enough. Again,
          the collection creator is more interested in driving traffic to their
          collection&#39;s own site, and that&#39;s probably what the component
          customer is interested in seeing too.
        </p>
      </li>
    </ul>

    <p>
      Retiring the catalog lets us invest more time in the projects that we think
      matter more. People who want a component catalog can use
      <a href="https://customelements.io/">customelements.io</a>, which has seen
      many improvements lately. Also, as a service to people who have made deep
      links to our catalog&#39;s component pages, for the indefinite future we will
      continue to serve up tombstone pages at those URLs that offer a link to the
      corresponding repository on GitHub.
    </p>

    <p>
      When we started our catalog, there were only about 40 publicly registered web
      components — now the number is in the thousands. We really appreciate all of
      the people who visited our catalog in the last year and a half, who built a
      great component we could feature, and who took the time to give us feedback or
      a shout-out on social sites. We&#39;re still excited to be working in this
      transformative web components space, and look forward to sharing our ongoing
      work here soon.
    </p>
  2015-10-26 Nobody writes production web components in vanilla JS — so using a framework makes total sense.html: >
    
    ---

    title: Nobody writes production web components in vanilla JS — so using a framework makes total sense

    date: 2015-10-26 16:00 UTC

    slug: nobody-writes-production-web-components-in-vanilla-js-so-using-a-framework-makes-total-sense

    originalUrl: https://component.kitchen/blog/posts/nobody-writes-production-web-components-in-vanilla-js-so-using-a-framework-makes-total-sense

    ---


    <p>
      You may hear someone say they avoid using React, Polymer, Angular, or some
      other framework du jour, and that they prefer to write their front end code in
      vanilla JavaScript instead. But when it comes to writing web components, it
      seems <em>everybody</em> ends up writing atop a framework — even if it&#39;s a
      tiny framework of their own devising. Production web components written in
      vanilla JS appear to be very rare.
    </p>

    <p>
      It seems there&#39;s just a bit too much work involved to meet even baseline
      expectations for a custom element. To handle instantiation, for example, you
      might need to:
    </p>

    <ol>
      <li><p>Create a shadow root on the new instance.</p></li>
      <li><p>Stamp a template into the shadow root.</p></li>
      <li>
        <p>
          Marshall any attributes from the element root to the corresponding
          component properties. This process breaks down into more work, such as:
        </p>
        <ul>
          <li>Loop over the set of attributes on the element.</li>
          <li>
            For each attribute, see if the component defines a corresponding
            property. If you want to support conventionally hyphenated attribute
            names (&quot;foo-bar&quot;), you&#39;ll want to first map those
            attribute names to conventionally camel-cased property names (fooBar).
          </li>
          <li>
            If the type of a target property is numeric or boolean, parse the
            string-valued attribute to convert it to a value of the desired type.
          </li>
          <li>Set the property to the value.</li>
        </ul>
      </li>
    </ol>

    <p>
      Given this amount of work to simply instantiate the component, it&#39;s easy
      to see why most efforts to create interesting components typically end up
      relying on shared code. You might write a single web component in vanilla JS,
      but as soon as you start your second component, you&#39;ll be dying to factor
      the boilerplate into shared code… And now you&#39;re constructing a framework.
    </p>

    <p>
      That&#39;s not necessarily a bad thing. It only means that, when you hear
      someone say that they want to write a component-based app, but don&#39;t want
      to use any framework at all, you have to take that with a grain of salt.
      It&#39;s possible the person has — perhaps unintentionally — ended up building
      the foundations of their own web component framework.
    </p>

    <p>
      Does it matter whether that code is called a framework? Wikipedia enumerates
      these
      <a href="https://en.wikipedia.org/wiki/Software_framework"
        >software framework</a
      >
      hallmarks:
    </p>

    <ul>
      <li>
        inversion of control (control flow dictated by the framework, not the code
        on top of it)
      </li>
      <li>default behavior</li>
      <li>extensibility</li>
      <li>non-modifiable framework code</li>
    </ul>

    <p>
      Given this definition, it seems hard to conclude that frameworks are bad per
      se. Surely there are good frameworks as well as bad frameworks.
    </p>

    <p>
      Perhaps one reason people shy away from the concept of a framework is that, as
      a framework achieves higher levels of abstraction, it becomes something
      tantamount to a domain-specific language. If you and I both thoroughly
      understand JavaScript, but we are using different JavaScript frameworks, then
      in practice we may not find each other&#39;s code mutually intelligible.
    </p>

    <p>
      Since the term &quot;framework&quot; can provoke strong negative reactions,
      authors of such code may actually care whether their code is labeled a
      framework or not. Google, for example, seems to take great pains to avoid
      describing its own Polymer project as a framework. They call it a
      &quot;library&quot;, which sounds perhaps smaller or less threatening. But
      Polymer easily meets all of the above framework criteria. For example,
      Polymer&#39;s internal asynchronous task-scheduling infrastructure establishes
      the flow of control in a Polymer application, determining when to invoke
      component lifecycle callbacks and property observers.
    </p>

    <p>
      Whether you like the idea of a framework or not, when it comes to web
      components, the DOM API is so rudimentary that, in practice, that API alone
      does not provide a sufficient framework for web component development. As long
      as that remains the case, the use of a JavaScript web component frameworks
      seems unavoidable. If you really, really want to avoid writing or using code
      that meets the above definition of &quot;framework&quot;, perhaps you can do
      so and still be productive, but that seems like a hard way to go.
    </p>

    <p>
      For our own work, we <em>want</em> to be using a popular web component
      framework, be it Polymer or something else. If our alternative were to write a
      proprietary, ad hoc framework of our own, which was shared by no one else, we
      would likely waste a lot of time solving problems others have already solved.
    </p>
2015-11:
  2015-11-02 An evaluation of polymer-micro as a minimal web component framework.html: >
    
    ---

    title: An evaluation of polymer-micro as a minimal web component framework

    date: 2015-11-02 17:00 UTC

    slug: an-evaluation-of-polymer-micro-as-a-minimal-web-component-framework

    originalUrl: https://component.kitchen/blog/posts/an-evaluation-of-polymer-micro-as-a-minimal-web-component-framework

    ---


    <p>
      Our
      <a href="https://github.com/basic-web-components/basic-web-components"
        >Basic Web Components</a
      >
      project currently creates its components using Google&#39;s
      <a href="https://www.polymer-project.org">Polymer</a> framework, but we&#39;ve
      been evaluating the use of the smaller polymer-micro core as a replacement for
      full Polymer. The polymer-micro core appears to be a useful web component
      framework in its own right, and may provide nearly everything a component
      library like ours needs.
    </p>

    <h2>Is Polymer the best choice for our open project?</h2>

    <p>
      We believe that
      <a
        href="/blog/posts/nobody-writes-production-web-components-in-vanilla-js-so-using-a-framework-makes-total-sense"
        >some amount of framework is necessary to create web components</a
      >. For a very long time, Polymer has been the primary web component framework.
      We love Polymer! However, we feel that Polymer has grown to the point where
      writing a Polymer app feels distinctly different from writing a typical HTML
      app.
    </p>

    <p>
      Polymer provides numerous helpers that reduce the amount of copy-and-paste
      boilerplate code required to invoke standard DOM features. In current
      parlance, it wants to make component code as
      <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a> as
      possible. For example, Polymer provides a &quot;listeners&quot; key for wiring
      up event handlers with less code than a direct invocation of the underlying
      addEventListener(). Polymer&#39;s &quot;properties&quot; key similarly
      simplifies definition of component properties instead of directly defining
      property getter/setters on the component prototype and marshalling attributes
      to properties with attributeChanged().
    </p>

    <p>
      We think Polymer&#39;s goal is commendable. If you can afford to train up a
      team of developers on Polymer&#39;s specific way of doing things, your team
      should be able to crank out web UI code very efficiently.
    </p>

    <p>
      But as with any higher-level abstraction, these helpers trade off clarity and
      simplicity for a certain degree of magic and complexity. Each reduction in the
      amount of component code a developer must write forces an increase in the
      arcane Polymer-specific knowledge a developer must acquire to write
      <em>or even read</em> component code. It also hides details that may
      complicate debugging and maintenance.
    </p>

    <p>
      For our open source project, those second-order effects reduce the potential
      pool of project contributors. Our priority is not time-to-market, but rather
      creating code which is self-evident to our open source users and potential
      contributors. Although 1 line of Polymer code might do the work of 3 lines of
      standard web code, if those 3 lines are more understandable to a wider base of
      developers, we might prefer the longer, clearer version.
    </p>

    <h2>Carrying forward the burden of backward compatibility</h2>

    <p>
      Another issue we&#39;re grappling with is Polymer is very much designed for
      this era immediately before web components emerge with native support across
      all mainstream browsers. Polymer wants, quite reasonably, to accommodate
      browsers that don&#39;t yet support web components. At the same time, Polymer
      also wants to deliver decent performance, notably on Mobile Safari, which
      <em>at this time</em> does not support native Shadow DOM. Rather than use the
      full Shadow DOM polyfill, Polymer introduced its own
      <a href="https://www.polymer-project.org/1.0/docs/devguide/local-dom.html"
        >Shady DOM</a
      >
      approach for approximating Shadow DOM behavior on older browsers.
    </p>

    <p>
      Shady DOM is an impressive technical accomplishment. But having written a
      great deal of Shady DOM code this year, it&#39;s our subjective opinion that
      Shady DOM code feels clunky. Even after months of writing Shady DOM code,
      wrapping DOM calls with Polymer.dom() still doesn&#39;t feel natural. And
      it&#39;s hard to explain to someone why they can&#39;t just call
      appendChild(), but have to call Polymer.dom().appendChild() instead. And while
      Polymer.dom() is somewhat future-proof, it doesn&#39;t feel future-facing. It
      erodes the original, extremely elegant vision for Polymer and the web
      components polyfills: to let people to write web components for future web
      browsers today.
    </p>

    <p>
      The alternative to Shady DOM today is to use the
      <a href="https://github.com/WebComponents/webcomponentsjs"
        >full Shadow DOM polyfill</a
      >. That entails slower performance and — given inevitable leaks in the
      abstraction — a greater potential for mysterious bugs. On the plus side, the
      full Shadow DOM polyfill lets one write clearer, future-facing code. With all
      the major browser vendors on board with Shadow DOM v1, the need to download
      and use the Shadow DOM polyfill on most devices should fade over the course of
      2016.
    </p>

    <p>
      We&#39;re also excited about the advent of ES6, with features like arrow
      functions that let code be more concise. Writing an addEventListener() call is
      no longer a substantial burden in ES6, or at least not enough to warrant a
      parallel system for event listener wiring. And using built-in ES6 classes
      feels better than calling a purpose-focused class factory like Polymer().
    </p>

    <h2>Considering polymer-micro instead of full Polymer</h2>

    <p>
      It turns out that, underneath all of Polymer&#39;s DRY magic, there&#39;s a
      very clean, simple core called polymer-micro. Polymer is helpfully constructed
      in three layers: full Polymer on top, a smaller polymer-mini below that, then
      a tiny polymer-micro at the bottom. The
      <a
        href="https://www.polymer-project.org/1.0/docs/devguide/experimental.html#polymer-micro"
        >documentation</a
      >
      describes polymer-micro as &quot;bare-minimum Custom Element sugaring&quot;.
    </p>

    <p>
      Rather than use the full Polymer framework, we&#39;ve been investigating
      whether polymer-micro on its own could meet our needs. Building on top of
      polymer-micro confers a number of advantages over writing our own web
      component framework:
    </p>

    <ul>
      <li>
        Google has already invested an enormous amount of money and resources
        developing Polymer, including polymer-micro, and will probably continue to
        do so for the foreseeable future.
      </li>
      <li>
        The thousands of people using full Polymer today are <em>also</em> using
        polymer-micro. That means lots of testing of the polymer-micro core.
      </li>
      <li>
        From its commit history, polymer-micro looks fairly stable. A substantial
        amount of future Polymer work will likely happen in the upper levels.
      </li>
      <li>
        In terms of file size, polymer-micro is significantly smaller than full
        Polymer, although we don&#39;t see that as a huge advantage.
      </li>
      <li>
        Relying on a small core like polymer-micro makes it easier to migrate to
        another framework when a better framework comes along.
      </li>
    </ul>

    <p>
      The polymer-micro layer happens to provide most of the features upon which
      Basic Web Components depend:
    </p>

    <ul>
      <li>Custom element registration.</li>
      <li>Lifecycle support.</li>
      <li>Declared properties.</li>
      <li>Attribute deserialization to properties.</li>
      <li>Behaviors.</li>
    </ul>

    <p>
      On the flip side, Basic Web Components use a number of Polymer features which
      polymer-micro does <em>not</em> provide:
    </p>

    <ol>
      <li>
        <p>
          Shadow root Instantiation. If you use polymer-micro, you&#39;re expected
          to create a shadow root yourself.
        </p>
      </li>
      <li>
        <p>
          Templates. If you want to use the <code>&lt;template&gt;</code> element to
          define initial content of a component&#39;s Shadow DOM, you need to manage
          that yourself.
        </p>
      </li>
      <li>
        <p>
          Shimming for CSS styles. The full Shadow DOM polyfill requires that CSS be
          transformed to minimize styles leaking across a custom element boundaries.
          Full Polymer takes care of that for you, but using polymer-micro directly
          means that style shimming becomes your concern.
        </p>
      </li>
      <li>
        <p>
          Automatic node finding. This lets your component code refer to a
          sub-element <code>&lt;button id=&quot;foo&quot;&gt;</code> with
          <code>this.$.foo</code>. Complex components need a consistent and easy way
          to refer to subelements within the local Shadow DOM. Polymer&#39;s
          <code>this.$</code> syntax satisfies those criteria, although we&#39;re
          really torn as to whether that sugar is worth it. It saves keystrokes, but
          isn&#39;t a web-wide convention. It may give an unfamiliar flavor to web
          component code.
        </p>
      </li>
      <li>
        <p>
          ready() callback. Many of the Basic Web Components use Polymer&#39;s
          <a
            href="https://www.polymer-project.org/1.0/docs/devguide/registering-elements.html#ready-method"
            >ready callback</a
          >
          to initialize themselves. Polymer takes pains to ensure that any Polymer
          elements inside a component&#39;s local Shadow DOM have their own ready
          callback fired <em>before</em> the outer component&#39;s ready callback is
          fired.
        </p>
      </li>
      <li>
        <p>
          CSS mixins. This is Polymer&#39;s current answer for visual themes for
          components. It&#39;s based on a not-yet-standard proposal for extensions
          to CSS. Without full Polymer, you have to invent your own theming
          architecture.
        </p>
      </li>
    </ol>

    <p>
      All the above features are provided at the levels above polymer-micro: either
      polymer-mini or full Polymer. However, those upper levels bring along a number
      of features we don&#39;t use, or would be happy to drop. Those features
      include:
    </p>

    <ul>
      <li>Data binding</li>
      <li>Event listener setup (&quot;listeners&quot; key)</li>
      <li>Annotated event listener setup (in markup)</li>
      <li>Property change callbacks</li>
      <li>Computed properties</li>
      <li>reflectToAttribute</li>
    </ul>

    <p>
      These features all have some appeal, but in our estimation may add more
      complexity than they&#39;re worth to an open source project aiming for a
      general developer audience.
    </p>

    <p>
      Lastly, there are a few higher-level Polymer features we have to use, but wish
      we didn&#39;t have to:
    </p>

    <ul>
      <li>
        <p>
          <code>&lt;dom-module&gt;</code>. This is used as a wrapper around a
          <code>&lt;template&gt;</code> element, but it&#39;s hard to fathom why
          <code>&lt;dom-module&gt;</code> is necessary. It seems designed to support
          a use case we don&#39;t care about: defining a template in one file, then
          using it in a component defined in a separate file. Yet by far the most
          common way to define a Polymer component is to put its template and script
          definition in the same file. It&#39;s unfortunate full Polymer doesn&#39;t
          offer a better way to use a real <code>&lt;template&gt;</code>directly.
          (Although a trick does let you accomplish that in an unofficial way; see
          below.)
        </p>
      </li>
      <li>
        <p>
          Polymer.dom(). As noted above, this feels awkward, like you&#39;re not
          using the web. It&#39;s also confusing to experienced web developers
          looking at Polymer code for the first time.
        </p>
      </li>
    </ul>

    <h2>Prototyping a minimal component framework on top of polymer-micro</h2>

    <p>
      With the above motivation, we considered the question:
      <em
        >What is the smallest amount of code that must be added to polymer-micro to
        create a web component framework that meets our project&#39;s needs?</em
      >
    </p>

    <p>
      This experiment entailed a fair amount of spelunking in the Polymer codebase.
      That exploration informed the creation of a little prototype web component
      framework called
      <a href="https://github.com/ComponentKitchen/polymer-micro-test"
        >polymer-micro-test</a
      >
      that uses only polymer-micro as its base. In this prototype framework, we
      wrote a small amount of code (<a
        href="https://github.com/ComponentKitchen/polymer-micro-test/blob/master/minimalComponent.js"
        >minimalComponent.js</a
      >) to implement the 5 numbered features above which we want but are missing in
      polymer-micro.
    </p>

    <p>
      We then used the prototype framework to create a couple of sample components,
      such as a sample t<a
        href="https://github.com/ComponentKitchen/polymer-micro-test/blob/master/test-element.html"
        >est-element</a
      >
      component. A
      <a href="https://componentkitchen.github.io/polymer-micro-test/index.html"
        >live demo</a
      >
      of a simple
      <a
        href="https://github.com/ComponentKitchen/polymer-micro-test/blob/master/index.html"
        >page</a
      >
      shows the test-element component in use. By virtue of using the full
      polyfills, components created in this prototype framework can run in all
      mainstream browsers.
    </p>

    <p>
      Overall, the results of this experiment were fairly positive. Looking at each
      feature in turn:
    </p>

    <ol>
      <li>
        <p>
          Creating a shadow root yourself is easy. This is only necessary for
          components with templates (next point).
        </p>
      </li>
      <li>
        <p>
          Stamping out a template is easy. The smallest amount of code we could
          envision for this is for a component to declare a &quot;template&quot;
          property. This can be used in conjunction with HTML Imports for a fairly
          clean connection between the script and the template:
        </p>
        <pre><code>&lt;template id=&quot;test-element&quot;&gt;
      ... template goes here ...
    &lt;/template&gt;


    &lt;script&gt;

    Polymer({
      is: &#39;test-element&#39;,
      template: currentImport.querySelector(&#39;#test-element&#39;)
    });

    &lt;/script&gt;

    </code></pre>
        <p>
          Aside: we <em>really</em> like being able to use a plain
          <code>template</code> to define component content. It turns out that you
          can actually do this in full Polymer today, although it&#39;s something of
          a trick that depends upon your component defining an undocumented
          <code>_template</code> variable. See this
          <a href="https://gist.github.com/JanMiksovsky/ef59c30222b5d5fc06b5"
            >gist</a
          >, which works in full Polymer.
        </p>
      </li>
      <li>
        <p>
          Shimming CSS styles took a little investigation, but it turns out the full
          Shadow DOM polyfill exposes its CSS-shimming code as ShadowCSS. The first
          time this test framework is going to stamp a template, it just invokes
          ShadowCSS to shim any <code>&lt;style&gt;</code> elements found in the
          template. It then saves the shimmed result for subsequent stamping into
          the shadow root.
        </p>
      </li>
      <li>
        <p>
          Automatic node finding. If we conclude we really need this feature,
          it&#39;s not that hard to implement ourselves. Right after the test
          framework stamps a template, it queries for all the elements in the shadow
          tree that have an <code>id</code> attribute, then adds those elements to
          <code>this.$</code>. This gives us a type of automatic node finding that
          meets our needs. Polymer&#39;s own implementation of the same feature is
          much more complex. It appears to do a lot of tree-parsing so in
          preparation for data binding, but since we don&#39;t need data binding, we
          don&#39;t need to do that work.
        </p>
      </li>
      <li>
        <p>
          The ready() method is a bit of a puzzle to us. The Shadow DOM spec already
          defines two callbacks, createdCallback() and attachedCallback(), that can
          cover most of what we&#39;re currently doing in ready(). One issue is that
          createdCallback() and attachedCallback() are synchronous, while the
          Polymer ready() code takes enormous pains to handle asynchronous calls.
          That is likely necessary to support their asynchronous data binding model.
          That is, if your component has a sub-component with data bindings, you
          want all those asynchronous data bindings to settle down first before your
          top-level component does its own initialization. Since we&#39;re not
          interested in data binding, however, it&#39;s not clear whether we need
          ready(). Our sample element just uses the standard callbacks.
        </p>
      </li>
      <li>
        <p>
          CSS mixins. This remains an open question for us. It&#39;s hard to imagine
          what we could do to allow component users to theme our components. At the
          same time, we&#39;re not convinced that the not-yet-standard CSS mixins
          are going to actually become a standard. The troubled history of
          vendor-prefixed CSS feature experiments suggests that one company&#39;s
          early interpretation of a hypothetical, future CSS mixin
          &quot;standard&quot; might significantly complicate things down the road
          when a real standard is finally established.
        </p>
      </li>
    </ol>

    <p>
      This small prototype framework delivers most of the features required by Basic
      Web Components. The main exception is that it offers no facility for component
      theming (point #6 above).
    </p>

    <p>Some other notes:</p>

    <ul>
      <li>
        <p>
          Because polymer-micro supports Polymer
          <a href="https://www.polymer-project.org/1.0/docs/devguide/behaviors.html"
            >behaviors</a
          >
          (mixins), we were able to implement all of the prototype&#39;s features in
          a behavior. That&#39;s quite elegant. It means our sample components can
          use those features simply by calling the standard Polymer() class factory
          and listing this prototype behavior in the &quot;behaviors&quot; key. It
          was a nice surprise that we didn&#39;t have to create our own component
          class factory for that.
        </p>
      </li>
      <li>
        <p>
          To take advantage of Polymer&#39;s own attribute-to-property marshalling
          feature, we had to invoke an undocumented internal method in
          polymer-micro. If more people were building directly on top of
          polymer-micro, such facilities could probably be promoted to supported
          features.
        </p>
      </li>
      <li>
        <p>
          Taking advantage of existing Polymers facilities (both official and
          undocumented) and polyfill features like ShadowCSS means that our little
          prototype framework can be tiny, less than 1K in size. That gets added to
          the size of polymer-micro, which is currently about 15K uncompressed.
          Combined, that 16K is a lot smaller than the full Polymer, about 105K
          uncompressed.
        </p>
      </li>
      <li>
        <p>
          Any decrease in framework file size is more than offset by the need to use
          the full web component polyfills, which are much larger than the
          &quot;lite&quot; version used with Shady DOM. Still, since we think the
          need for the full polyfills will drop over the course of 2016, we&#39;re
          not particularly concerned about that.
        </p>
      </li>
    </ul>

    <h2>Conclusions</h2>

    <p>
      While this is just an experiment, it&#39;s intriguing to consider using
      polymer-micro as the basis for a minimalist web component framework.
    </p>

    <ul>
      <li>
        <p>
          A minimalist framework leads to component code which we believe is easier
          for a general web developer to read.
        </p>
      </li>
      <li>
        <p>
          Letting a component developer work at a lower level of abstraction —
          &quot;closer to the metal&quot; — means they have a greater capacity to
          diagnose problems when things inevitably go wrong. There&#39;s less
          mystery to clear away, so problems can be understood and fixed, rather
          than worked around.
        </p>
      </li>
    </ul>

    <p>
      Despite these advantages, we&#39;re not yet ready to say that we&#39;re
      actually going to <em>use</em> this prototype to create components. As noted
      above, our goal is to foster a codebase that can be readily comprehensible to
      a wide audience of web developers. Using a proprietary framework, even a tiny
      one, impedes that goal. (Basic Web Components traces its ancestry to an
      earlier component library called QuickUI which
      <a
        href="http://blog.quickui.org/2013/12/01/some-lessons-from-an-open-source-project-that-never-gained-critical-mass/"
        >never gained critical mass</a
      >, in part because it was built on a proprietary framework.)
    </p>

    <p>
      Using polymer-micro as the basis for a proprietary framework would be better
      than writing a framework from scratch, but every bit of code added on top of
      polymer-micro runs the risk of producing a framework in its own right — one
      distinct and unfamiliar to our developer audience.
    </p>

    <p>
      A minimalist strategy like this would only have meaning to us if it&#39;s
      shared by other people. To that end, we&#39;ve begun talking with other web
      component organizations to explore this idea a bit further. We&#39;re not sure
      where that discussion will go, but it&#39;s interesting, and might bear fruit
      in the form of a new, minimalist web component framework. If you&#39;d be
      interested in participating in that discussion, please ping us at
      <a href="https://twitter.com/ComponentK">@ComponentK</a>.
    </p>
  2015-11-30 Composing mixins to make a solid foundation for web components.html: >
    
    ---

    title: Composing mixins to make a solid foundation for web components

    date: 2015-11-30 16:00 UTC

    slug: composing-mixins-to-make-a-solid-foundation-for-web-components

    originalUrl: https://component.kitchen/blog/posts/composing-mixins-to-make-a-solid-foundation-for-web-components

    ---


    <p>
      We've been searching for a way to quickly create web components by composing
      together pre-defined user interface behaviors, and we have some progress to
      share on that front.
    </p>

    <p>
      Web components are a great way to package user interface behavior, but they
      may not be the most interesting <em>fundamental</em> unit of behavior. There
      are certain aspects of behavior which you'd like to be able to share across
      components: accessibility, touch gestures, selection effects, and so on. Those
      things aren't top-level components in their own right; they're abstract
      aspects of behavior.
    </p>

    <p>
      This is something like saying that a chemical molecule is not the fundamental
      unit of physical behavior — the atoms that make up the molecule are. But you
      can't generally handle solitary atoms; atoms react and organize themselves
      into molecules. Likewise, a browser can only handle web components, not
      abstract behaviors. If we imagine a web component as a molecule, what's the
      equivalent of an atom? That is, can we decompose a web component into a more
      fundamental coding unit?
    </p>

    <p>
      One way to answer this question is to consider a web component as a custom
      element class. Is there a way we can decompose a class into its fundamental
      abstract behavioral aspects? The usual way to compose class behavior in
      JavaScript is with
      <a href="https://en.wikipedia.org/wiki/Mixin">mixins</a>, so perhaps mixins
      can form the fundamental unit of user interface behavior. That is, we'd like
      to be able to compose mixins together to create web component classes.
    </p>

    <p>For that purpose, mixins present some challenges:</p>

    <ul>
      <li>
        The simplest approach to JavaScript mixins will overwrite existing on a
        class, but that's not always desirable. Many web component behaviors want to
        augment an existing method like <code>createdCallback</code>. That is, the
        base class' method <em>and</em> the mixin's method should run.
      </li>
      <li>
        There's no standard JavaScript implementation of mixins. While many user
        interface frameworks (React, Polymer, etc.) include a mixin strategy, those
        are intimately tied to the framework itself. You can very quickly write a
        simple function to copy a mixin onto a class prototype, but that won't
        accommodate the range of complexity needed to define interesting web
        component behaviors.
      </li>
    </ul>

    <p>
      We thought it would be interesting to create a general-purpose mixin
      architecture that's flexible enough to serve as a foundation for creating web
      components in plain JavaScript. The initial result of that work is a facility
      we call
      <a href="https://github.com/ComponentKitchen/Composable">Composable</a>.
    </p>

    <p>
      Composable takes the form of a general-purpose factory for composing classes
      and objects from mixins. The most interesting part about it is its use of
      <em>composition rules</em> that let you decide how a mixin's properties and
      methods should be combined with those of the class you're adding the mixin to.
    </p>

    <p>
      Composable itself is entirely independent of web components, but we've
      designed it to serve as a micro-kernel for web component library or framework.
      An example in the Composable
      <a href="https://github.com/ComponentKitchen/Composable/blob/master/README.md"
        >ReadMe</a
      >
      illustrates how it could be used to construct web components:
    </p>


    <pre>

    // Create a general-purpose element base class that supports composition.

    let ComposableElement = Composable.compose.call(HTMLElement, Composable);


    // A mixin that sets an element's text content.

    class HelloMixin {
      createdCallback() {
        this.textContent = "Hello, world!";
      }
    }


    // A sample element class that uses the above mixin.

    let HelloElement = ComposableElement.compose(HelloMixin);


    // Register the sample element class with the browser.

    document.registerElement('hello-element', HelloElement);


    // Create an instance of our new element class.

    let element = document.createElement('hello-element');

    document.body.appendChild(element); // "Hello, world!"

    </pre>


    <p>
      We'll share more on this direction as we go, but for now we wanted to share
      this as a fundamental building block. Even if you're not creating web
      components, you could use Composable to give your application or framework a
      flexible mixin architecture.
    </p>
2015-12:
  2015-12-07 Building web components from a loose framework of mixins.html: >
    
    ---

    title: Building web components from a loose framework of mixins

    date: 2015-12-07 16:00 UTC

    slug: building-web-components-from-a-loose-framework-of-mixins

    originalUrl: https://component.kitchen/blog/posts/building-web-components-from-a-loose-framework-of-mixins

    ---


    <p>
      We think it&rsquo;s generally necessary to use
      <a
        href="https://component.kitchen/blog/posts/nobody-writes-production-web-components-in-vanilla-js-so-using-a-framework-makes-total-sense"
        >some sort of framework to develop web components</a
      >, but that framework may not have to be monolithic in nature. Instead, the
      framework might be built entirely as mixins on top of a kernel that enables
      <a
        href="https://component.kitchen/blog/posts/composing-mixins-to-make-a-solid-foundation-for-web-components"
        >mixin composition</a
      >. Rather than invoking a framework&rsquo;s class constructor, one would
      simply compose the desired mixins together to create an instantiable web
      component.
    </p>

    <p>
      We&rsquo;ve been prototyping a completely mixin-oriented approach to component
      development in a project called
      <a href="https://github.com/ComponentKitchen/core-component-mixins"
        >core-component-mixins</a
      >.
    </p>

    <ul>
      <li>
        This relies on the
        <a href="https://github.com/ComponentKitchen/Composable">Composable</a>
        facility as the kernel to compose mixins in JavaScript. An alternative mixin
        strategy could be used as long it retained the same general degree of
        expressiveness. It would be ideal if multiple web component frameworks could
        agree on a mixin architecture so that we could share some of these mixins.
        We&rsquo;d be happy to use a different mixin strategy in order to
        collaborate with more people.
      </li>
      <li>
        The repo&rsquo;s /src folder shows a core set of component mixins for
        template stamping, basic attribute marshaling, and Polymer-style automatic
        node finding. For example, the TemplateStamping mixin will add a
        createdCallback that creates a shadow root and clones into it the value of
        the component's template property:
        <pre>
    import TemplateStamping from 'core-component-mixins/src/TemplateStamping';


    class MyElement extends Composable.compose(HTMLElement, TemplateStamping) {
      get template() {
        return `
          &lt;style&gt;
          :host {
            font-weight: bold;
          }
          &lt;/style&gt;
          Hello, world.
        `;
      }
    }
        </pre>
        Use of the TemplateStamping mixin takes care of details like shimming any
        <code>&lt;style&gt;</code> elements found in the template when running under
        the Shadow DOM polyfill.
      </li>
      <li>
        That /src folder contains a sample ReactiveElement base class that pre-mixes
        the three core mixins mentioned above to create a reasonable starting point
        for custom elements. The above example becomes:
        <pre>
    import ReactiveElement from 'core-component-mixins/src/ReactiveElement';


    class MyElement extends ReactiveElement {
      get template() {
        return `
          &lt;style&gt;
          :host {
            font-weight: bold;
          }
          &lt;/style&gt;
          Hello, world.
        `;
      }
    }
        </pre>

        Use of the ReactiveElement class is entirely optional &mdash; you could just
        as easily create your own base class using the same mixins.
      </li>
      <li>
        The /demo folder shows some examples of components created with this
        mixin-based framework. such as
        <a
          href="https://github.com/ComponentKitchen/core-component-mixins/tree/master/demos/Hello%20World"
          >Hello World</a
        >
        example.
      </li>
      <li>
        A demo of a
        <a
          href="https://github.com/ComponentKitchen/core-component-mixins/tree/master/demos/X-Tag"
          >hypothetical X-Tag implementation</a
        >
        shows how a framework can use mixins to create its own custom element base
        class. In that demo, the hypothetical framework adds support for a mixin
        that provides X-Tag&rsquo;s &ldquo;events&rdquo; sugar, but leaves out the
        mixin for automatic node finding. The point is that frameworks and apps can
        opt in to the component features they want.
      </li>
      <li>
        In this approach, web component class definition is generally kept separate
        from custom element registration. That is, there&rsquo;s no required entry
        point like Polymer() to both create the class and register it in a single
        step. We personally feel that keeping those two steps separate makes each
        step clearer, but that&rsquo;s a matter of taste. If you feel that combining
        those steps makes your code easier to write or read, it&rsquo;s easy enough
        to accomplish that. The X-Tag demo shows how a framework could define an
        entry point for class definition and registration.
      </li>
      <li>
        The mixin architecture explicitly supports custom rules for composing
        specific properties. That&rsquo;s intended for cases like the
        &ldquo;properties&rdquo; key in Polymer behaviors, where object values
        supplied by multiple mixins need to get merged together. The Composable
        kernel supports that, although none of the demos currently show off that
        feature.
      </li>
    </ul>

    <p>
      Taken collectively, these core component mixins form the beginnings of a
      deliberately loose but useful framework for web component development.
      They&rsquo;re still rudimentary, but they already provide much of
      <a
        href="https://component.kitchen/blog/posts/an-evaluation-of-polymer-micro-as-a-minimal-web-component-framework"
        >what we need from a layer like polymer-micro</a
      >. We think this strategy confers a number of advantages:
    </p>

    <ol>
      <li>
        <strong>This is closer to the metal.</strong>
        The only new thing here is the concept of a mixin. Everything else is part
        of the web platform. There&rsquo;s no special class constructor required to
        perform black-box operations on a component. There&rsquo;s nothing new to
        master (like React&rsquo;s JSX or Polymer&rsquo;s &lt;dom-element&gt;)
        that&rsquo;s not already in the platform. There's no sugaring provided out
        of the box &mdash; and that&rsquo;s a good thing.
      </li>
      <li>
        <strong>Each mixin can focus on doing a single task really well.</strong>
        For example, the TemplateStamping mixin just creates a shadow root and
        stamps a template into it. The only real work it&rsquo;s doing is to
        normalize the use of native vs polyfilled Shadow DOM &mdash;&nbsp;that is,
        the work you&rsquo;d need to do anyway to work on all browsers today. Given
        the boilerplate nature of that task, it&rsquo;s reasonable to share that
        code with a mixin like this. Once all the browsers support Shadow DOM v1
        natively, this mixin could be simplified, or dropped entirely, without
        needing to rearchitect everything.
      </li>
      <li>
        <strong>You can stay as close to/far from the platform as you want.</strong>
        Most user interface frameworks take you far away from the platform in one
        giant step. Here you have fine-grained control over each step you take
        toward a higher level of abstraction. Each mixin takes you a tiny bit
        further away from the platform, and in exchange for the efficiency boost the
        mixin provides, you have to accept some trade-offs: performance, mystery,
        etc. That&rsquo;s an unavoidable price for sharing code, but at least this
        way you can decide how much you want to pay.
      </li>
      <li>
        <strong>There's a potential for cross-framework mixins.</strong>
        If multiple web component frameworks could agree on a mixin architecture,
        there&rsquo;d at least be a chance we could share good solutions to common
        higher-level problems at the sub-component level. When Component Kitchen
        creates a mixin to support, say, accessibility in a list-like web component,
        it would be great if we could make that available to people developing
        list-like web components in other frameworks. While any framework could in
        theory adopt some other framework&rsquo;s mixin format, mixins are usually
        intimately tied to a framework. Explicitly deciding to factor mixins into a
        separable concept may make cross-framework mixins more feasible.
      </li>
    </ol>

    <p>
      It&rsquo;s worth remembering that web components are, by their very nature,
      interoperable. If you decide to write a component using an approach like this,
      it&rsquo;s still available to someone who&rsquo;s using a different framework
      (Polymer, say). The reverse is also true. That means any team can pick the
      approach that works for them, while still sharing user interface elements at
      the component level.
    </p>

    <p>
      As we&rsquo;re experimenting with these mixin ideas in prototype form,
      we&rsquo;re opportunistically trying some other technology choices at the same
      time:
    </p>

    <ul>
      <li>
        These mixins are written in ES6. As the polymer-micro blog post mentioned,
        we&rsquo;re finding that ES6 makes certain things easy enough in JavaScript
        that we can use the DOM API directly, rather than relying on a framework for
        sugar. Transpiling with
        <a href="https://babeljs.io/">Babel</a>
        feels like a fine temporary solution while waiting for native ES6
        implementations in all browsers.
      </li>
      <li>
        While the core component mixins are written in ES6, they can still be used
        by plain ES5 apps. The
        <a
          href="https://github.com/ComponentKitchen/core-component-mixins/tree/master/demos/Hello%20World%20(ES5)"
          >Hello World (ES5)</a
        >
        demo shows this in practice.
      </li>
      <li>
        The TemplateStamping mixin assumes use of the Shadow DOM polyfill if you
        want to support browsers that don&rsquo;t yet support Shadow DOM. If the
        majority of the world&rsquo;s web users have a Shadow DOM v1-capable browser
        by, say, the second half of 2016, we think businesses might accept using the
        polyfill to support the shrinking number of users with older browsers. To
        the extent using that polyfill has issues, those issues should diminish over
        time.
      </li>
      <li>
        We use JavaScript module imports as the dependency mechanism rather than
        HTML Imports. That lets us leverage tools like
        <a href="http://browserify.org/">browserify</a>
        for concatenation rather than Vulcanize. So far, that&rsquo;s working okay.
        ES6 template strings let us easily embed HTML directly inside of JavaScript
        files, instead of putting JavaScript code inside of HTML files as we did
        with HTML Imports. Both packaging formats can work, but given the need for
        JavaScript modules anyway, it seems worthwhile for us to see what we can
        build with modules alone. One thing we miss: an equivalent of HTML
        Import&#39;s &ldquo;document.currentScript&rdquo; so that a module can load
        a resource from a path relative to the JavaScript source file.
      </li>
      <li>
        We&rsquo;re trying out npm as the primary means of component distribution.
        We think that npm 3&rsquo;s support for dependency flattening addresses much
        of the need for Bower. We think the combination of ES6 modules and npm may
        prove to be a better way to distribute components, so we&rsquo;re trying
        that out with this prototype to see if we could make the switch to dropping
        Bower entirely. So far, this feels very good.
      </li>
    </ul>

    <p>
      This mixin-based component framework isn&rsquo;t done, but feels like
      it&rsquo;s reached the point where it&rsquo;s &ldquo;good enough to
      criticize&rdquo;. Please share your feedback at;
      <a href="https://twitter.com/ComponentK">@Component</a>
      or
      <a href="https://plus.google.com/%2BComponentKitchen">+ComponentKitchen</a>.
    </p>
2016-01:
  2016-01-05 Implementing web component mixins as functions.html: >
    
    ---

    title: Implementing web component mixins as functions

    date: 2016-01-05 16:00 UTC

    slug: implementing-web-component-mixins-as-functions

    originalUrl: https://component.kitchen/blog/posts/implementing-web-component-mixins-as-functions

    ---


    <p>
      In response to our last post on
      <a href="/blog/posts/building-web-components-from-a-loose-framework-of-mixins"
        >building components from a loose collection of mixins</a
      >, a helpful commenter
      <a href="https://plus.google.com/+JanMiksovsky/posts/bFBBGB8kEs8"
        >referred us to another mixin library</a
      >
      he had released called
      <a href="https://github.com/justinfagnani/mixwith.js">mixwith.js</a>. That
      library treats mixins more as a pattern than a thing. In that pattern, a mixin
      is simply a function that takes a base class and returns a subclass of that
      base class with the desired new features.
    </p>

    <p>
      We were intrigued by this approach. As we've blogged about before, we're
      really only interested in coding approaches that can be shared with other
      people. This functional approach would allow us to lower the barrier to
      adopting a given mixin. As much as we like the Composable class discussed in
      that earlier post, using mixins that way requires adoption of that class. It's
      not quite a framework — it's more of a kernel for a framework — but it's still
      a bit of shared library code that must be included to use that style of mixin.
    </p>

    <p>
      Here's an example of a mixin class using that Composable approach. This
      creates a subclass of HTMLElement that incorporates a TemplateStamping mixin.
      That mixin will take care of stamping a `template` property into a Shadow DOM
      shadow tree in the element's `createdCallback`.
    </p>

    <pre>

    <code>

    import Composable from 'Composable'

    import TemplateStamping from 'TemplateStamping';


    class MyElement extends Composable.compose(HTMLElement, TemplateStamping) {
      get template() {
        return `Hello, world.`;
      }
    }

    </code>

    </pre>

    <p>
      That's pretty clean — but notice that we had to `import` two things: the
      Composable helper class, and the TemplateStamping mixin class.
    </p>

    <p>
      The functional approach implements the mixin as a function that applies the
      desired functionality. The mixin is self-applying, so we don't need a helper
      like Composable above. The example becomes:
    </p>

    <pre>

    <code>

    import TemplateStamping from 'TemplateStamping';


    class MyElement extends TemplateStamping(HTMLElement) {
      get template() {
        return `Hello, world.`;
      }
    }

    </code>

    </pre>

    <p>
      That's even cleaner. At this point, we don't even really have a framework per
      se. Instead we have a convention for building components from mixin functions.
      The nice thing about that is that such a mixin could conceivably be used with
      custom elements created by other frameworks. Interoperability isn't
      guaranteed, but the possibility exists.
    </p>

    <p>
      We like this so much that we've changed out nascent
      <a href="https://github.com/ComponentKitchen/core-component-mixins"
        >core-component-mixins</a
      >
      project to use mixin functions. Because there's so little involved in adopting
      this sort of mixin, there's a greater chance it will find use, even among
      projects that write (or claim to write)
      <a
        href="nobody-writes-production-web-components-in-vanilla-js-so-using-a-framework-makes-total-sense"
        >web components in plain javascript</a
      >. Again, that should accelerate adoption.
    </p>

    <p>
      The most significant cost we
      <a href="https://github.com/ComponentKitchen/core-component-mixins/issues/1"
        >discussed in making this change</a
      >
      is that a mixin author needs to write their mixin methods and properties to
      allow for composition with a base class. The Composable class had provided
      automatic composition of methods and properties along the prototype chain
      according to a set of rules. In a mixin function, that work needs to be done
      manually by the mixin author.
    </p>

    <p>
      We've identified a series of
      <a
        href="https://github.com/ComponentKitchen/core-component-mixins/blob/master/Composition%20Rules.md"
        >composition rules</a
      >
      that capture our thinking on how best to write a mixin function that can
      safely applied to arbitrary base classes. The rules are straightforward, but
      do need to be learned and applied. That said, only the <em>authors</em> of a
      mixin need to understand those, and that's a relatively small set of people.
    </p>

    <p>
      Most people will just need to know how to <em>use</em> a mixin — something
      that's now as easy as calling a function.
    </p>
2016-02:
  2016-02-01 A new release of Basic Web Components based on plain JavaScript component mixins.html: >
    
    ---

    title: A new release of Basic Web Components based on plain JavaScript component mixins

    date: 2016-02-01 16:00 UTC

    slug: a-new-release-of-basic-web-components-based-on-plain-javascript-component-mixins

    originalUrl: https://component.kitchen/blog/posts/a-new-release-of-basic-web-components-based-on-plain-javascript-component-mixins

    ---


    <p>
      As discussed in this blog over the past few months, we've been plotting a
      strategy for creating web components using a library of plain JavaScript
      mixins instead of a monolithic component framework. We've just published a new
      0.7 release of the
      <a href="https://github.com/basic-web-components/basic-web-components"
        >basic-web-components</a
      >
      project that represents a transition to this mixin strategy. So far, this
      approach appears to be working well, and meeting our expectations.
    </p>

    <p>What's changed?</p>

    <ol>
      <li>
        <strong>We've begun rewriting all our components in ES6.</strong>
        So far, we've rewritten the
        <a
          href="https://github.com/basic-web-components/basic-web-components/tree/master/packages/basic-autosize-textarea"
          >basic-autosize-textarea</a
        >,
        <a
          href="https://github.com/basic-web-components/basic-web-components/tree/master/packages/basic-carousel"
          >basic-carousel</a
        >, and
        <a
          href="https://github.com/basic-web-components/basic-web-components/tree/master/packages/basic-list-box"
          >basic-list-box</a
        >
        components in ES6. We transpile the ES6 source to ES5 using Babel.
        Developers wanting to incorporate the components into ES6 applications can
        consume the original source, while devs working in ES5 can still easily
        incorporate these components into their applications.
      </li>
      <li>
        <strong
          >We have restructured the way we distribute these components to use npm 3
          instead of Bower.</strong
        >
        The primary basic-web-components repository is now a monorepo: a single
        repository used to manage multiple packages separately registered with npm.
        This is much, much easier for us to maintain than our prior arrangement, in
        which Bower had forced us to maintain a constellation of separate
        repositories for our Bower packages. Using npm for web component
        distribution will likely bring its own challenges, but we're confident the
        much larger npm community will address those issues over time.
      </li>
      <li>
        <strong
          >Because we are just using JavaScript now, component files can be included
          with regular script tags instead of HTML Imports.</strong
        >
        That erases any concerns about cross-browser support for HTML Imports, and
        generally simplifies including these web components in an existing
        application build process. For example, instead of requiring use of a
        specialized tool like Vulcanize, developers can incorporate Basic Web
        Components into their applications using more popular tools like Browserify
        and WebPack.
      </li>
      <li>
        <strong
          >We are now offering a library of web component JavaScript mixins.</strong
        >
        See this
        <a
          href="https://component.kitchen/blog/posts/building-web-components-from-a-loose-framework-of-mixins"
          >blog post</a
        >
        for some background on that strategy. Mixins
        <a
          href="https://component.kitchen/blog/posts/implementing-web-component-mixins-as-functions"
          >take the form of functions</a
        >
        that can be applied to any component class without requiring a common
        runtime or framework. These mixins are collected in a new package,
        <a
          href="https://github.com/basic-web-components/basic-web-components/tree/master/packages/basic-component-mixins"
          >basic-component-mixins</a
        >. See that package for details, including documentation our initial set of
        25 web component mixins. We believe this arrangement will make it much
        easier for people to adopt key features of the Basic Web Components in their
        own components.
      </li>
    </ol>

    <p>
      As we first noted when we first looked at
      <a
        href="https://component.kitchen/blog/posts/an-evaluation-of-polymer-micro-as-a-minimal-web-component-framework"
        >using polymer-micro instead of full Polymer</a
      >, there are some distinct downsides to moving away from full Polymer:
    </p>

    <ul>
      <li>
        We can no longer use Polymer's Shady DOM to emulate Shadow DOM on older
        browsers, so anyone targeting browsers other than Google Chrome must include
        the full webcomponents.js polyfill. However, all four browser vendors are
        racing to implement native Shadow DOM v1, and it seems likely we will see
        all of them deliver native supoprt later this year. While using the full
        polyfill incurs a performance penalty today, we are very happy to be writing
        code that is squarely aimed at the future.
      </li>
      <li>
        We are left for the time being without a simple way to let developers style
        our components. Polymer provided a plausible styling solution, although it's
        based on CSS Variables (not in all browsers yet), and relies on proprietary
        extensions to CSS Variables (non-standard; unlikely to appear in any browser
        soon). So styling remains an issue for us — but then again, it's currently
        an unsolved problem for web components generally.
      </li>
    </ul>

    <p>
      Overall, for our project, we think the advantages of writing in plain
      JavaScript outweight any disadvantages. We're very happy to be able to write
      highly functional web components without having to use a monolithic framework
      and an accompanying required runtime. And so far, our mixin strategy is
      letting us maintain an elegant factoring of our component code, while avoiding
      the limitations of a single-inheritance class hierarchy.
    </p>

    <p>
      That said, we think frameworks are certainly an appropriate tool for many
      teams. For certain projects, we enjoy working in frameworks such as Polymer
      and React. One of the tremendous advantages of web components is that they're
      a <em>standard</em>. That lets us write our components in the way that makes
      most sense for us, while still allowing anyone to incorporate those components
      into applications written in other ways. In particular, Polymer remains the
      most active web component framework, so interop with Polymer is a critical
      feature for all our components. As a simple demonstration, we've posted a
      <a href="https://github.com/basic-web-components/carousel-with-tabs"
        >carousel-with-tabs</a
      >
      example showing use of our basic-carousel component with Polymer's paper-tabs
      component.
    </p>
  2016-02-15 Web components let you preserve the backward compatibility of your own old code.html: >
    
    ---

    title: Web components let you preserve the backward compatibility of your own old code

    date: 2016-02-15 16:00 UTC

    slug: web-components-let-you-preserve-the-backward-compatibility-of-your-own-old-code

    originalUrl: https://component.kitchen/blog/posts/web-components-let-you-preserve-the-backward-compatibility-of-your-own-old-code

    ---


    <p>
      An interesting point of backward compatibility came up as we were recently
      porting our own <a href="https://component.kitchen">Component Kitchen</a>
      site to
      <a
        href="https://component.kitchen/blog/posts/a-new-release-of-basic-web-components-based-on-plain-javascript-component-mixins"
        >plain JavaScript web components</a
      >. The main goal of the port was to be able to write our own site in plain
      ES6, with less abstraction between us and the platform. We've also reaped some
      other benefits: our site is now simpler to build, and much faster to load on
      older polyfilled browsers like Apple Safari and Internet Explorer.
    </p>

    <p>
      But the interesting bit was that we could use web components as a transitional
      strategy for our old code. The new components and the old components were
      written in a completely different way, but could nevertheless coexist on the
      page during the transition. All web components connect to the outside page
      through the same means: DOM attributes, DOM children, DOM events, as well as
      JavaScript properties and methods. So we could leave an old component in place
      while we changed the outer page, or vice versa, without having to rewrite
      everything at once.
    </p>

    <p>
      When we recently spoke on an
      <a href="https://www.youtube.com/watch?v=nli24SoWejY"
        >Web Platform Podcast episode</a
      >, we spoke with panelist
      <a href="https://twitter.com/revillweb">Leon Revill</a>, who has raised this
      point of web components as a backward compatibility strategy. We think this is
      as a seriously underappreciated benefit of writing and using web components.
    </p>

    <p class="pullQuote">
      Which framework from three years ago would you prefer to use today if you were
      starting a new project?
    </p>

    <p>
      The web development industry is a highly chaotic, substantially fractured, and
      quickly evolving marketplace of competing approaches to writing apps. Even if
      you have the luxury of developing in an approach you think is absolutely
      perfect for 2016, the chances are probably very low that you will still want
      to write your app that way in 2019. If you don't believe that, ask yourself:
      which framework from three years ago would you <em>prefer</em> to use today if
      you were starting a new project?
    </p>

    <p>
      If you're working on something of lasting value, in three years time, you'll
      still be forced to reckon with some of your old code from 2016. Unless you're
      lavishly funded or insulated from the market, you probably won't be able to
      afford to always move all your old code to whatever you decide is the latest
      and greatest way to write software. You'll be forced to maintain code written
      in different eras, and that can be very tricky.
    </p>

    <p>
      A web component provides a useful encapsulation boundary that can help keep
      old front-end user interface code usefully running directly alongside new
      code. While a variety of contemporary web frameworks offer proprietary
      component models, they can only offer backward compatibility to the extent
      that you're willing to keep writing your whole app in that framework
      indefinitely. By virtue of being a web standard, the value of web components
      you write today should be able to be preserved for a very long time.
    </p>

    <p>
      <strong>Bonus:</strong> During our port, we were able to bring our popular
      <a href="https://component.kitchen/tutorial">Web Components Tutorial</a>
      up to date. If you know people who would be interested in learning about web
      components, just point them at the newly-updated tutorial.
    </p>
  2016-02-29 Writing a web component that wraps a standard HTML element might alleviate the need for is="" syntax.html: >
    
    ---

    title: Writing a web component that wraps a standard HTML element might alleviate the need for is="" syntax

    date: 2016-02-29 16:00 UTC

    slug: writing-a-web-component-that-wraps-a-standard-html-element-might-alleviate-the-need-for-is-syntax

    originalUrl: https://component.kitchen/blog/posts/writing-a-web-component-that-wraps-a-standard-html-element-might-alleviate-the-need-for-is-syntax

    ---


    <p>
      What if you want to create a web component that extends the behavior of a
      standard HTML element like a link? An early draft of the Custom Elements
      specification allowed you to do this with a special syntax, but the fate of
      that syntax is in doubt. We've been trying to create custom variations of
      standard elements <em>without</em> that support, and wanted to share our
      progress. Our results are mixed: more positive than we expected, but with some
      downsides.
    </p>


    <h2>Why would you want to extend a standard HTML element?</h2>

    <p>
      Perhaps there's a standard element does <em>almost</em> everything you want,
      but you want it to give it custom properties, methods, or behavior.
      Interactive elements like links, buttons, and various forms of input are
      common examples.
    </p>

    <p>
      Suppose you want a custom anchor element that knows when it's pointing to the
      page the user is currently looking at. Such a situation often comes up in
      navigation elements like site headers and app toolbars. On our own site, for
      example, we have a header with some links at the top to our
      <a href="https://component.kitchen/tutorial">Tutorial</a> and
      <a href="https://component.kitchen/about">About Us</a> pages. If the user's
      currently on the About Us page, we want to highlight the About Us link so the
      user can confirm their location:
    </p>

    <figure>
      <a href="https://component.kitchen/about">
        <img
          src="resources/blog/Component Kitchen Toolbar.png"
          style="max-width: 100%"
        />
      </a>
    </figure>

    <p>
      While such highlighting is easy enough to arrange through link styling and
      dynamically choosing CSS classes in page templates, it seems weird that a link
      can't just handle this highlighting itself. The link should be able to just
      combine the information it already has access to — its own destination, and
      the address of the current page — and determine for itself whether to apply
      highlighting.
    </p>

    <p>
      We recently released a simple component called
      <a
        href="https://github.com/basic-web-components/basic-web-components/tree/master/packages/basic-current-anchor"
        >basic-current-anchor</a
      >
      that does this. We did this partly because it's a modestly useful component,
      and also because it's a reasonable testing ground for ways to extend the
      behavior of a standard element like an anchor.
    </p>

    <p>
      What's the best way to implement a component that extends a standard element?
    </p>


    <h2>Option 1: Recreating a standard element from scratch (Bad idea)</h2>

    <p>
      Creating an anchor element completely from scratch turns out to be ferociously
      complicated. You'd think you could just apply some styling to make an element
      blue and underlined, define an <code>href</code> attribute/property, and then
      open the indicated location when the user clicks. But there's far more to an
      anchor element than that. A sample of the problems you'll face:
    </p>

    <ol>
      <li>
        The result of clicking the link depends on which modifier keys the user is
        pressing when they click. They may want to open the link in a new tab or
        window, and the key they usually press to accomplish that varies by browser
        and operating system.
      </li>
      <li>You'll need to do work to handle the keyboard.</li>
      <li>
        Standard links can change their color if the user has visited the
        destination page. That knowledge of browser history is not available to you
        through a DOM API, so your custom anchor element won't know which color to
        display.
      </li>
      <li>
        When you hover over a standard <code>&lt;a&gt;</code> element, the browser
        generally shows the link destination in a status bar. But there is
        <em>no way to set the status bar text in JavaScript</em>. That's probably a
        good thing! It would be annoying for sites to change the status bar for
        nefarious purposes. But even with a solid justification for doing so, your
        custom anchor element has no way to show text in the status bar.
      </li>
      <li>
        Right-clicking or long-tapping a standard link produces a context menu that
        includes link-specific commands like "Copy Address". Again, this is a
        browser feature to which you have no access in JavaScript, so your custom
        anchor element can't offer these commands.
      </li>
      <li>
        A standard anchor element has a number of accessibility features that are
        used by users with screen readers and other assistive techologies. While you
        can work around the problem to some extent with ARIA, there are numerous
        <a
          href="https://github.com/domenic/html-as-custom-elements/blob/master/docs/accessibility.md"
          >gaps in implementing accessibilty</a
        >
        completely from scratch.
      </li>
    </ol>

    <p>
      Given this (likely incomplete) litany of problems, we view this option as a
      non-starter, and would strongly advise others to not go down this road. It's a
      terrible, terrible idea.
    </p>


    <h2>Option 2: Hope/wait for is="" syntax to be supported</h2>

    <p>
      The original Custom Elements spec called for an <code>extends</code> option
      for <code>document.registerElement()</code> to indicate the tag of a standard
      element you wanted to extend:
    </p>

    <pre>
      class MyCustomAnchor { ... }
      document.registerElement('my-custom-anchor', {
        prototype: MyCustomAnchor.prototype,
        extends: 'a'
      });
    </pre>

    <p>
      Having done that, you could then create your custom variant of the standard
      element by using the standard tag, and then adding an <code>is</code>
      attribute indicating the name of your element.
    </p>

    <pre>
      &lt;body&gt;
        &lt;a is="my-custom-anchor" href="https://example.com"&gt;A custom link&lt;/a&gt;
      &lt;/body&gt;
    </pre>

    <p>
      However, at a W3C committee meeting in January, Apple indicated that they felt
      like this feature would likely generate many subtle problems. They do not want
      such problems to jeopardize the success of Custom Elements v1.0, and have
      argued that it should be excluded from the Custom Elements specification for
      now. Google and others would like to see this feature remain. But without
      unanimous support, the feature's future is unclear, and we're reluctant to
      depend on it.
    </p>


    <h2>
      Option 3: Use the Shadow DOM polyfill just for elements with
      <code>is</code> attributes
    </h2>

    <p>
      The
      <a href="https://github.com/webcomponents/webcomponentsjs"
        >web component polyfills</a
      >
      already support the <code>is=""</code> syntax, so in theory you could keep
      using the polyfill even in browsers where native Shadow DOM is available. But
      that feels weird for a couple of reasons. First, the polyfill won't load if
      native Shadow DOM is available, so you'd have to subvert that behavior. You'd
      have to keep just enough of the polyfill alive to handle just custom element
      instances using the <code>is=""</code> syntax. That doesn't sound like fun.
      And, second, if <code>is=""</code> isn't offically endorsed by all the
      browsers, it's future is somewhat uncertain, so it's seems somewhat risky to
      invest in it.
    </p>

    <p>
      You could also try to manually reproduce what the Shadow DOM polyfill is
      doing, but that seems like an even worse answer. Your approach won't be
      standard even in name, and so you'll create a burden for people that want to
      use your component.
    </p>


    <h2>Option 4: Wrap a standard element</h2>

    <p>
      Since we think it's inadvisable to recreate standard elements from scratch
      (option 1 above), and are nervous about depending on a standard syntax in the
      near future (options 2 and 3), we want to explore other options under our
      control. The most straightforward alternative seems to be wrapping a standard
      element. The general idea is to create a custom element that exposes the same
      API as a standard element, but delegates all the work to a real instance of a
      standard element sitting inside the custom element's Shadow DOM subtree. This
      sort of works, but with some important caveats.
    </p>

    <p>
      The process of wrapping a standard element is consistent enough across all
      standard element types that we can try to find a general solution. We've made
      our initial implementation available in the latest v0.7.3 release of
      <a href="https://github.com/basic-web-components/basic-web-components"
        >Basic Web Components</a
      >, in the form of a new base class called
      <a
        href="https://github.com/basic-web-components/basic-web-components/tree/master/packages/basic-wrapped-standard-element"
        >WrappedStandardElement</a
      >. This component serves both as a base class for wrapped standard elements,
      and a class factory that generates such wrappers.
    </p>

    <p>
      We've used this facility to refactor an existing component called
      <a
        href="https://github.com/basic-web-components/basic-web-components/tree/master/packages/basic-autosize-textarea"
        >basic-autosize-textarea</a
      >
      (which wraps a standard textarea), and deliver a new component,
      <a
        href="https://github.com/basic-web-components/basic-web-components/tree/master/packages/basic-current-anchor"
        >basic-current-anchor</a
      >. The latter wraps a standard anchor element to deliver the feature discussed
      above: the anchor marks itself as current if it points to the current page.
      You can view a simple
      <a
        href="http://basicwebcomponents.org/basic-web-components/packages/basic-current-anchor/"
        >demo</a
      >.
    </p>

    <p>The definition of basic-current-anchor wraps a standard anchor like this:</p>

    <pre>
      // Wrap a standard anchor element.
      class CurrentAnchor extends WrappedStandardElement.wrap('a') {
        // Override the href property so we can do work when it changes.
        get href() {
          // We don't do any custom work here, but need to provide a getter so that
          // the setter below doesn't obscure the base getter.
          return super.href;
        }
        set href(value) {
          super.href = value;
          /* Do custom work here */
        }
      }
      document.registerElement('basic-current-anchor', CurrentAnchor);
    </pre>

    <p>
      The <code>WrappedStandardElement.wrap('a')</code> returns a new class that
      does several things:
    </p>

    <ol>
      <li>
        The class' <code>createdCallback</code> creates a Shadow DOM subtree that
        contains an instance of the standard element being wrapped. A runtime
        instance of <code>&lt;basic-current-anchor&gt;</code> will look like this:
        <pre>
      &lt;basic-current-anchor&gt;
        #shadow-root
          &lt;a id="inner"&gt;
            &lt;slot&gt;&lt;/slot&gt;
          &lt;/a&gt;
      &lt;/basic-current-anchor&gt;</pre
        >
        Note that the inner <code>&lt;a&gt;</code> includes a
        <code>&lt;slot&gt;</code> element. This will render any content inside the
        <code>&lt;basic-current-anchor&gt;</code> inside the standard
        <code>&lt;a&gt;</code> element, which is what we want.
      </li>
      <li>
        All getter/setter properties in the API of the wrapped standard class are
        defined on the outer wrapper class and forwarded to the inner inner
        <code>&lt;a&gt;</code> element. Here, CurrentAnchor will end up exposing
        HTMLAnchorElement properties like <code>href</code> and forwarding those to
        the inner anchor. Such forwarded properties can be overridden, as shown
        above, to augment the standard behavior with custom behavior. Our
        CurrentAnchor class overrides <code>href</code> above so that, if the
        <code>href</code> is changed at runtime, the link updates its own visual
        appearance.
      </li>
      <li>
        Certain events defined by standard elements will be re-raised across the
        Shadow DOM boundary. The Shadow DOM spec defines a list of
        <a
          href="https://www.w3.org/TR/shadow-dom/#h-events-that-are-not-leaked-into-ancestor-trees"
          >events that will not bubble up across a Shadow DOM boundary</a
        >. For example, if you wrap a standard <code>&lt;textarea&gt;</code>, the
        <code>change</code> event on the textarea will <em>not</em> bubble up
        outside the custom element wrapper. That's an issue for components like
        <a
          href="https://github.com/basic-web-components/basic-web-components/tree/master/packages/basic-autosize-textarea"
          >basic-autosize-textarea</a
        >. Since Shadow DOM normally swallows <code>change</code> inside a shadow
        subtree, someone using basic-autosize-textarea wouldn't be able to listen to
        <code>change</code> events coming from the inner textarea. To fix that,
        WrappedStandardElement automatically wires up event listeners for such
        events on the inner standard element. When those events happen, the custom
        element will re-raise those events in the light DOM world. This lets users
        of basic-autosize-textarea listen to <code>change</code> events as expected.
      </li>
    </ol>

    <p>
      Because this approach uses a real instance of the standard element in
      question, many aspects of the standard element's behavior work as normal for
      free. For example, an instance of <code>&lt;basic-current-anchor&gt;</code>
      will exhibit all the appearance and behavior of a standard
      <code>&lt;a&gt;</code> described above. That includes mouse behavior, status
      bar behavior, keyboard behavior, accessibility behavior, etc. That's a huge
      relief!
    </p>

    <p>
      But this approach has one significant limitation: styling. Because our custom
      element isn't called "a", CSS rules that apply to <code>a</code> elements will
      no longer work. Link pseudo classes like <code>:visited</code> won't work
      either. Worse, because there's essentially no meaningful standard styling
      solution for web components that works across the polyfilled browsers, it's
      not clear how to provide a good styling solution.
    </p>

    <p>
      Things will become a little easier when CSS Variables are implemented
      everywhere, but even that is a sub-optimal solution to styling a wrapped
      standard element. For one thing, you would need to separately define new CSS
      variables for <em>every</em> attribute someone might want to style. That
      includes inventing variables to replace standard CSS pseudo-classes. Next,
      someone using your wrapped element would need to duplicate all the styling
      rules to use both the standard attributes and your custom CSS variables. That
      mess gets worse with each wrapped standard element added to a project, since
      each will likely to define different (or, worse, conflicting) variable names.
    </p>

    <p>
      For the time being, we're trying a different solution, which is to define the
      interesting CSS attributes on a wrapped element using the CSS
      <code>inherit</code> value. E.g., a <code>&lt;basic-current-anchor&gt;</code>
      element currently has internal styling for the inner standard anchor that
      effectively does this:
    </p>

    <pre>
      &lt;style&gt;
      a {
        color: inherit;
        text-decoration: inherit;
      }
      &lt;/style&gt;
    </pre>

    <p>
      What that means is that the inner anchor will have <em>no</em> color or text
      decoration (underline) by default. Instead, it will pick up whatever
      <code>color</code> or <code>text-decoration</code> is applied to the outer
      custom element. That's fairly close to what we want, but still not ideal. If
      someone neglects to specify a <code>color</code>, for example, they'll end up
      with links that are (most likely) black instead of the expected blue.
    </p>

    <p>
      In practice, we may be able to live with that. The typical use case for our
      basic-current-anchor component, for example, is in navigation elements like
      toolbars, where web applications nearly always provide custom link styling
      that overrides the standard colors anyway. That said, styling represents a
      significant complication in this wrapping approach, and should be carefully
      considered if trying this.
    </p>


    <h2>Wrapping up</h2>

    <p>
      It would obviously be preferable for the Custom Elements specification to
      address the extension of standard elements when that becomes possible. But
      we're pragmatic, and would rather see Custom Elements v1.0 ship without
      <code>is=""</code> support if that means it comes sooner — as long as the
      problem is eventually solved correctly. Until then, wrapping a standard
      element may provide a stopgap solution to create a custom element extending
      standard behavior. It's not ideal, but may be sufficient for common cases.
    </p>

    <p>
      This is a complex area, and we could easily be overlooking things in our
      analysis. If you have thoughts on this topic, or know of an issue not
      discussed here, please give us a heads up!
    </p>
2016-04:
  2016-04-05 Replacing your server-side template language with plain JavaScript functions.html: >
    
    ---

    title: Replacing your server-side template language with plain JavaScript functions

    date: 2016-04-05 16:00 UTC

    slug: replacing-your-server-side-template-language-with-plain-javascript-functions

    originalUrl: https://component.kitchen/blog/posts/replacing-your-server-side-template-language-with-plain-javascript-functions

    ---


    <p>
      We’ve rewritten the
      <a href="https://component.kitchen">component.kitchen</a>
      backend server to rip out a popular templating language and replace it with
      plain JavaScript functions. Recent language improvements in ES2015 have, in
      our opinion, made it a sufficiently capable general-purpose language that
      we’ve dropped use of a special-purpose template language. As we began a
      rewrite of our site, we were inspired by our recent work
      <a
        href="https://component.kitchen/blog/posts/a-new-release-of-basic-web-components-based-on-plain-javascript-component-mixins"
        >using plain JavaScript functions to create web components</a
      >
      and decided to apply the same philosophy to our backend as well.
    </p>

    <p>
      We serve up our site using Node and
      <a href="http://expressjs.com/">Express</a>. A popular feature of Express is
      that it supports pluggable template languages, called “view engines”. Until
      now, we’ve used
      <a href="http://www.dustjs.com/">Dust.js</a>
      as our template language. This has worked okay, and we’ve done it that way for
      so long that we’ve rarely questioned the need for a special language to solve
      this one problem. But using a template language has some downsides:
    </p>


    <ul>
      <li>
        The template language (e.g., Dust) is different than the JavaScript the rest
        of the Node/Express backend is written in. We write in JavaScript everyday,
        but only rarely in the template language. This means we’re constantly forced
        to look even simple things up in the template langauge documentation.
      </li>
      <li>
        The syntax for most template languages is ugly and inconsistent. A template
        language’s parser needs a reliable way to identify template directives
        you’ve placed inside your content, so there’s a bias towards syntax that’s
        very unlikely to appear in normal text. Most template languages end up with
        lots of dollar signs, percent signs, curly braces, etc. Every one of these
        languages makes different choices, and you can be left trying to remember
        when you need one curly brace and when you need two.
      </li>
      <li>
        Performing work both outside the template (to prepare the data before
        pouring it into the template) and within the template (using conditional
        template directives, for example) can create an uneasy relationship between
        both pieces of code. Template languages have control-flow constructs like
        traditional languages, but they can be cumbersome to work with. For example,
        a looping construct typically expects to iterate over a simple array. If you
        want to, say, filter the array, you need to preprocess your data into a form
        directly useful in the template language. This often results in splitting
        logic across multiple files.
      </li>
    </ul>


    <p>
      Why use a special-purpose template language at all? Why not JavaScript? Now
      that ES2015 has template literals, we thought we’d try using those as the
      basis for a plain JavaScript solution.
    </p>


    <h2>Step 1: Replace each template file with a plain JavaScript function</h2>


    <p>
      We create a file for each kind of page we serve up. Each file exports a single
      function that accepts an Express request object (which contains the HTTP
      headers, URL parameters, etc.) and returns a text string containing the
      response to send to the client.
    </p>


    <pre>

    // SamplePage.js

    module.exports = request =>
      `&lt;!DOCTYPE html>
      &lt;html>
        &lt;head>
        &lt;title>Hello, world!&lt;/title>
        &lt;/head>
        &lt;body>
          You’re looking at a page hosted on ${request.params.hostname}.
        &lt;/body>
      &lt;/html>`;
    </pre>


    <p>
      This is a pure function — it has no side effects. It returns a string using a
      template literal, splicing in data using the <code>${...}</code> syntax. As
      with all template language syntax, it is ugly. But at least this particular
      ugly syntax is now standard JavaScript. You can use the <em>same</em> ugly
      syntax throughout your code, instead of different ugly syntaxes for different
      parts of your code. JavaScript FTW!
    </p>

    <p class="pullQuote">
      Why use a special-purpose template language at all? Why not JavaScript?
    </p>

    <p>
      The render function can do whatever you want. If you need to do some
      computation — filter an array, etc. — you can do that in plain JavaScript,
      then splice the results into the string you return. While you could embed
      conditionals in the template literal directly, we prefer to avoid that, as it
      quickly gets ugly.
    </p>

    <p>
      If you want to have a page use a more general template, you can easily do that
      too:
    </p>


    <pre>

    // Define a template. It’s just a function that returns a string.

    let template = (request, data) =>
      `&lt;!DOCTYPE html>
      &lt;html>
        &lt;head>
        &lt;title>${data.title}&lt;/title>
        &lt;/head>
        &lt;body>
          ${data.content}
        &lt;/body>
      &lt;/html>`;

    // Create a page that uses the template.

    module.exports = request => template(request, {
      title: `Hello, world!`,
      content: `You’re looking at a page hosted on ${request.params.hostname}.`
    });

    </pre>


    <p>
      Since a render function often needs to do asynchronous work, we allow a render
      function to return either a string or a Promise for a string.
    </p>


    <h2>Step 2: Map Express routes to render functions</h2>

    <p>
      We create a simple mapping of routes to the functions that handle those
      routes. Since a render function’s file exports only that function, we can
      reference it with a <code>require()</code> statement:
    </p>


    <pre>

    let routes = {
      '/': require('./home.js'),
      '/about': require('./about.js'),
      '/blog': require('./blogIndex.js'),
      '/blog/posts/:post': require('./blogPost.js'),
      '/robots.txt': require('./robots.js'),
      '/sitemap.xml': require('./sitemap.js')
    };

    </pre>


    <h2>Step 3: When a request comes in, invoke the render function</h2>

    <p>
      We wire up our Express routes such that, when a request comes in matching a
      given route, the corresponding render function is invoked. The result of that
      function is resolved and returned as the request’s response.
    </p>


    <pre>

    // Map routes to render functions.

    for (let path in routes) {
      let renderFunction = routes[path];
      app.get(path, (request, response) => {
        // Render the request as a string or promise for a string.
        let result = renderFunction(request);
        // If the result's not already a promise, cast it to a promise.
        Promise.resolve(result)
        .then(content => {
          // Return the rendered content as the response.
          response.set('Content-Type', inferContentType(content));
          response.send(content);
        });
      });
    }

    </pre>


    <h2>Step 4: Set the outgoing Content-Type</h2>

    <p>
      Nearly all our routes respond with HTML, but we have a small number of routes
      that return XML, JSON, or plain text. We could have a render function return
      multiple values, including an indication of the desired Content-Type. But our
      simple site serves up such a small number of content types that we can
      reliably infer the content type from the start of the response string.
    </p>


    <pre>

    // Given textual content to return, infer its Content-Type.

    function inferContentType(content) {
      if (content.startsWith('&lt;!DOCTYPE html>')) {
        return 'text/html';
      } else if (content.startsWith('&lt;?xml')) {
        return 'text/xml';
      } else if (content.startsWith('{')) {
        return 'application/json';
      } else {
        return 'text/plain';
      }
    }

    </pre>


    <p>
      That’s it. We end up with a small set of JavaScript files, one for each kind
      of page we serve up. Each file defines a single render function, and each
      function is typically quite simple. In our opinion, our code has gotten easier
      to read and reason about. It’s also closer to the metal — we have ripped out a
      substantial, mysterious template language layer — so there are fewer
      surprises, and we don’t have to keep looking up template language tricks in
      the documentation or on StackOverflow.
    </p>

    <p>
      Although domain-specific template languages like Dust look very efficient,
      over time we accumulated a non-trivial amount of JavaScript to get everything
      into a form Dust could process. Now that we’re just using JavaScript
      everywhere, we have much <em>less</em> page-generation code than we did
      before, and the new code is completely consistent with the rest of our code
      base.
    </p>
2016-10:
  2016-10-17 Our experience upgrading web components from Shadow DOM%Custom Elements v0 to v1.html: >
    
    ---

    title: Our experience upgrading web components from Shadow DOM/Custom Elements v0 to v1

    date: 2016-10-17 7:00 UTC

    slug: our-experience-upgrading-web-components-from-shadow-domcustom-elements-v0-to-v1

    originalUrl: https://component.kitchen/blog/posts/our-experience-upgrading-web-components-from-shadow-domcustom-elements-v0-to-v1

    ---


    <p>
      With Google now shipping both Shadow DOM v1 and Custom Elements v1 in Chrome,
      and Apple shipping Shadow DOM v1 in Safari, we’ve been upgrading the
      <a href="https://github.com/basic-web-components/basic-web-components"
        >Basic Web Components</a
      >
      library from the original v0 specs to v1. Here’s what we learned, in case
      you’re facing a similar upgrade of your own components, or just want to
      understand some ramifications of the v1 changes.
    </p>


    <h2>Upgrading components to Shadow DOM v1: Easy!</h2>

    <p>
      Google developer Hayato Ito has a great summary of
      <a href="http://hayato.io/2016/shadowdomv1/">What’s New in Shadow DOM v1</a>.
      Adapting our components to accommodate most of the changes on that list was
      trivial, often just a matter of Find and Replace. The v0 features that were
      dropped were ones we had never used (multiple shadow roots, shadow-piercing
      CSS combinators) or had avoided (<code>&lt;content select=”...”></code>), so
      their absence in v1 did not present a problem.
    </p>

    <p>
      One v1 feature that we had heavily lobbied for was the addition of the
      slotchange event. The ability of an element to detect changes in its own
      distributed content is a critical addition to the spec. We are happy to
      replace our old, hacky method of detecting content changes with the new,
      official slotchange event. This allows us to easily write components that meet
      the
      <a href="https://github.com/webcomponents/gold-standard/wiki/Content-Changes"
        >Content Changes</a
      >
      requirement on the Gold Standard checklist for web components.
    </p>


    <h2>Upgrading components to Custom Elements v1: Some challenges</h2>

    <p>
      The changes from Custom Elements v0 to v1 were more challenging, although some
      were easy:
    </p>

    <ul>
      <li>
        Replacing <code>document.registerElement()</code> with
        <code>customElements.define()</code>. No issues.
      </li>
      <li>
        Drop support for <code>is=""</code> syntax. Ever since Apple announced that
        they would not support the syntax, we’ve avoided it. As a workaround, a
        while back we created a general wrapper component called
        <a
          href="https://github.com/basic-web-components/basic-web-components/tree/master/packages/basic-wrapped-standard-element"
          >WrappedStandardElement</a
        >.
      </li>
      <li>
        Tweaks in lifecycle callback timing. There were spirited spec debates over
        the exact points in time when a component’s lifecycle callbacks should be
        invoked, but we didn’t notice any practical differences between v0 and v1.
      </li>
      <li>
        <code>attributeChangedCallback</code> automatically invoked at constructor
        time. This was a welcome change that allowed us to simplify our
        <a
          href="https://github.com/basic-web-components/basic-web-components/blob/master/packages/basic-component-mixins/docs/AttributeMarshalling.md"
          >AttributeMarshalling</a
        >
        mixin, which automatically translates attribute changes into property
        updates.
      </li>
    </ul>


    <p>
      One small obstacle we hit is that a v1 component now needs to declare which
      attributes it wants to monitor for changes. This performance optimization in
      Custom Elements v1 requires that your component declare an
      <code>observedAttributes</code> array to avoid getting
      <code>attributeChangedCallback</code> invocations for attributes you don’t
      care about. That sounds simple, but in our mixin-based approach to writing
      components, it was actually a bit of a pain. Each mixin had to not only
      declare the attributes it cared about, but it had to cooperatively construct
      the final <code>observedAttributes</code> array. We eventually hit on the idea
      of having the aforementioned AttributeMarshalling mixin programmatically
      inspect the component class for all custom properties, and automatically
      generate an appropriate array of attributes for
      <code>observedAttributes</code>. That seems to be working fine.
    </p>

    <p>
      A more problematic change in v1 is that component initialization is now done
      in a class constructor instead of a <code>createdCallback</code>. The change
      itself is a desirable one, but we expected it would be tricky, and it was. The
      biggest problem we’ve encountered is that the list of
      <a
        href="http://w3c.github.io/webcomponents/spec/custom/#custom-element-conformance"
        >Requirements for custom element constructors</a
      >
      prohibits a new component from setting attributes in its constructor. The
      intention, as we understand it, is to mirror standard element behavior.
      Calling <code>createElement('div')</code> returns a clean div with no
      attributes, so calling <code>createElement('my-custom-element')</code> should
      return a clean element too, right?
    </p>

    <p>
      That sounds good but turns out to be limiting. Custom elements can’t do
      everything that native elements can, and sometimes the only way to achieve a
      desired result is for a custom element to add an attibute to itself:
    </p>

    <ol>
      <li>
        A component wants to define default ARIA attributes for accessibility
        purposes. For example, our
        <a
          href="https://github.com/basic-web-components/basic-web-components/tree/master/packages/basic-list-box"
          >ListBox</a
        >
        component needs to add <code>role=”listbox”</code> to itself. That helps a
        screen reader interpret the component correctly, without the person using
        the component having to know about or understand ARIA. That
        <code>role</code> attribute is a critical part of a ListBox element, and
        needs to be there by default.
      </li>
      <li>
        A component wants to reflect its state as CSS classes so that component
        users can provide state-dependent styling. For example, our
        <a
          href="https://github.com/basic-web-components/basic-web-components/tree/master/packages/basic-collapsible-panel"
          >CollapsiblePanel</a
        >
        component wants to let designers style its open and closed appearances by
        adding CSS classes that reflect the open/closed state. This component
        reflects the current state of its <code>closed</code> property via CSS
        classes. It’s reasonable that a component would want to set the initial
        state of that <code>closed</code> property in a constructor. But setting
        that default value of that property in the constructor will trigger the
        update to the CSS class, which is not permitted in Custom Elements v1.
      </li>
    </ol>


    <p>
      In these cases, it doesn’t seem like it would be hard to just set the
      attributes in the connectedCallback instead. In practice, it introduces
      complications because a web app author that instantiates a component would
      like to be able to immediately make changes to it before adding it to the
      document. In the first scenario above, the author might want to adjust the
      <code>role</code> attribute:
    </p>


    <pre>

    class ListBox extends HTMLElement {
      connectedCallback() {
        this.setAttribute('role', 'listbox');
      }
    }


    let listBox = document.createElement('basic-list-box');

    listBox.setAttribute('role', 'tabs'); // Set custom role

    document.body.appendChild(listBox); // connectedCallback will overwrite role!

    </pre>


    <p>
      Because ListBox can’t apply a default <code>role</code> attribute at
      constructor time, its connectedCallback will have to take care to see if a
      <code>role</code> has already been set on the component before applying a
      default value of <code>role=”listbox”</code>. It’s easy for a developer to
      forget such a check. The result will likely be components that belatedly apply
      default attributes, stomping on top of attributes that were applied after the
      constructor and before the component is added to the document.
    </p>

    <p>
      Another problem comes up in the second scenario above. The creator of the
      component would like to be able to write a property getter/setter that
      reflects its state as CSS classes:
    </p>


    <pre>

    let closedSymbol = Symbol('closed');


    class CollapsiblePanel extends HTMLElement {

      constructor() {
        // Set defaults
        this.closed = true; // Sets the “class” attribute, so will throw!
      }

      get closed() {
        return this[closedSymbol];
      }
      set closed(value) {
        this[closedSymbol] = value;
        this.toggleClass('closed', value);
        this.toggleClass('opened', !value);
      }

    }

    </pre>


    <p>
      Since the above code won’t work, the developer has to take care to defer all
      attribute writes (including manipulations of the classList, which updates the
      <code>class</code> attribute) to the <code>connectedCallback</code>. To make
      that tolerable, we ended up creating
      <a
        href="https://github.com/basic-web-components/basic-web-components/blob/master/packages/basic-component-mixins/src/safeAttributes.js"
        >safeAttributes</a
      >, a set of helper functions that can defer premature calls to
      <code>setAttribute()</code> and <code>toggleClass()</code> to the
      <code>connectedCallback</code>.
    </p>

    <p>
      That’s working for now, but it feels like the v1 restrictions on the
      constructor are overly limiting. The intention is to ensure that the component
      user gets a clean element from <code>createElement()</code> — but if the
      resulting element is just going to add attributes to itself in the
      <code>connectedCallback</code>, is that element really clean? As soon as the
      attribute-less element is added to the document, it will suddenly grow new
      attributes. In our opinion, that feels even more surprising than having
      <code>createElement()</code> return an element with default attributes.
    </p>


    <h2>The current state of Shadow DOM and Custom Elements v1</h2>

    <p>
      Overall, we’re excited that we’ve got our components and mixins working in
      production Chrome 54, which just shipped last week with support for both
      Shadow DOM v1 and Custom Elements v1. The Chrome implementation of the specs
      feels solid, and we haven’t hit any bugs.
    </p>

    <p>
      Shadow DOM v1 is also coming together in Safari, including in Mobile Safari.
      At the moment, it feels more like a beta than a production feature — we’ve hit
      a number of critical bugs in WebKit that prevent most of our components from
      working. Apple’s working through those bugs, and we hope to see WebKit’s
      support for Shadow DOM improve soon.
    </p>

    <p>
      In the meantime, Google has been doing the thankless, herculean task of
      upgrading the Shadow DOM and Custom Elements polyfills to the v1 specs. That’s
      great to see, because without an answer for older browsers, web components
      won’t see wide adoption. At the moment, the v1 polyfills also feel like a
      beta, but they’re coming along quickly. As soon as the polyfills are stable
      enough, we’re looking forward to making a full release of Basic Web Components
      based on the v1 specs.
    </p>
2017-10:
  2017-10-23 A compact JavaScript mixin for creating native web components in FRP%React style.html: >
    
    ---

    title: A compact JavaScript mixin for creating native web components in FRP/React style

    date: 2017-10-23 12:00 UTC

    slug: a-compact-javascript-mixin-for-creating-native-web-components-in-frpreact-style

    originalUrl: https://component.kitchen/blog/posts/a-compact-javascript-mixin-for-creating-native-web-components-in-frpreact-style

    ---


    <p>
      Perhaps you like the benefits of functional reactive programming, but would
      like to create native web components with minimal overhead. This post explores
      a relatively simple JavaScript mixin that lets you author web components in a
      functional reactive programming (FRP) style modeled after React. This mixin
      focuses exclusively on managing state and determining when the state should be
      rendered. You can use this mixin with whatever DOM rendering technology you
      like: virtual-dom, hyperHTML, lit-html, plain old DOM API calls, etc.
    </p>

    <p>
      I spent several months this summer writing React and Preact components, and
      the values of an FRP model were immediately clear. As React advocates claim,
      using FRP does indeed make state easier to reason about and debug, code
      cleaner, and tests easier to write.
    </p>

    <p>
      I wanted to bring these reactive benefits to the
      <a href="/elix/">Elix web components</a>
      project which Component Kitchen leads. Elix already uses
      <a href="/elix/mixins">functional mixins</a>
      extensively for all aspects of component functionality for everything from
      accessibility to touch gestures. I wanted to see if it were possible to
      isolate the core of an FRP architecture into a functional mixin that could be
      applied directly to HTMLElement to create a reactive web component.
    </p>

    <p>
      You can use the resulting
      <a href="/elix/ReactiveMixin">ReactiveMixin</a>
      to create native web components in a functional reactive style. FRP frameworks
      often use a canonical increment/decrement component as an example. The
      ReactiveMixin version looks like this:
    </p>


    <pre>
      
        import ReactiveMixin from '.../ReactiveMixin.js';

        // Create a native web component with reactive behavior.
        class IncrementDecrement extends ReactiveMixin(HTMLElement) {

          // This property becomes the initial value of this.state at constructor time.
          get defaultState() {
            return { value: 0 };
          }

          // Provide a public property that gets/sets state.
          get value() {
            return this.state.value;
          }
          set value(value) {
            this.setState({ value });
          }

          // Expose "value" as an attribute.
          attributeChangedCallback(attributeName, oldValue, newValue) {
            if (attributeName === 'value') {
              this.value = parseInt(newValue);
            }
          }
          static get observedAttributes() {
            return ['value'];
          }

          // … Plus rendering code, with several options for rendering engine
        }

        customElements.define('increment-decrement', IncrementDecrement);

    </pre>


    <p>
      <a href="https://codepen.io/JanMiksovsky/pen/WLwjwL?editors=1010"
        >Live demo</a
      >
    </p>

    <p>
      You end up with something that’s very similar to React’s Component class (or,
      more specifically, PureComponent), but is a native HTML web component. The
      compact mixin provides a small core of features that enable reactive web
      component development in a flexible way.
    </p>


    <h2>Defining state</h2>

    <p>
      ReactiveMixin gives the component a member called <code>this.state</code>, a
      dictionary object with all state defined by the component and any of its other
      mixins. The <code>state</code> member, which is read-only and immutable, can
      be referenced during rendering, and to provide backing for public properties
      like the <code>value</code>
      getter above.
    </p>

    <p>
      ReactiveMixin provides a <code>setState</code> method the component invokes to
      update its own state. The mixin sets the initial state in the constructor by
      passing the value of the <code>defaultState</code> property to
      <code>setState</code>.
    </p>


    <h2>Detecting state changes</h2>

    <p>
      When you call <code>setState</code>, ReactiveMixin updates the component’s
      state, and then invokes a <code>shouldComponentUpdate</code> method to
      determine whether the component should be rerendered.
    </p>

    <p>
      The default implementation of <code>shouldComponentUpdate</code> method
      performs a shallow check on the state properties: if any top-level state
      properties have changed identity or value, the component is considered dirty,
      prompting a rerender. This is comparable to the similar behavior in
      <code>React.PureComponent</code>. In our explorations, we have found that our
      web components tend to have shallow state, so pure components are a natural
      fit. You can override this to provide a looser dirty check (like
      <code>React.Component</code>) or a tighter one (to optimize performance, or
      handle components with deep state objects).
    </p>

    <p>
      If there are changes <em>and</em> the component is in the DOM, the new state
      will be rendered.
    </p>


    <h2>Rendering</h2>

    <p>
      This mixin stays intentionally independent of the way you want to render state
      to the DOM. Instead, the mixin invokes an internal component method whenever
      your component should render, and that method can invoke whatever DOM updating
      technique you like. This could be a virtual DOM engine, or you could just do
      it with plain DOM API calls.
    </p>

    <p>
      Here’s a plain DOM API render implementation for the increment/decrement
      example above. We’ll start with a template:
    </p>

    <pre>

        &lt;template id="template">
          &lt;button id="decrement">-&lt;/button>
          &lt;span id="value">&lt;/span>
          &lt;button id="increment">+&lt;/button>
        &lt;/template>

    </pre>


    <p>
      To the component code above, we’ll add an internal render method for
      ReactiveMixin to invoke. The mixin uses a <code>Symbol</code> object to
      identify the internal render method. This avoids name collisions, and
      discourages someone from trying to invoke the render method from the outside.
      (The render method can become a private method when JavaScript supports
      those.)
    </p>


    <pre>

        import symbols from ‘.../symbols.js’;

        // This goes in the IncrementDecrement class ...
        [symbols.render]() {
          if (!this.shadowRoot) {
            // On our first render, clone the template into a shadow root.
            const root = this.attachShadow({ mode: 'open' });
            const clone = document.importNode(template.content, true);
            root.appendChild(clone);
            // Wire up event handlers too.
            root.querySelector('#decrement').addEventListener('click', () => {
              this.value--;
            });
            root.querySelector('#increment').addEventListener('click', () => {
              this.value++;
            });
          }
          // Render the state into the shadow.
          this.shadowRoot.querySelector('#value').textContent = this.state.value;
        }

    </pre>


    <p>
      That’s all that’s necessary. The last line is the core bit that will update
      the DOM every time the state changes. The two buttons update state by setting
      the <code>value</code> property, which in turn calls <code>setState</code>.
    </p>

    <p>
      This ReactiveMixin would also be a natural fit with template literal libraries
      like
      <a href="https://github.com/PolymerLabs/lit-html/">lit-html</a> or
      <a href="https://github.com/WebReflection/hyperHTML/">hyperHTML</a>. That
      could look like:
    </p>


    <pre>

        import { html, render } from ‘.../lit-html.js’;
        import symbols from ‘.../symbols.js’;

        // Render using an HTML template literal.
        [symbols.render]() {
          if (!this.shadowRoot) {
            this.attachShadow({ mode: 'open' });
          }
          const template = html`
            &lt;button on-click=${() => this.value-- }>-&lt;/button>
            &lt;span>${this.state.value}&lt;/span>
            &lt;button on-click=${() => this.value++ }>+&lt;/button>
          `;
          render(template, this.shadowRoot);
        }

      
    </pre>


    <p>
      The creation of the shadow root and the invocation of the rendering engine are
      boilerplate you could factor into a separate mixin to complement
      ReactiveMixin.
    </p>


    <h2>Web component and FRP lifecycle methods</h2>

    <p>
      Since components created with this mixin are still regular web components,
      they receive all the standard lifecycle methods. ReactiveMixin augments
      <code>connectedCallback</code> so that a component will be rendered when it’s
      first added to the DOM.
    </p>

    <p>
      The mixin provides React-style lifecycle methods for
      <code>componentDidMount</code>
      (invoked when the component has finished rendering for the first time) and
      <code>componentDidUpdate</code> (whenever the component has completed a
      subsequent rerender). The mixin doesn’t provide
      <code>componentWillUnmount</code>; use the standard
      <code>disconnectedCallback</code> instead. Similarly, use the standard
      <code>attributeChangedCallback</code> instead of
      <code>componentWillReceiveProps</code>.
    </p>


    <h2>Conclusion</h2>

    <p>
      This ReactiveMixin gives us much of what we like about React, but lets us
      write web components which are closer to the metal. All it does is help us
      manage a component’s state, then tell our component when it needs to render
      that state to the DOM. Separating state management from rendering is useful —
      we’ve already changed our minds about which rendering engine to use several
      times, but those changes entailed only minimal updates to our components.
    </p>

    <p>
      The coding experience feels similar to React’s, although I don’t see a need to
      make the experience identical. For example, I thought setState would work well
      as an `async` Promise-returning function so that you can wait for a new state
      to be applied. And it’s nice to avoid all the platform-obscuring abstractions
      (e.g., synthetic events) React pushes on you.
    </p>

    <p>
      We’re using this ReactiveMixin to rewrite the Elix components in a functional
      reactive style. That work is proceeding fairly smoothly, and we’re moving
      towards an initial 1.0 release of Elix that uses this approach in the near
      future. In the meantime, if you’d like to play with using this mixin to create
      web components, give it a try and let us know how it goes.
    </p>
  2017-10-30 Web components that update light DOM.md: >
    ---

    title: Your web components with Shadow DOM may need to update light DOM too

    date: 2017-10-30 16:00 UTC

    slug: your-web-components-with-shadow-dom-may-need-to-update-light-dom-too

    originalUrl: https://component.kitchen/blog/posts/your-web-components-with-shadow-dom-may-need-to-update-light-dom-too

    ---


    Web components and Shadow DOM are practically synonymous, but even web components with a shadow subtree often need to render information into the light DOM. A component might need to:


    - Trigger conditional styling by applying CSS classes or attributes to itself.

    - Pass information to its light DOM children through CSS classes or attributes.

    - Set ARIA attributes on itself and its children.


    ## Example: ARIA support


    Suppose you're creating a single-selection list component, and want to follow the

    [ARIA best practices for list boxes](https://www.w3.org/TR/wai-aria-practices-1.1/#Listbox). Perhaps you use your favorite web component library to create a shadow root for your component and clone a template into it. Your component's shadow might include, among other things, styling for your list container and its light DOM items:


    ```
      <template>
        <style>
          :host {
            /* Host element styling goes here */
          }

          ::slotted(*) {
            /* General list item styling goes here */
          }

          ::slotted([aria-selected="true"]) {
            /* Styling for the selected list item goes here */
          }
        </style>
        <slot></slot>
      </template>
    ```


    Maybe that's all that's happening on the Shadow DOM side of things. Your component will _also_ need to do the following work in the light DOM:


    1. Set `role="listbox"` on the host element.

    2. If the list is horizontal, set `aria-orientation="horizontal"`.

    3. Set `role="option"` on all items in the list. Be careful not to mark any
       [auxiliary content](https://github.com/webcomponents/gold-standard/wiki/Auxiliary-Content) like `style` as items in the list!
    4. Set `aria-selected="true"` on the selected item. (For what it's worth: I've encountered at least one web component
       [bug](https://github.com/PolymerElements/iron-menu-behavior/issues/75)
       where the [NDVA](https://www.nvaccess.org/)
       screen reader required `aria-selected="false"` to be set on all other elements, even for a single selection list.)
    5. Set the host's `aria-activedescendant` attribute to be the `id` of the currently-selected item. If the page author hasn't supplied `id` attributes for every item, you will need to generate and assign an `id` for those items.


    That's a lot of work going on in the light DOM! These updates to the light DOM may surprise a page author if they include your list component in markup:


    ```
      <accessible-list aria-label="Fruits" tabindex="0">
        <div>Apple</div>
        <div>Banana</div>
        <div>Cherry</div>
      </accessible-list>
    ```


    At runtime, when this component updates the light DOM, the result might be:


    ```
      <accessible-list aria-label="Fruits" tabindex="0" role="listbox"
          aria-activedescendant="_option0">
        <div role="option" id="_option0" aria-selected="true">
          Apple
        </div>
        <div role="option" id="_option1" aria-selected="false">
          Banana
        </div>
        <div role="option" id="_option2" aria-selected="false">
          Cherry
        </div>
      </accessible-list>
    ```


    All this ARIA work is happening in the light DOM, not the Shadow DOM. Work is underway on a better accessibility API, but ARIA attributes are the only solution for the foreseeable future. And as outlined above, your component might have other reasons to update the light DOM.


    Generally speaking, you'll need to write the code to update the light DOM yourself. Most web component frameworks to date have focused on updating Shadow DOM, not light DOM.


    ## Conclusion


    What goes on in a component's shadow may only be half the picture — a substantial amount of work may be going on in the light DOM. That's an important point to consider when you're deciding how you want to write your component. Most component frameworks are focused on rendering Shadow DOM, so you'll need to understand what light DOM updates are appropriate and make them yourself.


    Code to handle such cases can be complex. For that reason, the Elix project tries to identify common scenarios for updating light DOM and address those with mixins like [AriaListMixin](/elix/AriaListMixin).
2017-11:
  2017-11-06 Edge and IE.md: >
    ---

    title: Is it worth creating web components that work on IE 11? Or Edge?

    date: 2017-11-06 16:00 UTC

    slug: is-it-worth-creating-web-components-that-work-on-ie-11-or-edge

    originalUrl: https://component.kitchen/blog/posts/is-it-worth-creating-web-components-that-work-on-ie-11-or-edge

    ---


    I spent the last week on my least favorite engineering task: trying to get a body of code that works on Chrome/Safari/Firefox to work on Microsoft Edge and Microsoft Internet Explorer. In this case, I've been trying to get the Elix project's unit tests and basic component set working as expected in Edge and IE 11. Such work is never fun. Lately I've been wondering whether it's worth the Elix project's time to support Microsoft's browsers.


    ## Internet Explorer 11


    IE 11 is still supported by Microsoft, but as the mainstream browsers have accelerated away from it, working in IE feels increasingly anachronistic. Although many modern web technologies come with a polyfill or other means to accommodate IE 11, the set of workarounds required today has really piled up.


    In the case of the Elix project, here's the current set of things we need to do for IE 11:


    - Transpile everything to ES5.

    - Bundle everything into old school script files, since IE can't handle modules. (While bundling is currently appropriate for production deployments in all browsers, we prefer to have our unit tests and demos run as native modules. Performance is not the primary consideration in those contexts, and we prefer to work directly against the real code. We test in Firefox with module support turned on, although production Firefox doesn't yet support modules by default.)

    - Maintain a build process in general. In modern browsers, all of Elix can run directly as is.

    - Load a Shadow DOM polyfill.

    - Load a Custom Elements polyfill.

    - Load a `Promise` polyfill.

    - Load a runtime that lets us use transpiled `async` functions.

    - Load a `Symbol` polyfill.

    - Load a polyfill for `Object.assign`.

    - Incorporate many, many workarounds for deficiencies or quirks in IE. Did you know that IE's `classList` object has a `toggle` method that [does _not_ support the standard second argument](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList#Browser_compatibility)? We know that now, and have had to work around that.


    Everything we're forced to add to the above list moves us further and further away from the metal. When we hit a bug, it's really hard to be confident about where the bug lies. Is it our code? Or somewhere in the list above?


    I joked on Twitter that getting a modern web app to run on IE is possible, in the same way it's possible to [play Doom on a thermostat](https://www.youtube.com/watch?v=2T5LyEjLfP8). In truth, the situation is worse. For all I know, a modern thermostat has better hardware than the 1993 PCs which Doom originally ran on. A better comparison might be that getting a modern web app to run on IE is like getting a modern game title like _Horizon Zero Dawn_ to run on a thermostat.


    ## Edge


    Microsoft Edge 16 is much better than IE, but it's still no picnic.


    While Edge supports many modern web technologies, Microsoft still hasn't begun implementing Shadow DOM and Custom Elements. And Edge still suffers from some of the same painful, glaring problems as its predecessor:


    - Edge's debugging tools are godawful. The debugger is slow. It hangs. It crashes. Its feature set is weak, weak, weak. It's so flaky, there was a point I couldn't get Elix's unit tests to pass in Edge _unless the debug tools were closed_. Opening the Edge debug tools would introduce unit test failures. How's that for a friendly developer experience?

    - Edge's release cadence is too slow. Today I isolated and filed an [Edge flex box bug](https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/14496746/). Even if Microsoft fixes the bug immediately, we could be waiting for the better part of a year to see the fix widely available.

    - Microsoft has offered no compelling vision of its own for the web. Interest in the Windows API as an application platform appears to be negligible and getting smaller. If that's correct, you would think Microsoft would invest heavily in a web-focused future. But at this past summer's Edge Developer Conference, Microsoft presentations were almost entirely focused on ideas introduced by Google long ago.


    It's not that Microsoft has forgotten about developers and how to cater to them. I'm continually impressed by the speed and quality of the work currently going into Visual Studio Code and TypeScript, for example. But when it comes to the developer experience in modern browsers, Edge is dead last.


    ## Market share and inertia


    In discussions about browser support, IE and Edge support are often presumed to be important. But given the current state of the market and some [usage summaries](https://en.wikipedia.org/wiki/Usage_share_of_web_browsers#Summary_tables), I'm not sure that makes sense.


    Mobile browser usage exceeds desktop browser usage. On mobile, China's UC Browser appears to have significantly more market share than IE and Edge on the desktop. Samsung Internet for Android likewise may have already passed Edge in market share, and may soon pass IE.


    The cost to keep things working on IE steadily grows. Even when new web advances come with polyfills that run on IE, the combined weight of all that's necessary to support IE is considerable. How much faster could your team go if it didn't have to support IE? In the case of the Elix project, I'm guessing IE support soaks up 10% of our time, and 50% of our positive emotions.


    And though Edge is Microsoft's replacement for IE, it's not clear Edge is on a path to any kind of interesting market position. In the 2 years Edge has been on the market, it's made miniscule gains. As far as I can tell, everyone who can abandon IE has already moved to Chrome. And those Chrome users must be sticking with Chrome even when they upgrade to a Windows machine capable of running Edge.


    In the global political order, the country of France retains one of 5 permanent seats on the U.N. Security Council solely for historical reasons, out of all proportion to its current importance. It feels like similar historical reasons may soon be the primary justification for Microsoft's position on web app browser requirements lists. Microsoft acts as if it automatically deserves a seat at the table, but I question that. It's reasonable to ask Microsoft: _What are you doing, today, as a browser vendor, that makes you worth the time and energy you force developers to spend on you?_


    As someone who worked at Microsoft for many years, I hold no grudge against them. To the contrary, as an alum, I really _want_ them to be successful. But if they're going to be relevant as a browser vendor, they're going to have to do a lot better. In the meantime, I'm wondering whether their browsers are worth the trouble.
  2017-11-20 Styling components may be difficult in practice.md: >
    
    ---

    title: Styling is critical to web component reuse, but may prove difficult in practice

    date: 2017-11-20 16:00 UTC

    slug: styling-is-critical-to-web-component-reuse-but-may-prove-difficult-in-practice

    originalUrl: https://component.kitchen/blog/posts/styling-is-critical-to-web-component-reuse-but-may-prove-difficult-in-practice

    ---


    The easiest way to create web components with a distinctive visual style is to bake that style directly into the components' code. Most user interface components are designed to be used solely within the company creating them, in which case baking in styles may be acceptable. But anyone aspiring to create or consume reusable general-purpose web components will have to grapple with the fact that styling components is currently an unsolved problem.


    That's worrisome. Most web components we've seen have a built-in visual style so distinctive that, without modification, it would look out of place in an app with someone else's brand. Not being able to easily theme such a component limits its utility.


    Suppose you're writing a hypothetical custom element called `reusable-component` and want to let other people style that element. Let's consider your options for doing so.


    ## Use CSS Custom Properties


    If you think someone wants to change the background color of your `reusable-component`, you can define its `background-color` style with a CSS Custom Property:


    ```
      :host {
        background-color: var(--reusable-component-background-color);
      }
    ```


    and your users can then style your component by defining that custom property:


    ```
      :root {
        --reusable-component-background-color: blue;
      }
    ```


    With the recent release of Edge 16, the above would now work in all modern browsers.


    Unfortunately, this just doesn't scale well. It's a pain for you, who must define a new custom property for every CSS attribute someone might conceivably want to override. If your component has internal shadow parts — buttons, etc. — that your users might want to style, you have to define new custom properties for all the interesting CSS attibutes on all those parts. And this will be painful for your users, who have to learn a long new list of custom properties for every component they might want to style.


    ## Wait for CSS parts and themes


    To solve the above problem, there's a proposal for [CSS Shadow Parts](https://tabatkins.github.io/specs/css-shadow-parts/) which would make it possible to expose designated internal parts as pseudo-elements that can be styled from the outside. This is similar to the way you can style certain native HTML elements in a non-standard way with certain pseudo-elements. For example, WebKit exposes the thumb (handle) of a scroll bar as a pseudo-element `::-webkit-scrollbar-thumb`, so you can write


    ```
      ::-webkit-scrollbar-thumb {
        background: pink;
      }
    ```


    to make scroll bar thumbs pink.


    The CSS Shadow Parts spec would let you expose your component's internal parts for styling. If you had a commit button in the shadow of your `reusable-component`, you could expose it as a part:


    ```
      <button part="commit-button">...</button>
    ```


    And someone can then write:


    ```
      reusable-component::part(commit-button) {
        background: pink;
        border: 1px solid red;
        border-radius: 5px;
      }
    ```


    to style the button. That's a more convenient way to achieve the same thing as CSS Custom Properties. There's less to document for your users and more flexibility. Your users can apply whatever styling they want without you needing to anticipate everything they might want to do.


    There are some downsides, though, when it comes to reusing such a styled custom element.


    ## Wrapping reusable custom elements + styling


    One key advantage to giving your customer a custom element is that they end up with a single thing that produces a consistent result. But if your customer tries to style your `reusable-component`, they'll end up creating a new reuse problem for themselves. People at that company now have to deal with _two_ separate things: 1) your original `reusable-component` definition, and 2) a stylesheeet with the company's styling for `reusable-component` and its parts. On their own, those two entities are independent, with no explicit relationship. Having to track and apply them correctly creates maintenance headaches.


    Your customer could define a new `component-wrapper` element that wraps your original `reusable-component` and applies the desired styling:


    ```
      <template>
        <style>
          reusable-component::part(commit-button) {
            background: pink;
            border: 1px solid red;
            border-radius: 5px;
          }
        </style>
        <reusable-component>
          <slot></slot>
        </reusable-component>
      </template>
    ```


    Then your customer can distribute this `component-wrapper` component internally, and everyone gets both your internal `reusable-component` and the correct styling in a nice package. (Even if `reusable-component` is actually defined elsewhere, `component-wrapper` can express that dependency, so the pieces are linked together.)


    But this introduces new challenges:


    - The wrapped component won't expose the same programmatic API as your original. Your customer will need to carefully reflect the inner component's API, which may be non-trivial.

    - Your `reusable-component` may have styling that's contingent upon CSS classes or attributes applied to the host element. Unfortunately, that host element is now sitting inside the shadow of the customer's `component-wrapper`. Again, the customer writing `component-wrapper` may have to carefully reflect any classes or attributes to the inner `reusable-component`. Even if they do that correctly, that may still end up with unexpected behavior.

    - The inner `reusable-component` needs to be styled to fill the host `component-wrapper`, so that if the latter is stretched, the former will be stretched to fit. That's not hard, but could easily be forgotten.

    - Certain layout differences will arise. If someone applies `padding` to the `component-wrapper`, that will apply to the wrapper, not within the inner `reusable-component` as they may intend. The customer could expose the inner `reusable-component` as a new `part` to address that, but that introduces complexity and conceptual overhead.

    - Both the element's tag and class identity will change. A `querySelector` that looks for `reusable-component` won't match `component-wrapper`. And an `instanceof ReusableComponent` check will fail when applied to an instance of `WrappedComponent`. The customer could potentially implement `Symbol.hasInstance` on their class, but that's getting complex. In general, it'll be real work for your customer to create `component-wrapper` as a drop-in replacement for your `reusable-component`.

    - Accessibility may be affected, as the wrapper may show up in the accessiblity tree unless measures are taken to avoid that. This can confuse things. My instinct would be to apply `role="none"` to the wrapper to keep it out of the accessibility tree. But if `component-wrapper` is given a `tabindex`, a screen reader might get confused when keyboard focus moves to the component.


    Overall, without an easy repackaging mechanism for themed components, organizations may have difficulty adopting and styling components they acquire from elsewhere.


    ## Overriding styles can be complex


    It's been our experience that even general-purpose components can end up with complex styling. People tend to approach component styling/theming as if the components were completely static, but components have dynamic _state_. State is often implicated in styling. As an example, a native button that's `disabled` shows different styling than an enabled button. If someone isn't carefully considering the `:disabled` pseudo-class in their button styling, they may end up applying an enabled button appearance to a disabled button.


    Web components can have complex internal states, resulting in correspondingly complex internal stylesheets. Overriding such styles will be a delicate matter. To look at some concrete examples, I looked through some internal stylesheets in web components we've previously written. Here are some of the CSS selectors I found:


    ```
      // From a carousel component
      :host(.overlayArrows) .navigationButton:hover:not(:disabled) { ... }

      // From a tabs component
      :host([generic=""][tab-position="right"]) .tab:not(:last-child) { ... }

      // From a toast component
      :host([from-edge="bottom-right"].opened:not(.effect)) #overlayContent,
      :host([from-edge="bottom-right"].effect.opening) #overlayContent { ... }
    ```


    Each complex CSS selector in your component may create a challenge for your customer. If the tabs component above exposes an individual `tab` as a `part`, what about that `:not(:last-child)` bit? If your customer writes styles that target the tab part, what styling should apply to the last tab?


    In general, even if you can expose an interesting internal part of the component for outside styling, your customer will need to be aware of a large number of conditions that may apply. They could easily end up writing rules that don't apply (because more specific conditions exist that take precedence) or apply when they shouldn't (they write rules that are too general).


    This is not to say that the CSS Shadow Parts spec won't be a step forward — it will be — but rather to say that styling components with of normal complexity might turn out to be extremely challenging in practice.


    (Aside: It goes without saying that, even if the browser vendors are excited about CSS Shadow Parts and the spec speeds through the standards process, it could still be a very long time until you can take advantage of them in all the browsers and devices you care about. And for what it's worth, polyfilling new CSS syntax is notoriously difficult to do well.)


    ## Inline styling


    Your customer trying to use your `reusable-component` might accomplish a certain degree of styling by applying inline styles to the component's host element (the top-level `<reusable-component>` instance sitting in the light DOM). Users of React and other FRP frameworks have found inline styling a powerful way to have a component apply styles to subelements. And more generally, inline styling is usually the easiest way to programmatically adjust an element's appearance regardless of framework.


    However, there are serious challenges using inline styles with web components. Inline styles can't be used to style internal component parts. That will remain true even if and when the CSS Shadow Parts proposal is adopted, as that only addresses styling with stylesheets. And as noted above, components can have complex state. Writing inline styles for the host element that apply in all conditions is likely too blunt an instrument.


    React and similar frameworks already struggle somewhat to deal with styling, but an increase in the presence of complex general-purpose components will make the issue more pressing.


    ## Other options?


    Given the above, we're not sure that either CSS Custom Properties, CSS Shadow Parts, or inline styling will be sufficent. We think those platform features are really interesting — it's just that they may not be enough for what we want to do. We want to create reusable web components that companies can easily brand for their applications, and we're unsure how to deliver that.


    We're exploring alternative ideas for letting people style our web components, but are very interested in hearing how other people are tackling this problem. If you have ideas, please share.
  2017-11-27 Styling reusable components with subclassing.md: >
    ---

    title: "Our current best answer for styling reusable components: subclassing"

    date: 2017-11-27 16:00 UTC

    slug: our-current-best-answer-for-styling-reusable-components-subclassing

    originalUrl: https://component.kitchen/blog/posts/our-current-best-answer-for-styling-reusable-components-subclassing

    ---


    Even though [styling reusable components is a hard problem](https://component.kitchen/blog/posts/styling-is-critical-to-web-component-reuse-but-may-prove-difficult-in-practice), the [Elix](/elix) project needs a solution if it's to keep moving forward. The library's goal is to provide general-purpose components that can be styled/themed to meet customers' needs. As far as we're aware, neither the web platform nor component frameworks give us the styling primitives we need. For now, Elix is tackling this styling challenge with subclassing.


    ## Asking a component what it wants to update


    To begin, our solution relies on the previously-discussed

    [ReactiveMixin](https://component.kitchen/blog/posts/a-compact-javascript-mixin-for-creating-native-web-components-in-frpreact-style), to define components in a React-ish, functional-reactive style. That post includes a [live demo](https://codepen.io/JanMiksovsky/pen/WLwjwL?editors=1010) of a canonical increment/decrement component created with `ReactiveMixin`. The source shows a `render` function that updates DOM whenever state changes.


    Let's add custom styling and behavior to that increment/decrement component. We'll start by using an Elix mixin called `ShadowTemplateMixin` to populate the shadow with the same template we used before:


    ```
      <template id="template">
        <button id="decrement">-</button>
        <span id="visibleValue"></span>
        <button id="increment">+</button>
      </template>
    ```


    Now we'll make use of a new Elix mixin called [RenderUpdatesMixin](/elix/RenderUpdatesMixin) that asks the component for a set of _updates_ to apply during rendering. The mixin will then update the DOM as requested. The component supplies this `updates` object as a property, indicating the attributes, classes, styles, and other properties to update:


    ```
      get updates() {
        return {
          style: {
            color: this.state.value < 0 ? 'red' : null
          },
          $: {
            visibleValue: {
              textContent: this.state.value
            }
          }
        };
      }
    ```


    The top level keys of the `updates` object will be applied to the component's host element. Here, the `style` key says that the host element's `style.color` should be updated to `'red'` when the value is negative, and left unspecified otherwise. It's not shown above, but a component can also specify keys for `attributes` and `classes` to modify those aspects of the host element. Any keys that aren't special are treated as custom properties and set directly.


    The `$` section contains updates that should be applied to elements in the component's shadow. When `ShadowTemplateMixin` sees a template element with an `id` like `<span id="visibleValue"></span>`, it defines a reference `this.$.visibleValue` to point to that span. Here, the `updates` object is asking to update that span's `textContent` to the current number in `this.state.value`.


    This `updates` getter is equivalent to the imperative:


    ```
      [symbols.render]() {
        this.style.color = this.state.value < 0 ? 'red' : null;
        this.$.visibleValue.textContent = this.state.value;
      }
    ```


    ## A component interaction pipeline


    The use of `RenderUpdatesMixin` and other Elix mixins lets us construct a pipeline of sorts inside the component:


    ```
      events → methods/properties → setState → render → updates → updated DOM
    ```


    When the user clicks the "+" or "-" buttons:


    1. A `click` event fires, which…

    2. sets the `value` property via a public API, which…

    3. invokes `setState` to update `this.state.value`, which…

    4. invokes an internal `symbols.render()` method that…

    5. asks the component for the state-dependent `updates` it wants to make which…

    6. get applied to the DOM.


    And, as a result, the user sees the visible value number go up or down.


    The `updates` are applied via helper functions that make the underlying DOM API calls. There's no virtual DOM diff'ing going on here, but the number of `updates` is generally small and targeted to the elements that are actually changing. For the time being, performance seems reasonable.


    ## Declarative formats as a last resort


    As an aside, I've come to generally shy away from declarative formats like the `updates` object above. People like the concise nature of a declarative format for UI structure or behavior, and such a format can have a place in systems devs are willing to learn.


    I think that learning cost is steep, so in code I want other people to use or contribute to, I try to avoid introducing declarative formats. Doing so is tantamount to shouting, _Whee! I've invented a new domain-specific language for you to learn!_ The syntax may be JavaScript, but the semantics are opaque — it's really a tiny interpreted language. Though my concise declarative language may be easy for _me_ to understand, it's impossible for _you_ to know what effect it will have unless and until you're willing to learn my new language.


    So I currently avoid declarative code unless it has some concrete advantages.


    ## Styling and specializing via subclasses


    That said, in this case defining `updates` as an object _does_ offer a real advantage: the updates can be augmented by mixins and subclasses.


    When we say we want to let customers style a reusable component, that's another way of saying we want to let people take existing code and specialize it. A component is just a class, and a traditional means to specialize a class is to create a subclass. So let's see how subclassing can work here.


    Since the `updates` property sits on the prototype chain, it can be overridden by a mixin or subclass that wants to add or adjust `updates` for the current state. A mixin/subclass can invoke `super` to get the base `updates`, then modify as that base value as it sees fit. E.g., someone could create a custom version of the generic increment/decrement component above:


    ```
      class CustomIncrementDecrement extends IncrementDecrement {

        get updates() {

          const base = super.updates;
          const baseColor = base.style && base.style.color;
          // Pick a color if the base class didn't specify one.
          const color =  baseColor || (this.state.value > 0 ? 'dodgerblue' : null);

          // Merge updates on top of those defined by the base class. This lets us
          // preserve some of the base rendering, while adding our own styling and
          // some unique behavior.
          return merge(base, {
            style: {
              background: 'lightgray',
              color,
              'font-family': 'Helvetica, Arial, sans-serif',
              'font-weight': 'bold'
            }
          });
        }

      }
    ```


    Here the component indicates that its host element `style` should be updated with custom colors and fonts. Rather than focusing on CSS rule precedence, the prototype chain determines what `updates` apply — last writer wins. If you customize my class by subclassing it, your subclass has the last say.


    This code relies on a `merge` helper that generally does a shallow merge, but goes deeper when merging the special keys `attributes`, `classes`, `style`, or `$`. The merging allows the updates cooperatively constructed by the base class, any mixins, and any subclasses to be efficiently computed and applied.


    Applying such state-dependent styling is tricky in CSS: all state would first need to get rendered to the DOM as attributes, then CSS rules would have to be conditional on the presence of those attributes. Overriding such CSS rules requires carefully matching their precedence, otherwise customizations might be overly general or overly specific.


    It's worth noting that mixins/subclasses can inspect the `updates` requested by the base class, and incorporate those values into their own calculations. In the sample above, the subclass provides a blue `color` for positive values, but leaves alone the red color the base class provides for negative values.


    ## Updating shadow parts


    The above code only customizes the host element, which we could do via CSS directly. What we're really after is a way to customize shadow parts: elements inside the shadow tree. Our customized increment/decrement component can do that through the `$` key described earlier:


    ```
      get updates() {

        const base = super.updates;
        const baseColor = base.style && base.style.color;
        const color =  baseColor || (this.state.value > 0 ? 'dodgerblue' : null);

        const buttonStyle = {
          background: '#444',
          border: 'none',
          'border-radius': 0
        };
        const decrementDisabled = this.state.value <= -5;
        const incrementDisabled = this.state.value >= 5;

        return merge(super.updates, {
          style: {
            background: 'lightgray',
            color,
            'font-family': 'Helvetica, Arial, sans-serif',
            'font-weight': 'bold'
          },
          $: {
            decrement: {
              attributes: {
                disabled: decrementDisabled
              },
              style: merge(buttonStyle, {
                color: decrementDisabled ? 'gray' : 'white'
              })
            },
            increment: {
              attributes: {
                disabled: incrementDisabled
              },
              style: merge(buttonStyle, {
                color: incrementDisabled ? 'gray' : 'white'
              })
            }
          }
        });
      }
    ```


    [Live demo](http://jsbin.com/ginijus/edit?html,output)


    Above we style the buttons with some base styling. We can also modify attributes or other properties. Here we arrange for the buttons to only allow input values between -5 and 5. (For completeness, we can also impose the same input bounds on the `value` property exposed in the public API.) We apply conditional styling to show the buttons differently when they're enabled or disabled.


    ## Mixins that update light and shadow DOM


    If you're reluctant to create a class hierarchy, you can do what Elix does and factor most of your code into [functional mixins](/elix/mixins). Mixins allow your code to be reused across classes, and permit a great deal of flexibility.


    For example, I've previously described how components often need to [update light DOM](https://component.kitchen/blog/posts/your-web-components-with-shadow-dom-may-need-to-update-light-dom-too) to support ARIA attributes. To address that scenario, we've factored out ARIA attribute handling for list-like components into a mixin called [AriaListMixin](https://github.com/elix/elix/blob/master/src/AriaListMixin.js). That mixin augments the component's `updates` getter to apply attributes like `role`, `aria-orientation`, and `aria-activedescendant`.


    ## Results


    We've successfully applied this architecture to the current Elix component set. Using a declarative `updates` object makes the code very concise, which is good — but also makes the code opaque to outsiders, which is bad. The main win is that we now have a workable method for creating custom-themed versions of these general-purpose components. Significantly, the themed components are just custom elements that can be used by clients like any other web components.


    If others come up with other ways to style general-purpose web components, we'd be very interested. In the meantime, we at least have a way to keep moving forward.
2018-02:
  2018-02-09 Elix reaches v1.md: >
    ---

    title: Elix general-purpose web component library releases v1.0.0

    date: 2018-02-09 16:00 UTC

    slug: elix-general-purpose-web-component-library-releases-v100

    originalUrl: https://component.kitchen/blog/posts/elix-general-purpose-web-component-library-releases-v100

    ---


    We're excited to announce that the [Elix](/elix) project we lead has reached its v1.0.0 milestone.


    This represents the culmination of over a year of work to create a great set of high-quality, general-purpose web components for common user interface patterns. These include:


    - [SlidingCarousel](/elix/SlidingCarousel): a full-featured carousel for images and other elements that includes navigation with touch, a mouse, a keyboard, or a trackpad, as well as accessibility support.

    - [Drawer](/elix/Drawer): a panel that slides in to temporarily present navigation or other UI elements. Includes touch support to swipe the drawer away.

    - [Tabs](/elix/Tabs): useful for classic tabbed UIs or configurable for such patterns as tabbed navigation toolbars.


    These components, and the others components in the initial Elix release, are all built from [focused JavaScript mixins](/elix/mixins) that cover a wide range of basics, from a [lightweight React-like state rendering architecture](/elix/ReactiveMixin) to [touch swipe gestures](/elix/TouchSwipeMixin) to [managing modal and modeless overlays](/elix/OverlayMixin). Elix's mixin architecture is what lets the project manage the complexity and subtle details hiding behind seemingly simple components.


    Beyond the project's technology, we're also proud to be managing the project with an open governance model that includes regular core team discussions and an open [Request for Comments](https://github.com/elix/rfcs) process.


    The project is already hard at work on its 2.0 release. A big focus for that release will be a system for thoroughly customizing the appearance and behavior of the key parts inside a component.
  2018-02-20 Custom elements as parameters.md: >
    ---

    title: Customizing custom elements with... custom elements

    date: 2018-02-20 16:00 UTC

    slug: customizing-custom-elements-with-custom-elements

    originalUrl: https://component.kitchen/blog/posts/customizing-custom-elements-with-custom-elements

    ---


    We’ve recently been trying a new way to let devs customize complex web components: _let a component accept parameters for the custom elements that should be used inside the component’s template_.


    A while back we indicated that we noted that it’s hard to [style web components](https://component.kitchen/blog/posts/styling-is-critical-to-web-component-reuse-but-may-prove-difficult-in-practice), and that we’ve been using [subclassing](https://component.kitchen/blog/posts/our-current-best-answer-for-styling-reusable-components-subclassing) as a partial solution. Using custom elements themselves as parameters to more complex components opens up new possibilities for styling, as well as interesting new possibilities for customizing behavior.


    ## Example


    Suppose we have a simple spin box:


    <img src="/images/ck/Spin Box.png">


    This component has two `<button>` elements inside its shadow. Suppose we construct this shadow from a template defined by a string:


    ```

    const template = `
      <span id="value"></span>
      <button id="upButton">▲</button>
      <button id="downButton">▼</button>
    `;

    ```


    How do we let a developer customize those buttons? As noted in the first post linked above, the whole point of Shadow DOM is to encapsulate styles, so we can’t directly style those buttons from the outside. And while there eventually be a standard way to style across a Shadow DOM boundary, that won’t be available any time soon.


    But if we’re constructing the shadow from a string, we can simply let a dev insert whatever element they’d like as the “button” element in the above template.


    ## Exposing a component parameter to accept another custom element


    That’s easy to arrange. We define a `buttonTag` property that can be set on a spin box at any point before the component’s `connectedCallback` runs:


    ```

    const buttonTagKey = Symbol();


    class SpinBox extends HTMLElement {

      constructor() {
        super();
        this.defaultButtonTag = 'button';
      }

      get buttonTag() {
        return this[buttonTagKey] || this.defaultButtonTag;
      }
      set buttonTag(buttonTag) {
        this[buttonTagKey] = buttonTag;
      }

      /* Plus rendering code, etc... */
    }

    ```


    The spin box component can then use this property as a parameter in its template, instead of hard-coding `<button>`:


    ```

    const template = `
      <span id="value"></span>
      <${this.buttonTag} id="upButton">▲</${this.buttonTag}>
      <${this.buttonTag} id="downButton">▼</${this.buttonTag}>
    `;

    ```


    So by default the template looks like the original one above, and shows `button` elements for the arrows. But now you can pass a custom element tag to a spin box instance and ask that it be used instead.


    A developer who wants to use custom buttons in this spin box starts by creating a standalone custom button by any means:


    <img src="/images/ck/Custom Button.png">


    They register this as a custom element, then supply the name of the custom element to a spin box instance:


    ```

    <spin-box button-tag="custom-button"></spin-box>

    ```


    and the spin box will use that to construct a template that includes `custom-button`:


    ```

    <span id="value"></span>

    <custom-button id="upButton">▲</custom-button>

    <custom-button id="downButton">▼</custom-button>

    ```


    So the final spin box uses the developer’s custom button for the up and down arrow buttons:


    <img src="/images/ck/Spin Box Custom.png">


    [Live demo](http://jsbin.com/dikile/edit?html,output)


    If the developer always wants to do this, they can create a spin box subclass that sets the default button element to `custom-button`:


    ```

    class CustomSpinBox extends HTMLElement {
      constructor() {
        super();
        this.defaultButtonTag = 'custom-button';
      }
    }

    ```


    ## Advantages of making components customizable this way


    A developer who customizes a spin box component this way doesn't need to know everything about the internals of the spin box; they just make a button. (To create a good button, they can use the Elix [WrappedStandardElement](/elix/WrappedStandardElement) utility class.) Because the spin box will use the button in the right place, the button will get the right positioning and have all the right event handlers to ensure interaction with the rest of the spin box.


    This kind of indirection is roughly analogous to a function that accepts another function as a parameter. In this case, we’re creating a custom element that accepts another custom element as a parameter. Complex components can expose as many element parameters as necessary.


    This approach works with any web component system that can cope with a tag name that’s specified at runtime. Elix components generally use string templates (as shown above), in which case parameterizing the template is a simple matter. While React components are not (generally) web components, React has long supported similar dynamic construction of a component tree, since a JSX tag name can be a JavaScript class, and that class can be supplied as a component parameter.


    Because the core unit of customization is an element, it can do anything! For example, we can create a custom button element that generates `mousedown` events repeatedly when the user holds down the button. This lets someone customize the spin box in ways that go far beyond what the spin box’s creator can anticipate. (See the [demo page](http://jsbin.com/dikile/edit?html,output) for an example.)


    Summary:


    - A dev doesn’t have to learn a new styling/theming system. They create their custom elements however they want: in plain JS, using Elix, Stencil, Polymer, whatever.

    - All the styling they want gets baked into their custom element, and will show up at the right point in the Shadow DOM. So this slips past all the challenges of styling components from the outside. At the same time, just as the Shadow DOM boundary prevents accidental style interference between the outer page and a component, it can likewise prevent accidental style interference between a complex component and any custom elements passed into it as parameters.

    - We don’t have to invent a new way of naming or registering these customizations: they’re just custom elements registered with `customElements.define()`.

    - Customization can go far beyond what’s possible with CSS Custom Properties, and even beyond what would be possible with the proposed `::part` and `::theme` syntax for CSS.

    - Customization can be done on a per-instance basis or by creating new classes.

    - All of this works in Shadow DOM v1 and Custom Elements v1. You can do this right now.
2018-04:
  2018-04-16 Elix v2.md: >
    ---

    title: Elix v2.0 released with support for extensively customizable components

    date: 2018-04-16 16:00 UTC

    slug: elix-v20-released-with-support-for-extensively-customizable-components

    originalUrl: https://component.kitchen/blog/posts/elix-v20-released-with-support-for-extensively-customizable-components

    ---


    Two months after releasing version 1.0 of [Elix](/elix), we're happy to announce version 2.0.


    The main focus of this release is a [new paradigm for customizing components](/blog/posts/customizing-custom-elements-with-custom-elements) in which complex component can expose internal elements as configurable properties. You can control the appearance and behavior of such a complex component by handing it _other_ components it will use internally to fill various roles.


    This paradigm lets us unify components that had previously been distinct, implementing them with reusable, shared code. For example, by default the Elix [Carousel](/elix/Carousel) shows little dots along the bottom:


    <figure>
      <a href="/demos/carousel.html">
        <img src="/images/ck/Carousel.png">
      </a>
      <figcaption>(Tap/click for live demo)</figcaption>
    </figure>


    We can override those dots and tell the carousel component to use thumbnails for that role instead, producing a new [CarouselWithThumbnails](/elix/CarouselWithThumbnails) component:


    <figure>
      <a href="/demos/carouselWithThumbnails.html">
        <img src="/images/ck/CarouselWithThumbnails.png">
      </a>
    </figure>


    As another example, the Elix [Tabs](/elix/Tabs) supplies a default style with a classic rounded tab look:


    <figure>
      <a href="/demos/tabs.html">
        <img src="/images/ck/Tabs.png">
      </a>
    </figure>


    It's easy enough to supply a custom button to fill that same tab button role, as in this `Tabs` instance used as the organizing navigation element in a mobile app:


    <figure>
      <a href="/demos/toolbarTabs.html">
        <img src="/images/ck/ToolbarTabs.png">
      </a>
    </figure>


    If you click the image through to the live demo, you'll see that the main "stage" element for this navigation UI has also been changed. `Tabs` has a main stage that shows a single tab panel at a time. By default, `Tabs` uses a simple [Modes](/elix/Modes) component as its stage. But this stage can be replaced with another element like [SlidingStage](/elix/SlidingStage), which not only adds a sliding transition, but also support for touch/trackpad gestures to move between tabs.


    That's a level of customization far beyond what's feasible in CSS. By using one custom element as a parameter to another, we can efficiently create different expressions of fundamental UI patterns.


    But as we built Elix 2.0, we realized we could take this idea of customization through custom elements as parameters a lot further.


    ## The mind-blowing part


    When viewed at the right level of abstraction, _all_ of the component examples shown above _are the same component_. These carousels and tabbed UIs don't look alike, but at a logical level, these UI patterns both share core behavior:


    - Both present a main stage showing a single item (an image or tab panel) at a time.

    - Both present a list of smaller proxies for those items (dots/thumbnails or tab buttons) that can be clicked to select the corresponding item on the main stage.

    - Both can be implemented so that they can generate a default set of such proxy elements for each corresponding item (i.e., a default dot/thumbnail for each image/panel).


    All of those parts — the stage, the list of proxy elements, the proxy elements themselves — are configurable via properties.


    By separating logical roles and relationships from particular DOM representations, we can find new opportunties to efficiently reuse code. Elix 2.0 delivers the shared behavior for the UI patterns above in a new component called [Explorer](/elix/Explorer). That can be configured on a per-element basis, or subclassed to bake the customizations in, as with the component classes showcased above.


    We've applied the same configuration paradigm to the Elix set of overlay elements, so that [Dialog](/elix/Dialog), [Drawer](/elix/Drawer), and [Popup](/elix/Popup) are all built around a configurable [Overlay](/elix/Overlay) core. We expect we'll find opportunities to use this same pattern in many other places.


    Building components around extensively configurable components like this means we can handle subtleties like accessibility and keyboard support in a consistent way, allowing us to deliver a higher-quality and more usable result. It also means that you can readily adapt Elix components for the unique needs of your application, including extensive possibilities for branding.


    Read the full [release notes for Elix 2.0](https://github.com/elix/elix/releases/tag/2.0.0).
2018-05:
  2018-05-07 litJSX.md: >
    ---

    title: Using JavaScript template literals with JSX for server-side rendering

    date: 2018-05-07 16:00 UTC

    slug: using-javascript-template-literals-with-jsx-for-server-side-rendering

    originalUrl: https://component.kitchen/blog/posts/using-javascript-template-literals-with-jsx-for-server-side-rendering

    ---


    While updating our Component Kitchen site to incorporate the [Elix](https://component.kitchen/elix) web component documentation, we replaced our server-side use of Preact with template literals for JSX. The result works well and could be applied in many situations, so we describe the solution here in case others are interested in trying it.


    ## Some pros and cons of JSX on the server


    Back in 2016, we decided to use [plain JavaScript functions to render page content](https://component.kitchen/blog/posts/replacing-your-server-side-template-language-with-plain-javascript-functions). We really liked that straightforward approach, but we eventually shifted to using JSX because the code was easier to read. The use of components as tags in JSX makes it easier to see how the page is being constructed, and code editors that apply syntax highlighting to HTML/JSX make it easier to spot simple mistakes (missing end quotes, etc.).


    But using Preact on the server felt like more architecture than we needed. We'd construct a component, render it immediately to a string, then throw it away. So Preact's support for lifecycle methods and incremental rendering were all extraneous. And using JSX in our Node code base added a compile step we wouldn't have otherwise needed. Finally, we had to go through some gyrations to asynchronously collect the data a page needed before we could tell Preact to render the content.


    ## Using template literals


    With the advent of template literal languages like hyperHTML and lit-html, we wanted to get back to the stripped-down simplicity of plain strings while incorporating the benefits of JSX legibility.


    The result is a small template literal library we call [litJSX](https://github.com/componentkitchen/litJSX). It lets us concisely use JSX-like syntax in template literals that combine static content and dynamic content to create strings. All parsing is done at runtime; there's no build step. Parsing is fast, and because we're using template literals, parsing of the static content is only done once per unique template string.


    ```js

    const jsxToTextWith = require("litjsx");

    const html = jsxToTextWith({ Bold, Greet }); // Create custom template literal.


    function Bold(props) {
      return html`<b>${props.children}</b>`;
    }


    function Greet(props) {
      return html`
        <span>
          Hello,
          <Bold>${props.name}</Bold>.
        </span>
      `;
    }


    html`<Greet name="world" />`; // <span>Hello, <b>world</b>.</span>

    ```


    Our components are all just JavaScript functions that take a properties object and return a string.


    With any system along these lines, it's necessary to tell the template literal function what JavaScript class names it should expect to find in the strings we give it. Some JSX template literal libraries like [t7](https://github.com/trueadm/t7) handle this by setting configuration options on the parser.


    In our case, we designed litJSX as a generator of custom template literal functions. You feed it a set of classes, and it hands back a custom template literal that recognizes those classes.


    The second line above creates a custom template literal called `html`. We tell it that if it sees the strings "Bold" or "Greet" in a tag, then it should invoke the JavaScript functions `Bold` and `Greet`, respectively.


    Simply naming our template literal function "html" lets code editor extensions for syntax highlighting know they should parse and decorate the template contents as either HTML or JSX. So we get the design-time legibility and error-checking we were after.


    ## Server-side rendering


    On the server, we write our top-level page components as functions that accept an HTTP `request` object and use litJSX template literals to return a string result.


    ```js

    const html = jsxToTextWith({ Greet });


    function Greet(props) {
      return html`<p>Hello, ${props.name}</p>`;
    }


    function GreetPage(request) {
      return html`
        <!DOCTYPE html>
        <html>
          <body>
            <Greet name="${request.params.name}" />
          </body>
        </html>
      `;
    }


    // The page at /greet/Jane returns HTML saying "Hello, Jane."

    app.get("/greet/:name", (request, response) => {
      const content = GreetPage(request);
      response.set("Content-Type", "text/html");
      response.send(content);
    });

    ```


    ## Asynchronous components


    Server-side pages often need to perform asynchronous work before they can return a response, so we designed litJSX to handle components which are async functions. If any component in the JSX is async (returns a `Promise`), the tagged template literal itself returns a `Promise` for the final, complete result. This lets you create `async` component functions and `await` the final template result.


    ```js

    async function GreetUser(props) {
      const user = await getUser(props.id); // Some async function to get data
      return html`Hello, ${user.name}.`;
    }


    const html = jsxToTextWith({ GreetUser });

    const userId = 1001; // Jane's user id

    const text = await html`<GreetUser id="${userId}" />`; // Hello, Jane.

    ```


    Such async components allow us to cleanly encapsulate the async work performed by specific pages on our site.


    ## Results


    We're now using litJSX to render our entire site. The words you're reading here have passed through a litJSX template literal! Our server code has gotten more concise and more clearly expresses our intentions, with very minimal library overhead and no build step. So far it's holding up well.
  2018-05-14 Reusable components in 2018.md: >
    ---

    title: Creating software in 2028 is so amazing now that we build with reusable UI components!

    date: 2018-05-14 16:00 UTC

    slug: creating-software-in-2028-is-so-amazing-now-that-we-build-with-reusable-ui-components

    originalUrl: https://component.kitchen/blog/posts/creating-software-in-2028-is-so-amazing-now-that-we-build-with-reusable-ui-components

    ---


    _We’re getting much closer to a world where we can create sophisticated applications from widely reusable, general-purpose user interface components. We’re still not there — it might be another 5–10 years before that world comes to pass. But we can imagine what software development will be like once that's happened._


    <figure>
      <img src="/images/ck/Retro-Futurism.jpg">
    </figure>


    Here in the year 2028, we’re lucky to share enormous public collections of reusable components implementing every user interface pattern under the sun. Every old-school UI technique you can think of — menus, carousels, shopping carts, Pull to Refresh, plus all the cool stuff that was invented in the 2020s — _everything_ you need is already coded for you!


    Just think of how good we have it now:


    - _Designers and devs readily adopt common UI patterns without hesitation._ They never wonder how hard it will be for the team to implement a pre-existing UI, because they can always find a rock-solid implementation of it in the comprehensive component libraries.


    - _We see constant experimentation._ Because switching to a different pattern is trivial, designers play with and test multiple ideas before settling on a solution.


    - _Visual design tools let us work with palettes of UI patterns._ These days, it goes without saying that designers and developers collaborate directly on the same artifacts that define an app. But it wasn't that long ago that designers would create static design images or limited prototypes, and developers would laboriously translate those to running code. (Honest, they really had to do that!) These days, our design tools can edit the front end definition directly. Not only that, they provide integrated access to catalogs of UI patterns as components. Adding or modifying complex interactions can now be accomplished through drag-and-drop. That shift dramatically accelerated development, further encouraged experimentation, and generally made designing a blast.


    - _You see a lot more variation in common patterns_ than one saw in the 2010s. It used to that variation came about almost accidentally because people had to implement patterns from scratch. Now designers and devs create variations when they want to. They can extensively customize generic components or build new variations that reuse substantial behavior from existing generic components. Even complex patterns can be adapted to new contexts and still retain much of their reusable value.


    - _We’ve seen a burst of domain-specific innovation._ Because teams no longer waste time reinventing wheels, they now focus primarily on their business domain’s specific challenges and their app’s unique value. We've also seen the introduction of large domain-specific pattern libraries for specific industries. The apps we use now are far, far better as a result.


    - _Fewer people are required to design and implement basic UI._


    - _You probably create UIs alongside many people with deep expertise in fields other than UI design._ Once working with UI building blocks became easy enough, more people could do it, which opened up the field to a huge number of new participants.


    - _If you’re young, you may not even remember a time when companies had to build their product UI multiple times for different OS platforms._ What a colossal waste of time and money that was!


    - _Good ideas now spread faster._ When the Thought Crystals user interface pattern first appeared in beta in April 2025, the creator contributed a solid reusable implementation, and it spread like wildfire. By May, the new pattern had completed displaced VR hamburger menus.


    - _Common patterns have been extensively studied and documented._ For any given pattern, you can access a wealth of academic and industrial research about it: the precise circumstances where it is most useful, metrics showing where how and why it goes wrong, comprehensive galleries showing the pattern in actual use, and suggestions for best practices in specific contexts.


    - _Coded patterns gave us all a consistent vocabulary_ that reflected both user experience and developer implementation. Once we had real implementations of all the common patterns, everyone building apps could talk about UI the same way.


    - _We rarely come across apps with terrible UI fundamentals._ Back in the day, one could hardly shop online without constantly tripping over aggravating menus, intrusive dialogs, and flaky carousels. Ignorant companies today still produce bad apps with bad designs, of course, but at least the fundamental interactions in those apps still meet a decent quality bar.


    - _People with permanent or temporary disabilities have better experiences across the board._ At minimum, an app’s fundamental UI provides a higher baseline of reasonable interaction than one typically found in 2018.


    - _Branded user experiences have become far more immersive._ Corporations customize UI in a deep way, far beyond theming fonts or colors. They adapt all aspects of interaction: the types and speeds of animated effects and sounds, the quality of voice dialogs, the tightly-focused microbrands for specific markets, and the general personality of a UI’s construction. Even boring apps today in 2028 exhibit the same degree of pizzazz as games did back in 2018.


    - _You now design some aspects of your apps at a meta-level._ For certain UI problem domains, you can just specify the general parameters of the problem, and let the system make limited decisions about the best UI pattern for the situation. Sophisticated apps now use AI to track user behavior and adapt which patterns are used in real time.


    - _While the component implementations in our universal pattern library have been rewritten several times over, the patterns themselves have proved quite durable._ While we now use much better frameworks that were available in 2018, the patterns themselves are timeless. When we saw major shifts in programming languages and techniques in the early 2020s and again in 2025, it was relatively easy to upgrade the patterns and the apps which depended on them.


    Isn’t user experience design in 2028 great? It's interesting to realize that all the benefits above were already possible 10 years ago — we just didn't realize it. All it took was for us to recognize the value of implementing common UI patterns as reusable components and start really sharing them.
2018-07:
  2018-07-11 MenuButton.md: >
    ---

    title: Building a great menu component is so much trickier than you'd think

    date: 2018-07-11 16:00 UTC

    slug: building-a-great-menu-component-is-so-much-trickier-than-youd-think

    originalUrl: https://component.kitchen/blog/posts/building-a-great-menu-component-is-so-much-trickier-than-youd-think

    ---


    We've released v2.2 of the [Elix](/elix) web components library, which includes some new components for menus:


    - [PopupSource](/elix/PopupSource) for buttons that invoke any kind of popup

    - [MenuButton](/elix/MenuButton) for the common case of a button that invokes a menu

    - [Menu](/elix/Menu) which contains the collection of menu items

    - [DropdownList](/elix/DropdownList) for a `MenuButton` variation that's effectively a completely customizable `<select>` element.


    We want all these menu components to feel as polished and natural as native OS menus. Native menus have a number of subtle details, and getting the UI details right turns out to be outrageously complex. Menus are a good example of [the fractal nature of UI design](http://www.miksovsky.blogs.com/flowstate/2005/10/the_fractal_nat.html).


    ## Menu positioning


    Just to get started, we need to be able to position a menu with respect to a source button.


    - On desktop, a menu should open on mouse _down_, not mouse up. This feels faster. It also, as described in more detail below, allows the user to possibly select a menu item in a single drag operation.

    - Only primary mousedown events should be considered. The menu should not appear on a right-click, since we want the user to still have access to the browser's own context menu.

    - The menu should appear in the desired direction if there's room in that direction. If there isn't _and_ there's room in the opposite direction, it should appear in that opposite direction. But if there isn't room in that direction either, it's preferable to show the menu in the original direction and constrain its height. (This can force scrolling.) Note that OS menus can extend outside a source window's boundaries but web components, like all HTML elements, are not allowed to extend outside the document viewport.

    - The calculation of whether the menu will fit can't happen until the menu has actually rendered (many factors can influence the layout of the menu), but we don't want to let the menu be visible until we know which direction we want to use. So we layout the menu once while its invisible, see if it fits, move it to the desired position, then render it again to make it visible.

    - Calculations of whether the menu fits in a particular direction are affected by the scroll position of the document.

    - To complicate things, we'll want to put the keyboard focus in the menu — but moving the keyboard focus can cause scrolling as a side effect. (This is especially true in Safari, whose [focus](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus) method doesn't yet support the `focusOptions` parameter.) So we'll have to complete all our menu layout and rendering before we try to move the focus into the menu.


    Because these positioning rules generally apply to all popups invoked from buttons — not just menus, but also things like combo boxes — we've enshrined responsibility for position popups relative to a source button in a general-purpose [PopupSource](/elix/PopupSource) class.


    ## Two ways of selecting a menu command with a mouse


    Most people have probably never noticed there are two different ways of using a mouse to select an item from an OS menu:


    <figure>
      <img src="/images/ck/Menu Selection.png">
    </figure>


    Nearly every web menu handles only the first method: selecting a menu item in two clicks. But both macOS and Windows support selecting menu items in a drag operation, which can feel faster and more responsive. If you're reading this on a laptop, try using your mouse/trackpad now to select a browser menu command using both approaches. Observe the different feel of the two approaches. Which do you normally use?


    (I seem to recall that the original Mac OS supported only menu selection with a drag, while Windows supported both methods. Windows generally had better keyboard support for menu navigation, and once Windows engineers allowed the user to pop up a menu with the keyboard and keep it open, it was probably easy for them to support the two-click method.)


    The two-click method is trivial to implement, but if we want to achieve the same usability of an OS menu, we'll want to also support the drag method. That's hard to do, which is probably why most web apps don't support it. (The various Google Suite apps are a notable exception.) A few of the more interesting problems:


    - If the user mouses down, then moves the mouse away from the menu button and its associated menu, and then releases the mouse over the page background, the menu should be dismissed.

    - Once the user drags into the menu with the mouse down, we want to automatically select the menu item underneath the mouse. However, those item can't get mouse events yet — the user still has the mouse down, so all mouse events are still targeted at the button that invoked the menu. We'll need to listen to `mousemove` on the menu button and do our own hit-testing to figure out whether the user is currently dragging the mouse over a menu item — and, if so, select that item.

    - If the user mouses down and then moves the mouse completely off the page, our menu button component will never receive a `mouseup` event. So we'll need to listen to `mouseup` events on the `document` too.

    - If the user mouses down, then releases the mouse over interior menu padding or a disabled item like a menu separator, the menu should also be dismissed.

    - However, if the user opens the menu with a click (in the two-click approach), a subsequent click on interior menu padding or a menu separator should be _absorbed_ and not close the menu.


    This is all hard, but still doable, so we're giving it our best shot. If you're on a laptop, try opening our [MenuButton demo](https://component.kitchen/demos/menuButton.html) and confirming that the menu component feels like an OS menu.


    For completeness, I should point out that many web menus also handle an additional means of selecting a menu item with a mouse: the menu opens on _hover_, after which the user only needs to click once on the desired menu item. I hesitate to mention that approach, however. It's my personal belief that hover menus are a usability disaster: they invariably appear when they're not wanted, and disappear when they _are_ wanted. The hover approach does have a distinct advantage, in that it lets the top-level menu heading itself serve as a clickable link. But I think that advantage comes at a steep usability cost.


    ## Menus on mobile


    Our two-click approach for menus should generally work on mobile devices, with some minor changes. Generally speaking, mobile menus appear when a tap _ends_ and force use of the two-click method described above. To ensure the menu responds instantaneously, we must [enable fast-tap behavior](https://webkit.org/blog/5610/more-responsive-tapping-on-ios/) by applying the CSS `touch-action: manipulation` to the relevant elements.


    If reading this on your phone, try opening our [MenuButton demo](https://component.kitchen/demos/menuButton.html) and tap around. The menu should both appear and disappear as soon as you complete a tap.


    ## Keyboard support and accessibility


    As with all Elix components, we strive for excellent keyboard support. This benefits all users that want to use a keyboard and improves universal accessibility.


    We allow users to invoke a menu button by pressing Space. The user can navigate the items in the resulting `Menu` with the full set of keyboard navigation keys supported by [KeyboardDirectionMixin](/elix/KeyboardDirectionMixin), [KeyboardPagedSelectionMixin](/elix/KeyboardPagedSelectionMixin), and [KeyboardPrefixSelectionMixin](/elix/KeyboardPrefixSelectionMixin). Without writing any new code, those mixins give `Menu` support for Up/Down keys, Page Up/Page Down keys, Home/End keys, and prefix selection (e.g., type "Z" to select "Zoom").


    In making our menu components accessible via ARIA, we were helped by this excellent Inclusive Components article on [Menus & Menu Buttons](https://inclusive-components.design/menus-menu-buttons/). The whole Inclusive Components series is worth a read.


    While our `Menu` component generally behaves like our [ListBox](/elix/ListBox), the accessibility rules for menus are different than lists. The `role` attributes involved are different, for one thing. Another way in which menu accessibility is different than that for lists is that the overall list element can take the keyboard focus, whereas the browser expects a menu to put the keyboard focus on an individual menu item.


    Happily, our [mixin-based approach to components](https://component.kitchen/elix/mixins) was hugely helpful in letting us create a `Menu` component that worked _mostly_ like our `ListBox` component, but with some differences. Rather than subclassing `ListBox` or creating a common base class (as we might have in a traditional class hierarchy), we simply copied over the set of mixins `ListBox` was using, dropped the ones we didn't need, and then created an [AriaMenuMixin](/elix/AriaMenuMixin) for menus to replace the [AriaListMixin](/elix/AriaListMixin) which `ListBox` needs. We end up with a `Menu` that cleanly shares 90% of the code from `ListBox` without any class hierarchy entanglements.


    ## Customizability


    For styling and general customizability, all these menus components have replaceable parts. So you can use a `MenuButton`, but swap out the elements it uses by default with our own custom elements. You could:


    - Have your menus show a semi-opaque backdrop over the page that's themed with your brand color.

    - Change the popup (menu) portion so that the menu animates in with a sliding effect.

    - Replace the `Menu` that contains the menu items with an element that lays out items as pie slices instead of the usual vertical orientation.


    ## Bonus: a customizable select element


    With our `MenuButton` component in hand, it was easy to create a [DropdownList](/elix/DropdownList) variation that shows the selected value as the menu button's label. When the user makes a selection from the menu, the button label updates to match.


    This effectively lets you use `DropdownList` as a customizable version of the built-in HTML `<select>` element. The native `<select>` can only cope with text choices, but `DropdownList` can handle arbitrary content — including custom elements, of course — as content in both the menu button and the menu items. See this [customized dropdown list demo](/demos/colorDropdownList.html) for an example.


    Interestingly, the native `<select>` is a place where some users may use the drag-to-select method to make a selection — even if they're the type of user that normally selects from an app's menu bar using the two-click method. In other words, all the work we did to build a menu button with great mouse support _also_ makes it possible for us to deliver a dropdown list (`<select>`) with great mouse support.


    ## These details are a pain!


    Getting all these details correct takes far too much time. Which is precisely why no app team should try to build a menu component from scratch! The only sane way to achieve OS-quality menu components for web apps is to share code — to pour the attention of an open component library community into menu components that everyone can use. _That_ is why Elix exists.
2018-12:
  2018-12-10 ComboBox.md: >
    ---

    title: Building a great combo box component is so much trickier than you'd think

    date: 2018-12-10 16:00 UTC

    slug: building-a-great-combo-box-component-is-so-much-trickier-than-youd-think

    originalUrl: https://component.kitchen/blog/posts/building-a-great-combo-box-component-is-so-much-trickier-than-youd-think

    ---


    Combo boxes are _hard_ to implement well. At the most abstract level, a combo box combines a text input with a button that can invoke a popup. The popup contains a list or other data-entry element:


    <figure>
      <img src="/images/ck/ComboBox.png">
    </figure>


    But even this simple visual arrangement hides many complexities. A while ago we shared the challenges building a [great menu component](https://component.kitchen/blog/posts/building-a-great-menu-component-is-so-much-trickier-than-youd-think), so we thought we’d offer a similar look at the many issues faced as we added a new family of [ComboBox](https://component.kitchen/elix/ComboBox) components to the Elix web components library.


    ## Keyboard focus challenges


    Keyboard focus proves to be one of the most challenging aspects of writing good general-purpose web components:


    - The browser primitives for working with focus predate Shadow DOM, and there are still odd edge cases. In our work on ComboBox, we hit an issue that turned out to be a [bug](https://github.com/w3c/webcomponents/issues/773) in both Chrome and Safari.

    - Keyboard focus and keyboard input are generally difficult to test in an automated way. Synthetic keyboard events rarely work in a manner that’s identical to real keyboard events triggered by user activity.

    - The imperative nature of the `focus()` method to set focus doesn’t mesh well with a contemporary functional-reactive approach to rendering UI. You have to apply focus after rendering (in `componentDidUpdate` or something like it), which can lead to timing issues.

    - Mobile focus behavior can differ from desktop focus behavior.


    Beyond these points, very similar UI patterns may call for focus to be handled quite differently, making it tricky to establish reusable baseline behavior.


    ## Where should the focus go in a combo box?


    Handling keyboard focus for a combo box is particularly hard, because there are multiple potentially focusable elements. For a combo box containing a list, we want to keep the keyboard focus on the text input element, but the user may also want keys to navigate selection in the list.


    <figure>
      <img src="/images/ck/AutoCompleteComboBox.png">
    </figure>


    If the user presses the Left or Right arrow, they most likely want to move the insertion point to the left or right. However, if they press the Up or Down arrow, it’s reasonable to assume they want to move to the previous or next selection in the list.


    Moreover, the user wants to seamlessly move back and forth between typing and navigating.


    - If they type a few letters, then see the desired item appear in the list, they want to immediately press the Down arrow key to get there, without first having to tab to the list.

    - Likewise, if the user’s navigating the list, that populates the input field. When the input field holds a value the user wants to edit, they should be able to start typing immediately, without having to Shift+Tab to move the focus back to the input.


    Given these constraints, it seems best to always keep the keyboard focus on the input element. That means we need to listen for keystrokes that seem meant for the list (like Up, Down, Page Up, and Page Down) and tell the the list what to do via method calls. If the user clicks on the popup, we’ll let that click do whatever it would normally do (like select the clicked item), then ensure the focus is still on the input.


    ## Controlling the input and popup with the keyboard


    Keeping the focus on the input makes managing the popup harder. We usually want a popup to implicitly close if it loses focus, but in this case we won’t give the popup the focus at all.


    We also face some odd challenges on mobile:


    - In native apps, lightweight popups like combo boxes usually go away when the user resizes the window. But in Chrome for Android, moving the focus to the combo box will invoke the on-screen keyboard — which resizes the viewport, which closes our popup. We had to allow our underlying [PopupModalityMixin](https://component.kitchen/elix/PopupModalityMixin) to optionally allow window resizing while a popup is open.

    - When Safari displays its on-screen keyboard, it doesn’t give the app any way of knowing that the keyboard’s open; the app still thinks the page hasn’t changed size. That means a combo box on Safari can’t automatically confine itself to the available real estate. A dropdown combo box on a mobile device isn’t a particularly common pattern, but it’s still disappointing that Safari can’t support it better.

    - If you tap the page background when a combo box is open, you probably want the combo box to close. That’s the natural analogue to clicking the page background to dismiss a combo box on a desktop browser. Chrome for Android does this correctly, but Safari appears to only put the keyboard away if you explicitly tap the keyboard’s Done button or tap some other focusable page element.


    ## Auto-complete


    Auto-complete is a common feature in combo boxes with lists. That feature is useful in other contexts, too, so we’ve implemented auto-complete in an [AutoCompleteInput](https://component.kitchen/elix/AutoCompleteInput) that we can use elsewhere.


    Auto-complete presents its own challenges:


    - Auto-complete should happen on keydown for the best response. But when the user types a key, we get an input’s `keydown` event _before_ the input’s default behavior actually adds the key to the text. That makes it hard to know what text to use for auto-complete. We could try to speculatively construct the text, based on the current text, the current key being pressed, and the state of the insertion point and selection. But that’s not trivial, and forces us to reproduce native behavior.

    - A particularly weird issue we encountered was Chrome for Android, which mysteriously sends `keydown` events with `keyCode` equal to the magic value 229, regardless of what key was actually pressed. That’s really annoying, and effectively rules out doing anything useful on `keydown`.

    - Instead, we listen to the `input` event. That’s a safer option — the event is only generated after the new key has been reflected in the input’s `value` property.

    - However, the `input` event also behaves weirdly on mobile browsers. For example, the default Gboard keyboard on Android will send more than one input event for a single keypress! It’s hard to interpret what’s going on, but it seems related to Gboard’s own AutoComplete behavior. Maybe we can turn off Gboard’s AutoComplete behavior by setting the `autocomplete` attribute to `off`? “Hahaha, nope!” says Gboard. Other Android keyboards have their own quirks.

    - The bottom line is that mobile keyboards generally presume that the text in an input isn’t going to change underneath them _as the user’s typing_. When we try to append auto-completed text to the input during a keystroke, the on-screen keyboard gets really confused.

    - We eventually worked around these issues by debouncing `input` events and giving the input a chance to settle down before looking at the latest value. That creates timing problems, but seems the best we can do.

    - We also need to take pains to only try to auto-complete text if the user’s typing at the end of the input box.


    If we do manage to match the user’s input against a known list of text choices, we auto-complete the input text, and then leave the auto-completed portion of the text selected. If the user wants to enter something else, they can just keep typing, and that’ll automatically overwrite the selected (i.e., auto-completed) text.


    ## Accessibility


    We try as hard as we can to do an exemplary job supporting universal access in the Elix web components, including ARIA recommendations for combo boxes. A combo box, unfortunately, appears to hit the limits of what’s currently possible in web component accessibility.


    - As with other kinds of wrapped input elements, it’s hard to have an `aria-label` on a complex component like our combo box. The app developer can only set `aria-label` on the outer combo box, because that’s all that’s visible to them. We can forward this value to the inner input element. But that means the DOM tree ends up with a `aria-label` on both the outer combo box and the inner input element. The screen reader sees that label twice in the accessibility tree, and so will confusingly read the label twice.

    - Many ARIA attributes take an ID reference, but ID references don’t work across the Shadow DOM boundary. If you try to set `aria-labelledby` on the outer ComboBox, and that gets delegated to the input hiding inside the ComboBox’s shadow, that input can’t find the corresponding label sitting outside in the light DOM.

    - A more complex example of the above issue is that, in theory, both the wrapping combo box and the inner input need a way to reference the list of choices: the ComboBox should set `aria-owns` and the input should set `aria-controls` and `aria-activedescendant`. But again, it’s impossible for elements in shadow to reference IDs in light DOM, or vice versa.


    For the time being, we do the best we can, and hope that the W3C [Accessibility Object Model](https://wicg.github.io/aom/spec/) will open up the possibility of better accessibility.


    ## Making ComboBox as general-purpose as possible


    Our goal with ComboBox is to provide a solid general-purpose combo box class that can be used for any combination of a text input with a popup. The element featured in the combo box’s popup could be a list, or a calendar, or anything else.


    To accommodate this level of flexibility, we’ve defined _roles_ for our ComboBox family. Each role is filled by another component. For example, the base ComboBox class defines an `input` role that you can fill with any input-like element that should be shown in the combo box. By default, this role is filled with a standard `<input>` element, but you use other input elements in that role. Our [AutoCompleteComboBox](https://component.kitchen/elix/AutoCompleteComboBox) uses the aforementioned AutoCompleteInput, letting a combo box easily pick up auto-complete support.


    So a ComboBox is being defined as quite an abstract thing: it has an input-like element, a button to toggle the popup, and the popup itself. Everything else — auto-complete behavior, the use of a list in the popup, and so on — is defined in more specialized component classes.


    That flexibility lets us quickly adapt the combo box pattern to new contexts. For example, we created a [FilterListBox](https://component.kitchen/elix/FilterListBox) that filters its items to: a) show only those items that match a text query string, and b) highlights the matching portion of the item text. We can then drop that FilterListBox into the `list` role of a [ListComboBox](https://component.kitchen/elix/ListComboBox) and, _voilà_, we get a combo box that can filter items as the user types:


    <figure>
      <img src="/images/ck/FilterComboBox.png">
    </figure>


    Factoring UI this way lets each component do a great job at its appointed task. In this case, we can take address all the complexity of keyboard support in the generic ComboBox component. You can then use that foundation for great keyboard support in more specialized combo box components.


    ## Recombining components to implement new patterns


    One other benefit of factoring UI this way is that components can be readily recombined to create new variations. A UI pattern that’s become common in development tools is a “list with search”. This pattern lets you quickly open a file or select a command by typing the first few letters, then selecting the best match from a list. Here’s an example from Chrome dev tools:


    <figure>
      <img src="/images/ck/ChromeListWithSearch.png">
    </figure>


    As you type into the input field, the list of files below is filtered to show only those whose names contain the text string. Moreover, the matching portion of the file name is highlighted.


    We can quickly reproduce this general UI pattern as a web component by taking the AutoCompleteInput and FilterListBox described above, and wiring them together to create [ListWithSearch](https://component.kitchen/elix/ListWithSearch):


    <figure>
      <img src="/images/ck/ListWithSearch.png">
    </figure>


    This is an in-place variation of the FilterComboBox we saw earlier. ListWithSearch is useful in cases where the user is completely focused on selecting an item from a large set. That task focus permits us to place the input and list _in situ_, instead of needing to save space by hiding the list behind the popup. The user can apprehend the purpose of the UI elements more quickly, and can complete their task in fewer steps.
2019-04:
  2019-04-08 A history of the slot element.md: >
    ---

    title: A history of the HTML slot element

    date: 2019-04-08 16:00 UTC

    slug: a-history-of-the-html-slot-element

    originalUrl: https://component.kitchen/blog/posts/a-history-of-the-html-slot-element

    ---


    To me, the story behind the standard HTML

    [`<slot>`](https://www.google.com/url?q=https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot&sa=D&ust=1554399746448000)

    element illustrates the complexity of producing standards, the importance of talking with people face-to-face, and the value of compromise.


    Like any standard, the `<slot>` element didn’t just appear out of thin air. It emerged out of a contentious discussion in which people fought hard for the position they thought was best. In the particular case of that element, it’s possible that a fairly small point of disagreement might have prevented the larger web components technology from reaching the level of support it now has.


    I wanted to write down some of that `<slot>` history while I can still recall or reconstruct the details and much of the original content is still publicly visible. This is just my perspective on the events. The other people involved surely recall the events differently, but I’ve done my best to be as objective, complete, and accurate as I can.


    ## 2011: Shadow DOM v0 and `<content>`


    As I understand it, people at Google including Dimitri Glazkov and Alex Russell began drafting the ideas that became known as web components in 2010 and early 2011. In various posts during 2010–11 on the

    [W3C public-webapps mailing list](https://www.google.com/url?q=https://lists.w3.org/Archives/Public/public-webapps/&sa=D&ust=1554399746450000),

    Dimitri laid out early thinking on web components. He summarized the state of that work in a January 2011 blog post,

    [What the Heck is Shadow DOM?](https://www.google.com/url?q=https://glazkov.com/2011/01/14/what-the-heck-is-shadow-dom/&sa=D&ust=1554399746450000)


    At the end of the year, Dimitri posted an updated summary,

    [Web Components Explained](https://www.google.com/url?q=http://web.archive.org/web/20111217001628/https://dvcs.w3.org/hg/webcomponents/raw-file/tip/explainer/index.html%23shadow-dom-section&sa=D&ust=1554399746450000).

    That summary roughly describes what eventually became known as Shadow DOM v0, which includes several key differences from the final Shadow DOM v1 standard. Among those differences was a proposed

    [`<content>`](https://www.google.com/url?q=https://developer.mozilla.org/en-US/docs/Web/HTML/Element/content&sa=D&ust=1554399746451000)

    element for indicating where light DOM nodes should rendered inside a shadow tree and which nodes should be rendered.


    Example: if an element has a Shadow DOM tree that contains


    ```html

    Hello, <content></content>!

    ```


    and that element’s _light_ DOM content is the text “world”, then what the user sees is


    ```

    Hello, world!

    ```


    The proposed definition of the `<content>` element allowed the developer to specify which light DOM nodes should be included by using a CSS selector:


    ```html

    <content select="img"></content>

    ```


    The above would arrange for that `<content>` element to show the `<img>` elements in the light DOM.


    Google

    [landed experimental Shadow DOM v0 support](https://www.google.com/url?q=https://lists.w3.org/Archives/Public/public-webapps/2011AprJun/1345.html&sa=D&ust=1554399746453000)

    in Chrome around June 2011, including support for `<content>`.


    The strongest reaction to Google’s early web component proposals came from Apple. Apple’s Maciej Stachowiak

    [posted](https://www.google.com/url?q=https://lists.w3.org/Archives/Public/public-webapps/2011AprJun/1364.html&sa=D&ust=1554399746454000)

    several objections to the API, including that the API didn’t provide robust encapsulation. Later posts from Maciej indicate support for the general idea of Shadow DOM, but not the v0 API.


    ## 2012


    I first came across web components in early 2012, and wrote a

    [blog post about web components](https://www.google.com/url?q=https://miksovsky.blogs.com/flowstate/2012/03/snapping-together-a-skyscraper.html&sa=D&ust=1554399746455000)

    that March. At the time, I was working on an open source component library based on jQuery, and was excited by the prospect of a native UI component model for the web.


    On the other hand, I was concerned it might take a long time for web components to reach broad adoption across the major browsers. By 2012, the iPhone had become a major point of access to the web, and it was not clear whether Apple would ever implement support for Shadow DOM v0. Shadow DOM was already proving extremely difficult to polyfill. Without native Shadow DOM available on Mobile Safari, developers might avoid the technology altogether, and it might never take off.


    Google’s strategy seemed to be: once web developers discovered the benefits of using web components in Google Chrome, those developers would pressure Apple to support the technology too. It’s impossible to say whether that strategy would have worked. We can note that Apple has declined to implement other web standards (e.g., web animations), and those decisions have almost certainly dissuaded developers from adopting those technologies. _[Note added on April 22, 2019: Apple did release initial production support for web animations last month in Safari 12.1.]_


    I had my own misgivings about the initial Shadow DOM design, particularly that

    [CSS selectors might be poorly suited for selecting light DOM nodes](https://www.google.com/url?q=https://blog.quickui.org/2012/07/02/web-component-properties/&sa=D&ust=1554399746456000):


    > _The tool given to the developer for [selecting light DOM nodes] is CSS selectors, which at first glance seems powerful. Unfortunately, it’s also a recipe for inconsistency. Every developer will have the freedom—and chore—to approach this problem their own way, guaranteeing the emergence of a handful of different strategies, plus a number of truly bizarre solutions. …_

    >

    > _It’s as if you were programming in a system where functions could only accept a single array. As it turns out, we already have a good, common example of such a system: command line applications. … [Using CSS selectors] leaves devs without a consistent way to refer to component properties by name, thereby leaving the door wide open for inconsistency._


    Instead, I was hoping that the spec could be modified to support named insertion points to which light DOM nodes could be assigned by name.


    ## 2013: Apple concerns about complexity/performance


    Apple posts from spring 2013 show [concerns about the complexity of the Shadow DOM API](https://www.google.com/url?q=https://lists.w3.org/Archives/Public/public-webapps/2013AprJun/0387.html&sa=D&ust=1554399746458000). Tess O’Connor from Apple wrote:


    > _While I'm very enthusiastic about Shadow DOM in the abstract, I think things have gotten really complex, and I'd like to seriously propose that we simplify the feature for 1.0, and defer some complexity to the next level… I think we can address most of the use cases of shadow DOM while seriously reducing the complexity of the feature by making one change: What if we only allowed one insertion point in the shadow DOM?_


    Tess is saying that, if a shadow tree could only have one `<content>` element, there’d be no need to support CSS selectors on it. That would make it much easier for Apple and other vendors to implement and ship Shadow DOM. That in turn would let the browser vendors gain feedback from early adopters before attempting to add more complex features.


    Tess’ comments were echoed by Apple colleague Ryosuke Niwa, who voiced

    [concerns about the performance](https://www.google.com/url?q=https://lists.w3.org/Archives/Public/public-webapps/2013AprJun/0470.html&sa=D&ust=1554399746460000)

    of a `<content>` element with CSS selectors. In later conversations with me, Ryosuke also spoke of his desire to avoid adding unnecessary complications to HTML and the DOM, because such broadly-supported specs dictate that any complexity has to be supported for the rest of time. He referenced this reluctance in the linked post:


    > _I don't want to introduce a feature that imposes such a high maintenance cost without knowing for sure that they're absolutely necessary._


    In 2013, I was investing my own time in an

    [experimental library of general-purpose web components](https://www.google.com/url?q=https://github.com/janmiksovsky/quetzal&sa=D&ust=1554399746461000).

    Those experiments revealed some limitations of the `<content>` element, such as

    [challenges subclassing web components](https://www.google.com/url?q=https://blog.quickui.org/2013/06/11/puzzle-define-html-custom-element-subclasses-that-can-fill-in-base-class-insertion-points/&sa=D&ust=1554399746461000).

    By that point, I was using the term

    [“slot” as a friendlier-sounding synonym](https://www.google.com/url?q=https://blog.quickui.org/2013/11/08/filling-slots-in-shadow/&sa=D&ust=1554399746461000) for the spec’s use of “insertion point”.


    ## 2014


    Ryosuke, it turned out, was also interested in

    [supporting subclassing web components](https://www.google.com/url?q=https://lists.w3.org/Archives/Public/public-webapps/2014AprJun/0151.html&sa=D&ust=1554399746462000).

    Towards that end, he also thought it would be useful for a web component class to identify insertion points by name. That would make it easier for a subclass to override or extend what appeared in that insertion point. Overall, he was keenly interested in simplifying the Shadow DOM specification, e.g., by dropping support for multiple shadow roots on a single element.


    For these reasons and others, Apple continued to show little interest in implementing Shadow DOM v0 in WebKit.


    ## 2015: Shuttle diplomacy


    While Google was moving towards shipping Shadow DOM v0 in production Chrome, Apple remained adamant about not supporting that spec. Ryosuke described the situation this way: “Shadow DOM as currently spec'ed is broken and won't adequately address the use cases we care about.”


    From the outside, Google and Apple both seemed to be talking at each other without much progress. This impasse concerned me, because I was hoping to use web components as the basis for a component-oriented consulting practice at my startup,

    [Component Kitchen](https://www.google.com/url?q=https://component.kitchen&sa=D&ust=1554399746464000).


    At the same time, I felt there was room for a compromise that would reduce the complexity that concerned Apple, while still allowing Google to achieve much of its original vision.


    The W3C WebApps working group was scheduled to hold a F2F (Face-to-Face meeting) in Mountain View, CA, on April 24. To me that meeting seemed like a good opportunity to make a compromise, and I wanted to do what I could to make that happen.


    I began to wonder if conducting Shadow DOM discussions mostly online was reducing the potential for compromise. In February, I shared this thought with Dimitri, who had previously introduced me to Ryosuke via email. I reached out to Ryosuke and asked if he’d be interested in meeting. Ryosuke agreed and invited Tess to join as well.


    The hope I expressed to Dimitri in email was that _“Ryosuke and I [could] work as a tiny team... come to agreement on something, and then jointly propose that for consideration at the F2F [web components face-to-face meeting] in April.”_


    ### April 3: Meeting with Apple


    I met with Ryosuke and Tess at a conference room I rented for the morning in Palo Alto, not far from Apple’s headquarters. Our discussion was productive.


    I proposed that we simplify the `<content>` element design to use a simple name instead of a CSS selector, and Ryosuke and Tess felt this would be a good step forward. For the sake of differentiating the proposed design from Shadow DOM v0, I wrote “slot” on the whiteboard as a working name. I offered to write up the new design as a joint proposal from Apple and Component Kitchen, and Ryosuke and Tess agreed.


    Having the discussion in person — and not in the tightly-constrained medium of a mailing list — made an enormous difference. It was also helpful to ask Apple basic questions about their opinions and goals (_What do you want? What’s important to you?_) rather than constraining discussion to feedback on another company’s proposal (_Why won’t you adopt this design?_).


    ### April 21: Draft proposal


    With feedback from Ryosuke and Tess, I posted a joint

    [draft proposal](https://www.google.com/url?q=https://github.com/w3c/webcomponents/wiki/Proposal-for-changes-to-manage-Shadow-DOM-content-distribution/641b524e633678c2b25e7cb8ba31005350f36c9d&sa=D&ust=1554399746466000)

    on GitHub, and Ryosuke

    [shared the proposal on the webapps mailing list](https://www.google.com/url?q=https://lists.w3.org/Archives/Public/public-webapps/2015AprJun/0184.html&sa=D&ust=1554399746466000).

    The proposal suggested several changes to Shadow DOM, including a new “syntax for named insertion points”:


    > _In this proposal, the attribute for defining the name is called “slot”. The word “slot” is used both in the name of an attribute on the `<content>` element, and as an attribute (content-slot) for designating the insertion point to which an element should be distributed. The word “slot” should just be considered a placeholder. it could just as easily be called “name”, “parameter”, “insertion-point”, or something similar. We should focus first on the intent of the proposal and, if it seems interesting, only then tackle naming._


    Eventually, the `<content>` element would be

    [renamed](https://www.google.com/url?q=https://www.w3.org/Bugs/Public/show_bug.cgi?id%3D28561&sa=D&ust=1554399746468000)

    `<slot>`, and the syntax `<content slot="foo">` was replaced with `<slot name="foo">`.


    This definition of `<slot>` was intentionally simpler than the definition of `<content>`. Where `<content>` could specify a CSS selector, nodes could only be assigned to a `<slot>` by name.


    Maciej

    [summarized Apple’s positions on Shadow DOM v0](https://www.google.com/url?q=https://lists.w3.org/Archives/Public/public-webapps/2015AprJun/0225.html&sa=D&ust=1554399746468000),

    including their desire to adopt the slot proposal. In email, Dimitri indicated that he was circulating the ideas at Google:


    > _I just pre-flighted the ideas... and we don't hate them! :)_

    >

    > _Actually, the slot-based thing was received positively. It's something that would also definitely reduce the complexity of the code._


    These were good words to hear. Still, Google is a big company comprised of individuals with their own opinions. Given Google’s considerable investment in Shadow DOM v0, many Googlers were still committed to pushing forward with that design.


    Coincidentally, at this time my company was doing contract work for Google. To the extent that Google didn’t like the compromise proposal I had worked out with Apple, that disagreement was complicating our business relationship.


    ### April 24: W3C WebApps Face-to-Face


    This was a critical meeting. Beforehand, Dimitri summarized the

    [Contentious Bits](https://www.google.com/url?q=https://github.com/w3c/webcomponents/wiki/Shadow-DOM:-Contentious-Bits&sa=D&ust=1554399746470000)

    of the Shadow DOM spec that included all the points on which Apple disagreed with Google. The `<slot>` proposal was listed under the question of removing support for multiple shadow roots.


    This was my first W3C meeting, so I didn’t have other meetings to compare it to, but to me the discussion seemed fairly tense. Dimitri deftly and diplomatically started the meeting off on a positive note — by getting agreement on points that were not contentious or had been previously negotiated. He also began with an important concession, indicating that he would drop his original design that called for multiple shadow roots. From the meeting

    [minutes](https://www.google.com/url?q=https://lists.w3.org/Archives/Public/public-webapps/2015AprJun/att-0307/24-minutes.html&sa=D&ust=1554399746471000):


    > _This [multiple shadow roots] has been a big sticking point for the Shadow DOM spec. I was the one arguing for it. ... I think most usage isn’t that good, so I am okay with removing it._


    That said, there was contention on whether the `<slot>` proposal was an adequate way to address the scenarios originally intended for multiple shadow roots.


    <figure>
      <img src="/images/ck/Web Components F2F 2015.jpg">
      <figcaption>
        Whiteboard discussion at the April 2015 F2F. From left to right: Ryosuke Niwa (Apple), Anne van Kesteren (Mozilla), Hayato Ito (Google), Travis Leithead (Microsoft), Dimitri Glazkov (Google)
      </figcaption>
    </figure>


    Throughout the day, Ryosuke and Maciej argued Apple’s positions. Although I don’t see it captured in the minutes, I recall Ryosuke making it clear that the alternative to a negotiated agreement was that Apple would not implement Shadow DOM v0.


    Google, for its part, was not enthusiastic about redesigning the `<content>` element. To keep track of the browser vendor positions on the points of contention, during the meeting I put together a spreadsheet tracking a

    [Summary of positions on contentious bits of Shadow DOM](https://www.google.com/url?q=https://docs.google.com/spreadsheets/d/15rIpbH8uoiT4soB5WpLAI-geJgHf03wlgtlyUoJ_NuU/edit?usp%3Dsharing&sa=D&ust=1554399746473000).

    At the end of the day, the score for the `<slot>` proposal looked like:


    > _Slots Proposal_

    >

    > _Apple: Proposed it / Mozilla: Like it / Microsoft: Like it / Google: Opposed_


    Still, substantial progress had been made during the F2F meeting towards addressing Apple’s concerns. From this meeting on, Apple seemed fully committed to resolving its remaining differences. Ryosuke and Dimitri left the meeting with a plan to meet again to discuss some of those. And Dimitri seemed very encouraged by Apple’s renewed level of interest in implementing Shadow DOM.


    ### May 15


    A few weeks later, Scott Miles at Google posted a surprising message on the webapps mailing list, with the subject:

    [How about let's go with slots?](https://www.google.com/url?q=https://lists.w3.org/Archives/Public/public-webapps/2015AprJun/0649.html&sa=D&ust=1554399746474000)


    > _We think the ‘slot’ proposal can work… We would like for the working group to focus on writing the spec for the declarative ‘slot’ proposal._


    Google was indicating their acceptance of Apple’s desire to replace `<content>` with `<slot>` in order to secure Apple’s support of the Shadow DOM standard in WebKit.


    While I don’t have specific knowledge of Google’s internal deliberations, it seems likely that Dimitri played an important role in shifting Google’s position on this point. He had been apprehensive about the possibility Apple might walk away from the table again. If that happened, the Shadow DOM specification, and web components as an general idea, might founder and never receive significant adoption.


    In contrast, yielding on this relatively small point would keep Apple not only involved, but emotionally invested in a successful outcome. Reaching a compromise was worth more in the long run that the specific merits of the competing `<content>` and `<slot>` designs.


    _[Note added on April 22, 2019: Ryosuke commented that, “I don’t think we ever really considered ‘walking away’ from implementing web components per se. We just felt that what was being proposed (v0 APIs) were the wrong primitives... Fundamentally, Apple’s WebKit team always liked the basic idea of web components... I think the large part of contention was really miscommunications.”]_


    ## Aftermath


    In the months after the April F2F, Apple and Google were reconciled their remaining differences. The Shadow DOM spec was rewritten as v1, which included the `<slot>` element as the way light DOM nodes would get displayed within a shadow tree. Ryosuke at Apple and Hayato Ito at Google began implementing Shadow DOM v1 support in WebKit and Blink, respectively.


    In October 2015, initial

    [Shadow DOM v1 support showed up in nightly WebKit builds](https://www.google.com/url?q=https://webkit.org/blog/4096/introducing-shadow-dom-api/&sa=D&ust=1554399746476000).

    If I recall correctly, that shipped in production Safari sometime around June 2016. Google appears to have

    [shipped Shadow DOM v1 in Chrome](https://www.google.com/url?q=https://groups.google.com/a/chromium.org/forum/%23!topic/blink-dev/zrZRD2ls5tw&sa=D&ust=1554399746476000)

    around the same time.


    Support from other vendors was slower to come. Mozilla finally

    [shipped Shadow DOM v1 in Firefox](https://www.google.com/url?q=https://www.mozilla.org/en-US/firefox/63.0/releasenotes/&sa=D&ust=1554399746477000)

    in October 2018. That same month, Microsoft publicly indicated that they had finally begun implementing Shadow DOM v1 in their EdgeHTML engine, but it’s unclear how much progress they ever made towards that end.


    In December 2018, Microsoft announced that they were abandoning EdgeHTML in favor of using the same Chromium engine used by Chrome, so they’ll pick up Shadow DOM v1 by default. When Microsoft releases a Chromium-based version of Edge (presumably later this year), all major browsers will finally support Shadow DOM v1.


    ## Retrospective


    Web components are still a fairly new technology, so it’s a little early to assess the strengths and weaknesses of Shadow DOM v1 across a broad range of products. I can at least say that, having now led the open

    [Elix web component library](https://www.google.com/url?q=https://component.kitchen/elix&sa=D&ust=1554399746478000)

    for several years, the `<slot>` design has met the Elix project’s needs to date. The project has yet to encounter the need for the sort of flexibility and complexity entailed by the original `<content>` element design. So as a technical solution, I think that `<slot>` has worked out fine so far.


    Looking back, I think the `<slot>` proposal achieved what it meant to. It produced a fairly small shift in the definition of a standard but minor HTML element, and was rather unimportant on its own. But it nevertheless represented a breakthrough in the discussion. It renewed Apple’s interest in implementing Shadow DOM and the related Custom Elements specification, and ultimately ensured Apple’s support for Shadow DOM on the critical Mobile Safari web browser. While `<slot>` was just a small piece of a complex set of negotiations, I believe that, without agreement on that one point, it’s likely Apple would have not gone forward with Shadow DOM support.


    At the same time, the `<slot>` compromise allowed Google to preserve much of their Shadow DOM investment and deliver Shadow DOM v1 support in a timely manner. In the grander scheme of things, it let Dimitri, Alex, and other farsighted visionaries at Google achieve their goal of finally giving the web a native UI component model. And for that, I think, we can all be grateful.


    On a larger scale, it’s remarkable to consider that HTML has something like 100 standard elements, and each of them has a range of features. CSS and JavaScript are similarly complex. When we’re developing for the web, we take these standard elements and features as facts on the ground. For all we know or care, they’ve always been there — but all of them likely hold their own equally complex histories about how they came to be.


    _Special thanks to Dimitri Glazkov and Ryosuke Niwa for reviewing drafts of this post._
2019-05:
  2019-05-28 A recalc engine for web components.md: >
    ---

    title: A simple state-based recalc engine for web components

    date: 2019-05-28 16:00 UTC

    slug: a-simple-state-based-recalc-engine-for-web-components

    originalUrl: https://component.kitchen/blog/posts/a-simple-state-based-recalc-engine-for-web-components

    ---


    We recently released [Elix 6.0](https://github.com/elix/elix/releases/tag/6.0.0). This includes a simple state-based recalc engine that lets our components know what they should update when their internal state changes.


    We were inspired by Rich Harris' [Rethinking Reactivity](https://www.youtube.com/watch?v=AdNJ3fydeao) talk on version 3 of the [Svelte](https://svelte.dev/) framework, which advances the idea of building user interface components upon a spreadsheet-like recalc engine. Significantly, the recalc engine supports forward references — when one piece of data changes, the engine can efficiently determine what else must be recalculated. Svelte entails a complete toolchain that we're not ready to adopt, but we like the idea of recalc as a useful service for web components.


    As it turns out, Elix already had much of what we need to build a recalc engine, and it was relatively straightforward to expand that to form a new core for our Elix components. We worked this into a core Elix mixin called [ReactiveMixin](https://component.kitchen/elix/ReactiveMixin), which can now let a component know exactly what state has actually changed since the last render. This in turn lets the component efficiently decide what it needs to update in the DOM.


    ## The smallest amount of framework we can get away with


    As we've noted before, it's [not practical to write a production component library without any shared code](https://component.kitchen/blog/posts/nobody-writes-production-web-components-in-vanilla-js-so-using-a-framework-makes-total-sense). Writing web components requires enough boilerplate that most people end up using a framework, even if it's just a tiny framework they wrote themselves.


    Elix has had to develop its own core library so that we can create reliable, polished, general-purpose web components. Our framework happens to be composed of JavaScript mixins. We don't particularly care to push this framework on other people, but we do discuss it from time to time in case the work we've done can help write their own framework-level code better.


    We only ask a few things of our framework:


    - **Support a functional-reactive programming model.** We want to represent a component's current state with a single immutable state object. When a request is made to change the state, the component should be told to render that new state to the DOM. This is handled by [ReactiveMixin](https://component.kitchen/elix/ReactiveMixin). This is the part of our framework that now contains a small recalc engine.

    - **Populate a Shadow DOM tree with an HTML template.** A template is a convenient way to express a component's subelements, and copying a template into a shadow tree is handled by [ShadowTemplateMixin](https://component.kitchen/elix/ShadowTemplateMixin).

    - **Let HTML authors set HTML attributes on our components.** When a `foo-bar` attribute is set, we want to invoke a corresponding `fooBar` property setter. That's the job of [AttributeMarshallingMixin](https://component.kitchen/elix/AttributeMarshallingMixin).


    The second and third things are boring but necessary; the first part is the only interesting bit. For convenience, all three of these mixins are bundled together in a base class, [ReactiveElement](https://component.kitchen/elix/ReactiveElement). But each piece is usable separately.


    ## Example


    A simple increment/decrement web component in Elix 6.0 looks like this:


    ```js

    import { ReactiveElement, symbols, template } from "elix";


    class IncrementDecrement extends ReactiveElement {
      componentDidMount() {
        super.componentDidMount();
        this.$.decrement.addEventListener("click", () => {
          this.value--;
        });
        this.$.increment.addEventListener("click", () => {
          this.value++;
        });
      }

      // This property becomes the value of this.state at constructor time.
      get defaultState() {
        return Object.assign(super.defaultState, {
          value: 0,
        });
      }

      // Render the current state to the DOM.
      [symbols.render](changed) {
        super[symbols.render](changed);
        if (changed.value) {
          this.$.valueSpan.textContent = this.state.value;
        }
      }

      // Define the initial contents of the component's Shadow DOM subtree.
      get [symbols.template]() {
        return template.html`
          <button id="decrement">-</button>
          <span id="valueSpan"></span>
          <button id="increment">+</button>
        `;
      }

      // Provide a public property that gets/sets the value state.
      // If an HTML author sets a "value" attribute, it will invoke this setter.
      get value() {
        return this.state.value;
      }
      set value(value) {
        this.setState({ value });
      }
    }

    ```


    [Live demo](https://component.kitchen/demos/reactiveElementExample.html)


    The interesting new bit in Elix 6.0 shows up in the method identified by `symbols.render`. That method is invoked when the component's state changes. (Aside: We identify internal methods with `Symbol` instances to avoid name collisions with other component code.)


    The render method now gets a parameter, `changed`, that has Boolean values indicating which state members have changed since the last render. If `changed.value` is true, then `this.state.value` contains a new value, so the render method knows it should display the new value in the DOM as the span's `textContent`.


    ## Computed state


    In simple cases, a computed property can be recalculated each time it's requested. But a number of Elix components have computed state that is expensive to recalculate. In those cases, we can define a rule in our recalc engine that indicates how to recalculate a given state member when other state members change.


    A toy example might look like:


    ```js

    class TestElement extends ReactiveMixin(HTMLElement) {
      get defaultState() {
        const result = Object.assign(super.defaultState, {
          a: 0,
        });

        // When state.a changes, set state.b to be equal to state.a + 1
        result.onChange("a", (state) => ({
          b: state.a + 1,
        }));

        return result;
      }
    }

    ```


    The `onChange` handler is associated with the component's state object, and runs whenever `state.a` changes. That handler returns an object containing any computed updates that should be applied to the state. Here it returns an object with a new value for `state.b`.


    A more realistic example comes up in [SingleSelectionMixin](https://component.kitchen/elix/SingleSelectionMixin), which maintains a `selectedIndex` state member used to track which item in a list of `items` is currently selected. If the `items` array changes, we want to ensure that the `selectedIndex` state still falls with the bounds of that array.


    ```js

    function SingleSelectionMixin(Base) {
      return class SingleSelection extends Base {
        get defaultState() {
          const state = Object.assign(super.defaultState, {
            selectedIndex: -1,
          });

          // Ask to be notified when state.items changes.
          result.onChange("items", (state) => {
            // Force selectedIndex state within the bounds of -1 (no selection)
            // to the length of items - 1.
            const { items, selectedIndex } = state;
            const length = items.length;
            const boundedIndex = Math.max(Math.min(selectedIndex, length - 1), -1);
            return {
              selectedIndex: boundedIndex,
            };
          });

          return result;
        }
      };
    }

    ```


    Defining a rule like this to keep an index within bounds is an important ingredient in allowing us to factor our complex components into constituent mixins. It lets one mixin or class update an aspect of state without having to know about all the secondary effects that will have.


    You can see this recalculation of state in action if you open a demo like the one for [Carousel](https://component.kitchen/demos/carousel.html) and invoke the debug console. If you use the debugger to remove one of the carousel's images from the DOM, the `Carousel` will recalculate which item should now be selected. If the last image is selected in the carousel and you remove that image, the above code will ensure that the _new_ last image becomes the selected one.


    This isn't just an abstract experiment. This kind of resiliency is called for in the Gold Standard Checklist for Web Components criteria for [Content Changes](https://github.com/webcomponents/gold-standard/wiki/Content-Changes). Such resiliency is exactly the kind of quality that custom elements will need to deliver to be as reliable and flexible as the native HTML elements. The simple recalc engine in our Elix 6.0 core makes it easier for us to deliver that level of quality.
2019-06:
  2019-06-10 React versions of the Elix user interface components.md: >
    
    ---

    title: Should the Elix project maintain React versions of its general-purpose UI components?

    date: 2019-06-10 16:00 UTC

    slug: should-the-elix-project-maintain-react-versions-of-its-general-purpose-ui-components

    originalUrl: https://component.kitchen/blog/posts/should-the-elix-project-maintain-react-versions-of-its-general-purpose-ui-components

    ---


    We've been looking at how to make the [Elix web component library](https://component.kitchen/elix) easier to use in a React application. We recently posted a [React example](https://github.com/elix/react-example) to show using an Elix web component in a simple React app, but we can do more.


    # HTML custom elements don't feel quite at home in React today


    As noted on [Custom Elements Everywhere](https://custom-elements-everywhere.com/#react), React currently has some well-known issues interacting with custom elements:


    - Properties passed to HTML elements, including custom elements, get passed as strings. This makes it hard to pass complex properties like objects and arrays.

    - Listening to events raised by custom elements requires a somewhat awkward workaround.


    Based on our experience, I'd also add a third issue:


    - Custom elements have to be referenced by their string tag name. E.g., the Elix [Carousel](https://component.kitchen/elix/Carousel) must be referenced as the string `elix-carousel` instead of the class `Carousel`.


    That's unfortunate. React components are referenced by class, and the inability to do the same with custom element classes makes them feel alien in the context of React. It also makes it harder to do proper linting and type-checking.


    To use a web component in React today, you do something like the following:


    ```jsx

    // In custom-element.js

    export default class MyCustomElement extends HTMLElement {}

    customElements.define("my-custom-element", MyCustomElement);


    // In app.jsx

    import React from "react";

    import MyCustomElement from "./custom-element.js";


    class App extends React.Component {
      render() {
        return <my-custom-element></my-custom-element>;
      }
    }

    ```


    The `import MyCustomElement` statement will generate a lint error complaining that `MyCustomElement` is unused, because it can't know that the string name `my-custom-element` is an indirect reference to the `MyCustomElement` class.


    You could suppress the error by dropping the class name from the import:


    ```jsx

    import "./custom-element.js";

    ```


    But that simply masks the problem: there's no type-safe way to confirm the JavaScript code in the React app is interacting correctly with the custom element class.


    It'd be preferable to refer to HTML custom elements by class just like one can with React component classes. Specifically, it'd be nice if JSX and the underlying `React.createElement` could be extended to accept any subclass of the standard `HTMLElement` base class:


    ```jsx

    // In custom-element.js

    export default class MyCustomElement extends HTMLElement {}

    customElements.define("my-custom-element", MyCustomElement);


    // In app.jsx

    import React from "react";

    import MyCustomElement from "./custom-element.js";


    class App extends React.Component {
      render() {
        return <MyCustomElement></MyCustomElement>; // This would be nice!
      }
    }

    ```


    This would open up type safety and the attendant edit-time benefits of features like auto-complete and inline documentation.


    # Trying out React versions of the Elix web components


    In the meantime, we're considering maintaining [React versions of the Elix web components](https://github.com/elix/elix-react) that address some of the interop issues mentioned above. They let you listen to custom events raised by an Elix component using the standard React `on` syntax. They also let you set properties using React-standard camelCase property names instead of hyphenated attribute names. (However, properties still only accept types that can be coerced to and from strings.)


    Example:


    ```jsx

    import React from "react";

    import ListBox from "elix-react/src/ListBox.jsx";


    class App extends React.Component {
      constructor(props) {
        super(props);
        this.state = {
          selectedIndex: 0,
        };
        this.selectedIndexChanged = this.selectedIndexChanged.bind(this);
      }

      render() {
        return (
          <ListBox
            onSelectedIndexChanged={this.selectedIndexChanged}
            selectedIndex={this.state.selectedIndex}
          ></ListBox>
        );
      }

      selectedIndexChanged(detail) {
        const { selectedIndex } = detail;
        this.setState({ selectedIndex });
      }
    }

    ```


    Here's a simple [demo of a React app using the React Elix components](https://elix.github.io/elix-react/demos/listAndCarousel.html). This shows a React version of an Elix [ListBox](https://component.kitchen/elix/ListBox) synchronized with an Elix [Carousel](https://component.kitchen/elix/Carousel).


    As with the regular Elix web components, the React versions provide full keyboard, mouse, touch, and trackpad support, plus ARIA accessibility.


    We're trying to decide if we should maintain the React versions of the Elix components on an ongoing basis. If that would be interesting to you, please tweet to the Elix project at [@ElixElements](https://twitter.com/ElixElements).
2019-09:
  2019-09-16 Hiding internal framework methods and properties from web component APIs.md: >
    
    ---

    title: Hiding internal framework methods and properties from web component APIs

    date: 2019-09-16 16:00 UTC

    slug: hiding-internal-framework-methods-and-properties-from-web-component-apis

    originalUrl: https://component.kitchen/blog/posts/hiding-internal-framework-methods-and-properties-from-web-component-apis

    ---


    We've made breaking changes in the new [Elix 7.0.0](https://component.kitchen/elix) to solidify our component APIs. Specifically, our components no longer expose internal methods or properties with string names.


    As usual, we're much less concerned with promoting our own library as a general-purpose component framework than we are in delivering great web components. We're documenting the thinking behind this change in this post for the benefit of anyone creating components with an eye towards reusability outside their organization.


    ## A component's framework should be an invisible implementation detail


    We try to write all our components so that they conform to a high quality bar. We use the native HTML elements as a reference point to measure how robust and flexible our components should be. We call that approach the [Gold Standard checklist for web components](https://github.com/webcomponents/gold-standard/wiki).


    To meet that standard, we've concluded that it's important for a web component to expose only its officially supported public API. That's what the native HTML elements do! So that's what we want to do too.


    But like most web component frameworks today, Elix components previously exposed a number of internal methods like `render` and internal properties like `state`. Virtually all component libraries today do the same thing, exposing a substantial number of methods and properties which are only ever intended to be invoked internally.


    In hindsight, exposing framework internals that way (even prefixed with an underscore, etc.) seems like a bad idea:


    1. Component users might decide to hack around component limitations by directly invoking internal methods or properties. The framework implicitly becomes part of the component's public API, whether or not that's what the component authors intended.

    2. The framework used to create a component should be an invisible implementation detail. If a component author decides to someday change the framework in which they create a given component, they should be able to do so without any fear that they're going to break someone who — rightly or wrongly — decided to depend on inadvertently-exposed component internals.

    3. Exposing framework details makes a custom element feel kludgey compared to native HTML elements. This is a softer issue, but might nevertheless contribute to a lack of confidence in the quality of a component. If native elements don't expose their details, we don't want our components to do that either.


    Deliberately exposing only those members that belong in the public API is good practice for any library. To date, the fact that component authors haven't worried about exposing framework internals most likely indicates that authors have been primarily focused on using their own components than on sharing them. But if web components are to find general reuse in a wide audience, authors should carefully review exactly what is visible in a component's public API.


    ## Hardening our component APIs


    With the above in mind, we've made breaking changes in Elix to better hide all internal methods and properties.


    Elix has long used `Symbol` keys instead of strings to identify various internal members that one mixin or class may need to invoke in another mixin or class. Using symbols that way hides those methods and properties from the debug console's auto-complete list. Those symbols are still accessible via `Object.getOwnPropertySymbols`, but someone has to work harder to do that. Symbols also avoid potential name conflicts if a component user wants to extend a custom element with their own data or methods.


    We're expanding this use of `Symbol` keys to better hide all methods and properties which are meant for internal use only.


    - All internal operations, like the `setState` or `render` methods, and the `state` property, are now behind symbols.

    - We've renamed our collection of `Symbol` keys from `symbols.js` (which focused on the data type) to `internal.js` (which focuses on the intended purpose). So an element accesses its `state` via `this[internal.state]`.

    - We've renamed our shorthand function that looks up shadow elements by ID. Previously, you could write `this.$.foo` to get a reference to a shadow element with the ID "foo". The equivalent new code is `this[internal.ids].foo`.


    A simple example component in Elix 6.0 and earlier exposed some component internals with string names:


    ```js

    import * as symbols from "elix/src/symbols.js";

    import * as template from "elix/src/template.js";

    import ReactiveElement from "elix/src/ReactiveElement.js";


    // Create a native web component with reactive behavior.

    class IncrementDecrement extends ReactiveElement {
      componentDidMount() {
        super.componentDidMount();
        this.$.decrement.addEventListener("click", () => {
          this.value--;
        });
        this.$.increment.addEventListener("click", () => {
          this.value++;
        });
      }

      // This property becomes the value of this.state at constructor time.
      get defaultState() {
        return Object.assign(super.defaultState, {
          value: 0,
        });
      }

      // Render the current state to the DOM.
      [symbols.render](changed) {
        super[symbols.render](changed);
        if (changed.value) {
          this.$.value.textContent = this.state.value;
        }
      }

      // This template is cloned to create the shadow tree for a new element.
      get [symbols.template]() {
        return template.html`
          <button id="decrement">-</button>
          <span id="value"></span>
          <button id="increment">+</button>
        `;
      }

      // Provide a public property that gets/sets state.
      get value() {
        return this.state.value;
      }
      set value(value) {
        this.setState({ value });
      }
    }

    ```


    In Elix 7.0, all internals are now identified with `Symbol` keys obtained from `internal.js`, so the above example now looks like:


    ```js

    import * as internal from "elix/src/internal.js";

    import * as template from "elix/src/template.js";

    import ReactiveElement from "elix/src/ReactiveElement.js";


    // Create a native web component with reactive behavior.

    class IncrementDecrement extends ReactiveElement {
      [internal.componentDidMount]() {
        super[internal.componentDidMount]();
        this[internal.ids].decrement.addEventListener("click", () => {
          this.value--;
        });
        this[internal.ids].increment.addEventListener("click", () => {
          this.value++;
        });
      }

      // This sets the component's initial state at constructor time.
      get [internal.defaultState]() {
        return Object.assign(super[internal.defaultState], {
          value: 0,
        });
      }

      // Render the current state to the DOM.
      [internal.render](changed) {
        super[internal.render](changed);
        if (changed.value) {
          this[internal.ids].value.textContent = this[internal.state].value;
        }
      }

      // This template is cloned to create the shadow tree for a new element.
      get [internal.template]() {
        return template.html`
          <button id="decrement">-</button>
          <span id="value"></span>
          <button id="increment">+</button>
        `;
      }

      // Provide a public property that gets/sets state.
      get value() {
        return this[internal.state].value;
      }
      set value(value) {
        this[internal.setState]({ value });
      }
    }

    ```


    In addition to better hiding component implementation details, we really like that the above class definition makes clear that the component has only _one_ public member: the `value` property. Everything else is an implementation detail of interest to the component author only.


    Even though JavaScript engines are gaining support for private methods and properties, we can't use those for our purposes, because private members are only accessible within the class that defines them. We need a mixin or class somewhere along the class hierarchy to be able to invoke a member defined elsewhere along the hierarchy. In other words, what we really want are `protected` members, but those aren't coming to JavaScript soon, if ever.


    ## Debugging


    Since state is an internal matter, a component's state is now hidden behind a `Symbol`. By design, that makes it much harder to access! But when debugging, it's really helpful to be able to inspect component state easily.


    To facilitate debugging, Elix now looks to see if the current page has a URL parameter, `elixdebug=true`. If found, then Elix components will expose a string-valued `state` property as before. If the page is opened without that parameter, the `state` property disappears again.
2019-10:
  2019-10-01 Supporting both automatic and manual registration of custom elements.md: >
    
    ---

    title: Supporting both automatic and manual registration of custom elements

    date: 2019-10-07 16:00 UTC

    slug: supporting-both-automatic-and-manual-registration-of-custom-elements

    originalUrl: https://component.kitchen/blog/posts/supporting-both-automatic-and-manual-registration-of-custom-elements

    ---


    The latest [Elix](https://component.kitchen/elix) 8.0 release now lets you control how the Elix components are registered as custom elements. This post provides a summary of the complex topic of registering elements, then describes how Elix 8.0 addresses those complexities.


    ## Background: Why you need to register components as custom elements


    The browser standard for [Custom Elements](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements) lets you create your own HTML elements in two steps: 1) create a class that inherits from `HTMLElement`, and 2) register that class with the browser using a unique tag name. You can then instantiate the class:


    ```js

    class MyElement extends HTMLElement {} // Step 1: create class

    customElements.define("my-element", MyElement); // Step 2: register class


    const myElement = new MyElement(); // Ready for use

    ```


    The registered tag name (above, `my-element`) gives the browser a way to represent instances of the element in the DOM, where all element nodes must have a tag (a.k.a. `localName`). That tag lets the browser know how it should represent the node in HTML representations, such as in the `innerHTML` of some containing element. The requirement that a class only gets registered _once_ ensures a clear mapping from DOM to HTML.


    That said, the fact that each class must be registered once — and only once — creates a burden for component users. It would be great if, instead, you could define components like the ones in the Elix library in one step:


    ```js

    import Carousel from "elix/src/Carousel.js"; // Import class

    const carousel = new Carousel(); // Use class

    ```


    but this will throw if the element class hasn’t been registered.


    _Aside: the thrown exception is "Illegal constructor” in Chrome/Edge/Firefox, and "new.target is not a valid custom element constructor” in Safari. I find both of those wordings to be extremely unhelpful. The problem has nothing to do with your constructor, but with your failure to invoke `customElements.define`. I don't hit that exception very often, but every time I do, I waste time looking for the problem in the wrong place before I finally remember why that exception occurs._


    Registration can be particularly bothersome if you yourself instantiate components using only constructors. Most of the code we've written that creates components happens to do so through their constructors. We're never actually using the components' tags, so it's a chore to have to worry about them. We wish the browser would just generate a unique tag for any component class that's instantiated without registration. (Someone else has proposed support for [anonymous custom elements](https://github.com/w3c/webcomponents/issues/842), and while I think that proposal is very likely to be shot down, I've come to think it would be nice to have.)


    ## Auto-registering component modules


    To avoid the hassle of registering every component, Elix components in releases prior to 8.0 followed a common auto-registration pattern. Each component class was defined in a separate JavaScript module; the default export of each module was the corresponding component class. When you imported one of those modules, you obtained a reference to that class and _as a side effect_ that class was registered with the browser.


    For example, the `Carousel` class in Elix 7.0 was defined in a module `/src/Carousel.js` that conceptually looked like this:


    ```js

    // Define and export the class.

    export default class Carousel extends HTMLElement { ... }


    // Register the class as a side-effect.

    customElements.define('elix-carousel', Carousel);

    ```


    So if you imported that module like this:


    ```js

    import Carousel from "elix/src/Carousel.js";

    ```


    the `import` would return the [Carousel](https://component.kitchen/elix/Carousel) component class _and_ as a side effect register the `Carousel` class with the tag `elix-carousel`.


    That was rather convenient, especially as it let you load a module with a `script` tag and then immediately use that component entirely in HTML, without having to write any JavaScript:


    ```html

    <script type="module" src="./node_modules/elix/src/Carousel.js"></script>

    <elix-carousel>
      <!-- Carousel items such as img elements go here. -->
      <img src="image1.jpg" />
      <img src="image2.jpg" />
      <img src="image3.jpg" />
    </elix-carousel>

    ```


    ## Problems with auto-registering components


    But while auto-registering components are convenient, they lead to some problems:


    1. It seems like a bad idea to have importing a module make changes to global state like the custom element registry. At the very least, it can be surprising.

    2. Given a component module, there's currently no standard way of predicting what tag name will be used to register that component as a custom element. Likewise, given a defined component class, there's no way of asking the browser whether that class has already been registered and, if so, what tag was used to register it. (An [open issue](https://github.com/w3c/webcomponents/issues/566) tracks whether a new API should be added to find out the tag which which a class was registered.)

    3. Forcing the use of a specific tag name creates an undesirable point of entanglement between a project and a component. Imagine that you're working on the FooBar project and would like to use the Elix Carousel component. You'd like the flexibility to swap out which carousel you're using at some later point in time. But if Elix Carousel registers itself as "elix-carousel", then you need to bake that tag everywhere into your HTML. It's be better if you could register the Elix Carousel as "foo-bar-carousel", and use _that_ in your HTML so that you can more easily migrate between carousel implementations.

    4. It doesn't allow multiple component versions to be loaded at the same time. People who work on big projects know that it can be extremely difficult to force every team to use the exact same version of a library. As a result, the lack of support for multiple versions can quickly become a deal-breaker for any UI component model. This is a particularly critical issue for small, general-purpose components (like buttons, combo boxes, and context menus) that might make their way into many larger components in a single big project.

    5. It doesn't allow the same component to be used in multiple bundles. Even when two parts of your project are using the same component, it's possible that your project's bundling architecture will make it challenging to actually reference the same instance of the component module. If that module gets bundled into two different packages, they can't both be loaded. Arguably that just means you need a better bundling strategy, but it's nevertheless unfortunate that a limitation of the low-level `customElements` DOM API is forcing high-level constraints on how you build your application.


    One complicating factor with duplicate element registration is that there's bad locality of reference. Imagine you're working on a big project, and manage to trigger a situation in which a component is trying to register itself twice. The second attempt to register the class will throw an exception — but depending on the load order of the modules, that new code might happen to get loaded _first_. If that happens, the exception will be thrown by the _old_ code when it tries to load later. That's really surprising! “This old code worked fine before. I changed something else far away in this new file, and yet I somehow managed to break the previously-working old code.”


    ## Anticipating scoped custom element registries


    The proposal for [scoped custom element registries](https://github.com/w3c/webcomponents/issues/716) will let you register a class with a tag that's local to your own code. That will definitely be a huge help for the versioning/bundling conflicts described above.


    When that feature arrives, auto-registering components could be a minor nuisance, because an auto-registered component might get registered _twice_: once when the module auto-registers in the global custom element namespace, and a second time when your code registers the class in a scoped custom element registry. If you consistently use scoped registries, registrations in the global registry are unnecessary, and just present an opportunity for potential problems.


    If a component library like Elix wants to be ready for scoped custom element registries, it's worth figuring out how to move away from having all components auto-register themselves.


    ## Elix component modules, now in two flavors: normal and auto-registering


    Given the wide variety of situations and architectures in which web components may be useful, Elix 8.0 supports both the convenience of auto-registration and the freedom to control registration yourself. To this end, all Elix component modules now come in **two** flavors:


    - The modules in the project's `/src` folder now only export a component class, and do _not_ register that class as a custom element. You have to register it yourself. These `/src` modules are intended for use in apps that have some complexity, and where you want complete control over your components.

    - The modules in the project's new `/define` folder export the corresponding class _and_ register that class as a custom element. Example: `elix/define/Carousel.js` exports the `Carousel` class and registers it with the tag `elix-carousel`. The tag name is always the prefix `elix-` followed by the class name in kebab case, so `ComboBox` becomes `elix-combo-box`. These `/define` modules are a convenient way to use components in straightforward apps where you're more concerned about getting things done than having complete control, and the constraints of auto-registration are acceptable.


    This is, unfortunately, a breaking change for people that use Elix components in their projects. Generally speaking, if they want to preserve the previous auto-registering behavior, they need to replace `/src` in their component `import` paths with `/define`. The other modules in the library — for the extensive set of component mixins and helpers — aren't implicated in component registration, so still exist only in the `/src` folder as before. If you are migrating an Elix project, see the [release notes](https://github.com/elix/elix/releases/tag/8.0.0) for details on migrating to 8.0.


    Likewise, the pure HTML use of an Elix component should now reference the `/define` modules, like so:


    ```html

    <script type="module" src="./node_modules/elix/define/Carousel.js"></script>

    <elix-carousel>
      <!-- Carousel items such as img elements go here. -->
    </elix-carousel>

    ```


    These `/define` modules each simply import the corresponding `/src` module, derive a trivial subclass, export that, and register it. So the source for `/define/Carousel.js` is:


    ```js

    import Carousel from "../src/Carousel.js";

    export default class ElixCarousel extends Carousel {}

    customElements.define("elix-carousel", ElixCarousel);

    ```


    Why does this code derive a trivial subclass before registering it? Read on...


    ## Registering components with your own custom element tag names


    In any case where you are importing a component from a module, it seems like a good practice to _not_ assume you are the only one who will ever want to register that component. If you try to do the obvious thing:


    ```js

    // Naive approach

    import Carousel from "elix/src/Carousel.js";

    customElements.define("my-carousel", Carousel);

    ```


    that will run — but then you are effectively declaring that you will always be the only one who will ever want to register that class.


    That assumption could someday cause problems. If someone working in a different part of your project (or maybe you yourself, later) also tries to register `Carousel` as a component class, then one of you will lose the registration race, and end up trying to register a class that's already been registered. As noted earlier, that will throw an exception whose poor locality of reference may make it hard to diagnose.


    So a reasonable defensive pattern might be to always define a trivial subclass and register that:


    ```js

    // Defensive approach, lets other people register Carousel too

    import Carousel from "elix/src/Carousel.js";

    class MyCarousel extends Carousel {}

    customElements.define("my-carousel", MyCarousel);

    ```


    If you compare this with the code in the previous section, you'll see this is, in fact, the technique used by the Elix auto-registering components. That means you can decide to register the Elix `Carousel` as `my-carousel` _and_ still let someone else import the `elix-carousel` auto-registering component from the Elix `/define` folder. Since both are registering trivial subclasses, those two subclasses can be registered in the global custom element registry without triggering exceptions.


    If everyone on your project does the same with the components they import, you should always be able register a custom element class using the tag name you want.


    We can use the same technique to load different versions of the same Elix component. We've posted a [sample](https://github.com/elix/multiple-version-example) showing an Elix 7.0 component and an Elix 8.0 component running side-by-side.
2020-03:
  2020-03-09 Unsurprising code.md: >
    ---

    title: Unsurprising code and magic — optimizing for the first time vs the nth time

    date: 2020-03-09 16:00 UTC

    slug: unsurprising-code-and-magic-optimizing-for-the-first-time-vs-the-nth-time

    originalUrl: https://component.kitchen/blog/posts/unsurprising-code-and-magic-optimizing-for-the-first-time-vs-the-nth-time

    ---


    I’ve read some recent back-and-forth on Twitter regarding whether “magic” in a framework or library is something to be avoided or sought. We’ve spent a fair amount of time over the past year rewriting the core of the [Elix](https://elix.org) web components project to remove what we felt were magical aspects. I wanted to write down some reasoning for that, both to better understand my own instincts, and also as a way of explaining those changes in Elix.


    ## Writing for the 1st or nth time


    Dealing with code to solve a problem more than once invokes two opposing forces in tension: 1) how much effort someone needs to invest to understand, read, or write something the first time and 2) the effort someone needs to expend to understand, read, or write that same something for the nth time.


    We could represent the possible resolutions of this tension on a spectrum, where the left end represents optimizing for the first time and the right end represents optimizing for the nth time:


    <center>Optimize for first time ⟷ Optimize for nth time</center>


    The [Principle of Least Astonishment](https://en.m.wikipedia.org/wiki/Principle_of_least_astonishment), also known as the Principle of Least Surprise, suggests that “a component of a system should behave in a way that most users will expect it to behave; the behavior should not astonish or surprise users.” This property sounds highly relevant to the left side of the spectrum. We could characterize that end as “straightforward” or “unsurprising”; it also tends to be “flexible”. A negative characterization might be “verbose”.


    On the other end, positive characterizations of the right end of that spectrum might be “concise” and “efficient”; negative characterizations might be “surprising” or “hard to learn”, and possibly “inflexible”.


    Programmers evidently disagree on a definition for “magic”, but when I find code I personally consider to be magic, it’s at the right end of this spectrum.


    ## A coding tour of this spectrum


    Let’s walk through some examples of how an identical bit of functionality might be expressed at different points along this spectrum, working our way from left (first time, unsurprising) to right (nth time, potentially very surprising).


    Suppose we have a class `Foo` that wants to log a message “Hello” in its constructor, and the output should be “Foo: Hello”. (Let’s take it as a given that we want to create a class; if all we really want to do is log a message, we obviously don’t need a class.)


    ## Solution 1


    A completely straightforward solution at the far left end of the spectrum:


    ```js

    class Foo {
      constructor() {
        console.log("Foo: Hello");
      }
    }

    ```


    To a JavaScript developer, there is zero surprise in this code: it’s all standard JavaScript syntax and a single call to a well-known web platform API to log a string. When they run this code, the resulting console message will be 100% expected. This code is also completely flexible: if the developer wants to change the message, or log two messages, or whatever, they have the freedom to do so.


    In this trivial example, we could easily decide we want to stay on this unsurprising side of the continuum, and ask everyone on our project writing one of these classes to copy-and-paste this boilerplate into their code. That’s an eminently reasonable answer.


    ## Solution 2


    But maybe our little logging task gets more complex, and the amount of boilerplate creeps up to a few lines, or a dozen. In that case, we might want to factor things out. We want to trade off a tiny bit of conceptual load for brevity. We begin to consider how much support we want to give ourselves for writing this code for the nth time. We feel tugged along to the right of this spectrum.


    If logging begins to entail some complexity, we could create a utility function to log our message:


    ```js

    import log from "./log.js";


    class Foo {
      constructor() {
        log("Foo: Hello");
      }
    }

    ```


    This has the potential to be ever-so-slightly surprising to a new project member. They’ll be told to use the boilerplate, but they can’t be completely sure what `log` is going to do unless they read the source. We’re relying here on the obviousness of the library function name “log” to eliminate or reduce surprise. If we choose our name well, a dev will be able to imagine what the API will do. In the above case, seeing a console message will not be surprising.


    ## Solution 3


    There may come a point where we have other requirements for our classes, and see the introduction of a number of other API methods our devs should remember to call. We could introduce a bit of framework for these classes in the form of a base class to provide those APIs:


    ```js

    import Base from "./Base.js";


    class Foo extends Base {
      constructor() {
        super();
        this.log("Foo: Hello");
      }
    }

    ```


    The functionality is equivalent — although we’ve introduced a potential for a great deal more surprise because the constructor needs to call `super`. That could be helpful; there may be useful initialization the `Base` superclass can provide. Significantly, some of that useful functionality could be added to `Base` in the future, and the `Foo` class here would benefit _even if its code were left unchanged_.


    The tradeoff is that our class author now has a bit of framework under their feet, and may be a little surprised what it does, especially if that behavior changes underneath them without notice.


    ## Solution 4


    If devs on our project occasionally forget to call `this.log()`, one recourse would be to move the logging call to the superclass, and have the subclass pass the message-to-be-logged to the `super` constructor:


    ```js

    import Base from "./Base.js";


    class Foo extends Base {
      constructor() {
        super("Foo: Hello");
      }
    }

    ```


    If we’re using a type-checking system like TypeScript, we can define the signature of the `Base` class constructor such that the message is required. In that way, if the dev forgets to pass a message, or forgets to define a constructor entirely, the type-checker will produce a compile-time error. That should serve as an effective reminder.


    That’s a powerful degree of enforcement — but note that we’ve lost some of the clarity of our code. That string parameter to the `super` constructor has no obvious identity or purpose. When the superclass logs that message to the console, that could easily surprise the developer.


    Another point worth noting is that our solution is now less flexible. The downside of requiring a string parameter in the constructor is that the developer must always supply a string. If they don’t want to log a message, or want to log two messages, etc., they’ll have a harder time figuring out the best way to do so.


    ## Solution 5


    We could restore some clarity by introducing a property which the base class constructor will retrieve from the subclass:


    ```js

    import Base from "./Base.js";


    class Foo extends Base {
      get message() {
        return "Foo: Hello";
      }
    }

    ```


    Although the purpose of the string is now a bit clearer — it’s a message of some kind — its involvement in the class is quite unclear. From the above, it’s not apparent whether the `message` code gets called at all.


    The `message` property is essentially a new lifecycle method defined by the `Base` class. That’s a powerful technique, but the timing and behavior of a lifecycle method are opaque unless one reads the documentation. It’s unclear, for example, when that property will be retrieved, whether it might be retrieved once or multiple times, whether it should return the same value each time, whether the value will be cached, etc.


    ## Solution 6


    One thing we may notice as our team copies-and-pastes this boilerplate is that people may occasionally forget to update the name of the template class “Foo” in the message string. To address that, we could have the Base class itself obtain the class name from the subclass using reflection, e.g., by retrieving `this.constructor.name`.


    ```js

    import Base from "./Base.js";


    class Foo extends Base {
      get message() {
        return "Hello";
      }
    }

    ```


    This is more concise, but when the class logs “Foo: Hello”, it may take the dev a minute to figure out where the “Foo” part came from. That’s possibly surprising.


    What will be _extremely_ surprising is compiling or minimizing this class and discovering that it logs something like “a: Hello”. Build tools may transform source code, including class names, so the class `Foo` might be renamed `a` for brevity. This interference between library abstraction and build tools can often be baffling, especially if you’re familiar with only one layer or portion of a complex system.


    ## Solution 7


    If our team is writing dozens of these classes, we might decide to optimize for brevity even further. We might decide to use still-unstandardized JavaScript decorators, say:


    ```js

    import Base from "./Base.js";


    @message("Hello")

    class Foo extends Base {}

    ```


    This is quite concise. In exchange, it’s also quite limited. For one thing, since decorators are not yet standard JavaScript (as of this writing), we’re forcing the project to use a transpiler to process the decorator.


    For another thing, depending on how it’s implemented, the decorator may run with different timing than the earlier `message` getter. The decorator is also more constrained than a handwritten property getter. Depending on the size of our project, we might decide that such constraints are beneficial — or we might discover that they place significant limitations on a developer trying to handle edge cases.


    _[Update: @pmdartus pointed out that the `message` decorator would have to be imported from somewhere.]_


    ## Solution 8


    Suppose our team is now writing hundreds of these classes. Maybe those classes are now directly related to our company’s core business, and we make money for every class we write!


    We could create a domain-specific language just to crank these classes out. We could, say, define a JSON format, and put the following in `Foo.json`:


    ```json

    {
      "message": "Hello"
    }

    ```


    And then have a build tool consume this format to generate a class with the name and message we want. That’s extremely efficient, but it’s getting pretty hard to tell from the above what’s going to happen. This also requires a new developer to install and learn a proprietary tool, which is going to drive up the time required to write their first class.


    And the result is now quite rigid: since there’s no place here for the dev to contribute code, there’s no ability for them to accommodate unusual situations.


    ## Solution 9


    Why stop there? Let’s define a new file format that contains nothing but the message we want to log, and take the class name from the name of the file. We create a new file called `Foo` and put the message into it:


    ```

    Hello

    ```


    We compile this to generate a class, run that, and see “Foo: Hello” in the console. Was that expected?


    We’re working at a theoretical edge now, as every bit of information is tuned to our task. We’ve got a system that’s highly optimized for our needs. You may have a different definition for “magic”, but this solution feels pretty magic to me.


    This solution is probably quite surprising to the uninitiated. The line of “code” above certainly looks simple, but it’s impossible to guess what it will do until you run it.


    The solution would be extremely efficient for teams that need to crank out these classes, but the solution is also completely rigid. It can’t do anything other than what it’s designed to do.


    ## Visualizing this trade-off


    We can do some simplistic analysis of these solutions. For starters, while code size doesn’t equate directly to nth time efficiency, it’s a reasonable proxy. We could assume that having to write less code for the nth occurrence means being more efficient over the long term.


    It’s rather more difficult to represent the on-boarding work required to be able to read or write the code the first time, which gets to the very appeal of the left end of the spectrum. For the sake of argument, I imagined an exponential increase in the time required to get a new developer on board: the minutes required to read docs, install and learn build tools, ask questions when things don’t work, etc.


    <img src="/images/ck/Graph of code size and onboard time.png" style="max-width: 100%;">


    This representation doesn’t capture everything.


    - This doesn’t reflect the very conditions that drove our solution away from the original, simplest solution. We imagined that the amount of boilerplate required for a class would grow in size, which would inflate the size of the solutions at the left end of the graph.

    - We also imagined having to write many more classes, which would multiply the code size required for all solutions.

    - There’s no representation of solution flexibility here. It’s unclear how that could be represented: perhaps an assessment across multiple classes at how much they differ from each other, and some subjective measure of how important those differences are to the success of the project. However we measure it, flexibility is higher on the left and lower on the right.


    This entire example is contrived, but surely there are correlations at work like this whenever we’re resolving the 1st time/nth time tension.


    Significantly, that tension applies to reading and understanding code, not just writing and maintaining it. A solution at the left end of the spectrum might entail more code then one at the right end, but a new developer should be able to more readily understand what code at the left end does and how it actually works.


    I think it’s interesting to consider this spectrum through some analytical lens. Surely we could take a more data-driven approach to assessing where we are — and deciding where we want to be — on this spectrum.


    ## Reflection


    Positions along this spectrum are not objectively good or bad — it depends on what you’re trying to achieve and optimize for.


    In the case of the Elix project, we want to optimize for: a) a large audience of professional web developers that can quickly understand the code, and b) a high degree of flexibility. We want people to build a wide range of solutions with the project’s web components, so we prefer to preserve flexibility and possibly sacrifice nth time efficiency. In other words, we deliberately target the left end of this spectrum.


    As a case in point, we recently [deprecated an Elix helper function](https://github.com/elix/elix/releases/tag/11.0.0) that manipulated a web component template in a particular way. The helper allowed for efficiency, but was novel, and we ultimately felt that it wasn’t all that much more efficient than calling the underlying DOM API directly. We’d prefer to just encourage developers to call a DOM API they already know extremely well. We may someday feel that we understand the problem space better, and decide to better support nth time use by adding back such a helper, but for now we’re happy to keep the Elix code unsurprising.
2020-11:
  2020-11-02 Storybook.md: >
    ---

    title: Building a Storybook-like demo browser with web components — a much simpler way to get most of the benefits

    date: 2020-11-02 16:00

    slug: building-a-storybook-like-demo-browser-with-web-components-a-much-simpler-way-to-get-most-of-the-benefits

    originalUrl: https://component.kitchen/blog/posts/building-a-storybook-like-demo-browser-with-web-components-a-much-simpler-way-to-get-most-of-the-benefits

    ---


    I recently tried [Storybook](https://storybook.js.org/), a popular tool for browsing the demos and documentation for a UI component library. I think Storybook offers a good _user_ experience, but its _developer_ experience entails complexity out of proportion to its benefits. I tried creating a simpler web component library browser using web components, and am happy with the result.


    # Storybook: The good parts


    Storybook is a good idea. It’s helpful to be able to quickly browse a component library and see the range of what each component can do.


    <img src="/images/ck/Storybook.png" style="max-width: 100%;">


    Storybook offers useful features like:


    - Top-level UI for browsing stories.

    - Automated construction of an index of stories: given a project that contains story definition files, Storybook will generate a hierarchical outline of the stories defined in those files.

    - Router that updates the page URL to deep-link to the currently-selected story, making it easy to share links to specific demos.

    - Search facility that filters the index to those stories whose titles contain the desired text.

    - Miscellaneous tools: zoom in/out, change background color, change viewport width to preview mobile device results, maximize the demo viewport, open demo in a new window, copy the current URL for sharing.

    - Inline view of the source code used to create the adjacent demo.

    - Property inspector panel (“Controls”) that lets the user dynamically change the properties of a demo component.

    - API documentation generation.

    - An add-on ecosystem.


    # How to define a demo written in HTML? Hmm…


    My own experiments with Storybook did not pan out, and I found it too heavy for the relatively simple problem I was trying to solve. (You can find my notes from that experience in an appendix following this post.)


    For me, the crucial turning point came when I was trying to define my first story demo in Storybook. Since my project is creating plain web components, I just had a bit of regular HTML I wanted to use for a story.


    But to define my HTML demo in a common Storybook configuration, I had to create a markdown document of some flavor I’d never seen before (“.mdx”), and then put something like this in it:


    ````

    ```js

    export function MyElement() {
      return html`<my-element>Hello, world.</my-element>`;
    }

    ```

    ````


    Here we've got HTML inside of a lit-html JavaScript template literal inside of a JavaScript function inside of a JavaScript code block inside of a markdown document.


    Whew! All that to display some HTML.


    Huh. If only web browsers gave us some native way to write HTML…


    Oh, right — *they do!* It’s called HTML.


    What I want to write is an .html file that includes the demo as plain HTML:


    ```html

    <my-element>Hello, world.</my-element>

    ```


    # A web component library browser made of web components


    Stepping back, the Storybook application runtime UI is actually not that complex. There are certain useful UI elements that appear on Storybook pages, like the story index and the “View code” buttons. The web already provides an easy, standard way to implement reusable UI elements: web components.


    I built a simple component library browser that achieves perhaps 60% of what I want out of Storybook, but in a more straightforward fashion using web components. It's meant for local development, but I've quickly posted an unbundled version of that if you want to see the [Elix web component library demos](https://component.kitchen/demos/).


    The first iteration closely followed the Storybook UI:


    <img src="/images/ck/Story browser with Storybook styles.png">


    Building this with web components, and generally using the web platform more directly, makes it possible to do much (not all) of what Storybook does much more simply and flexibly.


    - Demo/documentation pages are plain .html files. You can write these however you want, and serve them with any web server you want.

    - A `<story-browser>` component on the index page handles the top-level UI pattern: navigation is shown on the left, and the demo page is shown on the right in an `<iframe>`.

    - You define the set of demos by placing a handwritten list of plain `<a>` links as children inside the `<story-browser>` component. Since HTML is the composition medium, you can write whatever HTML you want there; you're not limited to links.

    - The `<story-browser>` component includes a tiny router that picks off the path from the URL and hands that to the iframe.

    - Once a demo is loaded, the story browser component extracts the demo page title and shows that as the document title in the browser's title bar. This extracts maximum value out of existing HTML metadata.

    - The component also highlights the current demo in the navigation index by applying a CSS class you can style however you want.

    - Like the Elix components, the story browser component itself contains no aesthetic styling. Instead, you can style the interior shadow parts of that component using standard CSS `::part` syntax. (See a different styling example below.)

    - Because you define the demos in plain .html files, you can always load the demo pages directly to cut out the story-browsing UI. That minimizes the code that might confound your debugging of the component itself. As a shortcut, I added a little close box on the navigation pane that navigates you to the current demo as a top-level page.

    - Because this is just HTML, all the native HTML features work. You can Command-click on links to open them in a new window, the links are fully accessible, etc.

    - The existing [Elix documentation site](https://component.kitchen/elix) already has a way of inlining the HTML demos into component documentation, and I could leave all that infrastructure intact. The same demos can be used in both places.

    - For another web component library, I created a simple `<story-demo>` web component that can be used to wrap an individual demo. This `<story-demo>` component shows the demo, and also extracts the demo markup (i.e., its own light DOM content) and renders that markup as viewable code. This addresses Storybook's "Show Code" feature, without any need for build-time tooling. (I'm not using that `<story-demo>` component in the Elix demos yet.)

    - These web components for browsing stories are written in plain JavaScript that requires no tooling and no build step.

    - I happened to write the story components in Elix, which has no dependencies of its own.

    - Out of curiosity, I rewrote the `<story-browser>` component in [vanilla JavaScript with zero dependencies](https://gist.github.com/JanMiksovsky/6cc2d7289804132717c0cbd57c5dd917). Minified (but not gzipped), this component was 2050 _bytes_ in size. This is contrast to the hundreds of megs of dependencies pulled in by a straightforward Storybook installation. The web component is just not doing very much, which is exactly the point.


    Since there's not much going on here, there's very little new that someone has to learn to use it. If someone needs to be taught how to do something in HTML — then they're learning something useful for the rest of their career! The HTML pages they create with this approach are as future-proof tech as one can ask for, and are simple enough to work until the heat death of the universe.


    I eventually changed the page styles to get a plainer look which I felt put more attention on the demos:


    <img src="/images/ck/Story browser.png">


    # What I left out


    Here are some of the Storybook features I did _not_ implement:


    - Built-in browser features. Every browser already has tools like Zoom In/Out and Share Link.

    - Generating a hierarchical index of demos. Even for the large collection of components in the Elix project, it's just not that hard to keep a handwritten list of links up to date. Handwritten HTML preserves a huge range of freedom. On the rare happy occasion where someone is adding a new demo, their brain can insert the link into its proper position in the alphabetical hierarchy. If the Elix project ever decides to programmatically generate the demo index, that could be done in a minimally-invasive fashion via a simple build script that generated the links in some static form that could be referenced by the `<story-browser>` component.

    - Search. This would be nice to have at some point, and wouldn't be particularly hard. That would be a nice web component on its own!

    - Story files. The Storybook server can be viewed as a kind of templating language for translating stories into HTML files. This can help avoid the boilerplate that is a necessary part of working with loose HTML files. That said, boilerplate is not necessarily a terrible thing. Each of the loose HTML demo pages in Elix's demos folder contains some identical boilerplate which, very occasionally, must be tweaked. Doing so at design time is easy enough via a find-and-replace operation in any modern code editor. That feels much, much simpler than introducing a templating system.

    - Run-time UI controls to let a user manipulate component property values in the browser. This might be the nicest Storybook feature to add, but I'd prefer to wait until there's a standard way for having a component project describe a component's API. In the meantime, if you're already the kind of developer who can create a web component, then it's probably not challenging for you to manually create demos with controls that adjust component properties. And any run-time component-editing UIs could be nicely packaged up as web components.

    - Generating API documentation. The Elix project already has a way of generating documentation for its external developer site, so the project didn't need that.


    Defining the key story browsing UI in web components lets you maintain complete control of the top-level pages and project infrastructure. The separate aspects of this approach are simple, small, loosely-coupled pieces that can easily be replaced as needs change.


    It'd be pretty interesting to see this approach built out into an ecosystem of web components and other simple parts which work well together. That could ultimately comprise a compelling, web-oriented alternative to Storybook.


    # Conclusion


    A component library browser like Storybook is a useful tool. After developing the initial story browsing components for the Elix library, I discovered small UI regressions in a couple of demos, simply because it was easier for me to quickly experience all the demos in action.


    But I think the benefits of a component library browser can be achieved in ways that work with the grain of the web, squeezing every advantage out of solid technology you already know well.


    &nbsp;


    <hr>


    ### Appendix: Notes on trying Storybook


    My goal in writing the above post was not to focus on Storybook, but on addressing what it does in a simpler way. From what I can see online, many people love Storybook. If that's you, that's great! I'm glad you've found a tool that meets your needs.


    If you're _considering_ adopting Storybook, and are interested in knowing ahead of time what its downsides might be, I'm including my notes from my experiments with it here. Your Mileage May Vary.


    1. Storybook appears to have been originally designed to browse React component libraries. It shares with React an approach that covers up much of the browser platform with proprietary JavaScript abstractions in the name of developer ergonomics. I am personally skeptical of that approach.

    1. Storybook is a full-blown application server in its own right that must be accommodated inside the host project.

    1. Installing and configuring the Storybook application _in an existing project_ is a non-trivial task.

    1. Various project generators exist that can pre-populate a project with the required files. These all assume that you don't want to understand how the resulting application actually works. They create a lot of files, tell you how to start the application, and then you’re on your own.

    1. The results of running one of these project generators are, in my experience, rigid and brittle. Attempting to diverge from the generated project is likely to break the Storybook application in ways which are difficult to diagnose or resolve.

    1. Storybook is still focused primarily on React development. There are project generators aimed at web component developers, but these don’t yet feel like first-class citizens of the Storybook ecosystem.

    1. To the extent Storybook does support web component development, it focuses on frameworks like Polymer/lit-element rather than plainer JavaScript web component development.

    1. The extensive toolchain imposed by Storybook, and the run-time environment of the Storybook UI, can complicate debugging. When you're trying to debug a UI element, any other UI code on the page can make it harder to isolate the problem. So while Storybook may make it easier for designers and other developers to browse your component, it can get in the way of letting you actually create those components in the first place.

    1. Storybook forces use of a build process, even if the underlying web components don’t need a build process. Even for a minimal web component project, Storybook builds are slow.

    1. Storybook adds a set of huge set of files. Depending on which starting point you use, the configuration can be massive.

    1. Storybook has an extensive set of configuration options, add-ons, etc. It’s probably possible to get whatever UI you want in a Storybook application. However, the _way_ you configure UI in Storybook will be substantially different than how you would create the exact same UI in an application of your own.

    1. In other words, learning how to do UI inside of a Storybook app isn’t teaching you anything about building app UI outside of Storybook. When the day comes that you decide to present your component library in any other way — or work on literally anything else — your Storybook knowledge will not help you.

    1. Storybook appears aimed first at local developer use, and only secondarily at the task of making documentation for internal or external consumers of component libraries. Many organizations creating UI components need both.


    Stepping back, Storybook is essentially a complete CMS (Content Management System). It's reinventing CMS infrastructure with the presumption that browsing web component libraries is a special task that deserves its own ecosystem. I question that premise.


    Even if the premise were true, companies that provide web component libraries _already have a CMS_ for everything else they do. Storybook isn’t large enough to encompass an entire corporate site, and it’s doubtful that companies would want to switch their developer site CMS just to be able to offer a prebuilt web component library browsing UI.


    So if your company is using Storybook and ever decides to make its components available to external developers, you will have to reconcile your internal and external documentation platforms. You will need to either: a) shoehorn Storybook into your developer site, b) reimplement the Storybook functionality in the context of your existing developer site so people can browse the same demos there, or c) rewrite all your demos and documentation in whatever form your existing site needs, and then try to keep those in sync going forward. None of those options is attractive.


    Perhaps the most puzzling thing to me is that, for a project designed to showcase UI component libraries, Storybook itself is not presented as a collection of UI components. It’s built internally from components, presumably React components, and it looks like the project is beginning to make that UI componentry available to developers. But components are still not the dominant paradigm for working with Storybook.


    I spent half a day trying to get Storybook working in the context of an existing web component project, with an eye towards someday using it to document the general-purpose components in the [Elix web component library](https://component.kitchen/elix).


    - I tried several different Storybook application generators, none of which worked out of the box in the context of my existing project.

    - The web component project I had in mind uses TypeScript, which complicates Storybook configuration.

    - That project uses rollup for bundling, which also complicates configuration. Most Storybook projects and documentation document the use of webpack.

    - I was eventually able to find an example of a Storybook configuration using TypeScript and rollup, but it was still very hard to configure Storybook inside the context of an existing application. Wrangling a tool like Storybook into a complex, existing project is next to impossible unless you understand a great deal about the tool. From the documentation, I could not easily form an accurate model of how Storybook performs its core functions.

    - I ultimately had to create a new project from scratch so just to get something I could play with.

    - The node_modules folder of the new project was 240MB in size. The size of node_modules isn't the main metric to use in evaluating tools, but I think its order of magnitude can be a useful proxy for complexity. However you slice it, 100s of megabytes of dependencies suggests that this is a complex answer to what seems like a simple problem. The web component approach above is smaller in size by 5 orders of magnitude.

    - I was forced to use much, much more technology than I wanted. Among other things, the particular Storybook configuration I could get to work wanted me to create story demos using lit-html. I don't use lit-html, and I had no intention of adopting it just to be able to get my web components rendering in Storybook. I could not easily find documentation on how to create demos in plain JavaScript or HTML.

    - A colleague who loves Storybook and is much cleverer than I am eventually pointed me at their own Storybook project, which was better suited to plain web component development. It is wonderful to see that such a thing is possible. But I remain wary of a tool where my primary use case requires sacred knowledge instead of being the tool's primary use case.
