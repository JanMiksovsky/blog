<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2022-10-11 17:26"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>QuickUI</title>
<link>http://blog.quickui.org</link>
<description>Looking beneath the hood of web user interfaces</description>
<pubDate>Tue, 11 Oct 2022 17:26:38 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>http://blog.quickui.org</wp:base_blog_url>
<wp:author>
  <wp:author_id>19069150</wp:author_id>
  <wp:author_login>janmiksovsky</wp:author_login>
  <wp:author_email>jan@miksovsky.com</wp:author_email>
  <wp:author_display_name><![CDATA[Jan Miksovsky]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[Jan]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[Miksovsky]]></wp:author_last_name>
</wp:author>
<wp:category>
  <wp:term_id>454541</wp:term_id>
  <wp:category_nicename>quetzal</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Quetzal]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>5878</wp:term_id>
  <wp:category_nicename>releases</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Releases]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>1</wp:term_id>
  <wp:category_nicename>uncategorized</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>12762127</wp:term_id>
  <wp:category_nicename>web-components</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Web Components]]></wp:cat_name>
</wp:category>
<generator>http://wordpress.com/</generator>
<image>
		<url>http://s0.wp.com/i/buttonw-com.png</url>
		<title>QuickUI</title>
		<link>http://blog.quickui.org</link>
	</image>
	<item>
  <title><![CDATA[About]]></title>
  <link>http://blog.quickui.org/about/</link>
  <pubDate>Wed, 25 Jan 2012 18:17:33 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">http://quickui.wordpress.com/?page_id=2</guid>
  <description/>
  <content:encoded><![CDATA[This blog covers various aspects of developing web user interfaces, and is a development-oriented companion to the <a href="http://miksovsky.blogs.com/flowstate">flow|state</a> design blog. The blog originally covered topics related to the <a href="http://quickui.org">QuickUI</a> framework, but now generally covers component-oriented web UI development.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2</wp:post_id>
  <wp:post_date>2012-01-25 18:17:33</wp:post_date>
  <wp:post_date_gmt>2012-01-25 18:17:33</wp:post_date_gmt>
  <wp:post_modified>2013-11-26 09:12:29</wp:post_modified>
  <wp:post_modified_gmt>2013-11-26 17:12:29</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>about</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19069150]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7c26bb5c268736f67e863dd542374337</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1310a979e202b524ece26d6f7424b75c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_df3e7e96fc0b7d06769387e51db92a41</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_24ec094848512822dcea11a3035794a8</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2bf67333ff09045ed69f950218727dec</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9989182385245ce4f17866163f4c27fb</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>7419</wp:comment_id>
    <wp:comment_author><![CDATA[Jan Miksovsky]]></wp:comment_author>
    <wp:comment_author_email>jan@miksovsky.com</wp:comment_author_email>
    <wp:comment_author_url>http://quickui.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>67.185.162.218</wp:comment_author_IP>
    <wp:comment_date>2015-05-20 21:53:53</wp:comment_date>
    <wp:comment_date_gmt>2015-05-21 04:53:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[lbercht: Thanks for your kind words. While QuickUI itself didn't succeed, many of the ideas I developed on that project are now finding their ways into several new projects of mine, including Basic Web Components (https://github.com/basic-web-components/basic-web-components). The component-oriented web is taking some time to come together, but it will definitely happen!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>19069150</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1432184034]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1432184034.0384271144866943359375;s:5:"event";s:9:"check-ham";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1432184034]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>7406</wp:comment_id>
    <wp:comment_author><![CDATA[lbercht]]></wp:comment_author>
    <wp:comment_author_email>lbercht@probyte.com.br</wp:comment_author_email>
    <wp:comment_author_url>http://lbercht.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>201.81.66.136</wp:comment_author_IP>
    <wp:comment_date>2015-05-20 06:52:33</wp:comment_date>
    <wp:comment_date_gmt>2015-05-20 13:52:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hello,

Congratulations on your magnificent work. I have deeply studied the subject "UI development", since I started with Clipper and then Visual Basic. It is somewhat strange that the concept of visual components for UI, as used by VB since 1993, has been overlooked for so long. You approach, QuickUI,  is undoubtedly one of the ways for building UI components for the web, which unfortunately faces the HTML encapsulating limitations. Polifills as Polymer, are attempts to use the shadow DOM as an encapsulation mechanism. In my opinion, all this occurs because HTML does not support the concept of OOP.
It is a shame to see that your work did not flourished at the rhythm it deserved.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1432183828]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1432183828.942717075347900390625;s:5:"event";s:15:"status-approved";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1432129953.8978130817413330078125;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"lbercht";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1432183828]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1432134787.257339000701904296875;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"lbercht";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[QuickUI 0.8.8 released]]></title>
  <link>http://blog.quickui.org/2012/01/30/quickui-0-8-8-released/</link>
  <pubDate>Mon, 30 Jan 2012 18:18:05 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">http://quickui.wordpress.com/?p=5</guid>
  <description/>
  <content:encoded><![CDATA[A small breaking change in this release:
<ul>
	<li>The "name" attribute on top-level &lt;Control&gt; tags has been changed to "className". Before:</li>
</ul>
<blockquote>&lt;Control name="MyControl"&gt;</blockquote>
Now:
<blockquote>&lt;Control className="MyControl"&gt;</blockquote>
This change allows some consistency with the run-time function className(), and also reduces the chances for confusion if a Control class itself wants to define a "name" property.

This is a breaking change, so markup users will need to download/build the latest qb tool, and force a rebuild of their project.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>5</wp:post_id>
  <wp:post_date>2012-01-30 10:18:05</wp:post_date>
  <wp:post_date_gmt>2012-01-30 18:18:05</wp:post_date_gmt>
  <wp:post_modified>2012-01-30 10:18:05</wp:post_modified>
  <wp:post_modified_gmt>2012-01-30 18:18:05</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quickui-0-8-8-released</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19069150]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Updated tutorial for JavaScript-only QuickUI development]]></title>
  <link>http://blog.quickui.org/2012/02/01/updated-tutorial-for-javascript-only-quickui-development/</link>
  <pubDate>Wed, 01 Feb 2012 16:00:00 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">https://quickui.wordpress.com/?p=14</guid>
  <description/>
  <content:encoded><![CDATA[The new <a href="http://quickui.org/tutorial/">QuickUI Tutorial</a> shows you how to use QuickUI in plain JavaScript, without the need for a proprietary markup language or client-side compiler.

The tutorial is divided into two sections: the first shows how you can use QuickUI controls in your site (e.g., one mostly constructed via some other tool), and the second shows how to create your own QuickUI controls. The tutorial is built around small interactive coding exercises, each of which demonstrates some aspect of the framework. Due to current limitations of the code editor, the tutorial is not functional in IE8 and Safari. It works fine in Chrome, Firefox, and IE9.

The existing markup tutorial has been moved to a new <a href="http://quickui.org/markup/">Markup</a> section that also now hosts the Downloads page for the client-side compiler. This reorganization helps emphasize the fact that the use of QuickUI markup is an optional, somewhat advanced mode of use; markup is no longer required to use or create QuickUI controls.

This tutorial represents the first of several forthcoming steps to make QuickUI more appealing to a wider JavaScript audience.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>14</wp:post_id>
  <wp:post_date>2012-02-01 08:00:00</wp:post_date>
  <wp:post_date_gmt>2012-02-01 16:00:00</wp:post_date_gmt>
  <wp:post_modified>2012-01-30 16:54:21</wp:post_modified>
  <wp:post_modified_gmt>2012-01-31 00:54:21</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>updated-tutorial-for-javascript-only-quickui-development</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19069150]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>4</wp:comment_id>
    <wp:comment_author><![CDATA[teh (@teh)]]></wp:comment_author>
    <wp:comment_author_email>teh@twitter.example.com</wp:comment_author_email>
    <wp:comment_author_url>http://twitter.com/teh</wp:comment_author_url>
    <wp:comment_author_IP>70.173.179.216</wp:comment_author_IP>
    <wp:comment_date>2012-03-15 07:53:42</wp:comment_date>
    <wp:comment_date_gmt>2012-03-15 14:53:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The tutorial link 'QuickUI + jQuery UI' points to a non-existent document: http://quickui.org/tutorial/jQuery-UI.html]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[8567252]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1331830644]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1331830644.929";s:7:"message";s:51:"janmiksovsky changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[twitter]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[http://a0.twimg.com/profile_images/351148056/JourneyIntoFear_WP_1024x768_042820051023_normal.jpg]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1331823223.1697";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2012-03-15 14:53:42]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>5</wp:comment_id>
    <wp:comment_author><![CDATA[janmiksovsky]]></wp:comment_author>
    <wp:comment_author_email>jan@quickui.org</wp:comment_author_email>
    <wp:comment_author_url>http://quickui.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>67.40.211.147</wp:comment_author_IP>
    <wp:comment_date>2012-03-15 10:08:30</wp:comment_date>
    <wp:comment_date_gmt>2012-03-15 17:08:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[teh: Thanks for letting me know. This should be fixed now.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>19069150</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1331831312]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1331831313.7482";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2012-03-15 17:08:30]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Catalog control documentation now includes description of control properties and other methods]]></title>
  <link>http://blog.quickui.org/2012/02/14/catalog-control-documentation-now-includes-description-of-control-properties-and-other-methods/</link>
  <pubDate>Tue, 14 Feb 2012 23:44:56 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">https://quickui.wordpress.com/?p=25</guid>
  <description/>
  <content:encoded><![CDATA[<p>The documentation for the QuickUI Catalog, which now contains 60+ controls, has been updated to include documentation of each class' properties and methods.</p>
<p>Previously, the only way to see how to use a control was to read the original control source code on GitHub. Now the descriptions for a class' members are extracted from the source, and then used to populate the documentation page for that class. For example, the <a href="https://github.com/JanMiksovsky/quickui-catalog/blob/master/quickui.catalog/ListBox.qui">ListBox source</a> is parsed to create the <a href="http://quickui.org/catalog/ListBox/">ListBox</a> documentation page.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>25</wp:post_id>
  <wp:post_date>2012-02-14 15:44:56</wp:post_date>
  <wp:post_date_gmt>2012-02-14 23:44:56</wp:post_date_gmt>
  <wp:post_modified>2012-02-14 15:44:58</wp:post_modified>
  <wp:post_modified_gmt>2012-02-14 23:44:58</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>catalog-control-documentation-now-includes-description-of-control-properties-and-other-methods</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title><![CDATA[QuickUI 0.8.9 released]]></title>
  <link>http://blog.quickui.org/?p=29</link>
  <pubDate/>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">http://blog.quickui.org/?p=29</guid>
  <description/>
  <content:encoded><![CDATA[<p>A minor update.</p><ul><li>To facilitate controls that want to perform their own layout (HorizontalPanels, VerticalPanels, PanelWithOverlfow</li></ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>29</wp:post_id>
  <wp:post_date>2012-03-16 22:12:19</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>2012-03-16 22:12:19</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title><![CDATA[QuickUI 0.8.9 released]]></title>
  <link>http://blog.quickui.org/?p=30</link>
  <pubDate/>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">http://blog.quickui.org/?p=30</guid>
  <description/>
  <content:encoded><![CDATA[<p>A minor update.</p><ul><li>To facilitate controls that want to perform their own layout, controls can bind to a new <a href="http://quickui.org/docs/control-events.html#layout">layout</a> event. Controls like HorizontalPanels, VerticalPanels, PanelWithOverlfow</li></ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>30</wp:post_id>
  <wp:post_date>2012-03-16 22:13:19</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>2012-03-16 22:13:19</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title><![CDATA[QuickUI 0.8.9 released]]></title>
  <link>http://blog.quickui.org/?p=31</link>
  <pubDate/>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">http://blog.quickui.org/?p=31</guid>
  <description/>
  <content:encoded><![CDATA[<p>A minor update.</p><ul><li>To facilitate controls that want to perform their own layout, controls can bind to a new <a href="http://quickui.org/docs/control-events.html#layout">layout</a> event. Catalog controls like HorizontalPanels, VerticalPanels, PanelWithOverlfow, and PersistentPanel use this to recalculate the layout of their contents in response to a change in window size.</li></ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>31</wp:post_id>
  <wp:post_date>2012-03-16 22:14:19</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>2012-03-16 22:14:19</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title><![CDATA[QuickUI 0.8.9 released]]></title>
  <link>http://blog.quickui.org/?p=32</link>
  <pubDate/>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">http://blog.quickui.org/?p=32</guid>
  <description/>
  <content:encoded><![CDATA[<p>A minor update.</p><ul><li>To facilitate controls that want to perform their own layout, controls can bind to a new <a href="http://quickui.org/docs/control-events.html#layout">layout</a> event. Catalog controls like HorizontalPanels, VerticalPanels, PanelWithOverlfow, and PersistentPanel use this to recalculate the layout of their contents in response to a change in window size.</li><li>A companion event called <a href="http://quickui.org/docs/control-events.html#sizeChanged">sizeChanged</a> can be triggered by a control that wants to cooperatively let its parents know about a change in the control's size.</li><li>A helper Control </li></ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>32</wp:post_id>
  <wp:post_date>2012-03-16 22:15:19</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>2012-03-16 22:15:19</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title><![CDATA[QuickUI 0.8.9 released]]></title>
  <link>http://blog.quickui.org/?p=33</link>
  <pubDate/>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">http://blog.quickui.org/?p=33</guid>
  <description/>
  <content:encoded><![CDATA[<p>A minor update.</p><ul><li>To facilitate controls that want to perform their own layout, controls can bind to a new <a href="http://quickui.org/docs/control-events.html#layout">layout</a> event. Catalog controls like HorizontalPanels, VerticalPanels, PanelWithOverlfow, and PersistentPanel use this to recalculate the layout of their contents in response to a change in window size.</li><li>A companion event called <a href="http://quickui.org/docs/control-events.html#sizeChanged">sizeChanged</a> can be triggered by a control that wants to cooperatively let its parents know about a change in the control's size.</li><li>A helper Control method called <a href="http://quickui.org/docs/control-prototype-methods.html#checkForSizeChange">checkForSizeChange()</a> can be called if a control has updated its contents and there's the possibility that its size has changed. The helper records the control's last know</li></ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>33</wp:post_id>
  <wp:post_date>2012-03-16 22:16:19</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>2012-03-16 22:16:19</wp:post_modified>
  <wp:post_modified_gmt>0000-00-00 00:00:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title><![CDATA[QuickUI 0.8.9 released]]></title>
  <link>http://blog.quickui.org/2012/03/16/quickui-0-8-9-released/</link>
  <pubDate>Sat, 17 Mar 2012 05:16:45 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">http://blog.quickui.org/2012/03/16/quickui-0-8-9-released/</guid>
  <description/>
  <content:encoded><![CDATA[<p>A minor update.</p><ul><li>To facilitate controls that want to perform their own layout, controls can bind to a new <a href="http://quickui.org/docs/control-events.html#layout">layout</a> event. Catalog controls like HorizontalPanels, VerticalPanels, PanelWithOverlfow, and PersistentPanel use this to recalculate the layout of their contents in response to a change in window size.</li><li>A companion event called <a href="http://quickui.org/docs/control-events.html#sizeChanged">sizeChanged</a> can be triggered by a control that wants to cooperatively let its parents know about a change in the control's size.</li><li>A helper Control method called <a href="http://quickui.org/docs/control-prototype-methods.html#checkForSizeChange">checkForSizeChange()</a> can be called if a control has updated its contents and there's the possibility that its size has changed. The helper records the control's last known size and, if the size has indeed change, raises the aforementioned sizeChanged event.</li></ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>34</wp:post_id>
  <wp:post_date>2012-03-16 22:16:45</wp:post_date>
  <wp:post_date_gmt>2012-03-17 05:16:45</wp:post_date_gmt>
  <wp:post_modified>2012-03-16 22:16:45</wp:post_modified>
  <wp:post_modified_gmt>2012-03-17 05:16:45</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quickui-0-8-9-released</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:comment>
    <wp:comment_id>9</wp:comment_id>
    <wp:comment_author><![CDATA[Chris]]></wp:comment_author>
    <wp:comment_author_email>chrisrussi@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>198.181.13.254</wp:comment_author_IP>
    <wp:comment_date>2012-04-05 15:34:38</wp:comment_date>
    <wp:comment_date_gmt>2012-04-05 22:34:38</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Jan,
I'm going through your tutorial and I am amazed by how intuitive is your quickui framework.  I first read about it on this blog post: http://nerdplusart.com/html-needs-custom-components-and-what-to-do-about-it .

I'm currently building a single page application that is based on Chaplin, backbone.js, twitter bootstrap, jquery and is using handlebars templates.  There was something about the simplicity and code friendly way that HTML controls are created in quickui that is making me want to adopt its use in my application.  But, I'm curious if you are encouraging just the use of javascript or a combination of quickui markup, css and javascript?  I haven't gone through all your tutorials, but, I would like to know your opinion.  One thing I'm noticing is that my app will be dynamic, so, I don't see myself coding "static" values as is done in the tutorials.  So, my hope is that there is a more advance way in quickui to do binding or at least looping to generate lists, menus, tabs, et cetera.

It would be tremendous to see a sample application.  Is there one available?  

I'm interested in one of the advanced topics quickui+jquery ... but, it looks like the link is broken.

Thank you for sharing this framework with us.

Best regards,
Chris]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1333665278.5757";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1333665465]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1333665465.902";s:7:"message";s:51:"janmiksovsky changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2012-04-05 22:34:38]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10</wp:comment_id>
    <wp:comment_author><![CDATA[janmiksovsky]]></wp:comment_author>
    <wp:comment_author_email>jan@quickui.org</wp:comment_author_email>
    <wp:comment_author_url>http://quickui.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>67.40.211.147</wp:comment_author_IP>
    <wp:comment_date>2012-04-05 17:38:13</wp:comment_date>
    <wp:comment_date_gmt>2012-04-06 00:38:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Chris,

Thanks for your comments — glad you like what you see!

QuickUI is certainly intended for use in dynamic AJAX apps. Cozi.com uses QuickUI for their Meal Planner feature in just that way. QuickUI constructs the View in an MVP pattern to display and edit data from the server. Unfortunately, the source for that app can't be made public.

The tutorial uses static examples for simplicity, but of course you're right that it would be helpful to have a more complete dynamic sample app. It's always a challenge to come up with an example that's interesting enough to be illustrative but not so complex that it's overwhelming.

Regarding looping: While working on the Cozi Meal Planner, the QuickUI controls typically had property getter/setters that had the same value type as the data in the Model. Most of the list-ish controls derived from the QuickUI Catalog control called List, so they automatically picked up basic looping. E.g., if the Model had an array of recipes or whatever, then the RecipeList control would have an items() getter/setter that accepted an array of recipe objects. An accompanying Recipe control would be set as the class for items in that list. The List base class would take care of looping over the array, creating the required number of Recipe controls, and passing the recipes in the array to the corresponding controls.

If you're interested in a sample showing something like that, I'll definitely that up on my priority list. I've been playing with a canonical blog reader example, or might take a shot at a To Do list example mirroring the ones at http://addyosmani.github.com/todomvc/. If you want to share more details about the app you're dealing with, feel free to send me email at jan at quickui dot org and I can provide some suggestions for getting started.

The page at http://quickui.org/tutorial/jQuery-UI.html should be back again. Some part of my pipeline seems to have messed up the casing on that URL. Sorry about that; I hope I just fixed it for good.

-Jan]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>19069150</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1333672694]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1333672695.1951";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2012-04-06 00:38:13]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>11</wp:comment_id>
    <wp:comment_author><![CDATA[Chris]]></wp:comment_author>
    <wp:comment_author_email>chrisrussi@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>198.181.13.254</wp:comment_author_IP>
    <wp:comment_date>2012-04-06 10:16:51</wp:comment_date>
    <wp:comment_date_gmt>2012-04-06 17:16:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Jan,
You understood my question completely!  Your example of the List control was exactly what I was looking for, apparently I hadn't gotten that far in the tutorials.  The fact that you're talking about Models and MVP tells me that quickui might work with backbone.js.

I am very familiar with the TODO list example with backbone.js, which is one of the samples on the link you provided.  And I also recognize addyosmani as someone who has written a lot about backbone.js and single page applications.  The TODO sample was the sample that got me started with the idea of building a single page application using backbone.js.  It has been a long road since then and I eventually discovered Chaplin https://github.com/moviepilot/chaplin which puts an MVC framework on top of backbone.js.  

I would love to see a TODO sample written in quickui :-) ...  To be honest, the many approaches to building JavaScript apps is both exciting and overwhelming at the same time. I've already started working with quickui and I'm trying to build a modal spinner control to display when collections are loading.  I am using your modal control.  I thought this would be a simple enough control to get my feet wet.  I still don't know enough about your markup and compiler to know how to use it yet, I haven't studied it enough. But, the picture I am getting is that the quickui markup and javascript work hand in hand to create the desired controls.  But, based on your blog posts, I am not clear if everything can be done with pure JavaScript or not.  Also, what approach do you suggest is best; pure JavaScript or a mixture of quickui markup and JavaScript?

When Robbie (at nerdplusart) talked about how you used to work at Microsoft and how you were instrumental in building the foundation for what would become the WPF controls I realized you must be seriously talented.  The thing I loved most about WPF and Silverlight was how the markup converted to controls.  As a developer I saw the XAML markup as something extremely powerful.  I worked with WPF and Silverlight for a few years until about a year ago when I switched over to HTML/JavaScript/CSS3. 

The application I'm working on is just a sample app.  It is meant to learn the best approach to building JavaScript single page applications.  The models I'm focusing on is Projects and Projects have Tasks. Tasks can be viewed independently and also coupled with their projects.  Also, I am adding simple Notes, where Notes have a title and a body and associated Tags.  I felt this was complex enough to test my abilities with JavaScript before moving forward with something more complex.  I am using the new asp.net mvc 4 webapi as a restful service for my client app.

Thank you for the link to cozi.com.  I hadn't heard of it before, but, I've wanted an app like this for the longest time!  :-)   I will definitely check it out and pay special attention to the meal planner.  My wife is always planning meals for the week ahead.

Best regards,
Chris]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1333732611]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1333732611.7783";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2012-04-06 17:16:51]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12</wp:comment_id>
    <wp:comment_author><![CDATA[janmiksovsky]]></wp:comment_author>
    <wp:comment_author_email>jan@quickui.org</wp:comment_author_email>
    <wp:comment_author_url>http://quickui.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>67.40.211.147</wp:comment_author_IP>
    <wp:comment_date>2012-04-06 11:23:52</wp:comment_date>
    <wp:comment_date_gmt>2012-04-06 18:23:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[QuickUI can be used either in pure JavaScript, or markup (which gets compiled to JavaScript), or a mixture of both. Which route is best really depends on you and the other people who might be working in your codebase. The markup compiler itself currently requires the .NET runtime, which is a deal-breaker for some developers, although if you're a WPF fan, maybe .NET is just right. I've used the pure JavaScript approach in the main tutorial mostly so that the reader can do the exercises directly in the browser.

I tend to use the markup approach myself because I find the markup makes it easier for me to organize my code. In particular, I find the ability to have a control's CSS travel together with the rest of the control code (markup + JavaScript) invaluable. But that's just my own preference. YMMV.

I haven't used Backbone myself, but will take a look at it. Based on the little I've read, one thing to keep watch for is the fact that Backbone and QuickUI provide their own subclassing mechanisms. (QuickUI's is based on jQuery's.) The approach and even syntax appears to be comparable, but there are surely enough differences in behavior that you'll need to keep straight which sort of class you're dealing with at any moment. In general, though, I expect the two should be able to work well together. As I said, I'll look at building out a sample app, possibly a ToDoMVC sample.

In the meantime, good luck with your explorations, and please continue to feel free to ask questions.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>19069150</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1333736632]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1333736632.3737";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2012-04-06 18:23:52]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>13</wp:comment_id>
    <wp:comment_author><![CDATA[Chris]]></wp:comment_author>
    <wp:comment_author_email>chrisrussi@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>198.181.13.254</wp:comment_author_IP>
    <wp:comment_date>2012-04-06 13:03:31</wp:comment_date>
    <wp:comment_date_gmt>2012-04-06 20:03:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It has been enjoyable talking to you about your framework, Jan.  I'm looking forward to going through the tutorials and getting a clearer appreciation how things work.  I'm a .NET developer, so, now I'm excited to give the compiler a try.  Thanks for your advice on working with the markup.  I'll keep you posted on my progress :-) ... thanks so much for your responses.

Have a great day,
Chris]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1333742612]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1333742612.4158";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2012-04-06 20:03:31]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[A vision for coevolving QuickUI and the emerging Web Components standard]]></title>
  <link>http://blog.quickui.org/2012/04/16/a-vision-for-coevolving-quickui-and-the-emerging-web-components-standard/</link>
  <pubDate>Mon, 16 Apr 2012 15:00:00 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">https://quickui.wordpress.com/?p=35</guid>
  <description/>
  <content:encoded><![CDATA[This post is the first in a series looking at the relationship between QuickUI and Web Components. This post will kick things off by laying out some basic points of a vision for how these two technologies might co-evolve.

The Web Components effort spearheaded by Google is a vital effort towards promoting component-based user interface design for web-based apps. Componentized user interfaces may <a href="http://miksovsky.blogs.com/flowstate/2012/03/snapping-together-a-skyscraper.html">radically transform the web industry</a>. It will take some time for the spec to be finished and agreed upon, and then still more time for the technology to make its way into users’ hands. It is hoped that QuickUI can serve as a bridge to the world of Web Components, act as a reference point for work on the emerging spec, and provide services and component libraries that speed the creation of Web Component-based apps.
<h1>QuickUI and Web Components have the same goal</h1>
Both frameworks address the same fundamental objective: let web designers and developers create better applications faster through the creation and use of modular, reusable, and extensible user interface elements. QuickUI calls such elements “controls” and the Web Components spec calls them “components”, but in this context the terms are essentially interchangeable.

There are obviously differences in approach. QuickUI is built on JavaScript and jQuery, while Web Components is native code and browser- and library-agnostic. The Web Components framework, by virtue of being part of the browser, can do many things which a JavaScript library like QuickUI cannot. There are some obvious performance benefits to doing things in native code. It’s also possible for the browser to enforce a high degree of component isolation by preventing a Web Component’s host from knowing what’s going on inside the component. Such isolation is crucial for a component platform, because it leads to a proper <a href="http://en.wikipedia.org/wiki/Separation_of_concerns">separation of concerns</a>. A component author can make many modifications to the inner workings of a component without fear that hosts of that component are inappropriately depending on a particular implementation. QuickUI can only maintain such separation of concerns by convention and by proffering services that make it easier for developers to use controls in a modular way than not.

Despite their differences, fundamentally these two web user interface frameworks are more compatible than not. This opens up the possibilities which follow.
<h2>QuickUI and Web Components should be interoperable</h2>
Based on the current Web Components spec, in theory it should be straightforward for a QuickUI control to host a Web Component, and vice versa. That can provide a degree of future-proof resiliency to a team that wants to build with QuickUI today. But it should be possible to do better than that…
<h1>QuickUI itself will someday be built on top of the Web Components foundation</h1>
Given the performance and modularity benefits of Web Components, and the reasonably close alignment of goals, it appears that it should be possible to eventually have QuickUI controls <em>be </em>Web Components.

Currently, the lowest levels of the quickui.js runtime provides services such as creating control subclasses and instantiating controls. These low-level services would be provided by a Web Components-enabled browser instead. The QuickUI runtime could potentially detect whether the user’s browser supports Web Components and, if so, create controls as Web Components wrapped by jQuery. On legacy browsers (all today’s released browser versions, going back to IE 8), the QuickUI runtime would continue to create controls as regular DOM elements wrapped by jQuery.
<h1>QuickUI can provide useful features beyond those which have been standardized</h1>
Standards, by their nature, advance slowly. Even once QuickUI is built on top of Web Components, QuickUI can continue to evolve at a faster pace to meet the needs of web designers and developers. QuickUI can be the “running code” in the maxim that Internet standards evolve from <a href="http://en.wikipedia.org/wiki/Rough_consensus">Rough consensus, running code</a>.

QuickUI is also designed explicitly for jQuery developers, whereas the Web Components spec must be library-agnostic. In the same way that jQuery developers currently find it much easier to write an interactive UI in jQuery than by doing direct DOM manipulation, they will also find creating controls (components) easier in QuickUI than using only the low-level services offered by the browser. For example, <a href="http://quickui.org/tutorial/inherit-from-jQuery.html">a QuickUI control is already a jQuery instance</a>, so a developer can immediately and directly manipulate a control using all the facilities in jQuery. As another example, QuickUI’s services for creating properties generate jQuery-style getter/setter functions which are automatically chainable, and can be applied to a collection of elements in a single call.
<h1>QuickUI may serve as a reference for work on Web Components</h1>
As a 4+ year-old web user interface framework, there’s already a considerable degree of hard-earned knowledge baked into the QuickUI framework. These lessons can be considered as the various parties working on Web Components flesh out the details of that spec. It’s in this role of QuickUI as a reference point that some of the important lessons from QuickUI will be covered in future posts on this blog.
<h1>QuickUI lets teams create componentized web user interfaces today</h1>
Many of the benefits of building a user interface with components can be achieved by a team using QuickUI today. As summarized on the <a href="http://quickui.org">QuickUI home page</a>, those benefits include the abilities to:
<ul>
	<li>Better organize and maintain UI code.</li>
	<li>Use custom controls to provide optimized user interactions or a particular visual aesthetic.</li>
	<li>To begin developing, in the course of one project, a library of reusable UI that can accelerate a team’s future projects.</li>
	<li>Share common UI solutions across teams and organizations so those solutions don’t need to be created from scratch each time.</li>
</ul>
<h1>Investment in QuickUI apps today can be preserved when Web Components arrive</h1>
This is a <em>vision</em>, not a legal commitment. The Web Components spec is still in flux and evolving entirely outside the control of anyone working on QuickUI, so it’s impossible to promise how things will work in the future. Still, it’s plausible that a team could begin creating a web user interface in QuickUI today, and as Web Component-enabled browsers arrive and gain use, the team could automatically (or, at least, easily) transition to that better foundation to improve the performance and reliability of their apps.
<h1>The QuickUI Catalog will evolve into the web’s best open library of reusable user interface components</h1>
To an extent, the <a href="http://quickui.org/catalog">QuickUI Catalog</a> of common, ready-to-use controls is somewhat independent of the underlying QuickUI foundation. At the most abstract level, these are user interface patterns that can be found in many applications on many platforms. Even if obstacles prevent QuickUI controls from being built as Web Components, the existing JavaScript code base for the Catalog would give one a huge headstart in creating an equivalent library of Web Components. And if the vision outlined here comes to pass, the Catalog’s collection of components — and user interfaces built with them — should be able to transition smoothly to a Web Components foundation.
<h2></h2>
<h1>Next steps: investigation of framework differences</h1>
While the above points lay out a vision for the coevolution of QuickUI and Web Components, many details remain which must be investigated before such a vision can come to pass. While the goals of the two frameworks are generally aligned, the design principles underlying the two have significant differences. For example, QuickUI’s <a href="http://quickui.org/docs/principles.html">core design principles</a> seem to place greater emphasis on extensibility — creating a new control class by extending an existing class — than does the current Web Components spec. Such differences could lead to irreconcilable incompatibilities, which would represent lost opportunity.

The hope is that any issues can be teased out of the Web Components spec early enough and either worked around or submitted for consideration so that they may hopefully be addressed. Some key issues warranting further investigation are:
<ol>
	<li>A significant fraction of QuickUI controls override their base class’ content() property setter function in order to perform work when a host sets a control’s content. This is done for a variety of reasons: to partially fill in a component’s DOM tree (a sort of user interface <a href="http://en.wikipedia.org/wiki/Currying">currying</a>); to transform content before displaying it; to recalculate layout; or to perform other operations dependent upon the content. This is not currently supported in the Web Components spec. An analysis of the QuickUI Catalog controls on this topic is underway to produce a set of common use cases.</li>
	<li>A QuickUI subclass maintains an is-a relationship with its base class. The &lt;shadow&gt; element in the Web Components spec may lead to subclasses that effectively maintain more of a has-a relationship with their parent class. It’s not immediately clear, for example, how one could define a base class and a subclass that meet all these conditions: a) both use the same root element (e.g., &lt;button&gt;), b) both are independently instantiable, c) the subclass can host base class elements (e.g., via &lt;shadow&gt;), and d) the subclass is a JavaScript instanceof (is-a) of the base class. These conditions often arise when extending an existing control class, and QuickUI control classes can meet all of them.</li>
	<li>The Web Components proposal minimizes the impact on the HTML language itself, but one repercussion of this appears to be that component classes can’t define custom properties that can be set through markup. As currently understood, the spec calls for hosts to pass values to components exclusively through a single content tree. The component class must then prise apart this content through a “select=” attribute so that it can incorporate content subelements into different parts of the component.This is roughly analogous to the way command-line apps must parse their text arguments, with both the flexibility and the potential for great inconsistency that go with that. In this context, such flexibility may create significant complications for the creation and maintenance of subclasses, as varying levels of the class hierarchy impose different demands on the content. Overall, this doesn’t feel as specific or clean as the compound property syntax in a language like XAML (or <a href="http://quickui.org/markup/">QuickUI Markup</a>), in which a control class can define custom properties that may be set as string attributes, through nested subelements, or through property setter functions.</li>
</ol>
As these issues are investigated more deeply, the results of those investigations will be posted here.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>35</wp:post_id>
  <wp:post_date>2012-04-16 08:00:00</wp:post_date>
  <wp:post_date_gmt>2012-04-16 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2012-04-15 20:55:01</wp:post_modified>
  <wp:post_modified_gmt>2012-04-16 03:55:01</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>a-vision-for-coevolving-quickui-and-the-emerging-web-components-standard</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="web-components"><![CDATA[Web Components]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19069150]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_378750edc6901f2b43aca46feb1d9a91</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_abfca53ad5613ff253b7357b4227b65c</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2237e5a05c12cbc3c5ce89fe539379e2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_7ca73c0faec03d7270ae84a4ff686608</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_5b08e86b47634b76e375c1ad62cc1efe</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_d6d3304f82bbf1d84ba397eedf942833</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a107370ed3d42968544e574a7cb59743</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9a62cd832ada8c2b84280cddf2abcab2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c409a8a6a8e0235147eea0b3b2b82c22</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>7302</wp:comment_id>
    <wp:comment_author><![CDATA[best flights deals]]></wp:comment_author>
    <wp:comment_author_email>joanne_mcdonald@gawab.com</wp:comment_author_email>
    <wp:comment_author_url>http://nalubtravel.com/</wp:comment_author_url>
    <wp:comment_author_IP>89.47.16.126</wp:comment_author_IP>
    <wp:comment_date>2015-04-19 00:26:10</wp:comment_date>
    <wp:comment_date_gmt>2015-04-19 07:26:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi to every body, it's my first pay a quick visit of 
this website; this webpage contains amazing and in fact excellent stuff in favor of readers.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1429428370.8587639331817626953125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1429428371]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1429432039.3763959407806396484375;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[How QuickUI controls use code to specialize the handling of their content (in ways that might not be supported by Web Components)]]></title>
  <link>http://blog.quickui.org/2012/04/27/how-quickui-controls-use-code-to-specialize-the-handling-of-their-content-in-ways-that-might-not-be-supported-by-web-components/</link>
  <pubDate>Fri, 27 Apr 2012 15:00:00 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">https://quickui.wordpress.com/?p=40</guid>
  <description/>
  <content:encoded><![CDATA[As indicated in the earlier overview comparing <a href="http://blog.quickui.org/2012/04/16/a-vision-for-coevolving-quickui-and-the-emerging-web-components-standard/">QuickUI and Web Components</a>, one significant difference between the two frameworks is that QuickUI allows code to run when a control’s content() property is set, while the Web Components spec does not currently allow for this. This post will attempt to begin making the case for the need for this feature, starting with an analysis of how that feature is used in QuickUI controls today.

The largest public body of QuickUI controls is <a href="http://quickui.org/catalog">QuickUI Catalog</a>, which as of this writing includes 76 open source controls that handle a variety of common user interface tasks or serve as demonstrations of how to achieve common behaviors in controls. Of the 76 published controls:
<ul>
	<li>32 controls include code that runs when their content() property is set. Since the base Control class already provides a default content() property, these controls are overriding that base implementation. (In some cases, like <a href="http://quickui.org/catalog/PopupSource">PopupSource</a>, the class’ content() property override is itself overridden by a subclass like <a href="http://quickui.org/catalog/ComboBox">ComboBox</a>.)</li>
	<li>Of the above 32 controls, 23 use their content() property override to delegate content to a sub-element. This is the standard approach in QuickUI for a control to incorporate content from its host. (For a working example, see this <a href="http://jsfiddle.net/quickui/ys2JQ/">jsFiddle</a>, in which a UserTile control delegates its content to a span inside the control. This topic is also covered in the second portion of the QuickUI JavaScript <a href="http://quickui.org/tutorial">tutorial</a>.) This is roughly analogous to what Web Components spec accomplishes with the proposed &lt;content&gt; element.</li>
	<li>12 controls (of the 76 in the catalog) are text box variations that delegate their content() property to a text box: either an &lt;input&gt; element of type “text” or a &lt;textarea&gt;. For example, the content() of a <a href="http://quickui.org/catalog/ListComboBox/">ListComboBox</a> will be placed inside an &lt;input&gt;. Historically, HTML input fields have insisted on handling the field’s value through a string “value” property, whereas an element’s content is a DOM subtree. Despite the difference in data type, in many cases the distinction between “value” and “content” feels somewhat arbitrary. The convenience of a content property is just as interesting to a control that wants to render that content in a text box. For example, if a combo box is going to hold a list of animal names, it’s nice to be able to set the default content of that combo box in markup as:&lt;ListComboBox&gt;Dog&lt;/ListComboBox&gt;. Naturally, this translation is lossy: if one passes a DOM subtree into such a control’s content() property, it’s to be expected that it will only preserve the subtree’s text. Nevertheless, it is highly useful to be able to define controls that render their primary content in text boxes.</li>
	<li>20 of the controls override their content() property to perform work whenever the content changes. The following table summarizes these 20 cases:</li>
</ul>
<table width="585" border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="32"></td>
<td valign="top" width="175"><strong>Control</strong></td>
<td valign="top" width="376"><strong>When content() property is set, the control…</strong></td>
</tr>
<tr>
<td valign="top" width="32"></td>
<td valign="top" width="175"><a href="http://quickui.org/catalog/AutoSizeTextBox">AutoSizeTextBox</a></td>
<td valign="top" width="376">Recalculates its own height to match that of the content.</td>
</tr>
<tr>
<td valign="top" width="32"></td>
<td valign="top" width="175"><a href="http://quickui.org/catalog/ColorSwatchButton">ColorSwatchButton</a></td>
<td valign="top" width="376">Transforms a string color name/value into a color.</td>
</tr>
<tr>
<td valign="top" width="32"></td>
<td valign="top" width="175"><a href="http://quickui.org/catalog/ColorSwatchTextBox">ColorSwatchTextBox</a></td>
<td valign="top" width="376">Transforms a string color name/value into a color.</td>
</tr>
<tr>
<td valign="top" width="32"></td>
<td valign="top" width="175"><a href="http://quickui.org/catalog/HighlightEffects">HighlightEffects</a></td>
<td valign="top" width="376">Recalculates its height/width.</td>
</tr>
<tr>
<td valign="top" width="32"></td>
<td valign="top" width="175"><a href="http://quickui.org/catalog/HintTextBox">HintTextBox</a></td>
<td valign="top" width="376">Shows hint text if the content is empty.</td>
</tr>
<tr>
<td valign="top" width="32"></td>
<td valign="top" width="175"><a href="http://quickui.org/catalog/Menu">Menu</a></td>
<td valign="top" width="376">Recalculates the width of a subelement (a “shield” element that must be exactly as wide as the content to achieve a particular visual effect).</td>
</tr>
<tr>
<td valign="top" width="32"></td>
<td valign="top" width="175"><a href="http://quickui.org/catalog/PackedColumn">PackedColumns</a></td>
<td valign="top" width="376">Recalculates its layout.</td>
</tr>
<tr>
<td valign="top" width="32"></td>
<td valign="top" width="175"><a href="http://quickui.org/catalog/PanelWithOverflow">PanelWithOverflow</a></td>
<td valign="top" width="376">Recalculates its layout.</td>
</tr>
<tr>
<td valign="top" width="32"></td>
<td valign="top" width="175"><a href="http://quickui.org/catalog/PersistentPanel">PersistentPanel</a></td>
<td valign="top" width="376">Checks to see whether the panel should be docked or not.</td>
</tr>
<tr>
<td valign="top" width="32"></td>
<td valign="top" width="175"><a href="http://quickui.org/catalog/PopupButton">PopupButton</a></td>
<td valign="top" width="376">Adjusts its layout if the content is not empty.</td>
</tr>
<tr>
<td valign="top" width="32"></td>
<td valign="top" width="175"><a href="http://quickui.org/catalog/Repeater">Repeater</a></td>
<td valign="top" width="376">Copies the content into the array of repeated sub-controls.</td>
</tr>
<tr>
<td valign="top" width="32"></td>
<td valign="top" width="175"><a href="http://quickui.org/catalog/SearchBox">SearchBox</a></td>
<td valign="top" width="376">Enables its search icon if the content is not empty.</td>
</tr>
<tr>
<td valign="top" width="32"></td>
<td valign="top" width="175"><a href="http://quickui.org/catalog/SlidingPages">SlidingPages</a></td>
<td valign="top" width="376">Recalculates its height/width.</td>
</tr>
<tr>
<td valign="top" width="32"></td>
<td valign="top" width="175"><a href="http://quickui.org/catalog/SlidingPagesWithDots">SlidingPagesWithDots</a></td>
<td valign="top" width="376">Updates the number of page buttons to match the number of pages (i.e., child nodes) in the content.</td>
</tr>
<tr>
<td valign="top" width="32"></td>
<td valign="top" width="175"><a href="http://quickui.org/catalog/Switch">Switch</a></td>
<td valign="top" width="376">Determines which child should be visible.</td>
</tr>
<tr>
<td valign="top" width="32"></td>
<td valign="top" width="175"><a href="http://quickui.org/catalog/Tab">Tab</a></td>
<td valign="top" width="376">Lets the parent tab set know the tab’s size may have changed.</td>
</tr>
<tr>
<td valign="top" width="32"></td>
<td valign="top" width="175"><a href="http://quickui.org/catalog/TabSet">TabSet</a></td>
<td valign="top" width="376">Creates a tab button for each tab page.</td>
</tr>
<tr>
<td valign="top" width="32"></td>
<td valign="top" width="175"><a href="http://quickui.org/catalog/TextBox">TextBox</a></td>
<td valign="top" width="376">Generates a programmatic “change” event.</td>
</tr>
<tr>
<td valign="top" width="32"></td>
<td valign="top" width="175"><a href="http://quickui.org/catalog/TextCondenser">TextCondenser</a></td>
<td valign="top" width="376">Determines whether the text should appear condensed to help it fit.</td>
</tr>
<tr>
<td valign="top" width="32"></td>
<td valign="top" width="175"><a href="http://quickui.org/catalog/ValidatingTextBox">ValidatingTextBox</a></td>
<td valign="top" width="376">Validates the contents.</td>
</tr>
</tbody>
</table>
To summarize, these controls are doing the following types of work when their content changes:
<ul>
	<li>Adjust its dimensions or the dimensions of some subelements (e.g., AutoSizeTextBox, Menu).</li>
	<li>Layout contents to achieve results not directly supported in HTML and CSS (e.g., PackedColumns, PanelWithOverflow).</li>
	<li>Transform or manipulate the content before rendering it (e.g., Repeater, ColorSwatch).</li>
	<li>Update its own subelements based on the content (e.g., TabSet, SlidingPagesWithDots).</li>
	<li>Validating content (e.g., ValidatingTextBox, and its subclasses like <a href="http://quickui.org/catalog/DateTextBox/">DateTextBox</a>).</li>
</ul>
Such controls represent a significant percentage of the QuickUI Catalog — approximately 25% — and it’s very likely that similar results would be found in other QuickUI-based projects. And in addition to the scenarios listed above, other scenarios likely exist in which a control wants to perform work when its content changes.

Overall, this pass through the QuickUI Catalog suggests that many interesting user interface components have a need to perform work when their content is set — to do something more than passively hold the content they’re passed. At this point, it’s not exactly whether the aforementioned QuickUI controls could be successfully ported to Web Components as the spec currently stands, which would be unfortunate. (As stated in the previous post, a long-term vision for the QuickUI framework is that controls created in QuickUI can be transitioned to a Web Components foundation in the future.)

It’s possible that a component could use forthcoming support for DOM mutation observers could be used to track changes to its own content, but whether this would work, or work well, is not yet known. A control could also force its host to invoke some method on the control whenever the host changes the control’s content, but that would be unfortunate; it would place extra work on the developer, and a host’s failure to properly notify the control that its contents have changed could lead to subtle bugs.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>40</wp:post_id>
  <wp:post_date>2012-04-27 08:00:00</wp:post_date>
  <wp:post_date_gmt>2012-04-27 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2012-04-26 16:00:43</wp:post_modified>
  <wp:post_modified_gmt>2012-04-26 23:00:43</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>how-quickui-controls-use-code-to-specialize-the-handling-of-their-content-in-ways-that-might-not-be-supported-by-web-components</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="web-components"><![CDATA[Web Components]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19069150]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0e97281a03ae1f5b53eb9dc60a0b8b9a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>62</wp:comment_id>
    <wp:comment_author><![CDATA[Quetzal: an experimental translation of the QuickUI component model to HTML custom elements | QuickUI]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://blog.quickui.org/2013/06/03/quetzal-an-experimental-translation-of-quickui-component-model-to-html-custom-elements/</wp:comment_author_url>
    <wp:comment_author_IP>66.155.9.93</wp:comment_author_IP>
    <wp:comment_date>2013-06-03 08:03:22</wp:comment_date>
    <wp:comment_date_gmt>2013-06-03 15:03:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] The ability to run code when an element&#8217;s contents change. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370271803.2148969173431396484375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1370276334]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370276334.5820300579071044921875;s:7:"message";s:51:"janmiksovsky changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-06-03 15:03:22]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[QuickUI now lets you create user interface controls in CoffeeScript]]></title>
  <link>http://blog.quickui.org/2012/05/07/quickui-now-supports-coffeescript/</link>
  <pubDate>Mon, 07 May 2012 15:00:00 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">https://quickui.wordpress.com/?p=45</guid>
  <description/>
  <content:encoded><![CDATA[QuickUI now supports the use and creation of web user interface controls in <a href="http://jashkenas.github.com/coffee-script">CoffeeScript</a>, a language that adds many useful features to the JavaScript language. Through its compiler, CoffeeScript can be easily used as a replacement for JavaScript in many web projects.

QuickUI turns out to be a natural fit for CoffeeScript. One of the nice features in CoffeeScript is that you can create classes with the language’s built-in “class” syntax. You can take advantage of that syntax to create new QuickUI control classes, simply by extending the base Control class or any other control class:
<pre># A simple button class in CoffeeScript
class window.HelloButton extends BasicButton
  constructor: -&gt; return Control.coffee()
  inherited:
    content: "Hello, world!"
  genericSupport: true</pre>
QuickUI control classes are subclasses of jQuery, so one of the key features in QuickUI’s new support for CoffeeScript is actually being able to create jQuery subclasses in CoffeeScript. CoffeeScript generates a prototype-based class that is similar to the classes produced by jQuery’s <a href="http://api.jquery.com/jQuery.sub/">$.sub()</a> feature (a core part of jQuery that will be moved to a plugin in jQuery 1.8), but jQuery’s classes require a rather Byzantine construction sequence. This is handled through the boilerplate constructor shown above. When Control.coffee() is called, it fixes up the CoffeeScript class so that it conforms to jQuery’s notion of how its class constructors should work.

With this in place, it’s now possible to create QuickUI controls in CoffeeScript with significantly less source code than the equivalent plain JavaScript. This is an overall win for web UI developers. If your team hasn’t already taken a look at CoffeeScript, now might be a good time.

Creating QuickUI controls in CoffeeScript currently requires a plugin, but the plan is to fold CoffeeScript support directly into the quickui.js runtime. Read the <a href="http://quickui.org/docs/CoffeeScript.html">documentation for QuickUI support of CoffeeScript</a> for more details.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>45</wp:post_id>
  <wp:post_date>2012-05-07 08:00:00</wp:post_date>
  <wp:post_date_gmt>2012-05-07 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2012-05-03 16:34:49</wp:post_modified>
  <wp:post_modified_gmt>2012-05-03 23:34:49</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quickui-now-supports-coffeescript</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19069150]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>27</wp:comment_id>
    <wp:comment_author><![CDATA[QuickUI 0.9.1 released | QuickUI]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://blog.quickui.org/2012/06/07/quickui-0-9-1-released/</wp:comment_author_url>
    <wp:comment_author_IP>76.74.248.188</wp:comment_author_IP>
    <wp:comment_date>2012-06-07 10:34:39</wp:comment_date>
    <wp:comment_date_gmt>2012-06-07 17:34:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] to create web user interface components in CoffeeScript. When CoffeeScript support in QuickUI was first announced a month ago, you had to include a boilerplate constructor. This was required to work around a [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1339104316]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1339104316.9578";s:7:"message";s:51:"janmiksovsky changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1339090479.1845";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2012-06-07 17:34:39]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>19</wp:comment_id>
    <wp:comment_author><![CDATA[QuickUI 0.9: a significant update | QuickUI]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://blog.quickui.org/2012/05/15/quickui-0-9-a-significant-update/</wp:comment_author_url>
    <wp:comment_author_IP>66.135.48.155</wp:comment_author_IP>
    <wp:comment_date>2012-05-15 10:40:13</wp:comment_date>
    <wp:comment_date_gmt>2012-05-15 17:40:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Post navigation &larr; Previous [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1337103614.2986";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1337117782]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1337117783.0295";s:7:"message";s:51:"janmiksovsky changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2012-05-15 17:40:13]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[QuickUI 0.9: a significant update]]></title>
  <link>http://blog.quickui.org/2012/05/15/quickui-0-9-a-significant-update/</link>
  <pubDate>Tue, 15 May 2012 17:32:51 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">https://quickui.wordpress.com/?p=50</guid>
  <description/>
  <content:encoded><![CDATA[<p>QuickUI 0.9 has been released. This is a major update which includes a number of changes that make it easier than ever to create reusable, extensible web user interface components.</p> <ul> <li>The means by which classes are defined has been substantially simplified, which means that QuickUI is doing a lot less work when a class is defined. One result is that the previous Control.subclass() method has been replaced with a simple jQuery.sub() call. An overload still permits one to pass in a JavaScript object defining the class, but now everything in that object is simply copied over to the new class’ prototype. A new “inherited:” key now holds the Control JSON used to render the control; see the <a href="http://quickui.org/docs/control-JSON.html">docs</a> for more details. <li>The way you refer to an element within a control’s DOM has changed. Previously, you set an ID on an element in Control JSON using an “id:” key. Under the covers, this set an ID on the HTML element. As of QuickUI 0.9, to refer to an element in code, the Control JSON should include a “ref:” key. (See the <a href="http://quickui.org/tutorial/element-reference-functions.html">tutorial example</a>.) Under the covers, this will set a CSS class on the element. As before, this also implicitly creates an element reference function you can use to get that element through code: e.g., setting ref: “foo” on an element lets you get back to that element with the element reference function $foo(). <li>A control’s initialize() method now implicitly invokes the initialize() methods of its base classes. Previously, you had to remember to have initialize() invoke this._super(), which was error prone. Failure to invoke this._super() would often mean that a base class’ event handlers didn’t get wired up, which could lead to bugs which were difficult to track down. <li>CoffeeScript support, <a href="http://blog.quickui.org/2012/05/07/quickui-now-supports-coffeescript/">announced earlier</a>, has been folded into the core quickui.js runtime.</li></ul> <p>While the above work was underway, the QuickUI source code was substantially overhauled:</p> <ul> <li>The aforementioned support for creating QuickUI controls in CoffeeScript has gone so well that QuickUI’s own runtime has now itself been ported to CoffeeScript. This does <em>not</em> mean that QuickUI developers need to use CoffeeScript; QuickUI supports plain JavaScript development and CoffeeScript development equally well. For people using QuickUI, this simply means that a number of planned improvements to QuickUI (including those listed above) could more easily be tackled. <li>The quickui.js runtime file itself is now built with Ben Alman’s handy <a href="https://github.com/cowboy/grunt">Grunt</a> build tool. <li>The optional QuickUI markup compiler has been moved into a separate GitHub repo, quickui-markup.</li></ul> <p>Please take a look!</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>50</wp:post_id>
  <wp:post_date>2012-05-15 10:32:51</wp:post_date>
  <wp:post_date_gmt>2012-05-15 17:32:51</wp:post_date_gmt>
  <wp:post_modified>2012-05-15 10:32:52</wp:post_modified>
  <wp:post_modified_gmt>2012-05-15 17:32:52</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quickui-0-9-a-significant-update</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="releases"><![CDATA[Releases]]></category>
  <wp:comment>
    <wp:comment_id>21</wp:comment_id>
    <wp:comment_author><![CDATA[Some observations on porting the QuickUI runtime from plain JavaScript to CoffeeScript | QuickUI]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://blog.quickui.org/2012/05/15/porting-quickui-to-coffeescript/</wp:comment_author_url>
    <wp:comment_author_IP>216.151.210.51</wp:comment_author_IP>
    <wp:comment_date>2012-05-16 08:55:46</wp:comment_date>
    <wp:comment_date_gmt>2012-05-16 15:55:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Post navigation &larr; Previous [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1337183747.3912";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1337186105]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1337186106.4866";s:7:"message";s:51:"janmiksovsky changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2012-05-16 15:55:46]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Some observations on porting the QuickUI runtime from plain JavaScript to CoffeeScript]]></title>
  <link>http://blog.quickui.org/2012/05/15/porting-quickui-to-coffeescript/</link>
  <pubDate>Tue, 15 May 2012 21:55:29 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">https://quickui.wordpress.com/?p=52</guid>
  <description/>
  <content:encoded><![CDATA[This post shares some highlights of the experience porting a non-trivial library from plain JavaScript to CoffeeScript in case other parties are considering a similar transition.

Yesterday's <a href="http://blog.quickui.org/2012/05/15/quickui-0-9-a-significant-update/">announcement of QuickUI 0.9</a> mentioned that the framework source code has now been ported to CoffeeScript. The QuickUI framework is intended for plain JavaScript development as well; nothing in the change of source language changes that. But experimentation with the CoffeeScript language suggested there were enough advantages to the language that, going forward, it would be worth porting the runtime from plain JavaScript to CoffeeScript.

Overall, the port from plain to JavaScript to CoffeeScript went rather smoothly, and the bulk of it took about two days. The QuickUI runtime, quickui.js, is a reasonably complex JavaScript library, which is to say that it's not a toy or trivial sample application. The last plain JavaScript version of the QuickUI runtime, quickui-0.8.9.js, was about 7700 lines of plain JavaScript (including comments), or about 60K, developed over the course of four and a half years.
<h2>Automatic translation with js2Coffee</h2>
The handy <a href="http://js2coffee.org/">js2coffee</a> conversion tool was used to kickstart the port. Kudos to Rico Sta. Cruz for this great tool.
<ul>
	<li>The automatically translated CoffeeScript immediately passed 97% of the QuickUI unit test suite. The remaining 4 broken tests were do to a single <a href="https://github.com/rstacruz/js2coffee/issues/138">issue</a> related to translation of the "instanceof" keyword, which was easy enough to work around.</li>
	<li>The one thing js2coffee doesn't translate (yet) are comments, so these had to be copied over by hand. Tedious, but straightforward.</li>
	<li>Similarly, the js2coffee output sometimes produced long lines that needed to be hand-broken for legibility. Again, a bit tedious but straightforward.</li>
	<li>Once all unit tests passed, the unit tests themselves were ported to CoffeeScript by the same process.</li>
</ul>
After about a morning of work, a CoffeeScript-based quickui.js was functional. It passed all unit tests, and could actually be used to drive a non-trivial QuickUI-based body of code like the <a href="http://quickui.org/catalog">QuickUI Catalog</a>.
<h2>Towards idiomatic CoffeeScript</h2>
After the mechanical port with js2coffee, various CoffeeScript idioms were applied incrementally to replace the standard JavaScript idioms with their more concise CoffeeScript versions. This took another day and half or so.
<ul>
	<li>There was occasion to use pretty much all of CoffeeScript's syntactic sugar. References to Foo.prototype.bar() were replaced with the more concise Foo::bar(). Closure variables to hold "this" for use in an event handler were replaced with CoffeeScript's "=&gt;" syntax. Etc., etc.</li>
	<li>Because CoffeeScript can wrap a body of code in a single function closure, this no longer needed to be done by hand. A wrapping closure like that can complicate the management of a pile of plain JavaScript files. The closure will typically have to be created through a build process that includes a JavaScript fragment (to start the closure) before the real JavaScript files, and another fragment (to end the closure) afterwards. (The jQuery <a href="https://github.com/jquery/jquery/blob/master/Makefile">Makefile</a> does this, for example.) CoffeeScript's built-in support for a closure that spans multiple files finally made it easy enough to break up the quickui.js runtime from a single monolithic JavaScript file into a much saner and more manageable collection of CoffeeScript files. That is, while the same degree of manageability could have been achieved in plain JavaScript, CoffeeScript made it simple enough that it actually got done.</li>
	<li>The QuickUI runtime itself doesn't create many classes, but in some cases (e.g., the unit test suite), classes could be created via CoffeeScript's concise class syntax. This took advantages of QuickUI's new support for <a href="http://quickui.org/docs/CoffeeScript.html">creating web user interface controls using CoffeeScript class syntax</a>.</li>
	<li>JavaScript "for" loops were replaced with CoffeeScript list comprehensions.</li>
</ul>
<h2>Idiomatic CoffeeScript iteration over jQuery objects</h2>
<div>Speaking of "for" loops, it turns out that a good deal of the QuickUI runtime deals with looping over jQuery objects. QuickUI controls are a subclass of jQuery object, and when looping over them in plain JavaScript, it's often convenient to use jQuery's $.each() function. For example, this function invokes foo(), a jQuery method or plugin, on each element in a jQuery object:</div>
<pre>var $elements = $(".someClass");
$elements.each( function( index, element ) {
    $( element ).foo();
});</pre>
<div>Note that $.each() gives the callback the plain DOM element, so you have to wrap that element with $(element) to get a jQuery object you can then manipulate. To simplify that, QuickUI's runtime has long had a helper function called eachControl() that gives the callback the element as a wrapped jQuery object. (In QuickUI's case, it also ensures the control's particular subclass of jQuery is used, so that you can directly manipulate the control with that control's own specific API.) E.g.:</div>
<pre>var $buttons = $(".BasicButton");
$buttons.eachControl( function( index, $button ) {
    $button.foo();
});</pre>
<div>To take best advantage of CoffeeScript's supports for looping constructs, a simple jQuery plugin was created to create an array that can directly be used by CoffeeScript's "for" loop and list comprehensions. This plugin, called Control.segments(), converts a jQuery object that holds a number of elements into an array of jQuery objects that each hold a single (wrapped) element. The definition of segments() in CoffeeScript is trivial:</div>
<div>
<pre>Control::segments = -&gt;
  ( @constructor element for element in @ )</pre>
</div>
<div>QuickUI defines segments() on the Control class so as not to pollute the general jQuery plugin namespace, but the above definition could just as easily be done as jQuery::segments to create a plugin that worked with any jQuery object. In any event, the result of applying segments() to a jQuery object is an array that can be directly iterated over, while at the same time preserving type information.</div>
<pre>$button.foo() for $button in Control(".BasicButton").segments()</pre>
<div>Here, the looping variable $button ends up holding an instanceof BasicButton (which is also an instanceof jQuery), so $button.foo() invokes BasicButton.prototype.foo().</div>
<div></div>
<div>This "for" loop feels more direct and idiomatic in CoffeeScript than the standard $.each() approach. (In fact, it'd be nice if $.each() were extended so that, if invoked without arguments, it returned an array just like segments() does here.) This segments() call can also be used in CoffeeScript list comprehensions, thereby replacing many situations in which $.map() is currently used. A <a href="http://jsperf.com/each-vs-conversion-to-array-and-then-loop">jsperf experiment</a> suggests the segments() approach performs roughly as well as the standard $.each(). The generated JavaScript for segments() does build a temporary array of results, but it avoids the need for the callback function and the accompanying closure.</div>
<div></div>
<h2>Impressions</h2>
<div>The new, CoffeeScript-based QuickUI source code gets compiled to a plain JavaScript file that's essentially the same size as the handwritten JavaScript (61K vs 60K). The new runtime appears to perform and function just as well as the earlier plain JavaScript one, so QuickUI developers shouldn't notice any difference. At the same time, the new CoffeeScript source code <em>feels</em> a lot tighter and easier to read and maintain.</div>
<div></div>
<div>This ability to write tighter code has already invited the successful implementation of a number of long-planned improvements to the runtime. It's hard to say how many of those improvements were easier to tackle because of advantages in the CoffeeScript language itself, and how many were tackled just because CoffeeScript is a shiny, new tool. But as a general rule, it seems that CoffeeScript permits a programmer to more directly express their intention than one can do in JavaScript — and any language that can do that is a step forward.</div>
<div></div>
<div>Best of all, using any language like CoffeeScript that compiles to plain JavaScript enables a developer to finally break a hard dependence between language choice and the user's browser. Now that QuickUI itself is written in CoffeeScript, it can take immediate advantage of improvements in CoffeeScript the day they appear, instead of waiting years for incremental JavaScript improvements to make their way through committee, into browsers, and into users' hands.</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>52</wp:post_id>
  <wp:post_date>2012-05-15 14:55:29</wp:post_date>
  <wp:post_date_gmt>2012-05-15 21:55:29</wp:post_date_gmt>
  <wp:post_modified>2012-05-16 08:55:01</wp:post_modified>
  <wp:post_modified_gmt>2012-05-16 15:55:01</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>porting-quickui-to-coffeescript</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19069150]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[some-observations-on-porting-the-quickui-runtime-from-plain-javascript-to-coffeescript]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2342384d85c64a23ae70231539f1bb24</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_0a8a419de37b9e298e6f355d01d99a43</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9dff6c8c599f2cab2974f9e546305a2a</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a9882f6f6db89f9833d8c05b60818fbc</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[QuickUI 0.9.1 released]]></title>
  <link>http://blog.quickui.org/2012/06/07/quickui-0-9-1-released/</link>
  <pubDate>Thu, 07 Jun 2012 17:28:08 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">https://quickui.wordpress.com/?p=62</guid>
  <description/>
  <content:encoded><![CDATA[QuickUI 0.9.1 contains two changes:

First, it’s now even easier to create web user interface components in CoffeeScript. When CoffeeScript support in QuickUI was <a href="http://blog.quickui.org/2012/05/07/quickui-now-supports-coffeescript/">first announced</a> a month ago, you had to include a boilerplate constructor. This was required to work around a limitation in CoffeeScript, in which CoffeeScript’s default constructor for a class didn’t return a value. (See <a href="https://github.com/jashkenas/coffee-script/issues/1966">a good summary of the issue here</a>.) That issue has now been <a href="https://github.com/jashkenas/coffee-script/pull/1970">fixed</a> in CoffeeScript 1.3.3. With a considerable degree of rework in the base Control class, you can now create a new user interface control in a single line of CoffeeScript:
<pre>control window.MyButton extends BasicButton</pre>
The QuickUI <a href="http://quickui.org/docs/CoffeeScript.html">documentation for creating controls in CoffeeScript</a> has been updated to reflect this.

Second, QuickUI 0.9.1 has a simplified model for generic styling. The QuickUI Catalog controls define generic styles that allow them to function without you needing to provide styling for them. You can easily turn off a base class’ generic style by setting the subclass’ <a href="http://quickui.org/docs/control-prototype-methods.html#generic">generic()</a> property to false.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>62</wp:post_id>
  <wp:post_date>2012-06-07 10:28:08</wp:post_date>
  <wp:post_date_gmt>2012-06-07 17:28:08</wp:post_date_gmt>
  <wp:post_modified>2012-06-07 10:34:31</wp:post_modified>
  <wp:post_modified_gmt>2012-06-07 17:34:31</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quickui-0-9-1-released</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="releases"><![CDATA[Releases]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19069150]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>28</wp:comment_id>
    <wp:comment_author><![CDATA[How jQuery instantiates objects as jQuery.fn.init, and what that means if you want to subclass jQuery | QuickUI]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://blog.quickui.org/2012/06/07/jquery-fn-init/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.61.89</wp:comment_author_IP>
    <wp:comment_date>2012-06-07 14:10:43</wp:comment_date>
    <wp:comment_date_gmt>2012-06-07 21:10:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Post navigation &larr; Previous [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1339103444.2074";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1339104319]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1339104319.6933";s:7:"message";s:51:"janmiksovsky changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2012-06-07 21:10:43]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[How jQuery instantiates objects as jQuery.fn.init, and what that means if you want to subclass jQuery]]></title>
  <link>http://blog.quickui.org/2012/06/07/jquery-fn-init/</link>
  <pubDate>Thu, 07 Jun 2012 18:51:51 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">https://quickui.wordpress.com/?p=66</guid>
  <description/>
  <content:encoded><![CDATA[In order for the <a href="http://blog.quickui.org/2012/06/07/quickui-0-9-1-released/">recent release of QuickUI 0.9.1</a> to support concise creation of control classes in CoffeeScript, it was necessary to go deep into the bowels of jQuery’s class constructor to determine how it worked. Those findings are documented here in case others have a similar need to subclass jQuery, or would like to address the same need that drove jQuery to its current implementation.

The jQuery class constructor can be found in <a href="https://github.com/jquery/jquery/blob/master/src/core.js">core.js</a>:
<pre>jQuery = function( selector, context ) {
    // The jQuery object is actually just the init constructor 'enhanced'
    return new jQuery.fn.init( selector, context, rootjQuery );
}</pre>
But the comment doesn't do much to explain why init exists, or how it works.

All jQuery developers are familiar with the form $(“div”), which is a shorthand for the longer jQuery(“div”). This, we are told, returns a new jQuery object. Actually, from the above constructor, we can see that what it <em>really</em> returns is an instance of the jQuery.fn.init class. (From here on out, we’ll just refer to that class as “init”.) The init constructor is defined like so:
<pre>jQuery.fn = jQuery.prototype = {
    init: function( selector, context, rootjQuery ) {
        ...
    }
}</pre>
Here, first note that jQuery.fn is just a synonym for jQuery.prototype. Given that, we see that the init class constructor hangs off the jQuery prototype. Stashing the init class on the jQuery class’ prototype allows the jQuery library to avoid polluting the JavaScript global namespace with an extra class. (Of course, init could easily have been defined inside the outer jquery.js function closure, which would avoid namespace pollution and prevent access to it from outside. The init class isn't really referred to elsewhere in the jQuery source, so it's not immediately clear why that wasn't done. Perhaps the above approach makes for easier debugging.)

Further on, we see this init class defined as a subclass of the jQuery class:
<pre>// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;</pre>
Since jQuery.fn is just an abbreviation for jQuery.prototype, the above line is really:
<pre>jQuery.prototype.init.prototype = jQuery.prototype;</pre>
This ensures that any instance of init will also be a functional instance of jQuery. This can be confirmed in the debugger:
<pre>&gt; $e = $("div")
&gt; $e instanceof jQuery
true
&gt; $e instanceof jQuery.fn.init
true</pre>
So all those times when you create an instance of jQuery you are <em>actually </em>working with an instance of a jQuery <em>subclass</em>.

Okay, but why bother? One reason is that jQuery wants to support a static constructor form: one you can invoke with needing to specify “new”. Regardless of whether you invoke the jQuery() constructor with “new” or not, it’s always going to return an instance of the init class. And, because init is a subclass of jQuery, you’ll end up with an instance of jQuery, which is what you wanted.
<pre>// The following lines are all equal.
var $e = new jQuery("div");
var $e = jQuery("div");
var $e = new $("div");
var $e = $("div");</pre>
So at least one reason init exists is that it serves as a helper class to let you write shorter jQuery code. The thing is, supporting instantiation without "new" doesn't require defining a separate helper class.

The jQuery constructor above is relying upon an oddity in the JavaScript language: a constructor can return an object that’s an instance of a class other than the class defined by the constructor. The jQuery class could more easily use the simpler <a href="http://jimmycuadra.com/posts/javascript-factory-constructors">factory constructor</a> pattern to check to see whether it's been invoked without "new" (in which case "this" will be the window) and, if so, just return a new instance of itself. That is, in fact, how jQuery worked back in <a href="http://code.jquery.com/jquery-1.1.js">jQuery 1.1</a>:
<pre>var jQuery = function(a,c) {
    // If the context is global, return a new object
    if ( window == this )
        return new jQuery(a,c);
    ...
};</pre>
By jQuery 1.2, however, the jQuery constructor was using the technique shown above. It's hard to tell from the code exactly why the init helper class was introduced. One possibility is that init has that extra rootjQuery parameter which is for internal use only. Burying that parameter in a helper class avoids having to expose the parameter in the jQuery API, where it might confuse jQuery developers or, worse, encourage them to create code that depends upon that parameter.

<strong>Subclassing jQuery</strong>

One cost of jQuery’s class scheme is that it makes it much harder for <em>you</em> to subclass jQuery. One reason you might want to do this is to provide scoping for your own jQuery plugins. If you want to add a lot of plugins to jQuery’s prototype (which, as indicated above, is what you’re doing when you add something to jQuery.fn), you could potentially pollute the jQuery namespace and run into conflicts with other plugins. By subclassing jQuery, and working strictly with instances of your subclass, you hide all your plugins from anyone who’s directly instantiating the plain jQuery class.

Unfortunately, because of this init helper class, the normal JavaScript prototype-based subclassing scheme won’t work with jQuery. To make your subclass jQuery-like, you end up needing to replicate jQuery’s complex helper class arrangement: create a subclass of jQuery <em>and</em> a companion init helper class, derive your helper class from your actual jQuery subclass, and ensure your subclass’s constructor actually returns an instance of your init class.

The mind-breaking pain of all that is presumably what led to the creation of a jQuery function called <a href="http://api.jquery.com/jQuery.sub/">$.sub()</a>. That function does exactly what’s described above: it defines a new subclass of jQuery and a companion init helper class.

The $.sub() plugin doesn’t seem to be used much, perhaps because its benefits and reason for existence aren’t well-documented. The announced plan is that $.sub() will be removed from the core jQuery library in version 1.8, and transition to become an official plugin. As a result, $.sub() is deprecated as a <em>native </em>jQuery feature, but $.sub() and its technique will continue to be useful, so it’s still worth understanding and considering it.

QuickUI relies upon the $.sub() technique to make its base Control a subclass of jQuery. This is what lets you use any jQuery feature with QuickUI controls directly: you can bind events to them with $.on(), you can style them with $.css(), and so on. That’s because your control class derives from Control, and so ultimately derives from jQuery.

You can <a href="http://quickui.org/tutorial/creating-control-class.html">create a new QuickUI control class in JavaScript</a> by invoking Control.sub(). And, with QuickUI 0.9.1, you can now create subclasses of Control (and, therefore, jQuery ) <a href="http://quickui.org/docs/CoffeeScript.html">using CoffeeScript’s built-in class syntax</a>, which is concise and highly legible. In either language, you can easily create your own reusable web user interface components that have direct access to all the power of jQuery.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>66</wp:post_id>
  <wp:post_date>2012-06-07 11:51:51</wp:post_date>
  <wp:post_date_gmt>2012-06-07 18:51:51</wp:post_date_gmt>
  <wp:post_modified>2012-06-07 14:10:33</wp:post_modified>
  <wp:post_modified_gmt>2012-06-07 21:10:33</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>jquery-fn-init</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19069150]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_049c6c383cbf13dbcbfcfae9a6b7da44</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_915f1325ad8fe538a26073fab6ee9a81</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_8987f812481eec7cc5ddb85439afd147</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_eff8c0143f1621af8d9169446e5e3571</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_4b583b96476a17b6cf1462b4f00fea4b</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_aa7d2bd4c1e541c83db6836ffad23a3f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9e6c9a01282494df2d690bbd0ffea1e0</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_1e35a3a3635c3baf812592196c18a4af</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dc18238ec8db4afab35034e047ec04a2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_b8371cdf0d40ecac283230707a990dd2</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_c92216b2e95aa642f19a0227902918fd</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ec1dd09b2fb5dc2a7633c881a25fcbb3</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ed8769a972ee7c59903968e71a0788be</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_edda310fce8dfaeb1813475d6888d085</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_f2c60134c6bca82eedecec77ec3bc2fa</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>59</wp:comment_id>
    <wp:comment_author><![CDATA[QuickUI breaks with CoffeeScript 1.5 | QuickUI]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://blog.quickui.org/2013/02/27/quickui-breaks-with-coffeescript-1-5/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.69.25</wp:comment_author_IP>
    <wp:comment_date>2013-02-27 14:20:10</wp:comment_date>
    <wp:comment_date_gmt>2013-02-27 22:20:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] goes through significant trouble to subclass jQuery because of jQuery&#8217;s complex constructor. jQuery depends on an unusual feature of JavaScript [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1362003610.655334949493408203125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1362004215]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1362004216.4423329830169677734375;s:7:"message";s:51:"janmiksovsky changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-02-27 22:20:10]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>60</wp:comment_id>
    <wp:comment_author><![CDATA[QuickUI 0.9.4 released | QuickUI]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://blog.quickui.org/2013/05/13/quickui-0-9-4-released/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.96.160</wp:comment_author_IP>
    <wp:comment_date>2013-05-13 11:51:46</wp:comment_date>
    <wp:comment_date_gmt>2013-05-13 18:51:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] change is in the Control constructor. QuickUI previously went through a lot of trouble to subclass jQuery. This code involved patching up a class when an attempt was made to instantiate it so that the [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1368471107.9078919887542724609375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1368486606]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1368486606.70400905609130859375;s:7:"message";s:51:"janmiksovsky changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-05-13 18:51:46]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Sample Contacts application using Backbone and QuickUI]]></title>
  <link>http://blog.quickui.org/2012/06/18/sample-contacts-application/</link>
  <pubDate>Mon, 18 Jun 2012 15:00:00 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">https://quickui.wordpress.com/?p=78</guid>
  <description/>
  <content:encoded><![CDATA[Back in April, someone evaluating QuickUI made the completely reasonable request to see a complete sample application created in QuickUI. More specifically, they were interested in seeing a demonstration of how to use QuickUI as the View in an MVC (Model-View-Controller) application, ideally using the popular <a href="http://backbonejs.org/">Backbone.js</a> library. QuickUI is well suited to fill that role, and a sample application has now been created to show off how to do exactly that.

<a href="http://quickui.org/docs/contacts.html"><img src="http://quickui.org/docs/images/Contact%20Card.png" alt="" /></a>

The result is a <a href="http://quickui.org/docs/contacts.html">sample Contacts application</a> built in QuickUI. The sample takes advantage of QuickUI’s support for CoffeeScript, which turns out to be an elegant language to express both Backbone and QuickUI classes.

Read the sample’s documentation for more details of its construction.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>78</wp:post_id>
  <wp:post_date>2012-06-18 08:00:00</wp:post_date>
  <wp:post_date_gmt>2012-06-18 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2012-06-15 17:06:58</wp:post_modified>
  <wp:post_modified_gmt>2012-06-16 00:06:58</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sample-contacts-application</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19069150]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Web-Component-Poll.png]]></title>
  <link>http://blog.quickui.org/2012/07/02/web-component-properties/web-component-poll-png/</link>
  <pubDate>Sat, 30 Jun 2012 04:41:23 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">http://quickui.files.wordpress.com/2012/06/web-component-poll.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>82</wp:post_id>
  <wp:post_date>2012-06-29 21:41:23</wp:post_date>
  <wp:post_date_gmt>2012-06-30 04:41:23</wp:post_date_gmt>
  <wp:post_modified>2012-06-29 21:41:23</wp:post_modified>
  <wp:post_modified_gmt>2012-06-30 04:41:23</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>web-component-poll-png</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>84</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://quickui.files.wordpress.com/2012/06/web-component-poll.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/af0/31992059/files/2012/06/web-component-poll.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"600";s:6:"height";s:3:"432";s:14:"hwstring_small";s:23:"height='92' width='128'";s:4:"file";s:94:"/home/wpcom/public_html/wp-content/blogs.dir/af0/31992059/files/2012/06/web-component-poll.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Web-Component-Poll_thumb.png]]></title>
  <link>http://blog.quickui.org/2012/07/02/web-component-properties/web-component-poll_thumb-png/</link>
  <pubDate>Sat, 30 Jun 2012 04:41:26 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">http://quickui.files.wordpress.com/2012/06/web-component-poll_thumb.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>83</wp:post_id>
  <wp:post_date>2012-06-29 21:41:26</wp:post_date>
  <wp:post_date_gmt>2012-06-30 04:41:26</wp:post_date_gmt>
  <wp:post_modified>2012-06-29 21:41:26</wp:post_modified>
  <wp:post_modified_gmt>2012-06-30 04:41:26</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>web-component-poll_thumb-png</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>84</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://quickui.files.wordpress.com/2012/06/web-component-poll_thumb.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/af0/31992059/files/2012/06/web-component-poll_thumb.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"600";s:6:"height";s:3:"432";s:14:"hwstring_small";s:23:"height='92' width='128'";s:4:"file";s:100:"/home/wpcom/public_html/wp-content/blogs.dir/af0/31992059/files/2012/06/web-component-poll_thumb.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[The Web Components spec should add support for multiple, named, DOM-valued properties]]></title>
  <link>http://blog.quickui.org/2012/07/02/web-component-properties/</link>
  <pubDate>Mon, 02 Jul 2012 15:00:28 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">https://quickui.wordpress.com/?p=84</guid>
  <description/>
  <content:encoded><![CDATA[At last week's Google I/O 2012 conference, Chrome engineers Alex Komoroske and Dimitri Glazkov gave a talk called, <a href="https://www.youtube.com/watch?v=2txPYQOWBtg">The Web Platform’s Cutting Edge</a>, a good overview of Web Components and <a href="http://www.w3.org/TR/components-intro/#custom-element-section">custom elements</a> in particular. The demo code shown in that presentation does point to an issue with the current Web Components spec that could seriously constrain the ease with which components can be written and shared. I’ll lay out the case here in hopes this problem can be fixed at an early stage.
<h2>But first: A word of appreciation</h2>
Authoring a spec for a new standard like Web Components is generally a thankless task, as is the tireless work of promulgating the standard through presentations like the one at Google I/O. So, before saying anything else: a big <strong>Thank You</strong> to Alex and Dimitri for their work on HTML Templates, Custom Elements, and Shadow DOM. Everything which follows is meant to support your work, not put it down.
<h2>Background of the problem</h2>
As I’ve blogged about before, I’m a passionate fan of web UI components and <a href="http://miksovsky.blogs.com/flowstate/2012/03/snapping-together-a-skyscraper.html">believe they will transform UI development</a>. The ability to define new elements for HTML is something designers and developers have long wanted but, until now, could only dream about. In the demo, Alex and Dimitri use Chrome’s early implementation of the proposed spec to create custom elements. They elegantly combine these elements to produce a custom UI component for a user poll:

<a href="http://quickui.files.wordpress.com/2012/06/web-component-poll.png"><img style="background-image:none;padding-left:0;padding-right:0;display:inline;padding-top:0;border-width:0;" title="Web Component Poll" src="http://quickui.files.wordpress.com/2012/06/web-component-poll_thumb.png" alt="Web Component Poll" width="600" height="432" border="0" /></a>

This poll user interface is a large component comprised of sub-components for accordions (or, later in the demo, tabs) and the big iconic choice buttons in the poll for “Semantics”, “Offline &amp; Storage”, etc. All these components are defined with declarative markup.

I enthusiastically agree with the presenters that declarative HTML, including the ability to define custom elements, results in UI code that can be easier to read than a comparable imperative solution in JavaScript. And to its credit, most of the demo code shown in the presentation is self-explanatory.

However, one aspect of the code really jumped out at me as a serious limitation of the current spec: a component host can only pass a single DOM content subtree to the component. As I’ll try to show, I believe that could seriously limit the degree to which a component can expose a meaningful API.

Consider the markup behind those big “choice” buttons. Each choice component includes an icon, a short text summary used as a label, and longer descriptive text that appears in a tooltip on hover. You can think of that per-choice data as, in effect, three public properties of the choice component:
<pre>&lt;element name=”x-choice” extends=”div” constructor=”ChoiceControl”&gt;
    &lt;template&gt;
        &lt;div id=”choice”&gt;
            &lt;div id=”icon” class=”mask”&gt;&lt;/div&gt;
            &lt;content select=”h3:first-of-type”&gt;&lt;/content&gt;
            &lt;aside&gt;
                &lt;content select=”*”&gt;&lt;/content&gt;
            &lt;/aside&gt;
        &lt;/div&gt;
    &lt;/template&gt;
    …
&lt;/element&gt;</pre>
The code above makes use of the proposed &lt;content&gt; element to select specific portions of the DOM tree (using CSS selectors) and incorporate them into the component’s shadow DOM. With that in place, the code for the overall poll component (i.e., the choice host) can instantiate choice buttons with the following markup:
<pre>&lt;x-choice value=”semantics”&gt;
    &lt;h3&gt;Semantics&lt;/h3&gt;
    &lt;p&gt;Giving meaning to structure, semantics are front and…&lt;/p&gt;
&lt;/x-choice&gt;
&lt;x-choice value=”offline-storage”&gt;
    &lt;h3&gt;Offline &amp; Storage&lt;/h3&gt;
    &lt;p&gt;Web apps can start faster and work even if there is no…&lt;/p&gt;
&lt;/x-choice&gt;
…</pre>
So the first code fragment effectively defines a choice component with three public properties (although these aren't actually class properties). The second code fragment shows the creation of two instances of that choice component, filling in two of the three choice properties. It’s not shown where the icon property is filled in, but it’s presumably done through styling.

All looks fine so far, but there are some serious issues lurking here.
<h2>Problems</h2>
The root issue here is that, as currently speced, <em>Web Components can only accept a single DOM-valued content property via markup</em>. This leads to a profusion of problems:
<ol>
	<li>
<h2>Asking developers to tease apart component content will mean work for devs, and produce inconsistent results.</h2>
Why, exactly, is the choice component using the &lt;h3&gt; tag to specify the text label for the button? Because this component has two textual properties, and the current Web Components spec only lets the developer pass <em>one</em> DOM content subtree to a component. So the component's author developer has to somehow let the component's users pack more than one property into the content, and then the dev has to crack that content to extract those properties. The question of <em>how</em> to crack that single content subtree into multiple properties is left entirely up to the developer.

The tool given to the developer for this purpose is CSS selectors, which at first glance seems powerful. Unfortunately, it’s also a recipe for inconsistency. Every developer will have the freedom—and chore—to approach this problem their own way, guaranteeing the emergence of a handful of different strategies, plus a number of truly bizarre solutions.

It’s as if you were programming in a system where functions could only accept a single array. As it turns out, we already have a good, common example of a such a system: command line applications. Every command-line application has some main() function that’s handed a single array of command line options, and the application has to decide what to do with them. Although conventions eventually arose with respect to the order and meaning of arguments, there’s still a wide variety of approaches. Some apps rely on argument position, some rely on single-letter flags (“-a”), some rely on full-word named parameters (“--verbose"), some have idiosyncratic microgrammars (e.g., chmod permissions), and many applications support a rich combination of all these approaches.

Parsing arguments is tedious, boring work. In the early days, a developer throwing an app together might do the absolute minimum work necessary. The result was often inconsistent or incomplete argument support. The dev might eventually be forced to hack on their app until they finally had a roughly functional command line parser. These days, developers can rely on language features, or libraries like Python’s argparse, to “crack” the argument array into a meaningful structure which can be more easily inspected. In particular, it’s invaluable to a developer to be able to directly inspect specific arguments by <em>name</em>.

The use of CSS selectors does remove some of this tedium, but it still leaves devs without a consistent way to refer to component properties by name, thereby leaving the door wide open for inconsistency. A dev might decide to use DOM structure, HTML tags, element classes, or a combination of all of these to demarcate properties. This will make it much harder for devs to share components, to swap out one component for another, and so on. It would be better if we could learn from the command-line argument example now and head off this inconsistency.</li>
	<li>
<h2>HTML semantics are nearly meaningless when used to identify parameters.</h2>
In the Google I/O demo, the developer of the choice component elected to use HTML tags within the single content subtree to identify properties. In this case, they decided that the first &lt;h3&gt; element in the content would identify the summary text, and everything else would be used as the longer text description.

But why use &lt;h3&gt; for this purpose? The W3C <a href="http://www.w3.org/TR/1999/REC-html401-19991224/struct/global.html#h-7.5.5">spec</a> says a heading tag like &lt;h3&gt; should be used to, “briefly describe the topic of the section it introduces”. These choices aren't introducing sections, so that can't be the the case here. Neither is this &lt;h3&gt; being used to reflect the rank of an element in a hierarchical document structure.

In all likelihood, the &lt;h3&gt; is used here, as it often is in practice, to mean something like, “somewhat prominent, but not <em>too</em> prominent”. Visually this usually translates to, “bold text, a little bigger than the body text”. At least, that seems to be how &lt;h3&gt; is being used in this component.

There's nothing really wrong with that, but it's clearly arbitrary. Other developers might easily make a different decision. Later, in the very same demo, the code for the poll component accepts the text label for a different Voting button through the use of a &lt;label&gt; element. So in one place in this app, a button’s label is specified with an &lt;h3&gt;, but elsewhere <em>in the same app</em>, a button’s label is specified with a &lt;label&gt;. I don’t think this reflects any particular negligence on the part of the demo’s developers. I think it’s a latent issue in any scheme that relies on HTML elements for something than the original purpose. Perhaps the code' s developers did have some reason in mind for using &lt;label&gt; in one place and &lt;h3&gt; in another, but the point is that the reason is not obvious to another party looking at the code.

The same arbitrary nature of tag choice here applies to use of the &lt;aside&gt; tag to identify the choice description. Try this: show the poll screen shot above to 3 web developers, and ask them which HTML tag they would use to specify the tooltip that should appear when the user mouses over a choice button. I’d be surprised if even <em>one</em> of them picked the &lt;aside&gt; tag. Is the tooltip content here really, as the <a href="http://www.w3.org/wiki/HTML/Elements/aside">W3C description</a> says for the &lt;aside&gt; element, “tangentially related to the content around the aside element, and which could be considered separate from that content”? Well, not really. But, maybe; that’s a debatable point. The fact it’s debatable is what’s at issue here.

In contrast, here’s a tautological statement which <em>wouldn’t</em> generate debate: the choice description in the tooltip is the choice description in the tooltip. The <em>local</em> semantics here aren’t in question. So it’s a shame the property can’t be described in contextual terms like “description”, or “tooltip”.

The fact that the component is using HTML elements to identify arguments appears sensible, but in practice will be nearly meaningless. Every single time a dev needs to create a new component property, they’ll pick from the 100-odd HTML elements. Their selection may depend on their experience, their mood, the phase of the moon, and which handful of HTML elements they haven’t already used for <em>other</em> properties on the same component. It's highly likely a different developer (or the same developer on a different day) would make a different selection of HTML elements for the same properties.

Imagine an object-oriented programming language that forced you to give class properties one of 100 sanctioned property names: “index”, “count”, “name”, etc. Evereyone’s classes would <em>look</em> consistent, but it would be an utterly false consistency. That’s effectively what we’ll get if component authors are forced to choose HTML tags to identify component properties.</li>
	<li>
<h2>Use of CSS selectors hinders a developer’s ability to add new properties.</h2>
Suppose the author of this component needs to add a new property to this choice component. Maybe they want to add a “More about this choice” link to each choice; this link should navigate to another page with more details on that poll choice. Following the example of the &lt;h3&gt; for the choice summary, they decide to define this link property by extracting the first &lt;a&gt; tag in the content to be the link to the “More about this choice” page.

Perhaps, following their use of the “h3:first-of-type” selector above, they decide to pick out this &lt;a&gt; tag with the similar CSS selector “a:first-of-type”. If they do so, this component author will inadvertently screw up any component user who happened to include an &lt;a&gt; tag somewhere in the description. Suppose a user of this component has <em>already</em> created some code for a choice like this:
<pre>&lt;x-choice value=”semantics”&gt;
    &lt;h3&gt;Semantics&lt;/h3&gt;
    &lt;p&gt;
        Semantics in &lt;a href=”…”&gt;HTML5&lt;/a&gt; applications…
    &lt;/p&gt;
&lt;/x-choice&gt;</pre>
The “a:first-of-type” selector for the “More about this choice” link will accidentally pick up the existing link, thereby breaking this use of the component. The component author could issue a “Breaking Change” notice, warning everyone to include an &lt;a&gt; tag before the choice description. But even that wouldn’t help someone who, for whatever reason, needed to embed an &lt;a&gt; inside of the &lt;h3&gt;.

The use of selectors here could be made more robust by using the child selector "&gt;", as in "&gt; h3:first-of-type". But this gets verbose, and again, isn't likely to be a universal convention, and inconsistent use of the child selector will only add to the confusion. The fundamental problem is that using CSS selectors for this purpose is inherently fragile.</li>
	<li>
<h2>Arbitrary parameter structure is brittle.</h2>
The fragility of using CSS selectors remains even if one tries to avoid the use of arbitrary HTML elements. Suppose you decide to use element <em>position </em>to identify components. You’ll still up a component which is hard to update.

Here, a relevant case study is the existing of positional function parameters in most programming languages. To take just one example, consider JavaScript functions. Suppose you’ve defined a function with three parameters: “function foo(a, b, c) {…}”. If you now want to add a new parameter “d”, you have to add it to the end of the argument list to avoid breaking existing users of your function. This can easily produce a function whose parameter order feels unnatural. And to use the new “d” parameter, a function caller <em>must </em>supply the intermediate arguments a, b, and c, even if those are irrelevant to the function call at hand.

To avoid these problems, programming languages tend to eventually evolve named function parameters. Functions with named parameters are inherently more future-proof and, importantly, allow callers to only specify the parameters they care about.

The lesson of positional function parameters applies to trying to parse component properties out of the DOM content subtree. Having learned this lesson in countless programming languages, it would be nice to just jump straight to a reasonable solution which allowed for named component properties. While CSS selectors represent a powerful parsing tool, much of that power is completely unnecessary in this context — and some people will inevitably put that extra power to poor use.</li>
	<li>
<h1>Subclasses will compete for parameters with their base classes.</h1>
The above situations quickly deteriorate further when one envisions extending an existing component via subclassing. Subclassing is a crucial means of efficiency in component development, in which the behavior of one component can be specialized for new purposes. As just one case, over 33% of the controls in the <a href="http://quickui.org/catalog">QuickUI Catalog</a> are subclasses of other Catalog controls. For example, both <a href="http://quickui.org/catalog/DateComboBox">DateComboBox</a> and <a href="http://quickui.org/catalog/ListComboBox">ListComboBox</a> extend <a href="http://quickui.org/catalog/ComboBox">ComboBox</a>, which itself extends <a href="http://quickui.org/catalog/PopupSource/">PopupSource</a>. This separation of concerns is vital to keep the code clean, organized, and maintainable.

Such subclasses would likely become unworkable as Web Components, because each level of the class hierarchy will be competing with its ancestors and descendants as they all tried to extract properties from the single DOM content subtree permitted by the Web Components spec. If the choice class extracts an &lt;h3&gt; element from the content, then that element is effectively<em> invisible </em>to the &lt;content&gt; selectors of its subclasses. (Or, if you let subclasses have first shot at the content, then the elements they pull out are effectively invisible to their base classes.)

This significantly complicates point #3 above (using CSS selectors to pull out properties from the DOM content subtree makes it hard to add new properties). Consider a subclass of the choice component above called, say, special-choice. Perhaps the author of special-choice has decided to use the HTML &lt;h4&gt; element to identify a particular property. Now the author of the base choice component decides to add a new property, and elects to use &lt;h4&gt; for this purpose themselves. This has the effect of breaking the special-choice subclass. Obviously, such naming conflicts can arise in regular OOP classes, but here the likelihood of conflict is much greater because of the highly constrained vocabulary of HTML elements.

Using DOM structure to select properties (point #4, above) is even <em>more</em> brittle when one considers subclasses. If a component class decides to use DOM element position to select content for a given property, and someone creates a subclass that likewise uses element position, the original base class’ API is effectively frozen. Suppose the base class defines a &lt;content&gt; element with selector “:nth-child(3)” , and the subclass goes ahead and uses a &lt;content&gt; with selector “:nth-child(4)”. How is the base class supposed to add support for a new property now? They can’t use position 4, because a subclass is already using that.

The situation could be worked around by requiring not just specific tags, but also specific class names, but this has problems of its own (see below).

As currently drafted, the Web Components spec seems highly likely to close off the possibility of rich component hierarchies. Most component developers will probably elect to just copy-and-paste useful code from other developers, rather than subclassing them, to preserve the ability to modify their components in the future.</li>
	<li>
<h2>Class names could help identify properties, but will probably just complicate everything.</h2>
One way to skirt the problems above is to use HTML element classes to identify properties by class name, and reference these classes in the CSS selectors. If you gave up on specific HTML tags, and just used a &lt;div&gt; and a named element class for all properties, the second code fragment above could look like this:
<pre>&lt;x-choice value=”semantics”&gt;
   &lt;div class=”summary”&gt;Semantics&lt;/div&gt;
   &lt;div class=”description”&gt;Giving meaning to structure…&lt;/div&gt;
&lt;/x-choice&gt;
&lt;x-choice value=”offline-storage”&gt;
    &lt;div class=”summary”&gt;Offline &amp; Storage&lt;/div&gt;
    &lt;div class=”description”&gt;Web apps can start faster…&lt;/div&gt;
&lt;/x-choice&gt;
…</pre>
This could potentially work if everyone agreed to <em>always</em> using an element class name to identify a property, and consistently applied those classes to a single element type (likely &lt;div&gt;) which everyone agreed upon would stand for “parameter”.

Unfortunately, the more likely result is that throwing element class names into the mix will just complicate everything further. Some devs will write their components that way, but others will insist the use of HTML elements as shown above. Some will require the use of both specific HTML elements <em>and</em> specific class names. E.g., the choice component’s summary property will be forced to be identified with &lt;h3.summary&gt; to avoid possible conflicts with other &lt;h3&gt; elements in the content. This would be verbose and, worse, as a component user you'd have to remember and specify <em>two</em> things, when one should be sufficient.</li>
	<li>
<h2>Invisible component APIs foreclose the possibility of inspection and reflection.</h2>
The choice component in this example effectively presents its hosts with an external API that allows the host to fill in two text properties. Unfortunately, that API is <em>implicit</em> in the design of the &lt;content&gt; elements and their selectors. That makes it hard to programmatically understand what a component is doing.

At design time, there’s no easy way to statically analyze the code to inspect what those &lt;content&gt; elements are actually being used for. You could potentially parse the HTML to find the &lt;content&gt; elements, then parse their CSS selectors, but that still wouldn't give you any hints as to what those &lt;content&gt; elements were being used <em>for</em>. At least a formal property name gives you a real idea as to its purpose.

And at runtime, there would be no easy way to ask a choice component instance questions about which properties it supports: “How many properties do you have?”, or “Do you have a ‘description’ property?” Such run-time inspection of a component’s API (also known as reflection) can be a powerful tool.

In this very presentation, Google’s developers point toward the benefits of programmatic inspection when they observe that giving web developers the ability to create new custom elements (via the &lt;element&gt; tag) will open new possibilities in researching possible improvements to HTML itself. For example, researchers could statically inspect Web Components actually used by production web sites to determine, for example, the names of the most common custom elements. That in turn could help guide the formal adoption of new HTML elements in future versions of the language itself.

That’s just one example of what’s possible when APIs are explicit. Such explicitness should be extended beyond component names to cover component property names as well.</li>
</ol>
<h2>A proposal to fix this: Support multiple, named, DOM-valued component properties</h2>
All the issues above could be eliminated or dramatically improved if the Web Components spec were amended to let developers create components that accept multiple, named, DOM-valued properties. (Presumably, this support would actually be added to HTML Templates, used by both &lt;element&gt; and &lt;decorator&gt; elements.)

Here are some possible syntax suggestions:
<ul>
	<li>
<h2>Proposal A: Use a consistent tag for component properties.</h2>
A convention of using &lt;div&gt; elements to hold properties (see point #6 above) is a bit odd, because the &lt;div&gt; tag is used simply as a placeholder. The convention could be improved by formalizing a new element specifically for this purpose. Perhaps the existing &lt;param&gt; tag, currently limited to use within &lt;object&gt; elements, could be given new life by being repurposed for use within components. Its definition would need to be extended to support a closing &lt;/param&gt; tag form that could encapsulate a DOM subtree:
<pre>&lt;x-choice value=”semantics”&gt;
    &lt;param name=”summary”&gt;Semantics&lt;/param&gt;
    &lt;param name=”description”&gt;Giving meaning to …&lt;/param&gt;
&lt;/x-choice&gt;
&lt;x-choice value=”offline-storage”&gt;
    &lt;param name=”summary”&gt;Offline &amp; Storage&lt;/param&gt;
    &lt;param name=”description”&gt;Web apps can start …&lt;/param&gt;
&lt;/x-choice&gt;
…</pre>
If &lt;param&gt; can’t be redefined this way, then a new tag like &lt;property&gt; could be created.

If HTML semantics zealots insist on mapping component content to HTML elements, it’d be possible to let define a component author identify a <em>backing</em> HTML semantic tag that should be used to treat the property’s content for search and other purposes. E.g., syntax within the &lt;element&gt; definition would indicate that the “summary” property should be backed by an &lt;h3&gt; element. This is exactly the way that the &lt;element&gt; tag’s “extends” attribute is already spec’ed to work. The author indicates that an &lt;x-choice&gt; element is backed by a &lt;div&gt;.

In the exact same way, the author could indicate that a &lt;param&gt; (or &lt;property&gt;) of name=”summary” should be backed by an &lt;h3&gt;. As noted above, the particular choice of backing HTML element might be inconsistent or meaningless, but at least use of a backing element confines the problem to a much smaller audience. That is, the component <em>users</em> shouldn’t need to know that summary property behaves like an &lt;h3&gt;, just like they don’t have to know that an &lt;x-choice&gt; behaves like a &lt;div&gt;. Rather, that would be something only the component author would need to concern themselves with.</li>
	<li>
<h2>Proposal B: Expand data- attributes to support data- elements</h2>
HTML developers can already attach arbitrary string data to HTML elements as data- attributes (that is, element attributes prefixed with “data-”). Web Components could build on this precedent to allow data- <em>elements</em> that specify DOM subtrees nested within the component's content. For example:
<pre>&lt;x-choice value=”semantics”&gt;
    &lt;data-summary&gt;Semantics&lt;/data-summary&gt;
    &lt;data-description&gt;Giving meaning to …&lt;/data-description&gt;
&lt;/x-choice&gt;
&lt;x-choice value=”offline-storage”&gt;
    &lt;data-summary&gt;Offline &amp; Storage&lt;/data-summary&gt;
    &lt;data-description&gt;Web apps can start …&lt;/data-description&gt;
&lt;/x-choice&gt;
…</pre>
In the case where the property values are pure text, a &lt;data-foo&gt; element could be interchangeable with the corresponding data-foo attribute within the component tag. So one could also write:
<pre>&lt;x-choice value=”semantics” data-summary=”Semantics”&gt;
    &lt;data-description&gt;Giving meaning to …&lt;/data-description&gt;
&lt;/x-choice&gt;
&lt;x-choice value=”offline-storage” data-summary=”Offline &amp; Storage”&gt;
    &lt;data-description&gt;Web apps can start …&lt;/data-description&gt;
&lt;/x-choice&gt;
…</pre>
The data- element form would only need to be used when specifying a real DOM subtree with subelements; otherwise, the data- attribute form could be used.</li>
	<li>
<h2>Proposal C (preferred): Let developers define custom property elements</h2>
The above approach could be tightened further by dropping HTML’s historic obsession with restricting the set of tags. By dropping by the “x-“ in the custom element tag, and the “data-“ in the custom property tag, we end up with something much cleaner:
<pre>&lt;choice value=”semantics”&gt;
    &lt;summary&gt;Semantics&lt;/summary&gt;
    &lt;description&gt;Giving meaning to structure, …&lt;/description&gt;
&lt;/choice&gt;
&lt;choice value=”offline-storage”&gt;
    &lt;summary&gt;Offline &amp; Storage&lt;/summary&gt;
    &lt;description&gt;Web apps can start faster …&lt;/description&gt;
&lt;/choice&gt;
…</pre>
As with the data- element approach above, this custom property element approach could also support the use of a data- attribute on the element tag itself when specifying a simple string property value.

The cleanliness of the code above comes at the cost of an ambiguity: if you can define your own element tags and property tags, how does the parser know which is which? In the code above, is &lt;summary&gt; a property of &lt;choice&gt;, or is it a custom element in its own right? One resolution would be a precedence rule, e.g., if &lt;summary&gt; is a child of a parent that has a summary property, then treat it as a property, otherwise instantiate it as a custom element. Another resolution would be to follow what Microsoft did with XAML's <a href="http://msdn.microsoft.com/en-us/library/ms788723.aspx#property_element_syntax">property element syntax</a>: allow (or require) the property to be written as &lt;choice-summary&gt;.

As noted above, if HTML powers that be insist on mapping component content to a fixed set of HTML elements, that could  be handled by letting a component author indicate the HTML element which should be used to back each property. Again, that would relegate the problem to something that only the component author would have to worry about. The writer of the code above that hosts the choice component wouldn’t have to obsess over the question of why &lt;aside&gt; was picked instead of &lt;label&gt;; that detail would only be visible by reading the code for the choice component. The host author only has to deal with &lt;summary&gt;, which has local meaning.

In any event, the above code sample is clean, and should serve as a goal. Such code would be a joy to write — and read. It moves HTML definitively towards the creation of domain-specific languages, which is where it should go.

It’s somewhat absurd that we can only define markup terms according to global consensus. That’s like waiting for a programming language committee to approve the names of your classes. The web will move forward at a <em>much</em> faster pace if we can let individual problem domains (online stores, news sites, social networks, games, etc.) define their own tags, with semantics they care about and can agree upon. As the aforementioned uses of &lt;aside&gt; and &lt;label&gt; illustrate, forcing developers to use HTML elements may give the appearance of consistent semantics, but that consistency is merely a facade. In contrast, letting polling organizations define the meaning of a &lt;summary&gt; property for a &lt;choice&gt; component could produce meaningful consistency within that industry.</li>
</ul>
<h2>There’s still time to fix this</h2>
In their presentation, Alex and Dimitri indicated that their goal is not to spec out a complete replacement for web UI frameworks. Rather, the goal of their work is to lay a solid foundation on top of which great web UI frameworks can be built by others. In this light, it is hoped that the Web Components spec can be amended to support multiple, named, DOM-valued properties — because that’s exactly the foundation a great web UI framework is going to need.

The QuickUI framework, at least, is more expressive with regard to component content than is possible within the current Web Components spec. That is to say, the existing Catalog of QuickUI controls (and the many others controls written in the service of specific QuickUI-based applications) could not be ported to the current Web Components spec. Or, perhaps, those controls <em>could</em> be ported — but then, for the reasons given above, the collection would then become so brittle that its evolution would come to a halt. That would be a shame.

To be sure, the Google team, and the others working on Web Components, are smart folks, and it’s likely they’ve already given at least some thought to the problems raised in this post. But more input, particularly when informed by real application experience by potential users of a standard, is always valuable in weighing decisions about what should go into the standard. And it's in that spirit that this post is written.

If you yourself have worked with component frameworks, and have experiences that bear on this issue, please share them with the folks at Google. A good forum for feedback might be the <a href="https://plus.google.com/103330502635338602217/posts">Web Components page on Google+</a>. (Be sure to thank everyone for their work!)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>84</wp:post_id>
  <wp:post_date>2012-07-02 08:00:28</wp:post_date>
  <wp:post_date_gmt>2012-07-02 15:00:28</wp:post_date_gmt>
  <wp:post_modified>2012-07-01 19:29:36</wp:post_modified>
  <wp:post_modified_gmt>2012-07-02 02:29:36</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>web-component-properties</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="web-components"><![CDATA[Web Components]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19069150]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>twitter_cards_summary_img_size</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{i:0;i:600;i:1;i:432;i:2;i:3;i:3;s:24:"width="600" height="432"";s:4:"bits";i:8;s:4:"mime";s:9:"image/png";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>50</wp:comment_id>
    <wp:comment_author><![CDATA[Dimitri Glazkov]]></wp:comment_author>
    <wp:comment_author_email>dimitri@glazkov.com</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/dglazkov</wp:comment_author_url>
    <wp:comment_author_IP>216.239.45.4</wp:comment_author_IP>
    <wp:comment_date>2012-07-16 14:00:26</wp:comment_date>
    <wp:comment_date_gmt>2012-07-16 21:00:26</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Jan! Thank you so much for this tremendous research! The thinking is refreshing and helpful to those of us who have been wandering in the spec woods for the last year (that’s me!)

In the past month, I’ve seen enough examples that clearly show that existing, declarative-only API for distributing insertion points is not enough. I have a few ideas and will have a proposal to address this soon. Once it’s written down, let’s try to take another run at this problem and see if it looks any better.

Dominic’s response covers most of reactions that I had. Here are my nits.

There’s slight error in understanding the current Shadow DOM spec, which hinders some of the arguments. Per spec, the selectors in “select” attribute are fragments: http://www.w3.org/TR/shadow-dom/#dfn-selector-fragment, which means that they explicitly only select the children of the host. You can’t accidentally pick off a descendant element.

I’ll admit I had a bit of fun picking out element names for markup API in the demo, “aside” and “label” probably being some of the more obnoxious examples. In all likelihood, the “named arguments” approach you mentioned will probably take a stronger hold -- and is already possible with both using class names and custom tags (as Dominic mentioned)

By the way, dropping the “x-” prefix is a non-starter, since this gives us no way to discern local semantics from public semantics in the document.

The “100 sanctioned property names” analogy simply doesn’t fit: this is HTML, not some proprietary format that we’re inventing. And if we were, we definitely shouldn’t be using the Web platform as a starting point. Being able to integrate with public semantics and compose documents that mix both public and local semantics is a big deal.

Just as much as I want to be able to have a custom tag for x-choice, I want to be able to use hyperlinks, emphasis and even tables inside of its tooltip -- and also keep the general meaning of what I am saying declaratively reasonably discernible even if the meaning of local semantics is not available.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1342474080]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1342474080.5811";s:7:"message";s:51:"janmiksovsky changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1342472426.8289";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"dglazkov";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2012-07-16 21:00:26]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>48</wp:comment_id>
    <wp:comment_author><![CDATA[Dominic Cooney]]></wp:comment_author>
    <wp:comment_author_email>dominic.cooney@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://plus.google.com/106914732602379899557/posts</wp:comment_author_url>
    <wp:comment_author_IP>74.125.56.33</wp:comment_author_IP>
    <wp:comment_date>2012-07-10 21:06:14</wp:comment_date>
    <wp:comment_date_gmt>2012-07-11 04:06:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for this wonderful post. You’ve raised a really crucial issue here. Here’s my $0.02:

Web Components are opening the door to a new phase of web application development. Right now we’re standing on the threshold. The light on the other side is dazzling. So we’re going to be disoriented for a while, but that is OK, because once we adjust to the light everything will be much clearer.

Point #1: I agree. For a while, results will be inconsistent. Wildly inconsistent. We’re still getting our bearings.

Point #2: You’re right that HTML semantics are somewhat meaningless; his example that h3 is “somewhat prominent” is spot on. I think the common practice will be: Nested custom elements. Just like  has its ,  has its  and  has its , we’re going to see sets of elements describing the structure of custom elements. It will feel totally natural. The only compelling reason to use HTML elements is if you’re designing for a specific fallback content effect in legacy browsers and you can’t achieve it with CSS (so I think using h3 will be unusual, but I could imagine people using input so they can participate in form submission.)

Point #3: This is right and wrong. You’re spot on that the selectors you use in  are part of your API and you will want to evolve and version that very carefully. However, with reference to my comments on point #2, when components use sets of elements tailored to their specific semantics, you’re going to accidentally collide a lot less.

Point #4: I agree that relying just on position is a bad idea, but I don’t see people doing that. I think the most common use of position will be to specify that something has only one of something. A tab has only one label, so your custom tab element will select the first tab label just to break ties.

Point #5: I’m really interested in subtyping components and it is something I haven’t thought about much. I want to study the Quick UI components to understand this issue better. Combine versioning with subtyping and you’ve got multiplicative complexity. There’s a dark corner of my heart, scarred by OO programming, that knows that most successful subtyping comes from someone controlling all of the things in the hierarchy and versioning them in lockstep. Then there’s a tiny amount of successful subtyping adding trivial adornment or convenience. Then there is an ocean of tears.

Point #6: I don’t see how this is substantially different to Proposal A. I think specific elements (see my comments on Point #2) are a better choice.

Point #7: This one is really interesting. Recently I have been thinking just about how web components will be documented – the HTML standard is an example, but I’m sure we can do better because web component documentation will be aimed exclusively at app authors. Script, markup and styling APIs will be important. You could imagine taking good documentation (like example markup with placeholders) and mechanising it (like DTDs or other schemas – hopefully in a lightweight way) and using that to support tools. But I don’t think the Web Components standards should bite off this problem, because there needs to be a lot more experimentation to work out what’s useful. (The same goes for lots of other component related stuff like licensing. Let the people who need it experiment on the platform, and then incorporate it in standards if that adds value.)

Proposal B is interesting for a couple of reasons: First, because the data- element name prefix implies scoping, where my proposed solution of more custom elements doesn’t. (What does a tab mean when it is used outside of a tab strip?) Second, it lets you present attribute values as content, which is nice and succinct. The data- prefixes work against the succinctness, though. It also overloads data- and seems contrary to the original purpose of data-; if you were using data attributes, you might be unhappy to find a whole bunch of them in an element’s dataset that weren’t really data.

Proposal C is the closest to what I’m thinking will happen, but I think it is fine if these elements use the existing custom element machinery. That machinery will probably be very useful for breaking up the implementation of your component anyway. Scoping is appealing, however what should the semantics be when one of these elements is removed from the outermost custom element and inserted into the DOM? It probably should not change object identity, so does that just throw an exception? Insert it anyway? (Then we may as well not worry about scoping.)

If nested custom elements are the solution, the problem of using simple (preferably unprefixed) element names in a reliable way becomes more important. It is a difficult problem. But if we can crack it there are many benefits: It is easier to use different versions of the same library in the same page at once; naming collisions between different libraries become manageable; and naming collisions between libraries and the future evolution of HTML might even become manageable. The convention-al alternative – x-qui-combobox &gt; x-qui-combobox-popup – is simple (good) but verbose (boo).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1341979575.1225";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"coonsta";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1341982224]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1341982225.2379";s:7:"message";s:51:"janmiksovsky changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2012-07-11 04:06:14]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>49</wp:comment_id>
    <wp:comment_author><![CDATA[coonsta]]></wp:comment_author>
    <wp:comment_author_email>dominic.cooney@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>74.125.56.33</wp:comment_author_IP>
    <wp:comment_date>2012-07-12 20:22:54</wp:comment_date>
    <wp:comment_date_gmt>2012-07-13 03:22:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Ah, WordPress ate my inline tags. I meant “Just like summary has its details, video has its track and table has its tr …” and so on.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>4700379</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1342149774.838";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"coonsta";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1342153539]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1342153539.1494";s:7:"message";s:51:"janmiksovsky changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2012-07-13 03:22:54]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>51</wp:comment_id>
    <wp:comment_author><![CDATA[itsyerboy]]></wp:comment_author>
    <wp:comment_author_email>schaedles@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://j0shstenger.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>24.61.175.66</wp:comment_author_IP>
    <wp:comment_date>2012-07-17 19:40:43</wp:comment_date>
    <wp:comment_date_gmt>2012-07-18 02:40:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Perhaps I'm missing something. . . why can't the "x-" prefix be dropped? Would it not be possible to discern local semantic of a newly defined element by the definition in the template? Is the concern that a developer might override the functionality of an existing tag?

Defining all custom tags as extensions of existing elements seems to solve this problem already: if there is any error on part of the local template, the component can simply default to the behavior of it's super.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>19124707</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1342579243.8925";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:9:"itsyerboy";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1342758391]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1342758391.7897";s:7:"message";s:51:"janmiksovsky changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2012-07-18 02:40:43]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>61</wp:comment_id>
    <wp:comment_author><![CDATA[Quetzal: an experimental translation of the QuickUI component model to HTML custom elements | QuickUI]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://blog.quickui.org/2013/06/03/quetzal-an-experimental-translation-of-quickui-component-model-to-html-custom-elements/</wp:comment_author_url>
    <wp:comment_author_IP>66.155.9.93</wp:comment_author_IP>
    <wp:comment_date>2013-06-03 08:03:18</wp:comment_date>
    <wp:comment_date_gmt>2013-06-03 15:03:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] A convention for multiple, named, DOM-valued properties. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370271799.900024890899658203125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1370276329]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370276330.4151918888092041015625;s:7:"message";s:51:"janmiksovsky changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-06-03 15:03:18]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>7543</wp:comment_id>
    <wp:comment_author><![CDATA[tour top destinations for wedding]]></wp:comment_author>
    <wp:comment_author_email>velvahaugh@gmx.net</wp:comment_author_email>
    <wp:comment_author_url>http://vimeo.com/speakingpictures</wp:comment_author_url>
    <wp:comment_author_IP>117.171.227.243</wp:comment_author_IP>
    <wp:comment_date>2015-05-26 07:15:35</wp:comment_date>
    <wp:comment_date_gmt>2015-05-26 14:15:35</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Very good website you have here but I was wondering if 
you knew of any discussion boards that cover the same topics discussed 
in this article? I'd really like to be a part of online community where I can get 
advice from other experienced individuals that share the 
same interest. If you have any suggestions, please let me know.
Kudos!]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1432649735.2850229740142822265625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[11028244216]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1432649735]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1432653413.5328619480133056640625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>7563</wp:comment_id>
    <wp:comment_author><![CDATA[auriculares inalambricos comparativa]]></wp:comment_author>
    <wp:comment_author_email>grant.hitchcock@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://westswindonintouch.com</wp:comment_author_url>
    <wp:comment_author_IP>23.247.207.86</wp:comment_author_IP>
    <wp:comment_date>2015-05-27 00:25:28</wp:comment_date>
    <wp:comment_date_gmt>2015-05-27 07:25:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I'd like to thank you for the efforts you've put in penning this site.
I'm hoping to check out the same high-grade blog posts by you later on as well.
In fact, your creative writing abilities has encouraged me to get my own blog now 
;)]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1432711528.7444779872894287109375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[11053835341]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1432711529]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1432715133.4876000881195068359375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>7478</wp:comment_id>
    <wp:comment_author><![CDATA[best earbuds 2015]]></wp:comment_author>
    <wp:comment_author_email>marietta.outhwaite@gawab.com</wp:comment_author_email>
    <wp:comment_author_url>http://Lapinatag.com/</wp:comment_author_url>
    <wp:comment_author_IP>155.94.135.228</wp:comment_author_IP>
    <wp:comment_date>2015-05-23 00:25:16</wp:comment_date>
    <wp:comment_date_gmt>2015-05-23 07:25:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Spot on with this write-up, I really believe that this 
web site needs a great deal more attention. I'll probably be returning to see more, thanks for the advice!]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1432365916.7733390331268310546875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[10916517282]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1432365916]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1432369737.728518009185791015625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>7496</wp:comment_id>
    <wp:comment_author><![CDATA[Johnathan]]></wp:comment_author>
    <wp:comment_author_email>ameemcdowell@aol.com</wp:comment_author_email>
    <wp:comment_author_url>http://billig.erophonica.com/</wp:comment_author_url>
    <wp:comment_author_IP>69.12.84.53</wp:comment_author_IP>
    <wp:comment_date>2015-05-24 12:28:55</wp:comment_date>
    <wp:comment_date_gmt>2015-05-24 19:28:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Ach ja, den Pin bitte nicht vergessen, denn sonst wird das mit dem Handy Telefonsex nichts!]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1432495735.223620891571044921875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[10967899711]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1432495735]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1432500641.9827859401702880859375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>7737</wp:comment_id>
    <wp:comment_author><![CDATA[homepage]]></wp:comment_author>
    <wp:comment_author_email>eddie.willason@googlemail.com</wp:comment_author_email>
    <wp:comment_author_url>http://cappadociahotels-tours.com/</wp:comment_author_url>
    <wp:comment_author_IP>183.87.116.14</wp:comment_author_IP>
    <wp:comment_date>2015-06-03 09:21:17</wp:comment_date>
    <wp:comment_date_gmt>2015-06-03 16:21:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi, everything is going fine here and ofcourse every one is sharing facts, that's 
genuinely excellent, keep up writing.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1433348477.6509039402008056640625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[11300339578]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1433348477]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1433353065.652451992034912109375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[QuickUI 0.9.2 released]]></title>
  <link>http://blog.quickui.org/2012/08/06/quickui-0-9-2-released/</link>
  <pubDate>Mon, 06 Aug 2012 15:00:00 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">https://quickui.wordpress.com/?p=104</guid>
  <description/>
  <content:encoded><![CDATA[<p>Version 0.9.2 is primarily a bug-fix release. Beyond a variety of minor fixes, there are just a couple of notable changes:</p> <ol> <li>Using $.control( element ) on an existing element to cast the element to the correct subclass of Control now returns null (instead of undefined) if the given element is not a control.</li> <li>A bug has been fixed which prevented quickui.js from loading in IE8. Thanks to QuickUI user Toussaint for reporting this bug and helping to test the fix!</li></ol> <p>The release of 0.9.2 coincides with the release of version 0.9.2 of the QuickUI Catalog, which includes the following:</p> <ol> <li>Modes now derives from a new base class called Sequence, a general-purpose class for any linear sequence of elements that can be navigated via a next() and previous() method. Modes now focuses on showing just one element of a Sequence at a time. As part of this change, Modes.activeChild() has been renamed to Modes.activeElement().</li> <li>SlidingPages has been renamed SlidingPanels (since its contained elements aren’t necessarily pages). The class now also derives from Sequence. Finally, SlidingPanels has been updated to take advantage of CSS transitions on browsers that support them, falling back to a jQuery animation on older browsers.</li> <li>LateralNavigator has been refactored to handle two general cases: first, navigating through a Sequence of elements, and second navigating through an abstract axis like time. The former case is specifically addressed with a new class called SequenceNavigator. The latter case is used in CalendarMonthNavigator.</li> <li>An issue that prevented CalendarMonthNavigator from correctly vertically aligning its heading elements has been fixed. CalendarMonthNavigator now also uses a new class, MonthAndYear, to show both the month and year instead of just the month name.</li> <li>A new VerticalAlign class handles the general problem of vertically aligning child elements in older browsers.</li> <li>A new Carousel class derives from SequenceNavigator, and uses a SlidingPanels class to provide a sliding transition between elements in the sequence.</li> <li>The TabSet class has been renamed to Tabs.</li></ol> <p>This release is also notable as the first one in which Catalog controls have been written (and, some cases, rewritten) in CoffeeScript.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>104</wp:post_id>
  <wp:post_date>2012-08-06 08:00:00</wp:post_date>
  <wp:post_date_gmt>2012-08-06 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2012-08-02 17:09:40</wp:post_modified>
  <wp:post_modified_gmt>2012-08-03 00:09:40</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quickui-0-9-2-released</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="releases"><![CDATA[Releases]]></category>
  <wp:comment>
    <wp:comment_id>55</wp:comment_id>
    <wp:comment_author><![CDATA[Vladimir Kelman]]></wp:comment_author>
    <wp:comment_author_email>vkelman@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.google.com/profiles/vkelman</wp:comment_author_url>
    <wp:comment_author_IP>157.130.55.170</wp:comment_author_IP>
    <wp:comment_date>2012-10-19 10:53:26</wp:comment_date>
    <wp:comment_date_gmt>2012-10-19 17:53:26</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Currently, http://quickui.org/catalog/HighlightEffects/ do nothing in Chrome and Firefox, and return JavaScript error in IE 9.  JavaScript console of Chrome reports the same error as IE:
64 Uncaught TypeError: Cannot read property '0' of undefined﻿]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1350679859]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1350669207.037498950958251953125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"vkelman";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2012-10-19 17:53:26]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>56</wp:comment_id>
    <wp:comment_author><![CDATA[vkelman]]></wp:comment_author>
    <wp:comment_author_email>vkelman@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>157.130.55.170</wp:comment_author_IP>
    <wp:comment_date>2012-10-19 10:55:08</wp:comment_date>
    <wp:comment_date_gmt>2012-10-19 17:55:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Currently,
http://quickui.org/catalog/HighlightEffects/ does nothing in Chrome and Firefox, and returns JavaScript error in IE 9. JavaScript console of Chrome reports the same error as IE:
64 Uncaught TypeError: Cannot read property '0' of undefined﻿]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>3649476</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1350679861]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1350669309.2747499942779541015625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"vkelman";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2012-10-19 17:55:08]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Template experimentation runs into some issues in Web Components spec]]></title>
  <link>http://blog.quickui.org/?p=106</link>
  <pubDate>Wed, 21 Nov 2012 00:12:17 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">https://quickui.wordpress.com/?p=106</guid>
  <description/>
  <content:encoded><![CDATA[<p>Recently someone suggested that JSON format for declaring a QuickUI component class could be tightened and made friendlier to a wider audience by adopting the use of templates a la <a href="http://handlebarsjs.com/">Handlebars</a>. An experiment along these lines is currently under way, but seems interesting.</p> <p>To take an example from the QuickUI documentation for <a href="http://quickui.org/docs/rendering.html">how controls fill in slots defined by base classes</a>, suppose you want to create a page template component that has a heading slot and a content slot. The current JavaScript code in QuickUI 0.9.2 looks something like:</p><pre>var SiteTemplate = Page.sub({
    inherited: {
        content: [
            { html: "h1", ref: "Page_heading" },
            { html: "div", ref: "Page_content" }
        ],
    },
    content: Control.chain( "$Page_content", "content" ),
    heading: Control.chain( "$Page_heading", "content" ),
});</pre>
<p>With templates, a comparable class could be created as:</p><pre><p>var SiteTemplate = Page.sub({
    inherited: {
        content: "&lt;h1&gt;{{heading}}&lt;/h1&gt;&lt;div&gt;{{content}}&lt;/div&gt;"</p><p>    } </p><p>});</p></pre>
<p>The CoffeeScript version is even cleaner, and can take advantage of multi-line strings:</p><pre><p>class window.SiteTemplate extends Page
  inherited:
    content: """</p><p>      &lt;h1&gt;{{heading}}&lt;/h1&gt;</p><p>      &lt;div&gt;{{content}}&lt;/div&gt;</p><p>    """</p></pre>
<p>The placeholders {{heading}} and {{content}} accomplish two useful effects:</p>
<ol>
<li>They generate an <a href="http://quickui.org/tutorial/element-reference-functions.html">element reference function</a> that can be used to consistently reference an element at run-time. Here, calling the $heading() function of a SiteTemplate instance will always return the component’s &lt;h1&gt; holding the heading. Similarly, $content() would return the corresponding &lt;div&gt;.</li>
<li>They implicitly generate an API for the component. For each placeholder, a <a href="http://quickui.org/tutorial/control-chain-helper.html">jQuery function chain</a> is created that provides access to the content of the referenced element. So heading() will get/set the contents of the &lt;h1&gt;, and content() will get/set the contents of the &lt;div&gt;. The difference between these functions and the ones created in step #1 is that an element reference function like $heading() returns a jQuery object with the &lt;h1&gt;, whereas a function like heading() returns the <em>contents</em> of that element. It’s this latter that’s most generally useful in an API exposed to component hosts.</li></ol>
<p>With the above definition(s) of SiteTemplate, you could then create a page with:</p><pre><p>class window.HomePage extends SiteTemplate
  inherited:
    heading: "Home Page"</p><p>    content: "Welcome to our web site."</p></pre>
<p>As in Handlerbars, QuickUI templates can also include placeholders for attributes. E.g., a component could let its host get/set a picture shown on a user tile:</p><pre><p>class window.Tile extends Control
  inherited:
    content: """</p><p>      &lt;img src="{{picture}}"/&gt;</p><p>      &lt;span&gt;{{content}}&lt;/span&gt;</p><p>    """</p></pre>
<p>Invoking Tile.picture() would then get or set the src attribute of the indicated &lt;img&gt;.</p>
<p>As much as possible, it would be useful for the syntax of QuickUI templates to mirror that proposed for Web Components. However, as noted in an earlier post, <a href="http://blog.quickui.org/2012/07/02/web-component-properties/">Shadow DOM subtrees do not currently support named DOM-valued properties</a>, nor any other standard means for identifying the parameters of a custom element. Shadow DOM subtrees can make use of CSS selectors in a “select” attribute to pull elements out of an element’s content.</p>
<p>However, there is no practical way for an external agent to programmatically inspect component code to determine <em>which </em>elements are going to be pulled out. This is exactly what a template parsing engine needs to be able to do.</p><pre><p>class window.ComponentHost extends Control
  inherited:
    content: """</p><p>      &lt;img src="{{picture}}"/&gt;</p><p>      &lt;span&gt;{{content}}&lt;/span&gt;</p><p>    """</p></pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>106</wp:post_id>
  <wp:post_date>2012-11-20 16:12:17</wp:post_date>
  <wp:post_date_gmt>2012-11-21 00:12:17</wp:post_date_gmt>
  <wp:post_modified>2012-11-20 16:12:17</wp:post_modified>
  <wp:post_modified_gmt>2012-11-21 00:12:17</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title><![CDATA[QuickUI 0.9.3 released]]></title>
  <link>http://blog.quickui.org/2013/01/11/quickui-0-9-3-released/</link>
  <pubDate>Sat, 12 Jan 2013 01:10:51 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">http://blog.quickui.org/?p=108</guid>
  <description/>
  <content:encoded><![CDATA[This minor release is being made now because it contains a fix for the forthcoming release of jQuery 1.9. Changes:
<ul>
	<li>A new Control member called Control.browser replicates the behavior of the now-deprecated jQuery.browser member. jQuery is quite reasonably trying to encourage people to use feature-detection libraries like Modernizr instead of looking directly at the user agent to determine behavior, and jQuery 0.9 is removing support for jQuery.browser. However, in developing the QuickUI Catalog controls, minor bugs have been found time and again in specific browsers to prevent controls from working correctly. These bugs are the sorts of things that will never be detectable with a feature-detection library, and hence checking the browser's user agent is the only practical way to ensure cross-browser compatibility.</li>
</ul>
The corresponding release of QuickUI Catalog 0.9.3 includes some minor enhancements:
<ul>
	<li><span style="line-height:15px;">A new <a href="http://quickui.org/catalog/TextBoxWithButton">TextBoxWithButton</a> control covers the common UI pattern of a text box with an adjacent button (often labeled "Go" or something similar). </span>The existing SearchBox control has been refactored to derive from TextBoxWithButton.</li>
	<li>A new <a href="http://quickui.org/catalog/Log">Log </a>control handles the common need to log text output (e.g., from a background process) to the page.</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>108</wp:post_id>
  <wp:post_date>2013-01-11 17:10:51</wp:post_date>
  <wp:post_date_gmt>2013-01-12 01:10:51</wp:post_date_gmt>
  <wp:post_modified>2013-01-11 17:10:51</wp:post_modified>
  <wp:post_modified_gmt>2013-01-12 01:10:51</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quickui-0-9-3-released</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="releases"><![CDATA[Releases]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19069150]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[QuickUI Catalog 0.9.3.1 released]]></title>
  <link>http://blog.quickui.org/2013/01/23/quickui-catalog-0-9-3-1-released/</link>
  <pubDate>Wed, 23 Jan 2013 23:38:46 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">https://quickui.wordpress.com/?p=113</guid>
  <description/>
  <content:encoded><![CDATA[The <a href="http://quickui.org/catalog">QuickUI Catalog</a> has been updated to version 0.9.3.1. This is a modest update in terms of functionality, but a significant milestone for the catalog — it represents the culmination of an effort to port all the Catalog controls to a combination of CoffeeScript and LESS.

The original QuickUI framework included the use of a local build tool called the QuickUI markup compiler. This compiled a markup format that was essentially HTML plus the use of custom tags. (In this, the format was remarkably similar to the spec'ed format for Web Components.) Because this format never got any traction, it was eventually deprecated, although still used for the vast majority of the Catalog controls. 2013 has begun with a major push to port all these controls to CoffeeScript for content and behavior and LESS for appearance.

Now that that port has been accomplished, it will be easier to move the Catalog forward, including the addition of new controls and some refactoring of existing ones. Along with this port, a handful of other controls were added to the Catalog:
<ul>
	<li><a href="http://quickui.org/catalog/ToggleButton">ToggleButton</a> is a button that can track a selected state. This can be used as is, or as a base class for custom toggle classes.</li>
	<li><a href="http://quickui.org/catalog/Link">Link</a> wraps a standard HTML &lt;a&gt; tag, and can be used as a base class for custom link classes.</li>
	<li><a href="http://quickui.org/catalog/TextBox">TextBox</a> wraps a standard HTML text input element, and can be used as a base class for custom text box classes.</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>113</wp:post_id>
  <wp:post_date>2013-01-23 15:38:46</wp:post_date>
  <wp:post_date_gmt>2013-01-23 23:38:46</wp:post_date_gmt>
  <wp:post_modified>2013-01-24 09:31:32</wp:post_modified>
  <wp:post_modified_gmt>2013-01-24 17:31:32</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>quickui-catalog-0-9-3-1-released</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="releases"><![CDATA[Releases]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19069150]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[A with children would be powerful]]></title>
  <link>http://blog.quickui.org/?p=116</link>
  <pubDate>Fri, 15 Feb 2013 00:52:59 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">https://quickui.wordpress.com/?p=116</guid>
  <description/>
  <content:encoded><![CDATA[<p>The <a href="http://www.w3.org/TR/2012/WD-components-intro-20120522/">Web Components</a> world continues to heat up. In response, experiments have begun on natively supporting QuickUI controls as Shadow DOM components. This would let controls render elements into the Shadow DOM, where they would not be visible to the control's host for inspection or manipulation, making those inner workings <em>opaque</em> to the outside world. Transparency is often a good thing, but not when it comes to components. Inappropriate transparency tempts developers to take shortcuts, directly traversing or manipulating the control's contents instead of working through the component's public API. Those shortcuts inevitably lead to inappropriate dependencies on a particular component implementation. The component author may no longer be free to change the workings of the component for fear of breaking someone else's code.</p>
<p>Rendering QuickUI controls into the Shadow DOM will make them opaque, and therefore more robust. Unfortunately, the current Shadow DOM design doesn't lend itself to a fundamental QuickUI principle defining the semantics between UI component subclasses and their base UI component classes. The principle is that <em>subclasses fill in slots defined by their base classes</em>. This topic is summarized in the documentation post on <a href="http://quickui.org/docs/rendering.html">how controls render themselves</a>.</p>
<p> </p>
<p> </p>
<div style="font-family:Calibri, sans-serif;font-size:14px;"> </div>
<div style="font-family:Calibri, sans-serif;font-size:14px;">
<div> </div>
<div>&lt;element name="icon-button" extends="button"&gt;</div>
<div>&lt;template&gt;</div>
<div>    &lt;img src='<a href="http://quickui.org/demos/resources/document_alt_stroke_12x16.png'/%3E">http://quickui.org/demos/resources/document_alt_stroke_12x16.png'/&gt;</a></div>
<div>    &lt;content&gt;&lt;/content&gt;</div>
<div>&lt;/template&gt;</div>
<div>&lt;/element&gt;</div>
<div> </div>
<div>
<div>&lt;element name="asterisk-button" extends="icon-button"&gt;</div>
<div>&lt;template&gt;</div>
<div>    *&lt;shadow&gt;&lt;/shadow&gt;*</div>
<div>&lt;/template&gt;</div>
<div>&lt;/element&gt;</div>
</div>
</div>
<div style="font-family:Calibri, sans-serif;font-size:14px;"> </div>
<div style="font-family:Calibri, sans-serif;font-size:14px;"> </div>
<div style="font-family:Calibri, sans-serif;font-size:14px;">    <img src="93601801-8F68-41A2-B762-0D92F65BB579" alt="" /></div>
<div style="font-family:Calibri, sans-serif;font-size:14px;"> </div>
<div style="font-family:Calibri, sans-serif;font-size:14px;">&lt;element name="icon-button" extends="button"&gt;</div>
<div style="font-family:Calibri, sans-serif;font-size:14px;">&lt;template&gt;</div>
<div style="font-family:Calibri, sans-serif;font-size:14px;">    &lt;img src='<a href="http://quickui.org/demos/resources/document_alt_stroke_12x16.png'/%3E">http://quickui.org/demos/resources/document_alt_stroke_12x16.png'/&gt;</a></div>
<div style="font-family:Calibri, sans-serif;font-size:14px;">    &lt;content&gt;&lt;/content&gt;</div>
<div style="font-family:Calibri, sans-serif;font-size:14px;">&lt;/template&gt;</div>
<div style="font-family:Calibri, sans-serif;font-size:14px;">&lt;/element&gt;</div>
<div style="font-family:Calibri, sans-serif;font-size:14px;"> </div>
<div style="font-family:Calibri, sans-serif;font-size:14px;">
<div>&lt;element name="asterisk-button" extends="icon-button"&gt;</div>
<div>&lt;template&gt;</div>
<div>    &lt;shadow&gt;</div>
<div>        *&lt;content&gt;&lt;/content&gt;*</div>
<div>    &lt;/shadow&gt;</div>
<div>&lt;/template&gt;</div>
<div>&lt;/element&gt;</div>
<div> </div>
</div>
<div style="font-family:Calibri, sans-serif;font-size:14px;"> </div>
<div style="font-family:Calibri, sans-serif;font-size:14px;">So the result of</div>
<div style="font-family:Calibri, sans-serif;font-size:14px;"> </div>
<div style="font-family:Calibri, sans-serif;font-size:14px;">    &lt;button&gt;Plain Button&lt;/button&gt;</div>
<div style="font-family:Calibri, sans-serif;font-size:14px;">    &lt;icon-button&gt;Icon Button&lt;/icon-button&gt;</div>
<div style="font-family:Calibri, sans-serif;font-size:14px;">    &lt;asterisk-button&gt;Asterisk Button&lt;/asterisk-button&gt;</div>
<div style="font-family:Calibri, sans-serif;font-size:14px;"> </div>
<div style="font-family:Calibri, sans-serif;font-size:14px;">would be</div>
<div style="font-family:Calibri, sans-serif;font-size:14px;"> </div>
<div style="font-family:Calibri, sans-serif;font-size:14px;"> </div>
<div style="font-family:Calibri, sans-serif;font-size:14px;">    <img src="72044948-A4ED-4F47-BC29-483186E6FE1B" alt="" /></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>116</wp:post_id>
  <wp:post_date>2013-02-14 16:52:59</wp:post_date>
  <wp:post_date_gmt>2013-02-15 00:52:59</wp:post_date_gmt>
  <wp:post_modified>2013-02-14 16:53:00</wp:post_modified>
  <wp:post_modified_gmt>2013-02-15 00:53:00</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="web-components"><![CDATA[Web Components]]></category>
</item>
<item>
  <title><![CDATA[QuickUI breaks with CoffeeScript 1.5]]></title>
  <link>http://blog.quickui.org/2013/02/27/quickui-breaks-with-coffeescript-1-5/</link>
  <pubDate>Wed, 27 Feb 2013 22:20:00 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">https://quickui.wordpress.com/?p=117</guid>
  <description/>
  <content:encoded><![CDATA[<p>Bad news: this week's release of CoffeeScript 1.5 is incompatible with even the current QuickUI release, 0.9.3.</p>
<p>QuickUI goes through <a href="http://blog.quickui.org/2012/06/07/jquery-fn-init/">significant trouble to subclass jQuery</a> because of jQuery's complex constructor. jQuery depends on an unusual feature of JavaScript called an "other typed" constructor: a class constructor that returns something other than a plain instance of the class being instantiated. When the CoffeeScript project considered dropping support for such constructors, cases were made to keep that feature (see <a href="https://github.com/jashkenas/coffee-script/issues/2359">CoffeeScript issue #2359</a>, but other people made similar cases on other issues). However, those arguments did not carry the day, and as of CoffeeScript 1.5, "other typed" constructors are rejected by the compiler. This effectively breaks the CoffeeScript source for QuickUI itself as well as for QuickUI Catalog.</p>
<p>Possible fixes are being investigated, but this issue runs very deep, and a number of straightforward workarounds have already been ruled out. A real fix will likely require a substantial change to the way QuickUI instantiates controls. For the time being, it is recommended that QuickUI developers use CoffeeScript 1.4.0.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>117</wp:post_id>
  <wp:post_date>2013-02-27 14:20:00</wp:post_date>
  <wp:post_date_gmt>2013-02-27 22:20:00</wp:post_date_gmt>
  <wp:post_modified>2013-02-27 14:20:02</wp:post_modified>
  <wp:post_modified_gmt>2013-02-27 22:20:02</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>quickui-breaks-with-coffeescript-1-5</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[QuickUI 0.9.4 released]]></title>
  <link>http://blog.quickui.org/2013/05/13/quickui-0-9-4-released/</link>
  <pubDate>Mon, 13 May 2013 18:51:36 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">https://quickui.wordpress.com/?p=118</guid>
  <description/>
  <content:encoded><![CDATA[<p>This release fixes a number of small bugs in both QuickUI and the QuickUI Catalog.</p>
<p>The most significant change is in the Control constructor. QuickUI previously went through a lot of trouble to <a href="http://blog.quickui.org/2012/06/07/jquery-fn-init/">subclass jQuery</a>. This code involved patching up a class when an attempt was made to instantiate it so that the result would be acceptable to jQuery. Specifically, the resulting patched-up class could be instantiated without requiring the "new" keyword. This code was quite complex and brittle, and was eventually <a href="http://blog.quickui.org/2013/02/27/quickui-breaks-with-coffeescript-1-5/">broken by a change to the CoffeeScript 1.5 compiler</a>. The CoffeeScript folks graciously backed out that change in CoffeeScript 1.6 so that QuickUI could continue to function.</p>
<p>Meanwhile, a workaround had already begun to drastically simplify the Control constructor — in exchange for dropping the ability to instantiate a control class' constructor without the "new" keyword. As it turns out, QuickUI controls are typically instantiated via the framework itself, either declaratively through Control JSON or imperatively by invoking Control.create(). Only the framework needed to directly instantiate a control class, and so the framework source was updated to always make use of the "new" keyword.</p>
<p>By the time this workaround was ready for deployment, the CoffeeScript 1.6 change made that workaround unnecessary. However, because the workaround was already working, and had significantly simplified the framework source, it was decided to keep the workaround. It was probably still correct for CoffeeScript 1.6 to back out the earlier breaking change to control constructors in CS 1.5. As this experience shows, the change not only dictated what CoffeeScript developers could do, it prevented or impaired their ability to integrated with plain JavaScript libraries which made use of "other typed" constructors.</p>
<p>In general, despite this constructor change deep in the framework, QuickUI developers should generally observe no changes in framework behavior.</p>
<p>The QuickUI Catalog has a few small bug fixes, but the version number has been bumped to 0.9.4.0 to keep in sync with the new version number for QuickUI 0.9.4.</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>118</wp:post_id>
  <wp:post_date>2013-05-13 11:51:36</wp:post_date>
  <wp:post_date_gmt>2013-05-13 18:51:36</wp:post_date_gmt>
  <wp:post_modified>2013-05-13 11:51:37</wp:post_modified>
  <wp:post_modified_gmt>2013-05-13 18:51:37</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>quickui-0-9-4-released</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="releases"><![CDATA[Releases]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Quetzal: an experimental translation of the QuickUI component model to HTML custom elements]]></title>
  <link>http://blog.quickui.org/2013/06/03/quetzal-an-experimental-translation-of-quickui-component-model-to-html-custom-elements/</link>
  <pubDate>Mon, 03 Jun 2013 15:00:49 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">https://quickui.wordpress.com/?p=120</guid>
  <description/>
  <content:encoded><![CDATA[I've started an experiment called <a href="http://janmiksovsky.github.io/quetzal/">Quetzal</a> that considers translating the core concepts from QuickUI to the proposed web component standards currently embodied by Polymer.

<i>[<b>Update</b> June 13, 2014: The Quetzal project has grown into an open source project called <a href="https://github.com/basic-web-components/components-dev/wiki">Basic Web Components</a>. Please take a look!]</i>

While continuing working on QuickUI, I've been tracking the progress of the Google-led efforts on web components: custom elements, Shadow DOM, and related advances in the web platform. Those technologies address many of the same issues QuickUI addresses, so I've been trying to chart a path by which QuickUI and web components could co-evolve.

Until recently, those web component technologies were generally available only on Google Chrome, which means QuickUI can't rely on them. However, since the start of the year I've been watching Google's <a href="http://www.polymer-project.org/">Polymer project</a> which, among other things, offers a suite of polyfills that allows one to create and use components in the <a href="http://www.polymer-project.org/compatibility.html">other "modern" browsers</a>, including recent versions of Safari, Firefox, and Internet Explorer 10+. Polymer offers a fairly compelling story for using those future browser technologies today.

I've spent a bit of time looking at how to retrofit support for Shadow DOM and other aspects of web components into QuickUI. While that's led to some progress, I'm not entirely sure that that's the best approach. To ensure this is being done the best way, I'd like to try an alternative approach build from scratch directly on top of a custom element substrate. That experiment is Quetzal.

There are a number of aspects of QuickUI that I believe are quite compelling, and which are either not easily supported in the proposed web standards, or appear under-represented in the current body of web components work. My goal in Quetzal is to explore whether those aspects of QuickUI have meaning in the world of web components, and what's the best way to bring those benefits forward. Some of those aspects of QuickUI I would very much like to see carried forward to the world of custom elements are:
<ul>
	<li>A focus on subclassing as a means to achieve well-factored code, including a good separation of concerns. This includes an approach to populating the DOM in which an element class can <a href="http://quickui.org/docs/rendering.html">fill in properties and content slots defined by their base classes</a>.</li>
	<li>The ability to concisely define component appearance and behavior in script instead of markup. While the &lt;element&gt; syntax is part of the standard, and therefore a useful baseline, markup feels limiting compared to what's possible in script. A compact JavaScript object format can be at least as expressive, and possibly more expressive, than HTML.</li>
	<li>A convention for <a href="http://blog.quickui.org/2012/07/02/web-component-properties/">multiple, named, DOM-valued properties</a>.</li>
	<li>The ability to <a href="http://blog.quickui.org/2012/04/27/how-quickui-controls-use-code-to-specialize-the-handling-of-their-content-in-ways-that-might-not-be-supported-by-web-components/">run code when an element's contents change</a>.</li>
	<li>Syntactic sugar for quickly defining common types of component properties.</li>
	<li>Helper functions for tasks that come up often in UI component design. This includes, for example, a lightweight model by which an element can respond to changes in its size in order to perform custom layout.</li>
	<li>A significant library of well-designed web user interface components, including a large number of useful base classes that people can use directly as the starting point for their own work.</li>
</ul>
The Quetzal experiment seeks to preserve the above features, while still allowing a designer or developer to create new custom elements which can interoperate with custom elements created by any other means (e.g., as Polymer elements).

Some early technical decisions for Quetzal:
<ul>
	<li><span style="font-style:inherit;line-height:1.625;">I'm leaving jQuery out of Quetzal. I'll go into that decision in <a href="http://blog.quickui.org/2013/06/04/do-web-component-developers-still-need-jquery/">more detail later</a>, but the bottom line is that jQuery no longer seems absolutely necessary for web development. When QuickUI began back in 2007, jQuery was a vital cross-browser abstraction layer, but browsers have become a lot more consistent in the intervening years. If you look at the browsers currently supported by Polymer, the core DOM API appears consistent enough that it's not overly cumbersome to use directly. And while any custom element library should support jQuery use, it would be nice if jQuery weren't a requirement.</span></li>
	<li>For the time being, Quetzal is written in CoffeeScript rather than plain JavaScript. I find CoffeeScript much more expressive, more productive, and easier to think in than plain JavaScript. As with QuickUI (which is also written in CoffeeScript), Quetzal elements can of course be created and extended in plain JavaScript. Still, I recognize that using CoffeeScript limits one's audience. If Quetzal were to evolve to be a real open source project, I might feel the need to back-port it to JavaScript.</li>
	<li>Quetzal only relies on the lower-level platform.js library created by the Polymer project, rather than the higher-level polymer.js library or the (higher still) library of Polymer elements. The <a href="http://www.polymer-project.org/">Polymer home page</a> currently includes an architectural diagram illustrating the relationship between these two libraries. Quetzal builds on the lowest, red-colored platform.js level, not the higher yellow or green levels. In this regard, Quetzal is comparable to Polymer elements. Because both rely on web standards, the results should be easily interoperable. As a side effect, Quetzal should also help prove out the ability of someone other than Google to build a UI component framework on top of platform.js.</li>
	<li>I'm currently working and testing primarily in Chrome. At various points, I check to make sure Polymer is polyfilling everything correctly under other browsers, but at this early stage, it's likely stuff will appear wonky in other browsers.</li>
</ul>
Quetzal isn't ready for real use yet: it does just a few things at this stage, it's not document, it's buggy, it doesn't work cross-browser (even with polyfilled custom elements), etc. But I wanted to announce the experiment now so that I can follow up here with additional posts as I go along. Work on Quetzal is generating questions I want to ask others, and to provide context for those things it's going to be helpful to be able to reference Quetzal posts here and source code on GitHub. After exploring some ideas, Quetzal's useful life may come to an end, or its lessons might get folded back into QuickUI, or it may evolve into a library of Polymer elements.

If you're interested in following along, subscribe to this blog, and/or follow me on <a href="https://twitter.com/JanMiksovsky">Twitter</a> and <a href="https://plus.google.com/118102862690539596548">Google+</a>.

Cheers,
Jan Miksovsky]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>120</wp:post_id>
  <wp:post_date>2013-06-03 08:00:49</wp:post_date>
  <wp:post_date_gmt>2013-06-03 15:00:49</wp:post_date_gmt>
  <wp:post_modified>2014-06-13 11:21:41</wp:post_modified>
  <wp:post_modified_gmt>2014-06-13 18:21:41</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>quetzal-an-experimental-translation-of-quickui-component-model-to-html-custom-elements</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="quetzal"><![CDATA[Quetzal]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19069150]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_49a31e5cf4a32be51513b437686e8389</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_047d875a10b3da109ccf494c4211d1f7</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_127afe48c6312a2b3084bd99a465bf7f</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>67</wp:comment_id>
    <wp:comment_author><![CDATA[Jokester]]></wp:comment_author>
    <wp:comment_author_email>main@jokester.fr</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>93.182.196.159</wp:comment_author_IP>
    <wp:comment_date>2013-06-17 01:51:38</wp:comment_date>
    <wp:comment_date_gmt>2013-06-17 08:51:38</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Avoiding JQuery is a good idea, but I'll unfortunately not contribute to a project coded in Coffescript.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1371459098.583939075469970703125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:10:"jokesterfr";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1371477263]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1371477263.92549991607666015625;s:7:"message";s:51:"janmiksovsky changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-06-17 08:51:38]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>92</wp:comment_id>
    <wp:comment_author><![CDATA[Jan Miksovsky]]></wp:comment_author>
    <wp:comment_author_email>jan@quickui.org</wp:comment_author_email>
    <wp:comment_author_url>http://quickui.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>67.185.162.218</wp:comment_author_IP>
    <wp:comment_date>2013-07-26 10:47:08</wp:comment_date>
    <wp:comment_date_gmt>2013-07-26 17:47:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Jokester/MikeH: Thanks for taking the time to share your thoughts. As much as I prefer using CoffeeScript, I think plain JavaScript is probably a requirement for a library intended for broad community participation. (Even something like TypeScript, with a claim to JavaScript compatibility, entails a learning curve and toolchain that surely raises the barrier to participation.) I've written more about my decision to try going back to plain JavaScript in a follow-up post: http://blog.quickui.org/2013/07/17/quetzal-take-2-creating-general-purpose-ui-components-as-polymer-elements/.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>19069150</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1374860828]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1374860828.615931987762451171875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-07-26 17:47:08]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>91</wp:comment_id>
    <wp:comment_author><![CDATA[MikeH]]></wp:comment_author>
    <wp:comment_author_email>memyselfandi@aol.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>62.152.161.9</wp:comment_author_IP>
    <wp:comment_date>2013-07-23 07:41:00</wp:comment_date>
    <wp:comment_date_gmt>2013-07-23 14:41:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Me Too! Coffescript is a no go! Avoiding JQuery is the right path.

If you need a more expressive language, what about Typescript?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1374590460.628838062286376953125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1374860565]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1374860566.0485489368438720703125;s:7:"message";s:51:"janmiksovsky changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-07-23 14:41:00]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>7013</wp:comment_id>
    <wp:comment_author><![CDATA[Matt]]></wp:comment_author>
    <wp:comment_author_email>caryncaraway@inbox.com</wp:comment_author_email>
    <wp:comment_author_url>http://Johnie.us</wp:comment_author_url>
    <wp:comment_author_IP>223.85.23.136</wp:comment_author_IP>
    <wp:comment_date>2015-03-08 01:26:46</wp:comment_date>
    <wp:comment_date_gmt>2015-03-08 09:26:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hello admin, i found this post on 15 spot in google's search results.
I'm sure that your low rankings are caused by hi bounce rate.
This is very important ranking factor. One of the 
biggest reason for high bounce rate is due to visitors hitting the back button. The higher your bounce rate the further 
down the search results your posts and pages will end up, so having reasonably low bounce rate is important 
for increasing your rankings naturally. There is very handy wordpress plugin which can help 
you. Just search in google for:
Seyiny's Bounce Plugin]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1425806806.4313070774078369140625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1425806806]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1425811899.8096749782562255859375;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>6861</wp:comment_id>
    <wp:comment_author><![CDATA[Leonardo]]></wp:comment_author>
    <wp:comment_author_email>sidney_maccullagh@t-online.de</wp:comment_author_email>
    <wp:comment_author_url>https://melbamullandkyl.wordpress.com/</wp:comment_author_url>
    <wp:comment_author_IP>192.255.101.30</wp:comment_author_IP>
    <wp:comment_date>2015-02-09 12:34:44</wp:comment_date>
    <wp:comment_date_gmt>2015-02-09 20:34:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[While some buy diamond jewellery just for wearing at special 
occasions, these can be worn at any other normal day to make it more 
sparkling and happening. Crystal Jewellery is young, vibrant,
timeless and elegant and is also a perfect gift idea 
for Valentine's Day or Mother's Day providing a sparkling gift that will 
be treasured for years to come. Glass beads can be mass produced 
in any colour, size of shape so that they can be used cheaply to create this lovely unique jewellery designs.
Recruiting and team building can lead to significant leadership income with any direct sales company.

For women and men of the decade, silver earrings 
among other types of jewellery is very popular.
Choosing the best style is not always an easy decision. trying to find time in our busy lives to take a day out 
to walk around various shops, sitting in traffic jams, parking problems, queuing 
at tills, etc - is that the prices are often much less than buying in the 
High Street shops. You dont need to go for shopping to the malls and jewellery 
shops. They are often matched with colored or plain crystal beads.
Indian women are known to wear many pounds of fine decorative jewellery 
on all parts of their body, including lightweight delicate necklace chains on their heads.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1423514085.564670085906982421875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1423514086]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1423518295.554544925689697265625;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Do web component developers still need jQuery?]]></title>
  <link>http://blog.quickui.org/2013/06/04/do-web-component-developers-still-need-jquery/</link>
  <pubDate>Tue, 04 Jun 2013 15:00:00 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">https://quickui.wordpress.com/?p=122</guid>
  <description/>
  <content:encoded><![CDATA[<em>I love you, jQuery. But maybe it's time we started spending some time apart.</em>

Improvements in cross-browser feature set and compatibility are reducing the need for jQuery, but more importantly, it turns out that a component-based app needs very little jQuery to begin with. These insights led to one of the first decisions I hit in <a href="http://blog.quickui.org/2013/06/03/quetzal-an-experimental-translation-of-quickui-component-model-to-html-custom-elements/">starting Quetzal</a>: should it require jQuery? The answer, so far, is no.

Since its inception in 2007, <a href="http://quickui.org">QuickUI</a> has relied on jQuery as a crucial browser abstraction layer. Without jQuery, QuickUI would have never have come to exist. However, the QuickUI runtime itself only uses a fairly small set of core jQuery functions, and modern browsers now deliver standards-based solutions for those situations. Moreover, I've noticed that, when building QuickUI component-based apps, component code tends to rarely require sophisticated jQuery.

Meanwhile, the web has moved forward. The modern browsers — the latest Chrome, Safari, Mozilla, and Internet Explorer 10+ — are all much, much more consistent to develop for than browsers were six years ago. Glancing at pages on <a href="http://www.quirksmode.org/dom/w3c_core.html">QuirksMode</a>, one generally sees a see of green compliance, with most of the red markers of non-compliance for older versions of IE. And according to <a href="http://gs.statcounter.com/">StatCounter</a>, market shares for both IE 8 and 9 have now dropped below 10% (each), so it's plausible for mainstream organizations to justify ignoring them.

Let's break down the things jQuery is good at, and consider how necessary are in a <em>web component-based</em> application (specifically) targeting the modern browsers:
<ul>
	<li><strong>Handling an array of DOM objects.</strong> It's convenient to be able to apply a jQuery function or plugin to a jQuery object containing a collection of DOM elements. However, modern web languages (CoffeeScript, ES6, etc.) provide syntax for iterating over a collection, substantially reducing the need for a special library for this purpose. And, while jQuery's array model is easy to consume, it also makes writing components harder. QuickUI control classes inherit from jQuery, which means every QuickUI class method has to consider the possibility it's being applied to multiple objects at a time, not just one. In practice, that's been a consistent source of complexity and bugs.</li>
	<li><strong>Selectors.</strong> The standard querySelector and querySelectorAll functions provide a reasonable way to find matching elements. (I believe those functions were at least partially inspired by jQuery.) I've heard that jQuery's Sizzle engine provides more power than querySelector, but again, in a component-based app, you're rarely doing sophisticated searching of the DOM. In practice, when I'm writing an app with QuickUI components, I do very, very little searching of the DOM. Every QuickUI component already has its own reference to exactly the sub-elements it cares about. Polymer does something similar with <a href="http://www.polymer-project.org/polymer.html#automatic-node-finding">automatic node finding</a>. With such facilities in place, there's no need to grovel around in the DOM to find something you're looking for. In fact, with Shadow DOM, the things you're probably looking for <em>aren't even findable</em>. This is a good thing; encapsulation is preventing you from writing brittle code. Every time you do a $("#foo"), you're running the risk of picking up the wrong #foo — maybe not today, but tomorrow, when someone else adds a #foo element somewhere on the page. In Quetzal or Polymer, you never search for something like that; a component already has a direct reference (this.$.foo) to the element you want to manipulate. Unlike a DOM search, dereferencing is instantaneous and 100% reliable.</li>
	<li><strong>Traversing. </strong>Ditto. In practice, component subtrees  — that is, the set of elements managed <em>directly</em> by a component — just aren't that deep. A deep subtree is, in fact, often an indicator that component refactoring is in order. It's exactly analogous to the way a deeply-nested set of code blocks (conditionals, loops) within a single function usually indicates the function should be refactored. Nearly all the time a QuickUI component needs to traverse the DOM, it wants to iterate over its own set of children — which, as noted above, can now be easily done in a modern language with decent syntax.</li>
	<li><strong>DOM manipulation.</strong> As browsers have become more consistent in the semantics of DOM operations, jQuery feels less necessary here. And much of the jQuery DOM manipulations one sees are a means to set up all or part of the DOM. in jQuery, one often sees code like: "Find all the divs of class '.menuItem', and wrap them, stuff them, and wire them up so that they turn into menu items." The existence of web components provides a <em>much</em> better way to accomplish the same result. All the population can be done through custom elements that provide a template for their DOM. That said, jQuery does provide a useful collection of helper functions. For example, to me it feels easier to use jQuery's css() method, which can take a JavaScript object as a parameter, than use the raw DOM "style" property directly. Generally speaking, the DOM API feels more like an old school C API, while jQuery feels like a JavaScript API.</li>
	<li><strong>Function chaining.</strong> jQuery chaining lets you concisely apply a set of selector, traversal, and manipulation operations. In practice, all three of those types of operations come up less often in a web component-based app. In particular, one often sees long chains of jQuery function calls when populating the DOM, but a &lt;template&gt; is a cleaner way to do that declaratively. Over the years, in QuickUI apps, I've noticed that I use jQuery chaining less and less often, to the point where I only rarely take advantage of it today.</li>
	<li><strong>Events.</strong> Microsoft IE 9 finally added support for addEventListener, so that it's possible to wire up event handlers in a consistent way. I expect there are still many discrepancies lurking in the details — when each browser decides to fire an event, for example — that might prove tricky to work around without an abstraction layer like jQuery that can normalize behavior.</li>
	<li><strong>Effects.</strong> CSS transitions and transition events now provide an easy, cross-browser way to do many of the same effects jQuery was first noted for. For years, the jQuery home page used to have a simple demo which, when you clicked a button, made a new DOM element appear with a transition effect. Such effects are now easily achievable without jQuery.</li>
	<li><strong>Data.</strong> jQuery provided a useful $.data service to associate data with DOM elements, because a browser's garbage collector can get confused when DOM elements and JavaScript objects reference each other. The various browsers also had myriad bugs and inconsistencies with regard to extending DOM elements. So UI framework developers like those on Prototype <a href="http://perfectionkills.com/whats-wrong-with-extending-the-dom/">gave up on extending the DOM</a>. However, as far as I can tell from the way Polymer is tackling things, extending the DOM now appears to work (generally) as expected. So perhaps $.data is no longer necessary.</li>
	<li><strong>Ajax.</strong> I don't write a ton of Ajax code myself, so for argument's sake, let's stipulate that jQuery's Ajax wrappers are handier than directly working with XMLHttpRequest. In particular, jQuery's use of promises as a data type simplify the task of writing async code. Perhaps for the time being, this particular aspect of jQuery is worth using on its own. A proposed browser standard for <a href="http://dom.spec.whatwg.org/#futures">futures</a> may reduce that benefit, however.</li>
	<li><strong>Plugins.</strong> Many, many of the jQuery plugins that exist today essentially create component-like things. These plugins effectively constitute a DOM template with some packaged behavior. I'd argue that a web component is a clearer, more maintainable way to achieve the same result. Encapsulation, in particular, is a huge advance to providing robust components. Moreover, many other uses for plugins could now be achieved by extending DOM elements directly.</li>
</ul>
Generally speaking, in a component-based app, you want to give each component the responsibility for managing its own appearance and behavior. You don't want code walking all over the DOM tree and mucking around with things that aren't its direct responsibility. Instead, you talk to the component managing the part of the DOM you care about, and ask that <em>component</em> to manipulate the elements it directly owns. In classic object-oriented programming terms, this is an application of the <a href="http://en.wikipedia.org/wiki/Law_of_Demeter">Law of Demeter</a>.

In practice, compartmentalizing things that way leaves each component doing very simple manipulations on a comparatively small set of elements: instantiating a new element; iterating over its own children; applying or removing a style; etc. If a component wants to do something more sophisticated to its internals, more likely than not the component should delegate that operation to one of its own sub-components. The component's own need to search is limited, reducing the need for a powerful selector/traversal engine. And, given a reasonably good programming language, simple DOM manipulations can be performed effectively — and with better performance — by directly accessing the DOM API.

I'm no cross-browser DOM API expert, and I've only just started to try to do things without jQuery. I could easily hit a landmine tomorrow, tripping upon some cross-browser nastiness I've been blithely unaware of, which jQuery for years has been invisibly and reliably been protecting me from. That said, work on Quetzal is progressing fairly smoothly without jQuery, and a week or two into this project, I'm not missing most of jQuery. It <em>would</em> be nice to have a much smaller library of helper functions which present a more JavaScript-flavored approach to the DOM API, as in jQuery's css(), mentioned above.

From one standpoint, you could say I've just traded one browser abstraction layer (jQuery) for another (Polymer's platform.js). However, platform.js feels like a pretty different animal than jQuery:
<ul>
	<li>The beauty of Polymer's approach of polyfilling forthcoming web standards in older browsers is that you can write code against the abstraction layer today that should invisibly start working against native implementations where and when those exist. It's still early, and that promise remains to be proven — but that's a very compelling promise.</li>
	<li>Those future standards mean you're working with facilities that someday every other developer will have (whether they want them or not). You're writing code on top of a library that could get smaller over time, not larger.</li>
	<li>The other difference with platform.js, as far as today's web component developers are concerned, is that it's really the only game in town. Unless you have the luxury of targeting the latest release of Chrome, you'll need to use platform.js (or the complete polymer.js) to run on other browsers.</li>
	<li>If one's goal is to write components that many people will use, it makes sense to reduce the number of additional dependencies. If jQuery's not required, then the lack of that dependency to some degree facilitates sharing.</li>
</ul>
We'll see how the Quetzal experiment evolves, but so far, writing directly to the DOM API is working out okay.

<em>So, jQuery, maybe we should spend some time apart.<em> <em>Maybe we should see some other people. </em>It's not you — it's me!</em> Don't worry; I might miss you terribly and come running back. Or maybe we'll just be friends.</em>

<em>It's okay. We'll always have IE6.</em>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>122</wp:post_id>
  <wp:post_date>2013-06-04 08:00:00</wp:post_date>
  <wp:post_date_gmt>2013-06-04 15:00:00</wp:post_date_gmt>
  <wp:post_modified>2013-06-11 16:46:07</wp:post_modified>
  <wp:post_modified_gmt>2013-06-11 23:46:07</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>do-web-component-developers-still-need-jquery</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="quetzal"><![CDATA[Quetzal]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19069150]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>1911</wp:comment_id>
    <wp:comment_author><![CDATA[Jan Miksovsky]]></wp:comment_author>
    <wp:comment_author_email>jan@quickui.org</wp:comment_author_email>
    <wp:comment_author_url>http://quickui.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>78.188.16.191</wp:comment_author_IP>
    <wp:comment_date>2014-06-21 07:10:03</wp:comment_date>
    <wp:comment_date_gmt>2014-06-21 14:10:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Kevin: Thanks for the pointer; I hadn't known about dataset. In my experience, all the situations in which I had previously been using $.data are now addressed by defining custom element properties. I guess dataset would be interesting if a component wanted to track per-node data (e.g., data for each of its children). I haven't come across where I've needed to do that yet, though.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>1906</wp:comment_parent>
    <wp:comment_user_id>19069150</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1403359804]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1403359804.3630580902099609375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1403359804]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-06-21 14:10:24]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>2190</wp:comment_id>
    <wp:comment_author><![CDATA[Adam]]></wp:comment_author>
    <wp:comment_author_email>adam2@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>66.249.81.15</wp:comment_author_IP>
    <wp:comment_date>2014-08-06 15:04:10</wp:comment_date>
    <wp:comment_date_gmt>2014-08-06 22:04:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[First, I agree that jQuery is no longer necessary on desktop. However, mobile WebKit has a lot of quirks which are being fixed by jQuery. jQuery devs said that old WebKit versions are bigger problem than oldIE nowadays.

Second, the Polymer framework is huge in terms of file size, which is a pain on mobile.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1407362650.6638469696044921875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1407367189]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-08-06 22:04:11]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1407367189]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1407367189.7096500396728515625;s:7:"message";s:51:"janmiksovsky changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>2192</wp:comment_id>
    <wp:comment_author><![CDATA[Jan Miksovsky]]></wp:comment_author>
    <wp:comment_author_email>jan@quickui.org</wp:comment_author_email>
    <wp:comment_author_url>http://quickui.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>67.185.162.218</wp:comment_author_IP>
    <wp:comment_date>2014-08-06 16:31:07</wp:comment_date>
    <wp:comment_date_gmt>2014-08-06 23:31:07</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Adam: I'm only doing relatively basic stuff on mobile, but can't recall having hit a bug that's unique to WebKit on Mobile Safari. So far, for my purposes, platform.js + Polymer works as expected on Mobile Safari.

Regarding file size, it looks like a minified, gzipped jQuery currently weighs in ~30K, and the corresponding size of platform.js is ~45K. While platform.js is 50% bigger, I wouldn't call that huge. So if you were using platform.js without the Polymer sugar, I'd think the download times would be roughly comparable. That's not to say a web component-based app using platform.js would perform as well as the same UI created in jQuery; the latter might easier be much faster. Still, my own bias is to prefer a framework that closely mirrors my intent, and I feel like web components is so much better than jQuery in that regard that I'm happy to focus my work on web components. And if all goes well, the perf of a web component app will just get faster and faster as more browsers implement the standards natively. So the jQuery answer might be faster this year, but in, say, 12 months, it could easily be much slower.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>2190</wp:comment_parent>
    <wp:comment_user_id>19069150</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1407367867]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-08-06 23:31:08]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1407367867]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1407367867.8320529460906982421875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1906</wp:comment_id>
    <wp:comment_author><![CDATA[Kevin]]></wp:comment_author>
    <wp:comment_author_email>kevinpeno@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/kevinpeno462</wp:comment_author_url>
    <wp:comment_author_IP>50.47.21.83</wp:comment_author_IP>
    <wp:comment_date>2014-06-20 15:54:18</wp:comment_date>
    <wp:comment_date_gmt>2014-06-20 22:54:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[RE: $.data, see dataset for pretty much 100% of what $.data was doing. (https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.dataset)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1403304859.27983188629150390625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"kevinpeno462";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1403320398]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1403320398]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1403320398.688877105712890625;s:7:"message";s:51:"janmiksovsky changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-06-20 22:54:18]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1251</wp:comment_id>
    <wp:comment_author><![CDATA[Nathan Black (@nathanboktae)]]></wp:comment_author>
    <wp:comment_author_email>nathanboktae@twitter.example.com</wp:comment_author_email>
    <wp:comment_author_url>http://twitter.com/nathanboktae</wp:comment_author_url>
    <wp:comment_author_IP>131.107.160.228</wp:comment_author_IP>
    <wp:comment_date>2014-04-04 09:25:17</wp:comment_date>
    <wp:comment_date_gmt>2014-04-04 16:25:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Great article. Though not only to web component authors not need jQuery, but Angular and Knockout users don't either, as those all have full DOM manipulation capabilities and utility methods as part of the library or framework.

"In particular, jQuery’s use of promises as a data type simplify the task of writing async code. Perhaps for the time being, this particular aspect of jQuery is worth using on its own."

Except it's promises are broken, which is why I pulled out Angular's $http service and made q-xhr (https://github.com/nathanboktae/q-xhr). Check it out.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1396629967]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1396629967]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value><![CDATA[twitter]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value><![CDATA[http://pbs.twimg.com/profile_images/1574911235/Nate6_normal.jpg]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value><![CDATA[175178760]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1396628717.716433048248291015625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-04-04 16:25:17]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1252</wp:comment_id>
    <wp:comment_author><![CDATA[Jan Miksovsky]]></wp:comment_author>
    <wp:comment_author_email>jan@quickui.org</wp:comment_author_email>
    <wp:comment_author_url>http://quickui.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>67.185.162.218</wp:comment_author_IP>
    <wp:comment_date>2014-04-04 09:54:08</wp:comment_date>
    <wp:comment_date_gmt>2014-04-04 16:54:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Nathan: Thanks. q-xhr looks interesting too — I was frustrated when I discovered that jQuery's promises were lame, and happy when I came found Q. I've seen a number of libraries that could benefit from q-xhr, some loading all of jQuery just to make an xhr call because they liked the convenience of promises. Doing that with real promises is a win.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>19069150</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1396630450]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1396630449.340097904205322265625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1396630448]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-04-04 16:54:08]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Puzzle: Define HTML custom element subclasses that can fill in base class insertion points]]></title>
  <link>http://blog.quickui.org/2013/06/11/puzzle-define-html-custom-element-subclasses-that-can-fill-in-base-class-insertion-points/</link>
  <pubDate>Tue, 11 Jun 2013 15:00:22 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">https://quickui.wordpress.com/?p=143</guid>
  <description/>
  <content:encoded><![CDATA[This post presents a little web component architectural puzzle which I've come across in the early stages of creating <a href="http://janmiksovsky.github.io/quetzal">Quetzal</a>. The puzzle deals with how Quetzal should best deliver an important component service on an HTML custom element substrate, and relates specifically to subclassing semantics. Any suggestions or comments would be much appreciated.
<h1>Background on the puzzle</h1>
Quetzal is an attempt to deliver key features of the QuickUI component model in HTML custom elements. One such feature is that an element subclass should be able to easily populate a slot (insertion points, in HTML parlance) defined by a base class. In practice, there are many situations in which you want to be able to say, "This new UI component should be just like that existing UI component, only with some stuff pre-filled in." For example:
<ul>
	<li>The QuickUI documentation presents a <a href="http://quickui.org/docs/rendering.html">simple page template example</a> in which classes in a small page template hierarchy fill in specific bits of their parents classes.</li>
	<li>A <a href="http://quickui.org/catalog/DateComboBox">DateComboBox</a> fills in the popup portion of a <a href="http://quickui.org/catalog/ComboBox">ComboBox</a>, which in turn is filling the content portion of a <a href="http://quickui.org/catalog/PopupSource">PopupSource</a>. This same facility is also used throughout the QuickUI Catalog. Moreover, it is used in many QuickUI apps in which a stock Catalog component is specialized for the app's context.</li>
	<li>Along those same lines, this same issue should crop up in any organization that tries to create a library of standard components which implement the organization's visual design language. Suppose your site's designer has created a cool button class as an HTML custom element, and you have used that to create an Add to Cart button. You write some script so the button can show <em>inside the button</em> the existing number of items in a customer's online shopping cart (to the right of the button label, say). You now want to package up the Add to Cart button so that it can be used as a component in its own right. For flexibility, you want the button's text label to vary in places.</li>
</ul>
Well-defined subclassing semantics are essential for creating a UI component library with a good separation of concerns. If you look at the class hierarchy depicted for DateComboBox (above), you'll get a sense of the degree to which it's possible to portion out specific roles to a small constellation of classes, such that each class can focus on just doing one thing really well.

I'm hoping that it is possible to take advantage of such subclassing semantics in HTML custom elements — but it's not proving to be particularly easy.
<h1>The puzzle</h1>
The puzzle is to come up with an architecture for custom element subclasses that meets the following design criteria:
<ol>
	<li>An instance of a subclass is a proper instance of its base class. All the normal JavaScript stuff should work: property/method access should go up the prototype chain, and a subclass instance should report that it is an "instanceof" the base class. By default, the HTML &lt;element&gt; syntax permits an "extends" attribute to identify a base class, but a purely script-based solution that sets up the class hierarchy correctly is equally valid.</li>
	<li>A subclass can put stuff into an insertion point defined by the base class. That is, the subclass can fill in a slot (or slots) defined by a base class. In turn, the subclass should be able to redefine such an insertion point so that the subclass itself can be subclassed.</li>
	<li>Unless overridden, all base class behavior should function properly in an instance of the subclass. E.g., if the base class wires up an event handler, then this works as expected for subclass instances too.</li>
	<li>Base class properties/methods can be overridden by the subclass. A subclass' property/method implementation should be able to invoke the base class' implementation by whatever language means are necessary. (CoffeeScript provides sugar for this; plain JavaScript developers have alternate ways of achieving the same result.)</li>
	<li>The base class can be any HTML custom element class; the base class author shouldn't<em> </em>have to do special work <em>a priori</em> to enable this kind of subclassing. This ensures a Quetzal author can always use someone else's element class as a base class — even if that other person has never heard of Quetzal.</li>
</ol>
A successful solution needs to meet all five of these criteria. So far, the approaches I've tried can satisfy at most four at a time.
<h1>Example</h1>
Let's walk through a example from the small set of custom elements currently shown on the <a href="http://janmiksovsky.github.io/quetzal">Quetzal home page</a>. This set includes a base element class called quetzal-button that shows its content inside a button, and another element class called icon-button which adds an icon to the plain-button content. For clarity, here let's just call that base class plain-button instead of quetzal-button, since the following source won't actually involve Quetzal. In any event, we want markup like this:
<pre>&lt;plain-button&gt;Plain button&lt;/plain-button&gt;
&lt;icon-button icon="document.png"&gt;Icon button&lt;/icon-button&gt;</pre>
… to produce something like this:

<img title="buttons.png" alt="Buttons" src="http://quickui.files.wordpress.com/2013/06/buttons.png" width="219" height="34" border="0" />

Where icon-button is reusing all the styling and behavior from plain-button; it's <em>not</em> duplicating the styling and behavior. The challenge is to create the icon-button element so it both inherits (in the class sense) from plain-button <em>and</em> extends the visual representation of plain-button.
<h1>A partial solution to filling in base class insertion points</h1>
The first challenge is: how can icon-button add elements to the content shown by plain-button? Some approaches:
<ol>
	<li>We could try to apply the template for <em>both</em> plain-button and icon-button to the same host element. The Shadow DOM spec supports <a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#multiple-shadow-trees">multiple shadow trees attached to the same host</a>. This feature alone is insufficient for the above example. Unless one shadow tree takes care to incorporate the other somehow, the most recently-added shadow subtree wins. If plain-button renders last, we get a button but no icon; if icon-button renders last, we get an icon but no button.</li>
	<li>We can include a &lt;shadow&gt; element in the template for icon-button, and ensure plain-button renders its shadow subtree first. The &lt;shadow&gt; element allows icon-button to effectively include the representation for plain-button. Unfortunately, this inclusion effectively <em>wraps</em> the base representation, rather than filling it in. An icon-button does get a button and an icon, but the icon and content render <em>outside</em> an empty button: <img title="shadow.png" alt="shadow" src="http://quickui.files.wordpress.com/2013/06/shadow.png" width="115" height="20" border="0" /></li>
	<li>We can have icon-button create an instance of its own base class, then have that instance contain the icon and the icon-button's own content. (This approach is based on a suggestion from Shadow DOM spec author Dimitri Glazkov.)</li>
</ol>
Approach #3 does what we want from a strictly visual perspective. (Behavior is a separate matter.) The source for a Polymer element version of this approach looks something like:
<pre>&lt;element name="plain-button" extends="button"&gt;
    &lt;template&gt;
        &lt;button&gt;
            &lt;content&gt;&lt;/content&gt;
        &lt;/button&gt;
    &lt;/template&gt;
    …
&lt;/element&gt;

&lt;element name="icon-button" extends="plain-button" attributes="icon"&gt;
    &lt;template&gt;
        &lt;plain-button&gt;
            &lt;img src="{{icon}}"&gt;
            &lt;content&gt;&lt;/content&gt;
        &lt;/plain-button&gt;
    &lt;/template&gt;
    …
&lt;/element&gt;</pre>
See a <a href="http://jsbin.com/unutay/1/edit">live example of this</a>. It should work in most browsers, but use Chrome if you want to see it working with real Shadow DOM. (Note: a <a href="https://code.google.com/p/chromium/issues/detail?id=244869">Chrome bug</a> prevents the buttons from responding correctly to mouse interactions. The buttons do receive mouse events, but for now it just doesn't look that way.)

If you open the example and inspect it in Chrome dev tools, you'll see that an icon-button has a shadow subtree containing a plain-button; the plain-button contains its own shadow subtree. Content of an &lt;icon-button&gt; element is therefore distributed <em>twice</em>: once into the &lt;plain-button&gt; element, and then again into the native &lt;button&gt; element. The ability of Shadow DOM to distribute nodes multiple times is called <a href="http://www.w3.org/TR/shadow-dom/#reprojection">reprojection</a>. (Or, at least, it meets the definition of reprojection as I understand it: "when an insertion point is a child node of another shadow host".)
<h1><strong>Inheritance versus containment</strong></h1>
Unfortunately, while this approach looks right, it doesn't behave quite right. An icon-button here is not only an instance of plain-button, it also contains a plain-button. That's problematic.
<ol>
	<li>When icon-button instantiates its inner plain-button, the inner button has no way to know its relationship to icon-button. Among other things, this means icon-button can't easily override behavior defined by plain-button (one of the design criteria above). In the JS Bin example, you can turn on the Console pane to see debug output. The plain-button element class defines a readyCallback (in Polymer, "ready") that invokes a base class method called log(). The icon-button class overrides that log() method, but because the inner plain-button is just that — a plain-button — its readyCallback will invoke the base plain-button implementation of log() instead of icon-button's specialized log() implementation. Running the demo invokes log() four times, when: 1) creating an instance of plain-button to use as the prototype for icon-button, 2) creating the visible plain-button with text "Plain button", 3) creating the inner plain-button used by the visible icon-button, and 4) creating the visible icon-button with text "Icon button". It's #3 and #4 together that are the problem: what we really wanted to do is invoke icon-button's log() implementation once.</li>
	<li>Automatic element references (a la Polymer, and also in Quetzal) aren't inherited by default. If plain-button defines an element with id #foo, then plain-button methods can access that element via the automatic reference this.$.foo. Similarly, we want an icon-button to have access to the same reference this.$.foo defined by the base class. (Or, at least, we can debate whether such automatic references should be treated as "private" or "protected", but it seems to me that "protected" would be useful.) It's possible to work around this particular issue for a known set of frameworks — that is, Quetzal could workaround this problem for its own classes, and perhaps for those defined by Polymer — but it wouldn't work in the general case of an unknown framework.</li>
	<li>It's easy to end up in situations where both icon-button and plain-button are duplicating work. Suppose an icon-button method invokes a super-method of the same name defined by plain-button, and suppose the base implementation of that method performs expensive work or obtains a reference to some resource. When the inner plain-button is instantiated, it might do that work — and then the same work or allocation might be repeated by the outer icon-button when it invokes the super-method. Conventions could be established to avoid this, but it would complicate otherwise simple situations, and again make it hard to use subclass elements from other frameworks.</li>
	<li>As a common case of the above point, if the inner plain-button wires up an event handler, then it's easy to end up in situations where the event is bound by both the inner plain-button and the outer icon-button. If the event bubbles up from something inside plain-button (a click on the button, say), you would end up handling the same event twice.</li>
</ol>
We could try to simplify things by just <em>containing</em> an plain-button, and not deriving from it. This forces us to give up one of the original design criteria outlined above: an instance of icon-button wouldn't actually appear to be an "instanceof" plain-button. Moreover, if plain-button defined some attributes ("disabled", say), icon-button would have to explicitly handle those too and forward their implementation to the inner plain-button.

We could have icon-button create a placeholder element (a &lt;div&gt;, say), create a shadow root for it, and populate that root with a copy of plain-button's template but <em>without</em> actually instantiating that inner element as a real, live plain-button. This is the approach that Quetzal currently uses. It solves a number of problems, but is dependent on knowing how a given base element class works. Quetzal reaches into the base class' implementation to obtain its template and then clones it, which might not be possible with other frameworks. This violates one of the design criteria above.

We could create a temporary instance of plain-button elsewhere, then clone just its contents into the icon-button instance. This avoids requiring detailed knowledge of what the base class is doing. But it could also result in subtle problems. E.g., the base class might not be expecting to have to serialize all its state into its shadow subtree, in which case the cloned content might not represent a coherent instance of the base class.
<h1>Looking for suggestions</h1>
This post is effectively a form of <a href="http://en.wikipedia.org/wiki/Rubber_duck_debugging">rubber duck debugging</a>. The simple act of writing this up has forced me to better understand the problem, and led to consideration of alternate lines of attack. The puzzle remains unsolved, however. Given my understanding of custom elements, and the design criteria for the puzzle above, I'm not sure whether a solution exists.

It's theoretically possible I've hit some limit in the expressiveness permitted to custom elements in their current state. Perhaps that limitation could be addressed. If not, I'd  have to write off a big chunk of the solutions used by the QuickUI Catalog and QuickUI apps, and find alternate ways of meeting the same needs.

I'm hoping, however, that I'm just missing something. If you have some passing familiarity with HTML custom elements and Shadow DOM, and have ideas about how to approach this problem within the existing technology, I'd love to hear them!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>143</wp:post_id>
  <wp:post_date>2013-06-11 08:00:22</wp:post_date>
  <wp:post_date_gmt>2013-06-11 15:00:22</wp:post_date_gmt>
  <wp:post_modified>2013-06-11 16:46:12</wp:post_modified>
  <wp:post_modified_gmt>2013-06-11 23:46:12</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>puzzle-define-html-custom-element-subclasses-that-can-fill-in-base-class-insertion-points</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="quetzal"><![CDATA[Quetzal]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19069150]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>63</wp:comment_id>
    <wp:comment_author><![CDATA[Jan Miksovsky]]></wp:comment_author>
    <wp:comment_author_email>jan@quickui.org</wp:comment_author_email>
    <wp:comment_author_url>http://quickui.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>67.185.162.218</wp:comment_author_IP>
    <wp:comment_date>2013-06-12 10:49:03</wp:comment_date>
    <wp:comment_date_gmt>2013-06-12 17:49:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I thought I'd provide some supporting data to help make the case that the component feature described in this post — filling in base class insertion points — is highly useful. I've done a quick analysis of four component-based libraries and applications built with the QuickUI framework, two public and two proprietary. I was curious what percentage of components in a given project filled in a base class in the manner described in this post. A relatively high percentage of components taking advantage of this facility would suggest that the feature is useful, and worth accommodating in web components.

Here are the percentage of base class-filling components found in four real applications (i.e., not tests, demos, etc.):
12% (12 of 94 components ) in the QuickUI Catalog, a library of general purpose components.
23% (7 of 30 components) in QuickUI.org, a web site for an open source project.
33% (5 of 15 components) in a simple mobile site for a tech startup.
41% (20 of 49 components) in a visually rich, browser-based interactive game.

23% (44 of 188 components) is the average across the four projects. I.e., roughly a quarter of components in this sample set take advantage of this base class-filling feature in QuickUI.

I should mentioned that these percentages are calculated by looking at *all* components in these apps. If one focuses on just those components which are inheriting from a class that defines visible elements, then the percentage of subclasses that want to fill in base class insertion points will probably much higher — likely over 50%. So, if you're creating a component that extends a class that itself populates the (shadow) DOM with visible elements, odds are that subclass wants to fill in insertion points defined by the base class. In other words, the technique addressed in this post is likely the norm, not the exception.

Stepping back and looking at these apps, I notice a rough correlation between the "specialness" of an app's user experience and the degree to which it's useful to use this base class-filling approach. The comparatively low percentage of the QuickUI Catalog stems from the fact that the Catalog is a library of general-purpose base classes. Many of those classes don't inherit from another class (aside from the base Control class). QuickUI.org is a fairly plain web site, and makes modest use of this feature to specialize the appearance and/or behavior of a handful of base classes from the QuickUI Catalog. The tech startup's mobile site is a bit more visually distinctive; even though it's a smaller app, it has stronger branding. Finally, in the browser-based game, visual aesthetics and unique behavior make up a significant part of the app's user experience — as opposed to pure functionality. So it's not surprising that the game makes the heaviest use of this feature, which is fundamentally about making it easy to create specialized user interface elements.

Of the four samples listed above, the game is probably the most representative of the demands of a mainstream consumer web app. If one were to look at component-based apps in production several years from now, one would probably find that the 23% average given above turned out to be a low estimate.

Another way to consider the percentages above is to say that the figure represents the portion of app UI code which today *cannot* be easily ported from QuickUI to web components. This is the sort of situation one finds when one has to port an app whose code takes advantage of an underlying programming language feature (generics, say), and tries to port to a language without such a feature. It's not that the port is impossible, but that the new language just can't express something which the old language could.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>19069150</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1371059343]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1371059343.4798009395599365234375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-06-12 17:49:03]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>7553</wp:comment_id>
    <wp:comment_author><![CDATA[VallieSandsy]]></wp:comment_author>
    <wp:comment_author_email>rico.triggs@inbox.com</wp:comment_author_email>
    <wp:comment_author_url>http://Seymour.ly</wp:comment_author_url>
    <wp:comment_author_IP>46.101.147.124</wp:comment_author_IP>
    <wp:comment_date>2015-05-26 12:18:49</wp:comment_date>
    <wp:comment_date_gmt>2015-05-26 19:18:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hello admin, i see your site needs fresh content. Daily updates will rank your site in google higher, content is king nowadays.
If you are to lazy to write unique posts everyday you should 
search in google for:
Ightsero's Essential Tool]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1432667929.41763401031494140625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1432667929]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1432672934.48921489715576171875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[buttons.png]]></title>
  <link>http://blog.quickui.org/2013/06/11/puzzle-define-html-custom-element-subclasses-that-can-fill-in-base-class-insertion-points/buttons-png/</link>
  <pubDate>Tue, 11 Jun 2013 00:09:41 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">http://quickui.files.wordpress.com/2013/06/buttons.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>145</wp:post_id>
  <wp:post_date>2013-06-10 17:09:41</wp:post_date>
  <wp:post_date_gmt>2013-06-11 00:09:41</wp:post_date_gmt>
  <wp:post_modified>2013-06-10 17:09:41</wp:post_modified>
  <wp:post_modified_gmt>2013-06-11 00:09:41</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>buttons-png</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>143</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://quickui.files.wordpress.com/2013/06/buttons.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/af0/31992059/files/2013/06/buttons.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:219;s:6:"height";i:34;s:4:"file";s:83:"/home/wpcom/public_html/wp-content/blogs.dir/af0/31992059/files/2013/06/buttons.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[shadow.png]]></title>
  <link>http://blog.quickui.org/2013/06/11/puzzle-define-html-custom-element-subclasses-that-can-fill-in-base-class-insertion-points/shadow-png/</link>
  <pubDate>Tue, 11 Jun 2013 00:09:43 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">http://quickui.files.wordpress.com/2013/06/shadow.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>146</wp:post_id>
  <wp:post_date>2013-06-10 17:09:43</wp:post_date>
  <wp:post_date_gmt>2013-06-11 00:09:43</wp:post_date_gmt>
  <wp:post_modified>2013-06-10 17:09:43</wp:post_modified>
  <wp:post_modified_gmt>2013-06-11 00:09:43</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>shadow-png</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>143</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://quickui.files.wordpress.com/2013/06/shadow.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/af0/31992059/files/2013/06/shadow.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:115;s:6:"height";i:20;s:4:"file";s:82:"/home/wpcom/public_html/wp-content/blogs.dir/af0/31992059/files/2013/06/shadow.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Quetzal, take 2: creating general-purpose UI components as Polymer elements]]></title>
  <link>http://blog.quickui.org/2013/07/17/quetzal-take-2-creating-general-purpose-ui-components-as-polymer-elements/</link>
  <pubDate>Wed, 17 Jul 2013 15:00:24 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">https://quickui.wordpress.com/?p=155</guid>
  <description/>
  <content:encoded><![CDATA[Just an update to the experimental <a href="http://janmiksovsky.github.io/quetzal/">Quetzal project</a> I posted about last month. I've learned quite a bit, and have changed course on two significant points, and thought I'd share a bit about my experiences with others who might be contemplating the creation of a framework or UI component library on top of web components.

<strong>A limitation of the current web component architecture</strong>

So far, the greatest challenge in replicating the range of expression in QuickUI's UI components has been the inability to easily <a href="http://blog.quickui.org/2013/06/11/puzzle-define-html-custom-element-subclasses-that-can-fill-in-base-class-insertion-points/">define HTML custom element subclasses that can fill in base class insertion points</a>. To their credit, Google's Blink (rendering engine) and Polymer (web component framework) teams have been responsive on that point. In response to a Polymer discussion board thread related to that post, a bug has been filed to allow one to <a href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=22344">distribute content nodes into a &lt;shadow&gt; insertion point</a>. Unless you're already experimenting with Shadow DOM, this entire issue undoubtedly seems quite arcane, but rest assured, fixing this one problem would open up a lot of important new territory.

I'm sincerely hoping this proposal is adopted. In the meantime, I've been using a workaround to simulate the effects of that proposal. That unfortunately <a href="https://github.com/Polymer/polymer/issues/203">broke in a recent Polymer update</a>, but such setbacks are to be expected when building on shifting sand.

<strong>Trying Polymer elements</strong>

I've spent some time experimenting with Polymer's own element layer, and last month decided to try adopting it. My first cut at creating custom elements for Quetzal was based directly on Polymer's lower levels, which take care of polyfilling (emulating) various web component standards. I'm now trying to use the higher-level Polymer elements layer, which provides a richer framework for creating custom elements, and adds a number of features to simplify common component tasks. These features are not part of any web component standard, but by virtue of being done by Google, will nevertheless probably become a common feature of the web component landscape.

There are still a number of QuickUI features that have no parallel in standard web components or Polymer elements, but most of those missing features appear to be things which I could implement on top of Polymer elements. For example, a &lt;quetzal-element&gt; base class could provide those missing features, making it easy for new element classes to obtain them. Aside from the critical limitation mentioned above, it now appears to me that most (hopefully, all) of QuickUI could likely be implemented as Polymer elements.

With that change, the latest Quetzal iteration recreates a handful of <a href="http://quickui.org/catalog/">QuickUI Catalog</a> elements as Polymer elements. So far, this approach feels acceptable, and it would obviously be a big advantage to leave most of the heavy lifting to the Polymer team, and focus on actually creating new custom elements.

Some notes on switching to Polymer elements:
<ul>
	<li>Using HTML to declare an element template feels quite verbose and cumbersome compared to QuickUI's use of CoffeeScript's concise JavaScript object format. If you haven't tried CoffeeScript, it improves over plain JavaScript object syntax by using indentation instead of requiring tons of curly braces and commas. Using HTML feels comparatively ponderous and noisy, and to me all that noise makes custom element source files somewhat less legible. Still, HTML <em>is</em> the lingua franca of the web, and using a standard confers a huge advantage over a proprietary format, however efficient it might be. At some point, the Polymer team says they'll support an imperative JavaScript means to define custom elements, but for now I'm guessing the vast majority of custom elements will use HTML, so that's what I want to try.</li>
	<li>Speaking of standard formats, one aspect of Polymer that's recently changed is that the top-level tag used to define a new element is now &lt;polymer-element&gt;, instead of the standard &lt;element&gt;. While Polymer elements are now just as locked into the Polymer framework as before, this change makes it feel like I'm no longer using a web standard — it feels like just another proprietary UI framework that happens to use XML/HTML as its format. It's surprising what a difference this small change makes. Using &lt;element&gt; simply <em>felt</em> better.</li>
</ul>
<strong>Going back to plain JavaScript</strong>

Switching the top-level component container to HTML instead of script has also prompted me to give up CoffeeScript, at least for now. I actually tried using a combination of CoffeeScript and HTML, but it felt like I was working against the grain, and I ended up giving up on that approach.

Going from CoffeeScript back to plain JavaScript is an excruciating experience. Oliver Wendell Holmes said, "Man's mind, once stretched by a new idea, never regains its original dimensions." I think the programming language analogue here is: once your brain has been expanded by a language that lets you more clearly express your intensions, trying to cram your brain back into the tiny box of a less expressive language is unbelievably painful.

Every single time I have to write a JavaScript loop instead of a CoffeeScript list comprehension, or type "function() {}.bind(this)" instead of just "=&gt;", I physically wince a bit. JavaScript just feels gross, it looks gross, it <em>is</em> gross.

That said, JavaScript is the standard. One thing I've learned from QuickUI is that if you're trying to build a community around a common library, creating that library in a programming language with a narrow audience dramatically limits the rate at which you can grow. One commenter named "jokester" offered on my original Quetzal post: "I’ll unfortunately not contribute to a project coded in CoffeeScript." Regardless of the advantages I believe CoffeeScript offers to developers, I'd rather allow orders of magnitude more people to contribute in the standard JavaScript language they're already proficient in.

Anyway, that's about the state of things. This Quetzal project is still just an experiment, and doesn't do much useful yet, but it's proving a good way to learn.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>155</wp:post_id>
  <wp:post_date>2013-07-17 08:00:24</wp:post_date>
  <wp:post_date_gmt>2013-07-17 15:00:24</wp:post_date_gmt>
  <wp:post_modified>2013-07-16 14:04:04</wp:post_modified>
  <wp:post_modified_gmt>2013-07-16 21:04:04</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>quetzal-take-2-creating-general-purpose-ui-components-as-polymer-elements</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="web-components"><![CDATA[Web Components]]></category>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19069150]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Polymer list box and combo box elements]]></title>
  <link>http://blog.quickui.org/2013/08/26/polymer-list-box-and-combo-box-elements/</link>
  <pubDate>Mon, 26 Aug 2013 15:00:25 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">http://blog.quickui.org/?p=159</guid>
  <description/>
  <content:encoded><![CDATA[The updated <a href="http://janmiksovsky.github.io/quetzal/">Quetzal</a> home page shows off a handful of new elements ported from QuickUI:
<ul>
	<li>A quetzal-list-box element that presents its children as items in a list. This makes it easy to give any collection of DOM elements the semantics of a single-selection list. The actual tracking of the selection is handled with Polymer's own polymer-selector element. On top of this, the Quetzal list box adds keyboard navigation: the user can navigate the list using the Up/Down arrow keys, as well as Home/End and Page Up/Page Down. This keyboard navigation follows the Microsoft Windows model, in which navigation keys move the selection, which in turn forces the list's scroll position to update to show the selected item. This makes it faster to select an item with the keyboard. (In Mac OS X, paging up and down does not update the selection.)</li>
	<li>A quetzal-combo-box element ties together a text input element, a popup, and a button to invoke or dismiss the popup. See this post on <a href="http://miksovsky.blogs.com/flowstate/2011/10/listcombobox.html">the original QuickUI combo box</a> for details on combo box behavior. Again, a key feature here is keyboard support: the Down key invokes the popup (if it's not already open), and the Escape key dismisses it. Another feature (inherited from the popup-source element) is positioning the popup above or below the text area as room allows. This combo box element doesn't provide a specific popup UI. Rather, it's intended to be used as a base class for custom combo box elements.</li>
	<li>A quetzal-list-combo-box element combines the two above elements to create a typical combo box which presents choices as a dropdown list box. This includes standard auto-complete behavior. In many situations, a combo box like this is often a better UI solution than a plain text box with auto-complete: the user has a clearly visible button which can be used to invoke the complete list of choices. This is more discoverable than requiring the user to begin typing to see what the possible choices are. The auto-complete behavior matches against the textContent of the elements' children, so the list items can be any type of item that has meaningful textContent. The sample shown uses a custom element that shows a color swatch next to a color name; typing some text will auto-complete against the set of color names.</li>
</ul>
These elements still need more work. For example, the combo box needs a stock mobile variant in which the element can fill the screen when making a selection to provide bigger hit targets and maximize the number of visible list choices. Also, at the moment simply tapping a list box element causes the Android Chrome browser to crash. This makes it somewhat hard to debug. :( Nevertheless, I think these element demonstrate that a good set of UI base classes will make it much easier to create custom UI designs as web components take hold.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>159</wp:post_id>
  <wp:post_date>2013-08-26 08:00:25</wp:post_date>
  <wp:post_date_gmt>2013-08-26 15:00:25</wp:post_date_gmt>
  <wp:post_modified>2013-08-23 15:11:30</wp:post_modified>
  <wp:post_modified_gmt>2013-08-23 22:11:30</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>polymer-list-box-and-combo-box-elements</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19069150]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>geo_public</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Filling in base class slots with the awesome new capability of the shadow element]]></title>
  <link>http://blog.quickui.org/2013/11/08/filling-slots-in-shadow/</link>
  <pubDate>Fri, 08 Nov 2013 16:00:09 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">http://blog.quickui.org/?p=168</guid>
  <description/>
  <content:encoded><![CDATA[In a <a href="http://blog.quickui.org/2013/06/11/puzzle-define-html-custom-element-subclasses-that-can-fill-in-base-class-insertion-points/">post a few months back</a>, I discussed how custom elements needed an easy way to fill in slots defined by their base classes. The capable folks on Google’s Blink team have now fixed this problem with a small but critical Shadow DOM change, and I wanted to take a moment to walk through an example of how the feature works and explain why this is so cool.

What does “filling in a slot” mean, and why does it matter? The crux of the issue, for us to be able to share web components, I need to be able to create a new web component that defines some, but not all, of its appearance. I need be able to define certain places that you can fill in with your content. Those are the slots: points of visible user interface extensibility.

<b>Example: a series of page templates</b>

The post linked above offers a simple button example, but let’s walk through a more realistic example using a series of page templates. (If you have Google Chrome Canary installed, you can follow along with <a href="http://jsbin.com/uJuxAzi/1/edit">a live demo</a>.) These sample templates will span a range of general-purpose to very specific. <span style="font-style:inherit;line-height:1.625;">For the sake of clarity, the examples are overly simple, and are intended just to convey a sense of how such templates might be used to build a simple online store app. The same principles shown here could easily be extended to arbitrarily complex interfaces.</span>

<img alt="Page Template 1" src="http://quickui.files.wordpress.com/2013/11/page-template-1.png" />
<em>A page-with-toolbar</em>

<span style="font-style:inherit;line-height:1.625;">We start with a completely general-purpose &lt;page-with-toolbar&gt; element that defines a page with a toolbar. For the sake of argument, let’s suppose there’s something fancy about the presentation here — perhaps the toolbar starts out at one size, and then, as the user scrolls, the toolbar becomes smaller and permanently docked at the top of the page. Regardless of what exactly makes this interesting, let’s assume that interesting stuff entails web ninja tricks the average designer or developer doesn’t have the time to learn or implement for themselves. Significantly, some aspect of the toolbar behavior requires real code, not just CSS styling.This user interface pattern is completely general-purpose, so perhaps this template is found in an online library of general-purpose web components. The key extensibility feature here is that the element defines two slots which consumers of the &lt;page-with-toolbar&gt; element can fill in: a toolbar slot at the top, and a main content slot.</span>

<img alt="Page Template 2" src="http://quickui.files.wordpress.com/2013/11/page-template-2.png" />
<em>A store-page partially fills in a page-with-toolbar</em>

<span style="font-style:inherit;line-height:1.625;">This second image shows a &lt;store-page&gt; element that forms the standard base for all pages in our hypothetical online store. This element subclasses (extends) the general-purpose &lt;page-with-toolbar&gt; element above, so it automatically picks up the structure defined by that element and the fancy toolbar behavior. The designer of the store app can fill in some of that structure with elements that should be visible on every page in the store, such as a Home button and the story name. That is, the designer can partially fill in the slots defined by the base class: after adding the standard elements they want on every page, they can define new slots that can be filled in by instances or subclasses. The designer can also add visual styling and any behavior that should be available on every page in the app. When complete, this page both extends the above element, and is itself extensible. The element is specific to this company, but could be used by any team at the company working on their online store.</span>

<img alt="Page Template 3" src="http://quickui.files.wordpress.com/2013/11/page-template-3.png" />
<em>A product-page partially fills a store-page</em>

The third image shows a &lt;product-page&gt; element. This extends the &lt;store-page&gt; element above to create a template for any page specifically in the app’s Products area. It fills in the toolbar slot with buttons that are only available on product pages. It also partially fills in the main content slot with a header for the product name. Finally, it adds any styling and behavior shared only by pages in the Products area. This product page element is still extensible, but an increasing portion of its interface and behavior are constrained.

<img alt="Page Template 4" src="http://quickui.files.wordpress.com/2013/11/page-template-4.png" />
<em>A completed instance of product-page</em>

Finally, we have an example of a filled-in &lt;product-page&gt; element. Presumably the app fills in the page by obtaining product data and used that to populate various elements on the page (e.g., using data binding). Now the whole page has been filled in.

By factoring our app’s design this way, we’ve created a good separation of concerns. The &lt;page-with-toolbar&gt; element doesn’t have to know anything about online stores. Conversely, the &lt;store-page&gt; element doesn’t have to know anything fancy toolbar behavior. The &lt;product-page&gt; designers don’t even need to know where the toolbar behavior comes from — all they need to know is that they get it for free. If the team at the company that owns the &lt;store-page&gt; element later decides to change the toolbar behavior, they can do so without the people who own the &lt;product-page&gt; element needing to do anything.

<b>How does this work?</b>

Until recently, it wasn’t possible for a custom element to fill in slots defined by a base class this way. An element’s template could contain a &lt;shadow&gt; element to ask its base class to render its stuff, but there wasn’t an easy way to pass content to the base class. Over the past couple of months, the Blink folks working on Shadow DOM features have just addressed this shortcoming with a new feature in the <a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html">Shadow DOM spec</a> and its Blink implementation. Technically speaking, the spec now allows a custom element to distribute nodes into a &lt;shadow&gt; insertion point and then reproject those nodes into an older shadow root.

To see an example of how this works, see <a href="http://jsbin.com/uJuxAzi/1/edit">the live demo</a>. At the time of this post, you’ll need to use <a href="https://www.google.com/intl/en/chrome/browser/canary.html">Google Canary</a>. You’ll also need to open chrome://flags and check "Enable experimental Web Platform features". But this feature will likely make its way into production Chrome in the not-so-distant future, and get polyfilled by the Polymer project for other browsers.

You can look through the code for the complete story, but the gist is this: if your element puts stuff inside a &lt;shadow&gt;, then that stuff will be passed to the base class as content. In our &lt;page-with-toolbar&gt; example element, the template contains a bit for the toolbar that looks like this:
<pre>&lt;polymer-element name=”page-with-toolbar”&gt;
&lt;template&gt;
  …
  &lt;div id=”toolbar”&gt;
    &lt;content select=”.toolbar”&gt;&lt;/content&gt;
  &lt;/div&gt;
  …
&lt;/template&gt;
&lt;/polymer-element&gt;</pre>
That &lt;content select=”.toolbar”&gt; bit creates a slot that can be filled in by instances — or by subclasses. When our &lt;store-page&gt; element subclasses &lt;page-with-toolbar&gt;, it fills in that slot:
<pre>&lt;polymer-element name=”store-page” extends=”page-with-toolbar”&gt;
&lt;template&gt;
  &lt;shadow&gt;
    &lt;span class=”toolbar”&gt;
      &lt;button&gt;Home&lt;/button&gt;
      &lt;content select=”.toolbar”&gt;&lt;/content&gt;
    &lt;/span&gt;
    …
  &lt;/shadow&gt;
&lt;/template&gt;
&lt;/polymer-element&gt;</pre>
Everything inside the store-page’s &lt;shadow&gt; will look to the page-with-toolbar base class like regular content. The page-with-toolbar’s toolbar slot will grab the span with class=”toolbar”, so the store-page’s Home button ends up in the toolbar. This lets store-page fill in the toolbar slot defined by page-with-toolbar.

So that store-page itself can be extended, it in turn redefines that toolbar slot. Any toolbar buttons defined by subclasses of store-page (like the Add to Cart and Buy Now buttons in our product-page example) will get picked up by store-page’s toolbar slot, which is nestled inside page-with-toolbar’s toolbar slot.

<b>Conclusion</b>

Sometimes tiny differences in fundamental features, like this refinement to the &lt;shadow&gt; behavior, can open up new realms of possibility. While it doesn’t look like much, when combined with subclassing, you’ve just been given a powerful new tool for creating custom web elements. You’ll be able to create a wide range of new general-purpose elements that can be filled in by other people to suit their needs, and you’ll be able to fill in general-purpose elements created by others to suit your own needs. This is a huge step towards a <a href="http://miksovsky.blogs.com/flowstate/2012/03/snapping-together-a-skyscraper.html">vibrant ecosystem of web user interface components</a>.

<em>Beyond the expanded capabilities enabled here, I’m personally excited to see this change because I’ve been advocating for it for so long. I made a pitch for this on a visit to Google back in May 2012, and have promoted the idea in various forums since then. Other people like Scott Miles at Google also lobbied for the same thing. Special thanks are owed to Scott and to Dominic Cooney for contributing their own weight behind this idea and building the momentum required to make it happen; to Blink developer Hayato Ito for his work updating the spec and implementing the feature in Blink; and to Dimitri Glazkov for his careful oversight of the Shadow DOM spec. This is one spec change that was totally worth the trouble!</em>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>168</wp:post_id>
  <wp:post_date>2013-11-08 08:00:09</wp:post_date>
  <wp:post_date_gmt>2013-11-08 16:00:09</wp:post_date_gmt>
  <wp:post_modified>2013-11-08 11:09:26</wp:post_modified>
  <wp:post_modified_gmt>2013-11-08 19:09:26</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>filling-slots-in-shadow</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="web-components"><![CDATA[Web Components]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19069150]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>twitter_cards_summary_img_size</wp:meta_key>
    <wp:meta_value><![CDATA[a:6:{i:0;i:302;i:1;i:402;i:2;i:3;i:3;s:24:"width="302" height="402"";s:4:"bits";i:8;s:4:"mime";s:9:"image/png";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>544</wp:comment_id>
    <wp:comment_author><![CDATA[Julien]]></wp:comment_author>
    <wp:comment_author_email>julien.eluard@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://</wp:comment_author_url>
    <wp:comment_author_IP>186.136.126.172</wp:comment_author_IP>
    <wp:comment_date>2014-02-06 12:22:00</wp:comment_date>
    <wp:comment_date_gmt>2014-02-06 20:22:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for the clarification!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>6666699</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[21340041426]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1391718120]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1391718120]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1391718120.407166004180908203125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"julieneluard";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-02-06 20:22:00]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>534</wp:comment_id>
    <wp:comment_author><![CDATA[Jan Miksovsky]]></wp:comment_author>
    <wp:comment_author_email>jan@quickui.org</wp:comment_author_email>
    <wp:comment_author_url>http://quickui.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>67.185.162.218</wp:comment_author_IP>
    <wp:comment_date>2014-02-05 21:31:18</wp:comment_date>
    <wp:comment_date_gmt>2014-02-06 05:31:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Julien: It's hard to design in the abstract to come up with a single approach to creating a page element that supports menus and/or toolbars. An important factor in the design decision might be how consistent a set of pages are going to be. If nearly all of them have a menu and a toolbar, then perhaps you'd have a page template element that supports both of those, with some (only occasionally used) option to suppress one or the other. If, however, nearly all the pages had only a toolbar, and just a handful also had a menu bar, you'd probably end up with a different factoring.

Composition is often useful, but inheritance is still a great solution when you want to create an element that fills in a template *and* exposes the same API as that template. Composition in that situation forces you to create a lot of boilerplate methods/properties on the outer element that simply delegate to corresponding members on the inner (template) element.

Regarding the example, the demo that accompanies this article has indeed been broken by recent changes in Canary. It turns out that the implementation of the feature discussed here (redistributing nodes into a shadow element) turned out to be harder to implement than first envisioned. See the bug at https://www.w3.org/Bugs/Public/show_bug.cgi?id=24288. According to a comment from Steve Orwell on the polymer-dev group (https://groups.google.com/d/msg/polymer-dev/tH9_SMpDbIg/WBfxvY1cfooJ), it sounds like this feature won't be included in the initial Shadow DOM implementation that will ship (soon) in production Chrome. That's a bummer. The Polymer team, at least, appears to be still lobbying for this feature to be finished and shipped in the future.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>19069150</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[21290213794]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1391664678]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1391664678.4920918941497802734375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1391664678]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-02-06 05:31:18]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>519</wp:comment_id>
    <wp:comment_author><![CDATA[Julien]]></wp:comment_author>
    <wp:comment_author_email>julien.eluard@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/julieneluard</wp:comment_author_url>
    <wp:comment_author_IP>186.136.126.172</wp:comment_author_IP>
    <wp:comment_date>2014-02-04 14:49:02</wp:comment_date>
    <wp:comment_date_gmt>2014-02-04 22:49:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Great article!

Shadow insertion-point is a nice feature but I'd rather go for composition over inheritance to fill them.

How could you change your example to include a menu on top of the topbar? Would you end up with 'page-with-toolbar', 'page-with-menu', 'page-with-toolbar-and-menu' and have to switch to the relevant type?

As a side note it looks like necessary support has been removed from Canary? Your example does not work with experimental features enabled.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1391663740]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1391663740]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[21289435648]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1391554142]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1391554142.3246600627899169921875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"julieneluard";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-02-04 22:49:02]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1227</wp:comment_id>
    <wp:comment_author><![CDATA[Jan Miksovsky]]></wp:comment_author>
    <wp:comment_author_email>jan@quickui.org</wp:comment_author_email>
    <wp:comment_author_url>http://quickui.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>67.185.162.218</wp:comment_author_IP>
    <wp:comment_date>2014-04-01 14:11:11</wp:comment_date>
    <wp:comment_date_gmt>2014-04-01 21:11:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Mark: I am still working on Quetzal, and actually am in the process of expanding it to a larger community project. The name will likely change, but most of the design principles and elements will be carried over. I hope to have information to share about that on this blog in the next month or so. Thanks for your interest!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>1185</wp:comment_parent>
    <wp:comment_user_id>19069150</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1396386671]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1396386671.713530063629150390625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22979979403]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1396386671]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-04-01 21:11:11]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1181</wp:comment_id>
    <wp:comment_author><![CDATA[Mark]]></wp:comment_author>
    <wp:comment_author_email>mark.hatsell@btinternet.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>87.127.152.238</wp:comment_author_IP>
    <wp:comment_date>2014-03-26 16:34:21</wp:comment_date>
    <wp:comment_date_gmt>2014-03-26 23:34:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Jan

Been following this for a while as I'm trying to do something similar with inheritance of Polymer elements. Now that redistributing nodes into a shadow element is no longer possible, is there any other solution other than composition?
I remember you used to have a manual solution in Quetzal via "distributeShadowContent". Would this old method still work?

Thanks
Mark]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>534</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1395896445]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1395896445]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22818197894]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395876861.9648659229278564453125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-03-26 23:34:21]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1184</wp:comment_id>
    <wp:comment_author><![CDATA[Jan Miksovsky]]></wp:comment_author>
    <wp:comment_author_email>jan@quickui.org</wp:comment_author_email>
    <wp:comment_author_url>http://quickui.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>67.185.162.218</wp:comment_author_IP>
    <wp:comment_date>2014-03-26 22:16:05</wp:comment_date>
    <wp:comment_date_gmt>2014-03-27 05:16:05</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Mark: That distributeShadowContent approach was effectively a polyfill for the proper behavior. I imagine that code could get dusted off and reused. It turns out that I'd separated out that function into a separate file; the last version appears to have been this one: https://github.com/JanMiksovsky/quetzal/blob/9387ef9163471aaebfae82d5a168ddb3df1e9740/elements/shadowDistribution.html. At that time, an element that wanted to distribute into  could call distributeShadowContent(this) in its ready handler. I don't have time right now to see if that still works, but it might; the comments in that source file lay out the basic approach.

If memory serves, there were problems with this approach when it came to styling elements. I believe it was hard to write CSS for a base element class that still got applied correctly in subclasses.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>1181</wp:comment_parent>
    <wp:comment_user_id>19069150</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1395897365]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22818467961]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395897365.4287970066070556640625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1395897365]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-03-27 05:16:05]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1185</wp:comment_id>
    <wp:comment_author><![CDATA[Mark]]></wp:comment_author>
    <wp:comment_author_email>mark.hatsell@btinternet.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>87.127.112.31</wp:comment_author_IP>
    <wp:comment_date>2014-03-27 07:47:46</wp:comment_date>
    <wp:comment_date_gmt>2014-03-27 14:47:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks, I'll take a look. I can see that there would be problems with styling. It's a shame the official polyfill never got finished (as far as I'm aware).

How are you planning to address this in Quetzal or are you not working on it any more?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>1181</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1395931666]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1395931666.6433041095733642578125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[22829703714]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1395931666]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2014-03-27 14:47:46]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[Page Template 1]]></title>
  <link>http://blog.quickui.org/2013/11/08/filling-slots-in-shadow/page-template-1/</link>
  <pubDate>Fri, 08 Nov 2013 18:54:50 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">http://quickui.files.wordpress.com/2013/11/page-template-1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>175</wp:post_id>
  <wp:post_date>2013-11-08 10:54:50</wp:post_date>
  <wp:post_date_gmt>2013-11-08 18:54:50</wp:post_date_gmt>
  <wp:post_modified>2013-11-08 10:54:50</wp:post_modified>
  <wp:post_modified_gmt>2013-11-08 18:54:50</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>page-template-1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>168</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://quickui.files.wordpress.com/2013/11/page-template-1.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/af0/31992059/files/2013/11/page-template-1.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:302;s:6:"height";i:402;s:4:"file";s:91:"/home/wpcom/public_html/wp-content/blogs.dir/af0/31992059/files/2013/11/page-template-1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Page Template 2]]></title>
  <link>http://blog.quickui.org/2013/11/08/filling-slots-in-shadow/page-template-2/</link>
  <pubDate>Fri, 08 Nov 2013 18:54:51 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">http://quickui.files.wordpress.com/2013/11/page-template-2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>176</wp:post_id>
  <wp:post_date>2013-11-08 10:54:51</wp:post_date>
  <wp:post_date_gmt>2013-11-08 18:54:51</wp:post_date_gmt>
  <wp:post_modified>2013-11-08 10:54:51</wp:post_modified>
  <wp:post_modified_gmt>2013-11-08 18:54:51</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>page-template-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>168</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://quickui.files.wordpress.com/2013/11/page-template-2.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/af0/31992059/files/2013/11/page-template-2.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:302;s:6:"height";i:402;s:4:"file";s:91:"/home/wpcom/public_html/wp-content/blogs.dir/af0/31992059/files/2013/11/page-template-2.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Page Template 3]]></title>
  <link>http://blog.quickui.org/2013/11/08/filling-slots-in-shadow/page-template-3/</link>
  <pubDate>Fri, 08 Nov 2013 18:54:51 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">http://quickui.files.wordpress.com/2013/11/page-template-3.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>177</wp:post_id>
  <wp:post_date>2013-11-08 10:54:51</wp:post_date>
  <wp:post_date_gmt>2013-11-08 18:54:51</wp:post_date_gmt>
  <wp:post_modified>2013-11-08 10:54:51</wp:post_modified>
  <wp:post_modified_gmt>2013-11-08 18:54:51</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>page-template-3</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>168</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://quickui.files.wordpress.com/2013/11/page-template-3.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/af0/31992059/files/2013/11/page-template-3.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:302;s:6:"height";i:402;s:4:"file";s:91:"/home/wpcom/public_html/wp-content/blogs.dir/af0/31992059/files/2013/11/page-template-3.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Page Template 4]]></title>
  <link>http://blog.quickui.org/2013/11/08/filling-slots-in-shadow/page-template-4/</link>
  <pubDate>Fri, 08 Nov 2013 18:54:52 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">http://quickui.files.wordpress.com/2013/11/page-template-4.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>178</wp:post_id>
  <wp:post_date>2013-11-08 10:54:52</wp:post_date>
  <wp:post_date_gmt>2013-11-08 18:54:52</wp:post_date_gmt>
  <wp:post_modified>2013-11-08 10:54:52</wp:post_modified>
  <wp:post_modified_gmt>2013-11-08 18:54:52</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>page-template-4</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>168</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://quickui.files.wordpress.com/2013/11/page-template-4.png</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attached_file</wp:meta_key>
    <wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/af0/31992059/files/2013/11/page-template-4.png]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_metadata</wp:meta_key>
    <wp:meta_value><![CDATA[a:5:{s:5:"width";i:302;s:6:"height";i:402;s:4:"file";s:91:"/home/wpcom/public_html/wp-content/blogs.dir/af0/31992059/files/2013/11/page-template-4.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Ending active development of QuickUI]]></title>
  <link>http://blog.quickui.org/2013/11/26/ending-active-development-of-quickui/</link>
  <pubDate>Tue, 26 Nov 2013 16:00:58 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">http://blog.quickui.org/?p=189</guid>
  <description/>
  <content:encoded><![CDATA[I’ve decided to end further investment in the development of the QuickUI web user interface framework.

I’ve spent the past half-year experimentally porting various QuickUI components to HTML custom elements under the rubric of a project called <a href="http://janmiksovsky.github.io/quetzal/">Quetzal</a>. That project makes use of Google’s <a href="http://www.polymer-project.org/">Polymer</a> project, which supports the deployment of web components to mainstream browsers. While the Quetzal element collection doesn’t yet offer the complete set of QuickUI components, and working on top of Polymer has been shaky at times, Polymer is becoming good enough for real use, and the advantages of building with web standards will quickly outweigh any proprietary advantages which QuickUI could offer.

I started QuickUI a number of years ago because it seemed clear to me that a component-oriented approach to UI design and development would let you create better and more maintainable user experiences. <span style="font-style:inherit;line-height:1.625;">I didn't see anyone else working on that in an open way, and so began my own effort to make progress in that area.</span>

The current wave of web component standards embody many of the ideas I was pursuing in QuickUI. For fun, I just dug up from my notes the earliest source code I could find for the component markup language I thought would be useful for creating web components. Here's sample QuickUI markup I wrote at the very beginning, probably late 2007:
<pre>&lt;control name="taskPage" arguments="name pageTip content"&gt;
  &lt;style&gt;
    h1 { font-face: Arial; }
  &lt;/style&gt;
  &lt;script&gt;
  function foo() { }
  &lt;/script&gt;
  &lt;template&gt;
    &lt;div ...&gt;
      &lt;h1&gt;%name%&lt;/h1&gt;
      &lt;p class="pageTip"&gt;%pageTip%&lt;/p&gt;
      &lt;div id="#content"&gt;
        %content%
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/template&gt;
&lt;/control&gt;</pre>
Here's the corresponding source code in late 2013 for the same custom element in Polymer:
<pre>&lt;polymer-element name="task-page" attributes="name pageTip"&gt;
  &lt;script&gt;
  function foo() { }
  &lt;/script&gt;
  &lt;template&gt;
    &lt;style&gt;
      h1 { font-face: Arial; }
    &lt;/style&gt;
    &lt;div ...&gt;
      &lt;h1&gt;{{name}}&lt;/h1&gt;
      &lt;p class="pageTip"&gt;{{pageTip}}&lt;/p&gt;
      &lt;div id="#content"&gt;
        &lt;content&gt;&lt;/content&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/template&gt;
&lt;/polymer-element&gt;</pre>
Aside from minor syntactic differences (curly braces are in vogue now instead of percent signs; "attributes" instead of "arguments"; the style tag needs to be inside the template instead of outside; the element name requires a hyphen), the source code is nearly identical. In other words, the source code I wanted to be able to write in 2007 is essentially the source code I can now write today. Hooray for the open web!

<span style="font-style:inherit;line-height:1.625;">Going forward I’ll be using web components for my own work rather than QuickUI. If you have been using QuickUI or were interested in QuickUI, I would encourage you to look at adopting web components instead, either through the Polymer project or through similar projects such as Mozilla’s </span><a style="font-style:inherit;line-height:1.625;" href="http://x-tags.org/">x-tags</a><span style="font-style:inherit;line-height:1.625;">.</span>

I’ll continue to keep the quickui.org site live for the indefinite future. In particular, for the time being I’ll continue to use this blog to post thoughts on developing user interfaces, with a focus on using web components.

To those of you that used QuickUI or provided feedback on it, I’d like to offer my warm thanks for all of your support.

Best,
Jan Miksovsky]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>189</wp:post_id>
  <wp:post_date>2013-11-26 08:00:58</wp:post_date>
  <wp:post_date_gmt>2013-11-26 16:00:58</wp:post_date_gmt>
  <wp:post_modified>2013-11-26 09:01:23</wp:post_modified>
  <wp:post_modified_gmt>2013-11-26 17:01:23</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ending-active-development-of-quickui</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="releases"><![CDATA[Releases]]></category>
  <category domain="category" nicename="web-components"><![CDATA[Web Components]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19069150]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Some lessons from an open source project that never gained critical mass]]></title>
  <link>http://blog.quickui.org/2013/12/01/some-lessons-from-an-open-source-project-that-never-gained-critical-mass/</link>
  <pubDate>Sun, 01 Dec 2013 16:00:34 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">http://blog.quickui.org/?p=200</guid>
  <description/>
  <content:encoded><![CDATA[I recently announced that I was <a href="http://blog.quickui.org/2013/11/26/ending-active-development-of-quickui/">halting development on QuickUI</a>, and thought it would be a good idea to do a little post-mortem before moving on.

The good side: As a framework for web application UI development, QuickUI measured up to its design goals. It was useful for creating complex application UIs with a good separation of concerns between UI components. The core framework was highly reliable with a fairly tight abstraction and acceptable performance. QuickUI was used in some companies for real production apps with real users. The very small number of developers who actually used the framework said they liked it and were impressed by what it could do.

The bad side: As an open source project, QuickUI never achieved critical mass. QuickUI was my first attempt at kickstarting an open source project to help establish an ecosystem for component-based web user interfaces. I’d initially held the naive view that simply publishing something as open source (which I did in late 2009, two years into QuickUI’s development) would, on its own, generate community interest and participation. But the universe of open source development projects is vast, and simply making something free doesn’t make it popular. Free products still need to appeal to their audience and gain adoption through a good feature set, great distribution, and substantial luck.

Eventually, QuickUI was overtaken by open web component standards (which is a good thing), and it no longer made sense to continue investment in QuickUI. Before moving on, I wanted to write down some of the lessons the QuickUI project held for me.

<ol>
    <li><p><strong>People care about the stack of technologies beneath your project.</strong> I used to think that all that mattered is whether a tool worked and was easy to use, but most developers make demands the construction of the tool itself: programming language, runtime platform, dependent libraries, etc. The most common reason someone will offer for this is that they may need to diagnose a bug in the code and fix it. That may also be true, but I think most people have less glorified reasons for considering the technology behind a tool.</p>
<p>
First, simply understanding the vocabulary associated with a given stack requires investment. Occasionally you come across a tool on GitHub whose Readme says the tool can be configured via a .foo file, where the location and syntax of a .foo file is completely obvious to current users of that tool’s stack. If you don’t already know what a .foo file is, you’re less likely to adopt that tool.
</p>
<p>
Second, a developer toolchain is a creaky, cantankerous beast, and incorporating multiple stacks of tech is a pain. This is less about debugging than what Bruce Sterling refers to as the <em>wrangling</em> required to get things to work together.
</p>
<p>
Third, you trust tools on stacks that have worked for you in the past, and are skeptical that tools on unfamiliar stacks will actually work as advertised. For example, I’ve hardly ever used Ruby, and rarely use Ruby gems. When I see a tool published via npm, I feel comfortable installing and using it, even if I never look at its source, because I’ve used many tools that way. If I see a tool that does <em>the exact same thing</em> published as a Ruby gem, I view its efficacy as black magic.
</p>
<p>
Last, people implicitly trust other people who have selected the same technology stack. “If someone has made the same technology choices I have, they must be as enlightened as I am!” Conversely, people look askance at those who make different choices. A die-hard plain JavaScript coder may view the Clojure community are pot-smoking hippies, while the Clojure developer may view the original party as a latter-day COBOL dork lacking sufficient brainpower and awareness.
</p>
<p>
In the case of QuickUI, when I started on it in late 2007 or so, I was most comfortable writing in C#, so when I needed to write a build-time compiler for UI markup, I wrote it in C#. Bad idea. Despite the fact that there was no run-time need for .NET, and that the compiler ran perfectly well on a Mac (under Mono), no one would take it seriously with the taint of .NET on it. I was eventually able drop the compiler altogether, and rely on a stack of tools which jQuery developers were already familiar, but that cost the project time and effort.
</p></li>
    <li><p><strong>Using anything other than native web technologies — plain HTML, plain JavaScript, and plain CSS — significantly constrains your audience.</strong> This is similar to the above point, but pertains to your project’s source code rather than the stack of technologies supporting that source. Again, part of the argument here is that they might theoretically need to dive into the runtime source to diagnose a problem, but I think the reaction is usually more instinctive than that.
</p>
<p>
At one point in the development of QuickUI I discovered that working in CoffeeScript was much more productive for me than in plain JavaScript. In short order, I <a href="http://blog.quickui.org/2012/05/15/porting-quickui-to-coffeescript/">ported the QuickUI runtime to CoffeeScript</a>. Switching to CoffeeScript was a huge productivity boost for me — but represented a huge reduction on the potential audience for QuickUI.
</p>
<p>
For one thing, it seemed nearly impossible for me to get potential developers to ignore the presence of CoffeeScript. CoffeeScript compiles to plain JavaScript, but anyone who looked at the QuickUI source repo saw “CoffeeScript” listed as the primary language… and walked away. They might say, “Your project looks interesting, but I don’t know CoffeeScript.” I’d tell them they didn’t need to know CoffeeScript — that was an implementation detail — but they’d already decided they were uninterested.
</p>
<p>
Over and over, the general feeling was, “I just don’t want to use something that uses something I don’t already know.” And then, of course, for most people who really did want to be able to grok the source, CoffeeScript was a non-starter.
</p>
<p>
To build a community around a project, you probably want as many people as possible to be able to participate. Even if you hate JavaScript, it’s the web’s lingua franca. Using any other language for an open web project may not be an insurmountable obstacle, but at the very least it’s a significant handicap. As much as it pained me, when I started up the subsequent <a href="http://janmiksovsky.github.io/quetzal/">Quetzal web components</a> experiments, I did so in plain JavaScript.
</p></li>
    <li><p><strong>Everyone will insist there is one thing you must do that will make your library more acceptable — and all those things are different, and all those things together are probably still insufficient.</strong> Over the course of the past few years, I have given many, many QuickUI demos, and received feedback on all aspects of the tool, the accompanying site at quickui.org, the learning process, etc. Very little of this feedback was consistent; everyone fixated on something different. I thought, if I just respond to all the feedback, surely at some point the barrier to adoption will be low enough that people will start adopting the tool.
</p>
<p>
On the basis of such feedback, I spent a huge amount of time improving things. Early on, someone said I should move the source to GitHub, so I did. Someone said it needed better documentation, so I wrote a lot of documentation. As discussed above, numerous people suggested moving away from .NET, so I did. Someone suggested having live examples of UI components, so I built those. Someone thought a tutorial would be helpful, so I made an interactive tutorial. (Which many people complimented. Thank you!) One person’s key complaint with the entire framework was that the home page didn’t have icons; if the framework was to be successful, the home page needed little icons to indicate which browsers were supported by the framework. I did that. I received many, many other suggestions, and I incorporated almost all of them.
</p>
<p>
None of it mattered. The feedback was actionable, and probably much of it was accurate, but even addressing (nearly) all of it wasn’t enough to make the project successful.
</p>
<p>
The fact is that most people are unwilling to invest the time to understand, analyze, and articulate what’s really wrong with your project. Of the people who gave me feedback, few of them actually looked hard at it, very few had actually tried it beyond the online tutorial, and very, very few were willing to speak directly to their key concerns. This is all understandable — people are busy, spending time on a framework of unknown value is potentially wasted, and most people want to be nice to you — but feedback on a project should be accepted with these phenomena in mind.</p></li>
    <li><p><strong>Paradigm shift is prohibitively expensive.</strong> Early on, one person told me that building UI in a component-oriented fashion represented a significant paradigm shift — and that represented a potentially insurmountable obstacle for QuickUI.
</p>
<p>
The problem with a paradigm shift is that it’s hard to even have a conversation with someone whose conceptualization of the world doesn’t even allow them to recognize the problem they have. I spoke with many developers who viewed the undifferentiated pile of JavaScript generating their UI as the way things had to be done. They were more concerned with getting their UI to work across multiple browsers than to worry about componentization — even though a good component library is exactly the sort of thing that would have made cross-browser work more manageable. (The cross-browser hacks could have been folded into the components, allowing them to work at a higher level of abstraction, etc.) Interestingly, these same developers would carefully factor their code into classes or functions with clear lines of responsibility. They applied good factoring to every other thing they coded <em>except their web UI</em>.
</p>
<p>
Over the past year or so, Google and others have been evangelizing a component-oriented paradigm for web development. At some point, we’ll go through some phase-change where that paradigm will suddenly become dominant. I’m betting that change will happen before late 2015. By then, it will be hard to find a good web UI developer who doesn't think of their UI in terms of components.</p></li>
    <li><p><strong>People are only interested in something if others are already using it.</strong> This is true for both seasoned developers and novice developers — but for different reasons. The novice teaches themself jQuery or Backbone or LESS because experienced people use those things, which means they’re probably interesting and useful. The seasoned developer picks up a new tool that others are using because the alternative — using something with a tiny user base — represents unacceptable risk.
</p>
<p>
This last point was made to me by the most abrasive person I ever spoke with about QuickUI. In fact, I think it’s because they were untroubled by politeness that they could speak the truth. They said: “I would love to use this, but I can’t. If something were to happen to you, I would be stuck having to fix your bugs. I made a bet like this in the past, and was stuck supporting someone else’s framework. I won’t do that again. Come back when lots of other people are using this.”
</p>
<p>
So this developer had, at some point, found a great piece of technology, developed by someone else, and they staked their own reputation on adopting this technology, only to have it completely fall apart when the other party went away (went bankrupt, was acquired, whatever). It’s probably safe to assume that most seasoned developers have had a similar experience. For every open library, there must exist some critical mass at which the library’s community becomes self-sustaining.
</p>
<p>
At that point, if you find a bug in the library, someone else in the community has probably also found the bug, and maybe even fixed it. Enough other people are invested in the library that, even if the original developer disappears, the remaining investors will keep it going for as long as that makes technological sense.
</p>
<p>
I’d be very interested if someone could pinpoint the size of that critical mass. I’m guessing the number is pretty small: perhaps 10 active contributors might be sufficient to create the perception the library is well-maintained and not going away. Whatever that size is, I couldn’t grow QuickUI to that size.</p></li>
    <li><p><strong>Google could publish a JavaScript library for cloud-based ham sandwiches and a thousand people would immediately star the repo on GitHub.</strong> For much of my career, I focused my attention almost entirely on the value a product created, and gave very little thought to how a product would be distributed. Distribution is, in fact, at least as important, and maybe more important, than underlying value. That’s certainly true in the short term. And, over the long term, well, maybe technology changes quickly enough that the long term never comes into play.
</p>
<p>
I’m not saying individuals can’t launch successful open source projects, but rather that doing so within the context of a company with name recognition and a developer outreach program makes it much, much easier. The people working within such a context may not realize it. I once heard someone describe people who work at big companies as “basketball players on the moon”. Those people can jump very high, but they may not realize the extent to which their performance depends on that context.
</p>
<p>
I have deep respect for a person who can launch something entirely on their own, without relying on the backing of their company (or industry name recognition predicated on work they launched previously at some earlier company). If someone can make a disruptive technology successful entirely on its own merits, both that tech and that person are impressive indeed.</p></li>
</ol>

Ah, well, live and learn. I’m still looking forward to watching the web’s UI component ecosystem take shape, because we’ll all get to make awesome stuff together.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>200</wp:post_id>
  <wp:post_date>2013-12-01 08:00:34</wp:post_date>
  <wp:post_date_gmt>2013-12-01 16:00:34</wp:post_date_gmt>
  <wp:post_modified>2013-12-14 14:46:46</wp:post_modified>
  <wp:post_modified_gmt>2013-12-14 22:46:46</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>some-lessons-from-an-open-source-project-that-never-gained-critical-mass</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19069150]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_baa649ae87718540703a660ed53c50d1</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_last_editor_used_jetpack</wp:meta_key>
    <wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>243</wp:comment_id>
    <wp:comment_author><![CDATA[Scott Miles]]></wp:comment_author>
    <wp:comment_author_email>sjmiles@google.com</wp:comment_author_email>
    <wp:comment_author_url>http://polymer-project.org</wp:comment_author_url>
    <wp:comment_author_IP>71.198.153.117</wp:comment_author_IP>
    <wp:comment_date>2013-12-14 13:40:11</wp:comment_date>
    <wp:comment_date_gmt>2013-12-14 21:40:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[As a veteran of open-source endeavors, from both start-up and 900# Gorilla (e.g. Google) perspectives, I say there is wisdom here.

Should be required reading for library developers, kudos.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[17952421908]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1387059764]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1387059764]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1387059764.8873140811920166015625;s:7:"message";s:51:"janmiksovsky changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1387057211.8477919101715087890625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:11:"scottjmiles";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-12-14 21:40:11]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>183</wp:comment_id>
    <wp:comment_author><![CDATA[Sebastian Fernandez Giraldo]]></wp:comment_author>
    <wp:comment_author_email>granito@hcoop.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>174.99.75.105</wp:comment_author_IP>
    <wp:comment_date>2013-12-02 16:49:54</wp:comment_date>
    <wp:comment_date_gmt>2013-12-03 00:49:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for the post! It's important to learn from successful projects as well as not-so-successful projects. How did you go about getting the first, second, and third adopters to use your tool?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1386031794.5742819309234619140625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value><![CDATA[1386031794]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value><![CDATA[17952435485]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value><![CDATA[1387059793]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value><![CDATA[1387059793]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1387059794.1940948963165283203125;s:7:"message";s:51:"janmiksovsky changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"janmiksovsky";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value><![CDATA[2013-12-03 00:49:54]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title><![CDATA[]]></title>
  <link>http://blog.quickui.org/?p=209</link>
  <pubDate/>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">http://blog.quickui.org/?p=209</guid>
  <description/>
  <content:encoded><![CDATA[This is a

<ul>
<li>Hello

<p>There</p></li>
<li><p>World</p></li>
</ul>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>209</wp:post_id>
  <wp:post_date>2013-11-26 14:36:01</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:post_modified>2013-11-26 14:36:01</wp:post_modified>
  <wp:post_modified_gmt>2013-11-26 22:36:01</wp:post_modified_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[19069150]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title><![CDATA[Custom Styles]]></title>
  <link>http://blog.quickui.org/2022/10/08/wp-global-styles-pub%2ftwentyeleven/</link>
  <pubDate>Sun, 09 Oct 2022 03:28:46 +0000</pubDate>
  <dc:creator>janmiksovsky</dc:creator>
  <guid isPermaLink="false">https://blog.quickui.org/2022/10/08/wp-global-styles-pub%2ftwentyeleven/</guid>
  <description/>
  <content:encoded><![CDATA[{"version":2,"isGlobalStylesUserThemeJSON":true}]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>230</wp:post_id>
  <wp:post_date>2022-10-08 20:28:46</wp:post_date>
  <wp:post_date_gmt>2022-10-09 03:28:46</wp:post_date_gmt>
  <wp:post_modified>2022-10-08 20:28:46</wp:post_modified>
  <wp:post_modified_gmt>2022-10-09 03:28:46</wp:post_modified_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>wp-global-styles-pub%2ftwentyeleven</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>wp_global_styles</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="wp_theme" nicename="twentyeleven"><![CDATA[twentyeleven]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
  </channel>
</rss>
